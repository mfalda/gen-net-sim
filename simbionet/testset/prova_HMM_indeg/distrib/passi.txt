
*** HMM ***
Il vettore 'degree' e` nullo
Ho trasformato la stringa 'INdegree' che vale 'out'
------------------------------ Fine inSTRINGA

Ho trasformato il vettore prior_p_subnet (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (1 : 1): [ 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (1 : 1): [ 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (1 : 1): [ 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (1 : 1): [ 1 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (1 : 1): [ 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (2 : 2): [ 1 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (1 : 1): [ 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (1 : 1): [ 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (1 : 1): [ 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (2 : 2): [ 1 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]

*** HMM1 ***
80: copia_v_d	<=>	ris[st:end] <- v[st:end]
prior_p_subnet (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]
st = 1
end = 7


g_prior_p_subnet (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]
------------------------------ Fine copia_v_d

89: rep_s_i	<=>	ris <- rep(num, rip)
num = 0
rip = 7


g_MC (7 : 7): [ 0 0 0 0 0 0 0 ]
------------------------------ Fine rep_s_i

95: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_tmp1_i (2 : 2): [ 1 0 ]
------------------------------ Fine somma_righe_i

99: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 1 0 ]


max = 1
------------------------------ Fine max_v_i

95: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_tmp1_i (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

99: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 1 1 ]


max = 1
------------------------------ Fine max_v_i

95: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_tmp1_i (2 : 2): [ 0 2 ]
------------------------------ Fine somma_righe_i

99: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 0 2 ]


max = 2
------------------------------ Fine max_v_i

95: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_tmp1_i (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

99: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 1 1 ]


max = 1
------------------------------ Fine max_v_i

95: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_tmp1_i (2 : 2): [ 1 2 ]
------------------------------ Fine somma_righe_i

99: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 1 2 ]


max = 2
------------------------------ Fine max_v_i

95: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_tmp1_i (2 : 2): [ 2 1 ]
------------------------------ Fine somma_righe_i

99: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 2 1 ]


max = 2
------------------------------ Fine max_v_i

95: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_tmp1_i (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

99: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 2 2 ]


max = 2
------------------------------ Fine max_v_i

121: rep_s_i	<=>	ris <- rep(num, rip)
num = -1
rip = 5


g_LG (5 : 5): [ -1 -1 -1 -1 -1 ]
------------------------------ Fine rep_s_i

124: InitMatr_i
ris (5 x 5 : 5 x 5): [
	 0 26024120 0 3409468 2117700569
	 0 26996056 14713528 28 2118062216
	 10 0 14713424 0 3
	 2 3 14713316 1092 14713388
	 0 33871503 2117780008 1 2117780028
 ]
val = 0


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

131: rep_s_d	<=>	ris <- rep(num, rip)
num = 0
rip = 6


g_tmp1_d (6 : 6): [ 0 0 0 0 0 0 ]
------------------------------ Fine rep_s_d

132: vettore2v_d		<=>	ris <- c(v1, v2)
g_scalare_d (1 : 1): [ 5 ]
g_tmp1_d (6 : 6): [ 0 0 0 0 0 0 ]


g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
------------------------------ Fine vettore2v_d

133: copia_v_d	<=>	ris[st:end] <- v[st:end]
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
st = 1
end = 7


g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
------------------------------ Fine copia_v_d

137: seq_d	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp1_d (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_d

138: exp_d	<=>	ris <- v ^ val
g_tmp1_d (5 : 6): [ 1 2 3 4 5 ]
val = -2.2


g_tmp2_d (5 : 5): [ 1 0.217637640824031 0.08919350686224783 0.04736614270344993 0.02899118654710781 ]
------------------------------ Fine exp_d

141: vettore3v_d		<=>	ris <- c(v1, v2, v3)
g_scalare1_d (1 : 1): [ nan ]
g_tmp2_d (5 : 5): [ 1 0.217637640824031 0.08919350686224783 0.04736614270344993 0.02899118654710781 ]
g_scalare_d (1 : 1): [ 0 ]


g_Prob (7 : 7): [ nan 1 0.217637640824031 0.08919350686224783 0.04736614270344993 0.02899118654710781 0 ]
------------------------------ Fine vettore3v_d

143: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_Prob (7 : 7): [ nan 1 0.217637640824031 0.08919350686224783 0.04736614270344993 0.02899118654710781 0 ]
canc_NA = 1



ris: 1.383188476936837
------------------------------ Fine somma_v_d

143: dividi1_vs_d	<=>	v <- v / div
g_Prob (7 : 7): [ nan 1 0.217637640824031 0.08919350686224783 0.04736614270344993 0.02899118654710781 0 ]
div = 1.383


g_Prob (7 : 7): [ nan 0.722967272120837 0.1573448914973642 0.06448398634709047 0.03424417098119949 0.02095967905350884 0 ]
------------------------------ Fine dividi1_vs_d

155: moltiplica_vs_d	<=>	ris <- v1 * v2
g_Prob (7 : 7): [ nan 0.722967272120837 0.1573448914973642 0.06448398634709047 0.03424417098119949 0.02095967905350884 0 ]
val = 5


g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
------------------------------ Fine moltiplica_vs_d

157: rep_s_d	<=>	ris <- rep(num, rip)
num = 0
rip = 7


g_STin (7 : 7): [ 0 0 0 0 0 0 0 ]
------------------------------ Fine rep_s_d

160: segmento_v_d	<=>	ris <- v[st:end]
g_Prob (7 : 7): [ nan 0.722967272120837 0.1573448914973642 0.06448398634709047 0.03424417098119949 0.02095967905350884 0 ]
start = 1
end = 6


g_tmp1_d (6 : 6): [ nan 0.722967272120837 0.1573448914973642 0.06448398634709047 0.03424417098119949 0.02095967905350884 ]
------------------------------ Fine segmento_v_d

161: moltiplica_vs_d	<=>	ris <- v1 * v2
g_tmp1_d (6 : 6): [ nan 0.722967272120837 0.1573448914973642 0.06448398634709047 0.03424417098119949 0.02095967905350884 ]
val = 5


g_tmp2_d (6 : 16): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 ]
------------------------------ Fine moltiplica_vs_d

163: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp1_d (6 : 6): [ nan 0.722967272120837 0.1573448914973642 0.06448398634709047 0.03424417098119949 0.02095967905350884 ]
canc_NA = 1



ris: 1
------------------------------ Fine somma_v_d

163: dividi1_vs_d	<=>	v <- v / div
g_tmp2_d (6 : 16): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 ]
div = 1.000


g_tmp2_d (6 : 16): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 ]
------------------------------ Fine dividi1_vs_d

164: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
g_STin (7 : 7): [ 0 0 0 0 0 0 0 ]
start = 1
end = 6
g_tmp2_d (6 : 16): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 ]


g_STin (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
------------------------------ Fine assegna1_v_segmv_d

190: moltiplica_vs_d	<=>	ris <- v1 * v2
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
val = 0.1


g_tmp1_d (7 : 19): [ nan 0.3614836360604186 0.07867244574868211 0.03224199317354524 0.01712208549059974 0.01047983952675442 0 ]
------------------------------ Fine moltiplica_vs_d

191: rep_s_d	<=>	ris <- rep(num, rip)
num = 1
rip = 7


g_tmp2_d (7 : 16): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine rep_s_d

192: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_tmp1_d (7 : 19): [ nan 0.3614836360604186 0.07867244574868211 0.03224199317354524 0.01712208549059974 0.01047983952675442 0 ]
g_tmp2_d (7 : 16): [ 1 1 1 1 1 1 1 ]


g_aus (7 x 2 : 7 x 2): [
	 nan 1
	 0.3614836360604186 1
	 0.07867244574868211 1
	 0.03224199317354524 1
	 0.01712208549059974 1
	 0.01047983952675442 1
	 0 1
 ]
------------------------------ Fine cbind2v_d

194: max_righe_d	<=>	ris <- apply(m, 1, max)
g_aus (7 x 2 : 7 x 2): [
	 nan 1
	 0.3614836360604186 1
	 0.07867244574868211 1
	 0.03224199317354524 1
	 0.01712208549059974 1
	 0.01047983952675442 1
	 0 1
 ]


g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
------------------------------ Fine max_righe_d

196: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_h (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

204: rep_s_d	<=>	ris <- rep(num, rip)
num = 1
rip = 7


g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine rep_s_d

208: elimina_doppi_i	<=>	ris <- union(v, v)
g_CC (7 : 7): [ 0 0 0 0 0 0 0 ]


g_tmp1_i (1 : 11): [ 0 ]
------------------------------ Fine elimina_doppi_i

209: ordina_i	<=>	ris <- sort(v, decreasing=decr)
g_tmp1_i (1 : 11): [ 0 ]
decr = 0
1759: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp1_i (1 : 11): [ 0 ]
st = 1
end = 1


g_CCs (1 : 1): [ 0 ]
------------------------------ Fine copia_v_i



g_CCs (1 : 1): [ 0 ]
------------------------------ Fine ordina_i

226: rep_s_d	<=>	ris <- rep(num, rip)
num = 1
rip = 1


g_p (1 : 1): [ 1 ]
------------------------------ Fine rep_s_d

229: which_v_indxeq_i	<=>	ris <- which(v==val)
g_CC (7 : 7): [ 0 0 0 0 0 0 0 ]
val = 0


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine which_v_indxeq_i

231: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
st = 1
end = 7


g_CCind[i - 1] (7 : 7): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine copia_v_i

241: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_Sin (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_righe_i

243: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_Sout (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_colonne_i


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


g_ind (0 : 25): [ ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
g_ind (0 : 25): [ ]
val = 1


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (5 : 5): [ 1.000000005854959 0.217637640824031 0.08919350686224783 0.04736614270344993 0.02899118654710781 ]
val = 0


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 1
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 2


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 2
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 3


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 3
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 4


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 4
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 5


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 5
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (5 : 5): [ 0 0 0 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 3 (270 interne); stringhe deallocate: 0 (0 interne)


*** Esco da cluster_coeff2 ***
254: somma_vs_T	<=> ris <- v + s
g_CCs (1 : 1): [ 0 ]
s = 0


g_tmp1_d (1 : 19): [ 0 ]
------------------------------ Fine somma_vs_di

255: segno_v_d	<=>	ris <- sign(v)
g_tmp1_d (1 : 19): [ 0 ]


g_segno (1 : 1): [ 0 ]
------------------------------ Fine segno_v_d

257: which_v_indxgt_i	<=>	ris <- which(v > val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indp (0 : 1): [ ]
------------------------------ Fine which_v_indxgt_i

259: which_v_indxle_i	<=>	ris <- which(v<=val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indm (1 : 1): [ 1 ]
------------------------------ Fine which_v_indxle_i

263: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indp (0 : 1): [ ]
val2 = 0.3


g_p (1 : 1): [ 1 ]
------------------------------ Fine f_aux9_d

265: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indm (1 : 1): [ 1 ]
val2 = 0.3


g_p (1 : 1): [ 1.7 ]
------------------------------ Fine f_aux9_d

277: min_v_d	<=>	ris <- min(v)
g_p (1 : 1): [ 1.7 ]


min = 1.7
------------------------------ Fine min_v_d

280: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_p (1 : 1): [ 1.7 ]
canc_NA = 0



ris: 1.7
------------------------------ Fine somma_v_d

280: dividi1_vs_d	<=>	v <- v / div
g_p (1 : 1): [ 1.7 ]
div = 1.700


g_p (1 : 1): [ 1 ]
------------------------------ Fine dividi1_vs_d

283: assegna1_v_indx_d	<=>	v[indx] <- val
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
g_CCind[i - 1] (7 : 7): [ 1 2 3 4 5 6 7 ]
val = 1


g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine assegna1_v_indx_d

301: moltiplica_vv_d	<=>	ris <- v1 * v2
g_prior_p_subnet (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]


g_ppp (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]
------------------------------ Fine moltiplica_vv_d

303: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]


max = 0.1428571428571428
------------------------------ Fine max_v_d

307: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]
canc_NA = 1



ris: 0.9999999999999998
------------------------------ Fine somma_v_d

307: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]
div = 1.000


g_ppp (7 : 7): [ 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 ]
------------------------------ Fine dividi1_vs_d

315: max_v_i		<=>	ris <- max(v)
g_dim (7 : 7): [ 2 2 2 2 2 2 2 ]


max = 2
------------------------------ Fine max_v_i

321: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 ]


max = 0.1428571428571429
------------------------------ Fine max_v_d

330: which_v_indxgt_d	<=>	ris <- which(v > val)
g_ppp (7 : 7): [ 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 ]
val = 0


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine which_v_indxgt_d

333: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 7
incr = 1


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine seq_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
k = 3, replace = 0
g_ppp (7 : 7): [ 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 ]


ris (3 : 3): [ 6 4 3 ]
*****************************************


Stringhe allocate: 3 (295 interne); stringhe deallocate: 0 (0 interne)

336: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_mod1 (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
------------------------------ Fine copia_m_i


***probmod***
63: InitMatr_i
g_checkOUT (2 x 5 : 2 x 5): [
	 0 3211313 1211070720 794915941 778397537
	 2 167772209 1294945613 1801675120 7562354
 ]
val = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

65: InitMatr_i
g_checkIN (2 x 5 : 2 x 5): [
	 26342456 0 0 0 0
	 2425208 0 0 0 0
 ]
val = 0


g_checkIN (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

67: InitMatr_d
ris (2 x 5 : 2 x 5): [
	 3.802320133198661e-301 8.487983163861089e-314 6.365987386729655e-314 7.516308358942081e-299 9.881312916824931e-324
	 1.303213949893673e-316 2.54639494925714e-313 5.682267591672344e-299 4.313154391439195e-301 9.535447818987265e-307
 ]
val = 0


ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_d

69: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_mod1 (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_M_in (2 : 2): [ 2 1 ]
------------------------------ Fine somma_righe_i

71: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod1 (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_M_out (2 : 2): [ 1 2 ]
------------------------------ Fine somma_colonne_i

74: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 26342456 0 0
	 2425208 0 0
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

90: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 2


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

91: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

109: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_S_new (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ nan nan nan nan nan ]
complemento = 0


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (5 : 5): [ 5.842414621812633e-308 0 0 0 0 ]
val = 0


g_S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]


g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 0 0 0 0 0 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 1 1 1 1 1 ]
div = 2.000


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (471 interne); stringhe deallocate: 0 (1 interne)

112: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

114: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

121: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

122: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

124: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

128: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

129: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

145: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 2


g_S_new (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ 5 5 5 5 5 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 4 4 4 4 4 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ 0 0 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 5 5 5 5 5 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 4 4 4 4 4 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]


g_m (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 4 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 5 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 5 5 5 5 5 ]
g_toll1 (5 : 5): [ nan nan nan nan nan ]


g_tmp1_d (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ nan nan nan nan nan ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 4 4 4 4 4 ]
g_toll1 (5 : 5): [ nan nan nan nan nan ]


g_tmp1_d (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ nan nan nan nan nan ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (0 : 5): [ ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (5 : 5): [ inf inf inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (5 : 5): [ inf inf inf inf inf ]
val = inf


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (5 : 5): [ 1 2 3 4 5 ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]


g_S1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_a (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]


g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
val = 0

g_ind1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (5 : 5): [ 1 2 3 4 5 ]
g_ind2 (0 : 5): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 4
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 5
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 5 5 5 5 5 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 6 6 6 6 6 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 6 6 6 6 6 ]
div = 2.000


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (497 interne); stringhe deallocate: 0 (7 interne)

148: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 3 3 3 3 3 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

150: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

158: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

159: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

161: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine copia_v_indx_d

165: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]


min = 3
------------------------------ Fine min_v_d

166: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

176: somma_vv_d	<=>	ris <- v1 + v2
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
Sc (5 : 5): [ 3 3 3 3 3 ]


g_tmp_d1 (5 : 5): [ 3.5 3.5 3.5 3.5 3.5 ]
------------------------------ Fine somma_vv_d

177: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_tmp_d1 (5 : 5): [ 3.5 3.5 3.5 3.5 3.5 ]


ris (2 x 5 : 2 x 5): [
	 3.5 3.5 3.5 3.5 3.5
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

90: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

91: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

109: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 2


g_S_new (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ nan nan nan nan nan ]
complemento = 0


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (5 : 5): [ 5 5 5 5 5 ]
val = 0


g_S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_a (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]


g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
val = 0

g_ind1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (5 : 5): [ 1 2 3 4 5 ]
g_ind2 (0 : 5): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 4
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 5
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 0 0 0 0 0 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 1 1 1 1 1 ]
div = 2.000


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (498 interne); stringhe deallocate: 0 (8 interne)

112: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

114: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

121: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

122: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

124: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

128: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

129: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

145: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_S_new (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ 5 5 5 5 5 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 4 4 4 4 4 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ 0 0 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 5 5 5 5 5 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 4 4 4 4 4 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]


g_m (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 4 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 5 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 5 5 5 5 5 ]
g_toll1 (5 : 5): [ nan nan nan nan nan ]


g_tmp1_d (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ nan nan nan nan nan ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 4 4 4 4 4 ]
g_toll1 (5 : 5): [ nan nan nan nan nan ]


g_tmp1_d (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ nan nan nan nan nan ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (0 : 5): [ ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (5 : 5): [ inf inf inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (5 : 5): [ inf inf inf inf inf ]
val = inf


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (5 : 5): [ 1 2 3 4 5 ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]


g_S1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]


g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 5 5 5 5 5 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 6 6 6 6 6 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 6 6 6 6 6 ]
div = 2.000


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (504 interne); stringhe deallocate: 0 (14 interne)

148: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 3 3 3 3 3 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

150: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

158: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

159: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

161: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine copia_v_indx_d

165: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]


min = 3
------------------------------ Fine min_v_d

166: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

176: somma_vv_d	<=>	ris <- v1 + v2
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
Sc (5 : 5): [ 3 3 3 3 3 ]


g_tmp_d1 (5 : 5): [ 3.5 3.5 3.5 3.5 3.5 ]
------------------------------ Fine somma_vv_d

177: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 3.5 3.5 3.5 3.5 3.5
	 0 0 0 0 0
 ]
riga = 2
g_tmp_d1 (5 : 5): [ 3.5 3.5 3.5 3.5 3.5 ]


ris (2 x 5 : 2 x 5): [
	 3.5 3.5 3.5 3.5 3.5
	 3.5 3.5 3.5 3.5 3.5
 ]
------------------------------ Fine aggiungi_mv_riga_d

185: somma_m_d	<=>	ris <- sum(m)
ris (2 x 5 : 2 x 5): [
	 3.5 3.5 3.5 3.5 3.5
	 3.5 3.5 3.5 3.5 3.5
 ]


ris: 35
------------------------------ Fine somma_m_d

190: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_aus (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_colonne_i

192: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (5 : 5): [ 2 2 2 2 2 ]
val = 0


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

203: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_rs (2 : 2): [ 5 5 ]
------------------------------ Fine somma_righe_i

205: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 5 5 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

218: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

220: unione1_i	<=>	v1 <- union(v1, v2)
g_I (0 : 0): [ ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

218: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

220: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

233: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

235: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

237: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_aus (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_colonne_i

239: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (5 : 5): [ 2 2 2 2 2 ]
val = 0


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

249: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_rs (2 : 2): [ 5 5 ]
------------------------------ Fine somma_righe_i

251: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 5 5 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

263: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

265: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 10): [ ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

263: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

265: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i


Stringhe allocate: 3 (569 interne); stringhe deallocate: 0 (54 interne)


*** Esco da probmod ***

346: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine copia_m_i


***probmod***
63: InitMatr_i
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

65: InitMatr_i
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val = 0


g_checkIN (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

67: InitMatr_d
ris (2 x 5 : 2 x 5): [
	 5.842414621812633e-308 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_d

69: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_M_in (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

71: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_M_out (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

74: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

90: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

91: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

109: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_S_new (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ nan nan nan nan nan ]
complemento = 0


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (5 : 5): [ 5 5 5 5 5 ]
val = 0


g_S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]


g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 0 0 0 0 0 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 1 1 1 1 1 ]
div = 2.000


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (580 interne); stringhe deallocate: 0 (55 interne)

112: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

114: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

121: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

122: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

124: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

128: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

129: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

145: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_S_new (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ 5 5 5 5 5 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 4 4 4 4 4 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ 0 0 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 5 5 5 5 5 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 4 4 4 4 4 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]


g_m (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 4 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 5 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 5 5 5 5 5 ]
g_toll1 (5 : 5): [ nan nan nan nan nan ]


g_tmp1_d (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ nan nan nan nan nan ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 4 4 4 4 4 ]
g_toll1 (5 : 5): [ nan nan nan nan nan ]


g_tmp1_d (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ nan nan nan nan nan ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (0 : 5): [ ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (5 : 5): [ inf inf inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (5 : 5): [ inf inf inf inf inf ]
val = inf


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (5 : 5): [ 1 2 3 4 5 ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]


g_S1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]


g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 5 5 5 5 5 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 6 6 6 6 6 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 6 6 6 6 6 ]
div = 2.000


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (586 interne); stringhe deallocate: 0 (61 interne)

148: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 3 3 3 3 3 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

150: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

158: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

159: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

161: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine copia_v_indx_d

165: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]


min = 3
------------------------------ Fine min_v_d

166: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

176: somma_vv_d	<=>	ris <- v1 + v2
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
Sc (5 : 5): [ 3 3 3 3 3 ]


g_tmp_d1 (5 : 5): [ 3.5 3.5 3.5 3.5 3.5 ]
------------------------------ Fine somma_vv_d

177: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_tmp_d1 (5 : 5): [ 3.5 3.5 3.5 3.5 3.5 ]


ris (2 x 5 : 2 x 5): [
	 3.5 3.5 3.5 3.5 3.5
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

90: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

91: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

109: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_S_new (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ nan nan nan nan nan ]
complemento = 0


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (5 : 5): [ 5 5 5 5 5 ]
val = 0


g_S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]


g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 0 0 0 0 0 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 1 1 1 1 1 ]
div = 2.000


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (587 interne); stringhe deallocate: 0 (62 interne)

112: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

114: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

121: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

122: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

124: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

128: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

129: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

145: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_S_new (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ 5 5 5 5 5 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 4 4 4 4 4 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ 0 0 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 5 5 5 5 5 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 4 4 4 4 4 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]


g_m (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 4 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 5 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 5 5 5 5 5 ]
g_toll1 (5 : 5): [ nan nan nan nan nan ]


g_tmp1_d (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ nan nan nan nan nan ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 4 4 4 4 4 ]
g_toll1 (5 : 5): [ nan nan nan nan nan ]


g_tmp1_d (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ nan nan nan nan nan ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (0 : 5): [ ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (5 : 5): [ inf inf inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (5 : 5): [ inf inf inf inf inf ]
val = inf


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (5 : 5): [ 1 2 3 4 5 ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]


g_S1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]


g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 5 5 5 5 5 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 6 6 6 6 6 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 6 6 6 6 6 ]
div = 2.000


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (593 interne); stringhe deallocate: 0 (68 interne)

148: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 3 3 3 3 3 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

150: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

158: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

159: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

161: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine copia_v_indx_d

165: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]


min = 3
------------------------------ Fine min_v_d

166: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

176: somma_vv_d	<=>	ris <- v1 + v2
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
Sc (5 : 5): [ 3 3 3 3 3 ]


g_tmp_d1 (5 : 5): [ 3.5 3.5 3.5 3.5 3.5 ]
------------------------------ Fine somma_vv_d

177: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 3.5 3.5 3.5 3.5 3.5
	 0 0 0 0 0
 ]
riga = 2
g_tmp_d1 (5 : 5): [ 3.5 3.5 3.5 3.5 3.5 ]


ris (2 x 5 : 2 x 5): [
	 3.5 3.5 3.5 3.5 3.5
	 3.5 3.5 3.5 3.5 3.5
 ]
------------------------------ Fine aggiungi_mv_riga_d

185: somma_m_d	<=>	ris <- sum(m)
ris (2 x 5 : 2 x 5): [
	 3.5 3.5 3.5 3.5 3.5
	 3.5 3.5 3.5 3.5 3.5
 ]


ris: 35
------------------------------ Fine somma_m_d

190: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_aus (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_colonne_i

192: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (5 : 5): [ 2 2 2 2 2 ]
val = 0


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

203: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_rs (2 : 2): [ 5 5 ]
------------------------------ Fine somma_righe_i

205: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 5 5 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

218: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

220: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 10): [ ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

218: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

220: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

233: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

235: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

237: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_aus (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_colonne_i

239: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (5 : 5): [ 2 2 2 2 2 ]
val = 0


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

249: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_rs (2 : 2): [ 5 5 ]
------------------------------ Fine somma_righe_i

251: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 5 5 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

263: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

265: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 10): [ ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

263: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

265: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i


Stringhe allocate: 3 (633 interne); stringhe deallocate: 0 (108 interne)


*** Esco da probmod ***

362: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_mod3 (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
------------------------------ Fine copia_m_i


***probmod***
63: InitMatr_i
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

65: InitMatr_i
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val = 0


g_checkIN (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

67: InitMatr_d
ris (2 x 5 : 2 x 5): [
	 5.842414621812633e-308 4.778309728685182e-299 0 0 0
	 0 5.842414621812633e-308 0 0 0
 ]
val = 0


ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_d

69: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_mod3 (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_M_in (2 : 2): [ 0 2 ]
------------------------------ Fine somma_righe_i

71: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod3 (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_M_out (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

74: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

90: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

91: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

109: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_S_new (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ nan nan nan nan nan ]
complemento = 0


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (5 : 5): [ 5 5 5 5 5 ]
val = 0


g_S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]


g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 0 0 0 0 0 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 1 1 1 1 1 ]
div = 2.000


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (644 interne); stringhe deallocate: 0 (109 interne)

112: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

114: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

121: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

122: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

124: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

128: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

129: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

172: InitVett_d
Sc (5 : 5): [ 3 3 3 3 3 ]
val = 0


Sc (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

173: aggiungi_ms_riga_i	<=>	m[riga,] <- val # riga <= dim(m)[0] + 1
g_checkIN (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1, val = 1


g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_ms_riga_i

176: somma_vv_d	<=>	ris <- v1 + v2
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
Sc (5 : 5): [ 0 0 0 0 0 ]


g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine somma_vv_d

177: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


ris (2 x 5 : 2 x 5): [
	 0.5 0.5 0.5 0.5 0.5
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

90: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 2


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

91: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

109: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_S_new (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ nan nan nan nan nan ]
complemento = 0


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (5 : 5): [ 0 0 0 0 0 ]
val = 0


g_S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]


g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 0 0 0 0 0 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 1 1 1 1 1 ]
div = 2.000


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (645 interne); stringhe deallocate: 0 (110 interne)

112: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

114: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

121: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

122: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

124: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

128: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

129: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

145: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 2


g_S_new (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ 5 5 5 5 5 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 4 4 4 4 4 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ 0 0 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 5 5 5 5 5 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 4 4 4 4 4 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]


g_m (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 4 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 5 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 5 5 5 5 5 ]
g_toll1 (5 : 5): [ nan nan nan nan nan ]


g_tmp1_d (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ nan nan nan nan nan ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 4 4 4 4 4 ]
g_toll1 (5 : 5): [ nan nan nan nan nan ]


g_tmp1_d (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ nan nan nan nan nan ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (0 : 5): [ ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (5 : 5): [ inf inf inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (5 : 5): [ inf inf inf inf inf ]
val = inf


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (5 : 5): [ 1 2 3 4 5 ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]


g_S1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_a (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]


g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
val = 0

g_ind1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (5 : 5): [ 1 2 3 4 5 ]
g_ind2 (0 : 5): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 4
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 5
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 5 5 5 5 5 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 6 6 6 6 6 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 6 6 6 6 6 ]
div = 2.000


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (651 interne); stringhe deallocate: 0 (116 interne)

148: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 3 3 3 3 3 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

150: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

158: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

159: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

161: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine copia_v_indx_d

165: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]


min = 3
------------------------------ Fine min_v_d

166: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

176: somma_vv_d	<=>	ris <- v1 + v2
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
Sc (5 : 5): [ 3 3 3 3 3 ]


g_tmp_d1 (5 : 5): [ 3.5 3.5 3.5 3.5 3.5 ]
------------------------------ Fine somma_vv_d

177: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 0.5 0.5 0.5 0.5 0.5
	 0 0 0 0 0
 ]
riga = 2
g_tmp_d1 (5 : 5): [ 3.5 3.5 3.5 3.5 3.5 ]


ris (2 x 5 : 2 x 5): [
	 0.5 0.5 0.5 0.5 0.5
	 3.5 3.5 3.5 3.5 3.5
 ]
------------------------------ Fine aggiungi_mv_riga_d

185: somma_m_d	<=>	ris <- sum(m)
ris (2 x 5 : 2 x 5): [
	 0.5 0.5 0.5 0.5 0.5
	 3.5 3.5 3.5 3.5 3.5
 ]


ris: 20
------------------------------ Fine somma_m_d

190: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_aus (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_colonne_i

192: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (5 : 5): [ 2 2 2 2 2 ]
val = 0


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

203: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_rs (2 : 2): [ 5 5 ]
------------------------------ Fine somma_righe_i

205: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 5 5 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

218: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

220: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 10): [ ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

218: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

220: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

233: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

235: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

237: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_aus (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_colonne_i

239: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (5 : 5): [ 2 2 2 2 2 ]
val = 0


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

249: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_rs (2 : 2): [ 5 5 ]
------------------------------ Fine somma_righe_i

251: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 5 5 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

263: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

265: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 10): [ ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

263: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

265: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i


Stringhe allocate: 3 (691 interne); stringhe deallocate: 0 (156 interne)


*** Esco da probmod ***

375: vettore3s_d		<=>	ris <- c(el1, el2, el3)
el1 = 17.5, el2 = 17.5, el3 = 10


g_pm (3 : 3): [ 17.5 17.5 10 ]
------------------------------ Fine vettore3s_d

376: copia_v_d	<=>	ris[st:end] <- v[st:end]
g_pm (3 : 3): [ 17.5 17.5 10 ]
st = 1
end = 3


g_prob_mod (3 : 3): [ 17.5 17.5 10 ]
------------------------------ Fine copia_v_d

378: assegna1_v_indxNA_d	<=>	v1[which(is.na(v2))] <- val oppure v1[which(!is.na(v2))] <- val
g_prob_mod (3 : 3): [ 17.5 17.5 10 ]
g_prob_mod (3 : 3): [ 17.5 17.5 10 ]
val = 0
complemento = 0


g_prob_mod (3 : 3): [ 17.5 17.5 10 ]
------------------------------ Fine assegna1_v_indxNA_d

380: min_v_d	<=>	ris <- min(v)
g_prob_mod (3 : 3): [ 17.5 17.5 10 ]


min = 10
------------------------------ Fine min_v_d

385: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_pm (3 : 3): [ 17.5 17.5 10 ]
complemento = 0


g_tmp1_i (0 : 11): [ ]
------------------------------ Fine which_v_indxNA_d

386: assegna1_v_indx_d	<=>	v[indx] <- val
g_prob_mod (3 : 3): [ 17.5 17.5 10 ]
g_tmp1_i (0 : 11): [ ]
val = 0


g_prob_mod (3 : 3): [ 17.5 17.5 10 ]
------------------------------ Fine assegna1_v_indx_d

388: which_v_indxne_d	<=>	ris <- which(v != val)
g_prob_mod (3 : 3): [ 17.5 17.5 10 ]
val = 0


g_ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

392: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_prob_mod (3 : 3): [ 17.5 17.5 10 ]
canc_NA = 0



ris: 45
------------------------------ Fine somma_v_d

392: dividi1_vs_d	<=>	v <- v / div
g_prob_mod (3 : 3): [ 17.5 17.5 10 ]
div = 45.000


g_prob_mod (3 : 3): [ 0.3888888888888889 0.3888888888888889 0.2222222222222222 ]
------------------------------ Fine dividi1_vs_d

394: vettore3s_i		<=>	ris <- c(el1, el2, el3)
el1 = 1, el2 = 2, el3 = 3


g_tmp1_i (3 : 11): [ 1 2 3 ]
------------------------------ Fine vettore3s_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (3 : 11): [ 1 2 3 ]
k = 1, replace = 0
g_prob_mod (3 : 3): [ 0.3888888888888889 0.3888888888888889 0.2222222222222222 ]


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 3 (711 interne); stringhe deallocate: 0 (156 interne)

409: copia_m_i	<=>	ris <- da
g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_M (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine copia_m_i

410: copia_m_d	<=>	ris <- da
ris (2 x 5 : 2 x 5): [
	 3.5 3.5 3.5 3.5 3.5
	 3.5 3.5 3.5 3.5 3.5
 ]


g_Sc (2 x 5 : 2 x 5): [
	 3.5 3.5 3.5 3.5 3.5
	 3.5 3.5 3.5 3.5 3.5
 ]
------------------------------ Fine copia_m_d

414: copia_v_i	<=>	ris[st:end] <- v[st:end]
VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]
st = 1
end = 2


g_hubs (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

438: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 ]
canc_NA = 0



ris: 1
------------------------------ Fine somma_v_d

438: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 ]
div = 1.000


g_ppp (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]
------------------------------ Fine dividi1_vs_d


***sampleB***

***sample***
g_hubs (2 : 2): [ 1 2 ]
k = 1, replace = 0


g_hubs (1 : 2): [ 1 ]
*****************************************


Stringhe allocate: 3 (726 interne); stringhe deallocate: 0 (156 interne)


Stringhe allocate: 3 (726 interne); stringhe deallocate: 0 (156 interne)

750: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_h1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i


***assign_nodes***
46: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_or_h (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

48: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_aus_h (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

54: InitVett_i
g_index (2 : 2): [ 26358256 2425208 ]
val = 0


g_index (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_i

56: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_M (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_M_in (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

58: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_M_in (2 : 2): [ 1 1 ]
decr = 1


g_Ord (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

63: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 5 : 2 x 5): [
	 3.5 3.5 3.5 3.5 3.5
	 3.5 3.5 3.5 3.5 3.5
 ]
r = 1

g_p (5 : 5): [ 3.5 3.5 3.5 3.5 3.5 ]
------------------------------ Fine riga_d

65: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (5 : 5): [ 3.5 3.5 3.5 3.5 3.5 ]
val = 0


g_tmp_i (0 : 5): [ ]
------------------------------ Fine which_v_indxle_d

72: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 0 0 0 0 ]
g_h1 (5 : 5): [ 1 2 3 4 5 ]


g_Sin_h (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i

77: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sin_h (5 : 5): [ 0 0 0 0 0 ]
val = 4


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

83: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (5 : 5): [ 3.5 3.5 3.5 3.5 3.5 ]
g_aus_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d (5 : 5): [ 3.5 3.5 3.5 3.5 3.5 ]
------------------------------ Fine assegna_v_indxNA_d

84: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (5 : 5): [ 3.5 3.5 3.5 3.5 3.5 ]
canc_NA = 0



ris: 17.5
------------------------------ Fine somma_v_d

85: dividi_vs_d	ris <- v / div
g_tmp_d (5 : 5): [ 3.5 3.5 3.5 3.5 3.5 ]
div = 17.500


g_p (5 : 5): [ 0.2 0.2 0.2 0.2 0.2 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (5 : 5): [ 1 2 3 4 5 ]
k = 1, replace = 0
g_p (5 : 5): [ 0.2 0.2 0.2 0.2 0.2 ]


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 3 (791 interne); stringhe deallocate: 0 (156 interne)

92: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (5 : 5): [ 1 2 3 4 5 ]
ris (1 : 1): [ 2 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 2
g_h1 (5 : 5): [ 1 2 3 4 5 ]


indx = 2
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (5 : 5): [ 1 2 3 4 5 ]
indx = 2


g_h1 (4 : 5): [ 1 3 4 5 ]
------------------------------ Fine elimina1_indx_i



g_h1 (4 : 5): [ 1 3 4 5 ]
------------------------------ Fine setdiff1_i

94: which_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (5 : 5): [ 1 2 3 4 5 ]
ris (1 : 1): [ 2 ]
2017: esiste_v_i	<=>	elem %IN% v
elem = 2
g_or_h (5 : 5): [ 1 2 3 4 5 ]


indx = 2
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 2 ]
------------------------------ Fine which_vv_eq_i

95: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (5 : 5): [ 1 2 3 4 5 ]
g_tmp_i (1 : 5): [ 2 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 2
g_aus_h (5 : 5): [ 1 2 3 4 5 ]


indx = 2
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
g_aus_h (5 : 5): [ 1 2 3 4 5 ]
indx = 2


g_aus_h (4 : 5): [ 1 3 4 5 ]
------------------------------ Fine elimina1_indx_i



g_aus_h (4 : 5): [ 1 3 4 5 ]
------------------------------ Fine setdiff1_i

63: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 5 : 2 x 5): [
	 3.5 3.5 3.5 3.5 3.5
	 3.5 3.5 3.5 3.5 3.5
 ]
r = 2

g_p (5 : 5): [ 3.5 3.5 3.5 3.5 3.5 ]
------------------------------ Fine riga_d

65: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (5 : 5): [ 3.5 3.5 3.5 3.5 3.5 ]
val = 0


g_tmp_i (0 : 5): [ ]
------------------------------ Fine which_v_indxle_d

72: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 0 0 0 0 ]
g_h1 (4 : 5): [ 1 3 4 5 ]


g_Sin_h (4 : 5): [ 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i

77: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sin_h (4 : 5): [ 0 0 0 0 ]
val = 4


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

83: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (5 : 5): [ 3.5 3.5 3.5 3.5 3.5 ]
g_aus_h (4 : 5): [ 1 3 4 5 ]


g_tmp_d (4 : 5): [ 3.5 3.5 3.5 3.5 ]
------------------------------ Fine assegna_v_indxNA_d

84: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (4 : 5): [ 3.5 3.5 3.5 3.5 ]
canc_NA = 0



ris: 14
------------------------------ Fine somma_v_d

85: dividi_vs_d	ris <- v / div
g_tmp_d (4 : 5): [ 3.5 3.5 3.5 3.5 ]
div = 14.000


g_p (4 : 5): [ 0.25 0.25 0.25 0.25 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (4 : 5): [ 1 3 4 5 ]
k = 1, replace = 0
g_p (4 : 5): [ 0.25 0.25 0.25 0.25 ]


ris (1 : 1): [ 5 ]
*****************************************


Stringhe allocate: 3 (791 interne); stringhe deallocate: 0 (156 interne)

92: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (4 : 5): [ 1 3 4 5 ]
ris (1 : 1): [ 5 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 5
g_h1 (4 : 5): [ 1 3 4 5 ]


indx = 4
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (4 : 5): [ 1 3 4 5 ]
indx = 4


g_h1 (3 : 5): [ 1 3 4 ]
------------------------------ Fine elimina1_indx_i



g_h1 (3 : 5): [ 1 3 4 ]
------------------------------ Fine setdiff1_i

94: which_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (5 : 5): [ 1 2 3 4 5 ]
ris (1 : 1): [ 5 ]
2017: esiste_v_i	<=>	elem %IN% v
elem = 5
g_or_h (5 : 5): [ 1 2 3 4 5 ]


indx = 5
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 5 ]
------------------------------ Fine which_vv_eq_i

95: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (4 : 5): [ 1 3 4 5 ]
g_tmp_i (1 : 5): [ 5 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 5
g_aus_h (4 : 5): [ 1 3 4 5 ]


indx = 4
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
g_aus_h (4 : 5): [ 1 3 4 5 ]
indx = 4


g_aus_h (3 : 5): [ 1 3 4 ]
------------------------------ Fine elimina1_indx_i



g_aus_h (3 : 5): [ 1 3 4 ]
------------------------------ Fine setdiff1_i

103: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 1
val = 1


g_ind (1 : 5): [ 2 ]
------------------------------ Fine which_m_rowindxeq_i

105: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 2 5 ]
g_ind (1 : 5): [ 2 ]


g_co (1 : 1): [ 5 ]
------------------------------ Fine copia_v_indx_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
g_ri (1 : 1): [ 2 ]
g_co (1 : 1): [ 5 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 1
g_hubs (1 : 2): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

111: accoda1_vv_i	<=>	v1 <- c(v1, v2)
ris (0 : 1): [ ]
g_ri (1 : 1): [ 2 ]


ris (1 : 1): [ 2 ]
------------------------------ Fine accoda_vv_i

103: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 2
val = 1


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_m_rowindxeq_i

105: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 2 5 ]
g_ind (1 : 5): [ 1 ]


g_co (1 : 1): [ 2 ]
------------------------------ Fine copia_v_indx_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
g_ri (1 : 1): [ 5 ]
g_co (1 : 1): [ 2 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 2
g_hubs (1 : 2): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i


*** Esco da assign_nodes ***


Stringhe allocate: 3 (801 interne); stringhe deallocate: 0 (156 interne)

758: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_h (5 : 5): [ 1 2 3 4 5 ]
g_h1 (3 : 5): [ 1 3 4 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_tmp1_i (5 : 11): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_tmp1_i (5 : 11): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_tmp1_i (5 : 11): [ 1 2 3 4 5 ]
indx = 1


g_tmp1_i (4 : 11): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_tmp1_i (4 : 11): [ 2 3 4 5 ]


indx = 2
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_tmp1_i (4 : 11): [ 2 3 4 5 ]
indx = 2


g_tmp1_i (3 : 11): [ 2 4 5 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 4
g_tmp1_i (3 : 11): [ 2 4 5 ]


indx = 2
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_tmp1_i (3 : 11): [ 2 4 5 ]
indx = 2


g_tmp1_i (2 : 11): [ 2 5 ]
------------------------------ Fine elimina1_indx_i



g_tmp1_i (2 : 11): [ 2 5 ]
------------------------------ Fine setdiff_i

759: incr1_v_indx_i	<=>	v[indx] <- v[indx] + s
g_LG (5 : 5): [ -1 -1 -1 -1 -1 ]
g_tmp1_i (2 : 11): [ 2 5 ]
val = 1


g_LG (5 : 5): [ -1 0 -1 -1 0 ]
------------------------------ Fine incr1_v_indx_i

763: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (3 : 5): [ 1 3 4 ]
st = 1
end = 3


g_h (3 : 5): [ 1 3 4 ]
------------------------------ Fine copia_v_i

765: accoda1_vv_i	<=>	v1 <- c(v1, v2)
g_h_new (0 : 0): [ ]
ris (1 : 1): [ 2 ]
ATTENZIONE (accoda_vv_i, linea HMM.c # 765): ingrandito il vettore da 0 a 1!


g_h_new (1 : 2): [ 2 ]
------------------------------ Fine accoda_vv_i

767: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]


g_Sout (5 : 5): [ 0 1 0 0 1 ]
------------------------------ Fine somma_colonne_i

769: max_v_i		<=>	ris <- max(v)
g_Sout (5 : 5): [ 0 1 0 0 1 ]


max = 1
------------------------------ Fine max_v_i

771: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 2
incr = 1


g_tmp2_i (3 : 3): [ 0 1 2 ]
------------------------------ Fine seq_i


*** hist1 ***
g_Sout (5 : 5): [ 0 1 0 0 1 ]
g_tmp2_i (3 : 3): [ 0 1 2 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
g_tmp1_i (2 : 11): [ 2 5 ]
val = 0


g_tmp1_i (2 : 11): [ 0 0 ]
------------------------------ Fine InitVett_i



g_tmp1_i (2 : 11): [ 3 2 ]

Stringhe allocate: 3 (812 interne); stringhe deallocate: 0 (162 interne)

773: promuovi_i	(implicita)
g_tmp1_i (2 : 11): [ 3 2 ]
ATTENZIONE (promuovi_i, linea HMM.c # 773): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

g_tmp1_d (2 : 19): [ 3 2 ]
------------------------------ Fine promuovi_i

774: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
start = 1
end = 2
g_tmp1_d (2 : 19): [ 3 2 ]


g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

776: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]


g_Sin (5 : 5): [ 0 1 0 0 1 ]
------------------------------ Fine somma_righe_i

778: max_v_i		<=>	ris <- max(v)
g_Sin (5 : 5): [ 0 1 0 0 1 ]


max = 1
------------------------------ Fine max_v_i

780: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 2
incr = 1


g_tmp2_i (3 : 3): [ 0 1 2 ]
------------------------------ Fine seq_i


*** hist1 ***
g_Sin (5 : 5): [ 0 1 0 0 1 ]
g_tmp2_i (3 : 3): [ 0 1 2 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
g_tmp1_i (2 : 11): [ 3 2 ]
val = 0


g_tmp1_i (2 : 11): [ 0 0 ]
------------------------------ Fine InitVett_i



g_tmp1_i (2 : 11): [ 3 2 ]

Stringhe allocate: 3 (813 interne); stringhe deallocate: 0 (163 interne)

782: promuovi_i	(implicita)
g_tmp1_i (2 : 11): [ 3 2 ]
ATTENZIONE (promuovi_i, linea HMM.c # 782): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

g_tmp1_d (2 : 19): [ 3 2 ]
------------------------------ Fine promuovi_i

783: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
start = 1
end = 2
g_tmp1_d (2 : 19): [ 3 2 ]


g_Freq_in (7 : 7): [ 3 2 0 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

241: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]


g_Sin (5 : 5): [ 0 1 0 0 1 ]
------------------------------ Fine somma_righe_i

243: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]


g_Sout (5 : 5): [ 0 1 0 0 1 ]
------------------------------ Fine somma_colonne_i


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 2
	 0 0 0 0 0
	 0 0 0 0 0
	 0 2 0 0 0
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 2
	 0 0 0 0 0
	 0 0 0 0 0
	 0 2 0 0 0
 ]
val = 0


g_ind (2 : 25): [ 10 22 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 2
	 0 0 0 0 0
	 0 0 0 0 0
	 0 2 0 0 0
 ]
g_ind (2 : 25): [ 10 22 ]
val = 1


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]
val = 0


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (5 : 5): [ 0 0 0 0 0 ]
val = 0


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]
riga = 1


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]
r = 1
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]
riga = 2


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]
r = 2
val = 0


g_neighbours (1 : 25): [ 5 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]
riga = 3


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]
r = 3
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]
riga = 4


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]
r = 4
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]
riga = 5


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]
r = 5
val = 0


g_neighbours (1 : 25): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (5 : 5): [ 0 0 0 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 3 (814 interne); stringhe deallocate: 0 (164 interne)


*** Esco da cluster_coeff2 ***
254: somma_vs_T	<=> ris <- v + s
g_CCs (1 : 1): [ 0 ]
s = 0


g_tmp1_d (1 : 19): [ 0 ]
------------------------------ Fine somma_vs_di

255: segno_v_d	<=>	ris <- sign(v)
g_tmp1_d (1 : 19): [ 0 ]


g_segno (1 : 1): [ 0 ]
------------------------------ Fine segno_v_d

257: which_v_indxgt_i	<=>	ris <- which(v > val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indp (0 : 1): [ ]
------------------------------ Fine which_v_indxgt_i

259: which_v_indxle_i	<=>	ris <- which(v<=val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indm (1 : 1): [ 1 ]
------------------------------ Fine which_v_indxle_i

263: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indp (0 : 1): [ ]
val2 = 0.3


g_p (1 : 1): [ 1 ]
------------------------------ Fine f_aux9_d

265: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indm (1 : 1): [ 1 ]
val2 = 0.3


g_p (1 : 1): [ 1.7 ]
------------------------------ Fine f_aux9_d

277: min_v_d	<=>	ris <- min(v)
g_p (1 : 1): [ 1.7 ]


min = 1.7
------------------------------ Fine min_v_d

280: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_p (1 : 1): [ 1.7 ]
canc_NA = 0



ris: 1.7
------------------------------ Fine somma_v_d

280: dividi1_vs_d	<=>	v <- v / div
g_p (1 : 1): [ 1.7 ]
div = 1.700


g_p (1 : 1): [ 1 ]
------------------------------ Fine dividi1_vs_d

283: assegna1_v_indx_d	<=>	v[indx] <- val
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
g_CCind[i - 1] (7 : 7): [ 1 2 3 4 5 6 7 ]
val = 1


g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine assegna1_v_indx_d

301: moltiplica_vv_d	<=>	ris <- v1 * v2
g_prior_p_subnet (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]


g_ppp (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]
------------------------------ Fine moltiplica_vv_d

303: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]


max = 0.1428571428571428
------------------------------ Fine max_v_d

307: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]
canc_NA = 1



ris: 0.9999999999999998
------------------------------ Fine somma_v_d

307: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]
div = 1.000


g_ppp (7 : 7): [ 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 ]
------------------------------ Fine dividi1_vs_d

315: max_v_i		<=>	ris <- max(v)
g_dim (7 : 7): [ 2 2 2 2 2 2 2 ]


max = 2
------------------------------ Fine max_v_i

321: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 ]


max = 0.1428571428571429
------------------------------ Fine max_v_d

330: which_v_indxgt_d	<=>	ris <- which(v > val)
g_ppp (7 : 7): [ 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 ]
val = 0


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine which_v_indxgt_d

333: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 7
incr = 1


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine seq_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
k = 3, replace = 0
g_ppp (7 : 7): [ 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 ]


ris (3 : 3): [ 7 3 6 ]
*****************************************


Stringhe allocate: 3 (814 interne); stringhe deallocate: 0 (164 interne)

336: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_mod1 (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine copia_m_i


***probmod***
63: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

65: InitMatr_i
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

67: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 3.5 3.5 3.5
	 3.5 3.5 3.5
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

69: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_mod1 (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_M_in (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

71: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod1 (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_M_out (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

74: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

90: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 2


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

91: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

109: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 1 0 0 1 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 2


g_S_new (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_old2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 0 0 0 ]
s = 1


g_new2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 5 5 5 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 0 0 0 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_a (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]


g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


g_m (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (0 : 5): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ 1 1 1 ]


Sc (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 1 1 1 ]
div = 2.000


Sc (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (815 interne); stringhe deallocate: 0 (165 interne)

112: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.5 0.5 0.5 ]
val = -inf


g_indok (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

114: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_indok (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

121: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

122: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_indok (3 : 5): [ 1 2 3 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

124: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.5 0.5 0.5 ]
g_indok (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

128: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

129: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.5 0.5 0.5 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

145: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 1 0 0 1 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 2


g_S_new (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_old2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 0 0 0 ]
s = 1


g_new2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 3 3 3 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 2 2 2 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 3 3 3 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2 2 2 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]


g_m (3 : 5): [ 3 3 3 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 3 3 3 ]
g_toll1 (3 : 5): [ nan nan nan ]


g_tmp1_d (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ nan nan nan ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2 2 2 ]
g_toll1 (3 : 5): [ nan nan nan ]


g_tmp1_d (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ nan nan nan ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (0 : 5): [ ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf inf inf ]
val = inf


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (3 : 5): [ 1 2 3 ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]


g_S1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 0 0 0 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_a (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]


g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


g_m (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (0 : 5): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 3 3 3 ]
g_S2 (3 : 5): [ 1 1 1 ]


Sc (3 : 5): [ 4 4 4 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 4 4 4 ]
div = 2.000


Sc (3 : 5): [ 2 2 2 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (819 interne); stringhe deallocate: 0 (169 interne)

148: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 2 2 2 ]
val = -inf


g_indok (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

150: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_indok (3 : 5): [ 1 2 3 ]
val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

158: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

159: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_indok (3 : 5): [ 1 2 3 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

161: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 2 2 2 ]
g_indok (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine copia_v_indx_d

165: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 2 2 2 ]


min = 2
------------------------------ Fine min_v_d

166: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 2 2 2 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna1_vs_indx_d

176: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ 0.5 0.5 0.5 ]
Sc (3 : 5): [ 2 2 2 ]


g_tmp_d1 (3 : 5): [ 2.5 2.5 2.5 ]
------------------------------ Fine somma_vv_d

177: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_d1 (3 : 5): [ 2.5 2.5 2.5 ]


ris (2 x 3 : 2 x 5): [
	 2.5 2.5 2.5
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

90: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 2


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

91: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

109: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 1 0 0 1 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 2


g_S_new (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_old2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 0 0 0 ]
s = 1


g_new2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 3 3 3 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 0 0 0 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_a (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]


g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


g_m (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (0 : 5): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ 1 1 1 ]


Sc (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 1 1 1 ]
div = 2.000


Sc (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (820 interne); stringhe deallocate: 0 (170 interne)

112: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.5 0.5 0.5 ]
val = -inf


g_indok (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

114: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_indok (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

121: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

122: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_indok (3 : 5): [ 1 2 3 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

124: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.5 0.5 0.5 ]
g_indok (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

128: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

129: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.5 0.5 0.5 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

145: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 1 0 0 1 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 2


g_S_new (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_old2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 0 0 0 ]
s = 1


g_new2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 3 3 3 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 2 2 2 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 3 3 3 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2 2 2 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]


g_m (3 : 5): [ 3 3 3 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 3 3 3 ]
g_toll1 (3 : 5): [ nan nan nan ]


g_tmp1_d (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ nan nan nan ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2 2 2 ]
g_toll1 (3 : 5): [ nan nan nan ]


g_tmp1_d (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ nan nan nan ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (0 : 5): [ ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf inf inf ]
val = inf


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (3 : 5): [ 1 2 3 ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]


g_S1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 0 0 0 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_a (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]


g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


g_m (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (0 : 5): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 3 3 3 ]
g_S2 (3 : 5): [ 1 1 1 ]


Sc (3 : 5): [ 4 4 4 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 4 4 4 ]
div = 2.000


Sc (3 : 5): [ 2 2 2 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (824 interne); stringhe deallocate: 0 (174 interne)

148: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 2 2 2 ]
val = -inf


g_indok (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

150: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_indok (3 : 5): [ 1 2 3 ]
val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

158: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

159: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_indok (3 : 5): [ 1 2 3 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

161: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 2 2 2 ]
g_indok (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine copia_v_indx_d

165: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 2 2 2 ]


min = 2
------------------------------ Fine min_v_d

166: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 2 2 2 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna1_vs_indx_d

176: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ 0.5 0.5 0.5 ]
Sc (3 : 5): [ 2 2 2 ]


g_tmp_d1 (3 : 5): [ 2.5 2.5 2.5 ]
------------------------------ Fine somma_vv_d

177: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 2.5 2.5 2.5
	 0 0 0
 ]
riga = 2
g_tmp_d1 (3 : 5): [ 2.5 2.5 2.5 ]


ris (2 x 3 : 2 x 5): [
	 2.5 2.5 2.5
	 2.5 2.5 2.5
 ]
------------------------------ Fine aggiungi_mv_riga_d

185: somma_m_d	<=>	ris <- sum(m)
ris (2 x 3 : 2 x 5): [
	 2.5 2.5 2.5
	 2.5 2.5 2.5
 ]


ris: 15
------------------------------ Fine somma_m_d

190: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_aus (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_colonne_i

192: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (3 : 5): [ 2 2 2 ]
val = 0


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

203: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 3 3 ]
------------------------------ Fine somma_righe_i

205: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

218: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

220: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 10): [ ]
g_I_add (3 : 10): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

218: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

220: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i

233: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

235: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

237: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_aus (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_colonne_i

239: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (3 : 5): [ 2 2 2 ]
val = 0


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

249: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 3 3 ]
------------------------------ Fine somma_righe_i

251: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

263: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

265: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
g_I_add (3 : 10): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

263: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

265: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i


Stringhe allocate: 3 (864 interne); stringhe deallocate: 0 (214 interne)


*** Esco da probmod ***

346: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_mod2 (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
------------------------------ Fine copia_m_i


***probmod***
63: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

65: InitMatr_i
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

67: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 3.5 3.5 3.5
	 3.5 3.5 3.5
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

69: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_mod2 (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_M_in (2 : 2): [ 0 2 ]
------------------------------ Fine somma_righe_i

71: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod2 (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_M_out (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

74: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

90: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

91: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

109: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 1 0 0 1 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_S_new (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_old2 (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 2 2 2 ]
s = 1


g_new2 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 3 3 3 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 2 2 2 ]
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_a (3 : 5): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 ]


g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 3 3 3 ]
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_b (3 : 5): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 ]


g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1.614836360604185 0.6148363606041851
	 1.614836360604185 0.6148363606041851
	 1.614836360604185 0.6148363606041851
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1.614836360604185 0.6148363606041851
	 1.614836360604185 0.6148363606041851
	 1.614836360604185 0.6148363606041851
 ]


g_m (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
g_m (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.3851636393958149 -0.3851636393958149 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.3851636393958149 -0.3851636393958149 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (0 : 5): [ ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
g_m (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]


g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]


Sc (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
div = 2.000


Sc (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (865 interne); stringhe deallocate: 0 (215 interne)

112: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
val = -inf


g_indok (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

114: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_indok (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

121: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

122: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_indok (3 : 5): [ 1 2 3 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

124: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
g_indok (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
------------------------------ Fine copia_v_indx_d

128: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]


min = 0.2233623046126327
------------------------------ Fine min_v_d

129: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
------------------------------ Fine assegna1_vs_indx_d

172: InitVett_d
Sc (3 : 5): [ 2 2 2 ]
val = 0


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

173: aggiungi_ms_riga_i	<=>	m[riga,] <- val # riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1, val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_ms_riga_i

176: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
Sc (3 : 5): [ 0 0 0 ]


g_tmp_d1 (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
------------------------------ Fine somma_vv_d

177: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_d1 (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]


ris (2 x 3 : 2 x 5): [
	 0.2233623046126327 0.2233623046126327 0.2233623046126327
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

90: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 2


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

91: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

109: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 1 0 0 1 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_S_new (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_old2 (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 2 2 2 ]
s = 1


g_new2 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 0 0 0 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 2 2 2 ]
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_a (3 : 5): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 ]


g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 3 3 3 ]
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_b (3 : 5): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 ]


g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1.614836360604185 0.6148363606041851
	 1.614836360604185 0.6148363606041851
	 1.614836360604185 0.6148363606041851
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1.614836360604185 0.6148363606041851
	 1.614836360604185 0.6148363606041851
	 1.614836360604185 0.6148363606041851
 ]


g_m (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
g_m (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.3851636393958149 -0.3851636393958149 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.3851636393958149 -0.3851636393958149 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (0 : 5): [ ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
g_m (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]


g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]


Sc (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
div = 2.000


Sc (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (866 interne); stringhe deallocate: 0 (216 interne)

112: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
val = -inf


g_indok (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

114: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_indok (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

121: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

122: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_indok (3 : 5): [ 1 2 3 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

124: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
g_indok (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
------------------------------ Fine copia_v_indx_d

128: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]


min = 0.2233623046126327
------------------------------ Fine min_v_d

129: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
------------------------------ Fine assegna1_vs_indx_d

145: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 1 0 0 1 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 2


g_S_new (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_old2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 0 0 0 ]
s = 1


g_new2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 3 3 3 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 2 2 2 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 3 3 3 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2 2 2 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]


g_m (3 : 5): [ 3 3 3 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 3 3 3 ]
g_toll1 (3 : 5): [ nan nan nan ]


g_tmp1_d (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ nan nan nan ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2 2 2 ]
g_toll1 (3 : 5): [ nan nan nan ]


g_tmp1_d (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ nan nan nan ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (0 : 5): [ ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf inf inf ]
val = inf


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (3 : 5): [ 1 2 3 ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]


g_S1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 0 0 0 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_a (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]


g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


g_m (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (0 : 5): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 3 3 3 ]
g_S2 (3 : 5): [ 1 1 1 ]


Sc (3 : 5): [ 4 4 4 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 4 4 4 ]
div = 2.000


Sc (3 : 5): [ 2 2 2 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (870 interne); stringhe deallocate: 0 (220 interne)

148: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 2 2 2 ]
val = -inf


g_indok (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

150: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_indok (3 : 5): [ 1 2 3 ]
val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

158: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

159: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_indok (3 : 5): [ 1 2 3 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

161: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 2 2 2 ]
g_indok (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine copia_v_indx_d

165: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 2 2 2 ]


min = 2
------------------------------ Fine min_v_d

166: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 2 2 2 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna1_vs_indx_d

176: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
Sc (3 : 5): [ 2 2 2 ]


g_tmp_d1 (3 : 5): [ 2.223362304612633 2.223362304612633 2.223362304612633 ]
------------------------------ Fine somma_vv_d

177: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0.2233623046126327 0.2233623046126327 0.2233623046126327
	 0 0 0
 ]
riga = 2
g_tmp_d1 (3 : 5): [ 2.223362304612633 2.223362304612633 2.223362304612633 ]


ris (2 x 3 : 2 x 5): [
	 0.2233623046126327 0.2233623046126327 0.2233623046126327
	 2.223362304612633 2.223362304612633 2.223362304612633
 ]
------------------------------ Fine aggiungi_mv_riga_d

185: somma_m_d	<=>	ris <- sum(m)
ris (2 x 3 : 2 x 5): [
	 0.2233623046126327 0.2233623046126327 0.2233623046126327
	 2.223362304612633 2.223362304612633 2.223362304612633
 ]


ris: 7.340173827675796
------------------------------ Fine somma_m_d

190: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_aus (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_colonne_i

192: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (3 : 5): [ 2 2 2 ]
val = 0


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

203: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 3 3 ]
------------------------------ Fine somma_righe_i

205: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

218: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

220: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
g_I_add (3 : 10): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

218: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

220: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i

233: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

235: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

237: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_aus (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_colonne_i

239: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (3 : 5): [ 2 2 2 ]
val = 0


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

249: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 3 3 ]
------------------------------ Fine somma_righe_i

251: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

263: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

265: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
g_I_add (3 : 10): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

263: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

265: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i


Stringhe allocate: 3 (910 interne); stringhe deallocate: 0 (260 interne)


*** Esco da probmod ***

362: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_mod3 (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
------------------------------ Fine copia_m_i


***probmod***
63: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

65: InitMatr_i
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

67: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 0.5 0.5 0.5
	 3.5 3.5 3.5
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

69: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_mod3 (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_M_in (2 : 2): [ 2 1 ]
------------------------------ Fine somma_righe_i

71: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod3 (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_M_out (2 : 2): [ 1 2 ]
------------------------------ Fine somma_colonne_i

74: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

90: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 2


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

91: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

109: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 1 0 0 1 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_S_new (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_old2 (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 2 2 2 ]
s = 1


g_new2 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 3 3 3 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 2 2 2 ]
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_a (3 : 5): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 ]


g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 3 3 3 ]
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_b (3 : 5): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 ]


g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1.614836360604185 0.6148363606041851
	 1.614836360604185 0.6148363606041851
	 1.614836360604185 0.6148363606041851
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1.614836360604185 0.6148363606041851
	 1.614836360604185 0.6148363606041851
	 1.614836360604185 0.6148363606041851
 ]


g_m (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
g_m (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.3851636393958149 -0.3851636393958149 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.3851636393958149 -0.3851636393958149 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (0 : 5): [ ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
g_m (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]


g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]


Sc (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
div = 2.000


Sc (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (911 interne); stringhe deallocate: 0 (261 interne)

112: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
val = -inf


g_indok (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

114: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_indok (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

121: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

122: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_indok (3 : 5): [ 1 2 3 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

124: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
g_indok (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
------------------------------ Fine copia_v_indx_d

128: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]


min = 0.2233623046126327
------------------------------ Fine min_v_d

129: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
------------------------------ Fine assegna1_vs_indx_d

145: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 1 0 0 1 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 2


g_S_new (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_old2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 0 0 0 ]
s = 1


g_new2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 3 3 3 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 2 2 2 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 3 3 3 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2 2 2 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]


g_m (3 : 5): [ 3 3 3 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 3 3 3 ]
g_toll1 (3 : 5): [ nan nan nan ]


g_tmp1_d (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ nan nan nan ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2 2 2 ]
g_toll1 (3 : 5): [ nan nan nan ]


g_tmp1_d (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ nan nan nan ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (0 : 5): [ ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf inf inf ]
val = inf


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (3 : 5): [ 1 2 3 ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]


g_S1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 0 0 0 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_a (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]


g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


g_m (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (0 : 5): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 3 3 3 ]
g_S2 (3 : 5): [ 1 1 1 ]


Sc (3 : 5): [ 4 4 4 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 4 4 4 ]
div = 2.000


Sc (3 : 5): [ 2 2 2 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (915 interne); stringhe deallocate: 0 (265 interne)

148: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 2 2 2 ]
val = -inf


g_indok (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

150: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_indok (3 : 5): [ 1 2 3 ]
val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

158: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

159: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_indok (3 : 5): [ 1 2 3 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

161: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 2 2 2 ]
g_indok (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine copia_v_indx_d

165: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 2 2 2 ]


min = 2
------------------------------ Fine min_v_d

166: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 2 2 2 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna1_vs_indx_d

176: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ 0.2233623046126327 0.2233623046126327 0.2233623046126327 ]
Sc (3 : 5): [ 2 2 2 ]


g_tmp_d1 (3 : 5): [ 2.223362304612633 2.223362304612633 2.223362304612633 ]
------------------------------ Fine somma_vv_d

177: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_d1 (3 : 5): [ 2.223362304612633 2.223362304612633 2.223362304612633 ]


ris (2 x 3 : 2 x 5): [
	 2.223362304612633 2.223362304612633 2.223362304612633
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

90: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

91: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

109: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 1 0 0 1 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 2


g_S_new (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_old2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 0 0 0 ]
s = 1


g_new2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 3 3 3 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 0 0 0 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_a (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]


g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


g_m (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (0 : 5): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ 1 1 1 ]


Sc (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 1 1 1 ]
div = 2.000


Sc (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (916 interne); stringhe deallocate: 0 (266 interne)

112: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.5 0.5 0.5 ]
val = -inf


g_indok (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

114: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_indok (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

121: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

122: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_indok (3 : 5): [ 1 2 3 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

124: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.5 0.5 0.5 ]
g_indok (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

128: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

129: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.5 0.5 0.5 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

145: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 1 0 0 1 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_S_new (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_old2 (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 2 2 2 ]
s = 1


g_new2 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 3 3 3 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 2 2 2 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 3 3 3 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2 2 2 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]


g_m (3 : 5): [ 3 3 3 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 3 3 3 ]
g_toll1 (3 : 5): [ nan nan nan ]


g_tmp1_d (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ nan nan nan ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2 2 2 ]
g_toll1 (3 : 5): [ nan nan nan ]


g_tmp1_d (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ nan nan nan ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (0 : 5): [ ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf inf inf ]
val = inf


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (3 : 5): [ 1 2 3 ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]


g_S1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 2 2 2 ]
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_a (3 : 5): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 ]


g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 3 3 3 ]
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_b (3 : 5): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 ]


g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1.614836360604185 0.6148363606041851
	 1.614836360604185 0.6148363606041851
	 1.614836360604185 0.6148363606041851
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1.614836360604185 0.6148363606041851
	 1.614836360604185 0.6148363606041851
	 1.614836360604185 0.6148363606041851
 ]


g_m (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
g_m (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.3851636393958149 -0.3851636393958149 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.3851636393958149 -0.3851636393958149 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (0 : 5): [ ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_b (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
g_m (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]


g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 3 3 3 ]
g_S2 (3 : 5): [ 0.4467246092252654 0.4467246092252654 0.4467246092252654 ]


Sc (3 : 5): [ 3.446724609225265 3.446724609225265 3.446724609225265 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 3.446724609225265 3.446724609225265 3.446724609225265 ]
div = 2.000


Sc (3 : 5): [ 1.723362304612633 1.723362304612633 1.723362304612633 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (920 interne); stringhe deallocate: 0 (270 interne)

148: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 1.723362304612633 1.723362304612633 1.723362304612633 ]
val = -inf


g_indok (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

150: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_indok (3 : 5): [ 1 2 3 ]
val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

158: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

159: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_indok (3 : 5): [ 1 2 3 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

161: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 1.723362304612633 1.723362304612633 1.723362304612633 ]
g_indok (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 1.723362304612633 1.723362304612633 1.723362304612633 ]
------------------------------ Fine copia_v_indx_d

165: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 1.723362304612633 1.723362304612633 1.723362304612633 ]


min = 1.723362304612633
------------------------------ Fine min_v_d

166: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 1.723362304612633 1.723362304612633 1.723362304612633 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 1.723362304612633 1.723362304612633 1.723362304612633 ]
------------------------------ Fine assegna1_vs_indx_d

176: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ 0.5 0.5 0.5 ]
Sc (3 : 5): [ 1.723362304612633 1.723362304612633 1.723362304612633 ]


g_tmp_d1 (3 : 5): [ 2.223362304612633 2.223362304612633 2.223362304612633 ]
------------------------------ Fine somma_vv_d

177: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 2.223362304612633 2.223362304612633 2.223362304612633
	 0 0 0
 ]
riga = 2
g_tmp_d1 (3 : 5): [ 2.223362304612633 2.223362304612633 2.223362304612633 ]


ris (2 x 3 : 2 x 5): [
	 2.223362304612633 2.223362304612633 2.223362304612633
	 2.223362304612633 2.223362304612633 2.223362304612633
 ]
------------------------------ Fine aggiungi_mv_riga_d

185: somma_m_d	<=>	ris <- sum(m)
ris (2 x 3 : 2 x 5): [
	 2.223362304612633 2.223362304612633 2.223362304612633
	 2.223362304612633 2.223362304612633 2.223362304612633
 ]


ris: 13.34017382767579
------------------------------ Fine somma_m_d

190: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_aus (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_colonne_i

192: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (3 : 5): [ 2 2 2 ]
val = 0


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

203: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 3 3 ]
------------------------------ Fine somma_righe_i

205: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

218: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

220: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
g_I_add (3 : 10): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

218: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

220: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i

233: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

235: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

237: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_aus (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_colonne_i

239: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (3 : 5): [ 2 2 2 ]
val = 0


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

249: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 3 3 ]
------------------------------ Fine somma_righe_i

251: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

263: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

265: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
g_I_add (3 : 10): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

263: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

265: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i


Stringhe allocate: 3 (960 interne); stringhe deallocate: 0 (310 interne)


*** Esco da probmod ***

375: vettore3s_d		<=>	ris <- c(el1, el2, el3)
el1 = 7.5, el2 = 3.670086913837898, el3 = 6.670086913837897


g_pm (3 : 3): [ 7.5 3.670086913837898 6.670086913837897 ]
------------------------------ Fine vettore3s_d

376: copia_v_d	<=>	ris[st:end] <- v[st:end]
g_pm (3 : 3): [ 7.5 3.670086913837898 6.670086913837897 ]
st = 1
end = 3


g_prob_mod (3 : 3): [ 7.5 3.670086913837898 6.670086913837897 ]
------------------------------ Fine copia_v_d

378: assegna1_v_indxNA_d	<=>	v1[which(is.na(v2))] <- val oppure v1[which(!is.na(v2))] <- val
g_prob_mod (3 : 3): [ 7.5 3.670086913837898 6.670086913837897 ]
g_prob_mod (3 : 3): [ 7.5 3.670086913837898 6.670086913837897 ]
val = 0
complemento = 0


g_prob_mod (3 : 3): [ 7.5 3.670086913837898 6.670086913837897 ]
------------------------------ Fine assegna1_v_indxNA_d

380: min_v_d	<=>	ris <- min(v)
g_prob_mod (3 : 3): [ 7.5 3.670086913837898 6.670086913837897 ]


min = 3.670086913837898
------------------------------ Fine min_v_d

385: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_pm (3 : 3): [ 7.5 3.670086913837898 6.670086913837897 ]
complemento = 0


g_tmp1_i (0 : 11): [ ]
------------------------------ Fine which_v_indxNA_d

386: assegna1_v_indx_d	<=>	v[indx] <- val
g_prob_mod (3 : 3): [ 7.5 3.670086913837898 6.670086913837897 ]
g_tmp1_i (0 : 11): [ ]
val = 0


g_prob_mod (3 : 3): [ 7.5 3.670086913837898 6.670086913837897 ]
------------------------------ Fine assegna1_v_indx_d

388: which_v_indxne_d	<=>	ris <- which(v != val)
g_prob_mod (3 : 3): [ 7.5 3.670086913837898 6.670086913837897 ]
val = 0


g_ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

392: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_prob_mod (3 : 3): [ 7.5 3.670086913837898 6.670086913837897 ]
canc_NA = 0



ris: 17.8401738276758
------------------------------ Fine somma_v_d

392: dividi1_vs_d	<=>	v <- v / div
g_prob_mod (3 : 3): [ 7.5 3.670086913837898 6.670086913837897 ]
div = 17.840


g_prob_mod (3 : 3): [ 0.4203994911958261 0.2057203561629216 0.3738801526412521 ]
------------------------------ Fine dividi1_vs_d

394: vettore3s_i		<=>	ris <- c(el1, el2, el3)
el1 = 1, el2 = 2, el3 = 3


g_tmp1_i (3 : 11): [ 1 2 3 ]
------------------------------ Fine vettore3s_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (3 : 11): [ 1 2 3 ]
k = 1, replace = 0
g_prob_mod (3 : 3): [ 0.4203994911958261 0.2057203561629216 0.3738801526412521 ]


ris (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 3 (960 interne); stringhe deallocate: 0 (310 interne)

419: copia_m_i	<=>	ris <- da
g_mod3 (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_M (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
------------------------------ Fine copia_m_i

420: copia_m_d	<=>	ris <- da
ris (2 x 3 : 2 x 5): [
	 2.223362304612633 2.223362304612633 2.223362304612633
	 2.223362304612633 2.223362304612633 2.223362304612633
 ]


g_Sc (2 x 3 : 2 x 5): [
	 2.223362304612633 2.223362304612633 2.223362304612633
	 2.223362304612633 2.223362304612633 2.223362304612633
 ]
------------------------------ Fine copia_m_d

424: copia_v_i	<=>	ris[st:end] <- v[st:end]
VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]
st = 1
end = 2


g_hubs (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

438: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 ]
canc_NA = 0



ris: 1
------------------------------ Fine somma_v_d

438: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 ]
div = 1.000


g_ppp (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]
------------------------------ Fine dividi1_vs_d


***sampleB***

***sample***
g_hubs (2 : 2): [ 1 2 ]
k = 1, replace = 0


g_hubs (1 : 2): [ 1 ]
*****************************************


Stringhe allocate: 3 (960 interne); stringhe deallocate: 0 (310 interne)


Stringhe allocate: 3 (960 interne); stringhe deallocate: 0 (310 interne)

750: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (3 : 5): [ 1 3 4 ]
st = 1
end = 3


g_h1 (3 : 5): [ 1 3 4 ]
------------------------------ Fine copia_v_i


***assign_nodes***
46: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (3 : 5): [ 1 3 4 ]
st = 1
end = 3


g_or_h (3 : 5): [ 1 3 4 ]
------------------------------ Fine copia_v_i

48: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_aus_h (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

54: InitVett_i
g_index (2 : 2): [ 2 5 ]
val = 0


g_index (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_i

56: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_M (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_M_in (2 : 2): [ 2 1 ]
------------------------------ Fine somma_righe_i

58: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_M_in (2 : 2): [ 2 1 ]
decr = 1


g_Ord (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

63: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 3 : 2 x 5): [
	 2.223362304612633 2.223362304612633 2.223362304612633
	 2.223362304612633 2.223362304612633 2.223362304612633
 ]
r = 1

g_p (3 : 5): [ 2.223362304612633 2.223362304612633 2.223362304612633 ]
------------------------------ Fine riga_d

65: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (3 : 5): [ 2.223362304612633 2.223362304612633 2.223362304612633 ]
val = 0


g_tmp_i (0 : 5): [ ]
------------------------------ Fine which_v_indxle_d

72: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 1 0 0 1 ]
g_h1 (3 : 5): [ 1 3 4 ]


g_Sin_h (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i

77: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sin_h (3 : 5): [ 0 0 0 ]
val = 3


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

83: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (3 : 5): [ 2.223362304612633 2.223362304612633 2.223362304612633 ]
g_aus_h (3 : 5): [ 1 2 3 ]


g_tmp_d (3 : 5): [ 2.223362304612633 2.223362304612633 2.223362304612633 ]
------------------------------ Fine assegna_v_indxNA_d

84: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (3 : 5): [ 2.223362304612633 2.223362304612633 2.223362304612633 ]
canc_NA = 0



ris: 6.670086913837898
------------------------------ Fine somma_v_d

85: dividi_vs_d	ris <- v / div
g_tmp_d (3 : 5): [ 2.223362304612633 2.223362304612633 2.223362304612633 ]
div = 6.670


g_p (3 : 5): [ 0.3333333333333333 0.3333333333333333 0.3333333333333333 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (3 : 5): [ 1 3 4 ]
k = 1, replace = 0
g_p (3 : 5): [ 0.3333333333333333 0.3333333333333333 0.3333333333333333 ]


ris (1 : 1): [ 4 ]
*****************************************


Stringhe allocate: 3 (960 interne); stringhe deallocate: 0 (310 interne)

92: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (3 : 5): [ 1 3 4 ]
ris (1 : 1): [ 4 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 4
g_h1 (3 : 5): [ 1 3 4 ]


indx = 3
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (3 : 5): [ 1 3 4 ]
indx = 3


g_h1 (2 : 5): [ 1 3 ]
------------------------------ Fine elimina1_indx_i



g_h1 (2 : 5): [ 1 3 ]
------------------------------ Fine setdiff1_i

94: which_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (3 : 5): [ 1 3 4 ]
ris (1 : 1): [ 4 ]
2017: esiste_v_i	<=>	elem %IN% v
elem = 4
g_or_h (3 : 5): [ 1 3 4 ]


indx = 3
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 4 ]
------------------------------ Fine which_vv_eq_i

95: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (3 : 5): [ 1 2 3 ]
g_tmp_i (1 : 5): [ 4 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 4
g_aus_h (3 : 5): [ 1 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i



g_aus_h (3 : 5): [ 1 2 3 ]
------------------------------ Fine setdiff1_i

63: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 3 : 2 x 5): [
	 2.223362304612633 2.223362304612633 2.223362304612633
	 2.223362304612633 2.223362304612633 2.223362304612633
 ]
r = 2

g_p (3 : 5): [ 2.223362304612633 2.223362304612633 2.223362304612633 ]
------------------------------ Fine riga_d

65: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (3 : 5): [ 2.223362304612633 2.223362304612633 2.223362304612633 ]
val = 0


g_tmp_i (0 : 5): [ ]
------------------------------ Fine which_v_indxle_d

72: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 1 0 0 1 ]
g_h1 (2 : 5): [ 1 3 ]


g_Sin_h (2 : 5): [ 0 0 ]
------------------------------ Fine assegna_v_indxNA_i

77: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sin_h (2 : 5): [ 0 0 ]
val = 4


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

83: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (3 : 5): [ 2.223362304612633 2.223362304612633 2.223362304612633 ]
g_aus_h (3 : 5): [ 1 2 3 ]


g_tmp_d (3 : 5): [ 2.223362304612633 2.223362304612633 2.223362304612633 ]
------------------------------ Fine assegna_v_indxNA_d

84: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (3 : 5): [ 2.223362304612633 2.223362304612633 2.223362304612633 ]
canc_NA = 0



ris: 6.670086913837898
------------------------------ Fine somma_v_d

85: dividi_vs_d	ris <- v / div
g_tmp_d (3 : 5): [ 2.223362304612633 2.223362304612633 2.223362304612633 ]
div = 6.670


g_p (3 : 5): [ 0.3333333333333333 0.3333333333333333 0.3333333333333333 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (2 : 5): [ 1 3 ]
k = 1, replace = 0
g_p (3 : 5): [ 0.3333333333333333 0.3333333333333333 0.3333333333333333 ]


ris (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 3 (960 interne); stringhe deallocate: 0 (310 interne)

92: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (2 : 5): [ 1 3 ]
ris (1 : 1): [ 3 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 3
g_h1 (2 : 5): [ 1 3 ]


indx = 2
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (2 : 5): [ 1 3 ]
indx = 2


g_h1 (1 : 5): [ 1 ]
------------------------------ Fine elimina1_indx_i



g_h1 (1 : 5): [ 1 ]
------------------------------ Fine setdiff1_i

94: which_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (3 : 5): [ 1 3 4 ]
ris (1 : 1): [ 3 ]
2017: esiste_v_i	<=>	elem %IN% v
elem = 3
g_or_h (3 : 5): [ 1 3 4 ]


indx = 2
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 3 ]
------------------------------ Fine which_vv_eq_i

95: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (3 : 5): [ 1 2 3 ]
g_tmp_i (1 : 5): [ 3 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 3
g_aus_h (3 : 5): [ 1 2 3 ]


indx = 3
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
g_aus_h (3 : 5): [ 1 2 3 ]
indx = 3


g_aus_h (2 : 5): [ 1 2 ]
------------------------------ Fine elimina1_indx_i



g_aus_h (2 : 5): [ 1 2 ]
------------------------------ Fine setdiff1_i

103: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
riga = 1
val = 1


g_ind (2 : 5): [ 1 2 ]
------------------------------ Fine which_m_rowindxeq_i

105: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 4 3 ]
g_ind (2 : 5): [ 1 2 ]


g_co (2 : 4): [ 4 3 ]
------------------------------ Fine copia_v_indx_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
 ]
g_ri (1 : 1): [ 4 ]
g_co (2 : 4): [ 4 3 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 1 1 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 1
g_hubs (1 : 2): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

111: accoda1_vv_i	<=>	v1 <- c(v1, v2)
ris (0 : 1): [ ]
g_ri (1 : 1): [ 4 ]


ris (1 : 1): [ 4 ]
------------------------------ Fine accoda_vv_i

103: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
riga = 2
val = 1


g_ind (1 : 5): [ 2 ]
------------------------------ Fine which_m_rowindxeq_i

105: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 4 3 ]
g_ind (1 : 5): [ 2 ]


g_co (1 : 4): [ 3 ]
------------------------------ Fine copia_v_indx_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
	 0 0 1 1 0
	 0 1 0 0 0
 ]
g_ri (1 : 1): [ 3 ]
g_co (1 : 4): [ 3 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 1 0 0
	 0 0 1 1 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 2
g_hubs (1 : 2): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i


*** Esco da assign_nodes ***


Stringhe allocate: 3 (960 interne); stringhe deallocate: 0 (310 interne)

758: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_h (3 : 5): [ 1 3 4 ]
g_h1 (1 : 5): [ 1 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (3 : 5): [ 1 3 4 ]
st = 1
end = 3


g_tmp1_i (3 : 11): [ 1 3 4 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_tmp1_i (3 : 11): [ 1 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_tmp1_i (3 : 11): [ 1 3 4 ]
indx = 1


g_tmp1_i (2 : 11): [ 3 4 ]
------------------------------ Fine elimina1_indx_i



g_tmp1_i (2 : 11): [ 3 4 ]
------------------------------ Fine setdiff_i

759: incr1_v_indx_i	<=>	v[indx] <- v[indx] + s
g_LG (5 : 5): [ -1 0 -1 -1 0 ]
g_tmp1_i (2 : 11): [ 3 4 ]
val = 1


g_LG (5 : 5): [ -1 0 0 0 0 ]
------------------------------ Fine incr1_v_indx_i

763: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (1 : 5): [ 1 ]
st = 1
end = 1


g_h (1 : 5): [ 1 ]
------------------------------ Fine copia_v_i

765: accoda1_vv_i	<=>	v1 <- c(v1, v2)
g_h_new (1 : 2): [ 2 ]
ris (1 : 1): [ 4 ]


g_h_new (2 : 2): [ 2 4 ]
------------------------------ Fine accoda_vv_i

767: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 1 0 0
	 0 0 1 1 0
	 0 1 0 0 0
 ]


g_Sout (5 : 5): [ 0 1 2 1 1 ]
------------------------------ Fine somma_colonne_i

769: max_v_i		<=>	ris <- max(v)
g_Sout (5 : 5): [ 0 1 2 1 1 ]


max = 2
------------------------------ Fine max_v_i

771: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 3
incr = 1


g_tmp2_i (4 : 10): [ 0 1 2 3 ]
------------------------------ Fine seq_i


*** hist1 ***
g_Sout (5 : 5): [ 0 1 2 1 1 ]
g_tmp2_i (4 : 10): [ 0 1 2 3 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
g_tmp1_i (3 : 11): [ 3 4 4 ]
val = 0


g_tmp1_i (3 : 11): [ 0 0 0 ]
------------------------------ Fine InitVett_i



g_tmp1_i (3 : 11): [ 1 3 1 ]

Stringhe allocate: 3 (960 interne); stringhe deallocate: 0 (310 interne)

773: promuovi_i	(implicita)
g_tmp1_i (3 : 11): [ 1 3 1 ]
ATTENZIONE (promuovi_i, linea HMM.c # 773): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

g_tmp1_d (3 : 19): [ 1 3 1 ]
------------------------------ Fine promuovi_i

774: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
start = 1
end = 3
g_tmp1_d (3 : 19): [ 1 3 1 ]


g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

776: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 1 0 0
	 0 0 1 1 0
	 0 1 0 0 0
 ]


g_Sin (5 : 5): [ 0 1 1 2 1 ]
------------------------------ Fine somma_righe_i

778: max_v_i		<=>	ris <- max(v)
g_Sin (5 : 5): [ 0 1 1 2 1 ]


max = 2
------------------------------ Fine max_v_i

780: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 3
incr = 1


g_tmp2_i (4 : 10): [ 0 1 2 3 ]
------------------------------ Fine seq_i


*** hist1 ***
g_Sin (5 : 5): [ 0 1 1 2 1 ]
g_tmp2_i (4 : 10): [ 0 1 2 3 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
g_tmp1_i (3 : 11): [ 1 3 1 ]
val = 0


g_tmp1_i (3 : 11): [ 0 0 0 ]
------------------------------ Fine InitVett_i



g_tmp1_i (3 : 11): [ 1 3 1 ]

Stringhe allocate: 3 (961 interne); stringhe deallocate: 0 (311 interne)

782: promuovi_i	(implicita)
g_tmp1_i (3 : 11): [ 1 3 1 ]
ATTENZIONE (promuovi_i, linea HMM.c # 782): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

g_tmp1_d (3 : 19): [ 1 3 1 ]
------------------------------ Fine promuovi_i

783: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
g_Freq_in (7 : 7): [ 3 2 0 0 0 0 0 ]
start = 1
end = 3
g_tmp1_d (3 : 19): [ 1 3 1 ]


g_Freq_in (7 : 7): [ 1 3 1 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

794: accoda1_vv_i	<=>	v1 <- c(v1, v2)
g_h (1 : 5): [ 1 ]
g_h_new (2 : 2): [ 2 4 ]


g_h (3 : 5): [ 1 2 4 ]
------------------------------ Fine accoda_vv_i

802: copia_v_indx_i	<=>	ris <- v[indx]
g_Sin (5 : 5): [ 0 1 1 2 1 ]
g_h (3 : 5): [ 1 2 4 ]


g_tmp2_i (3 : 10): [ 0 1 2 ]
------------------------------ Fine copia_v_indx_i

803: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp2_i (3 : 10): [ 0 1 2 ]
val = 5


g_tmp1_i (3 : 11): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

804: copia_v_indx_i	<=>	ris <- v[indx]
g_h (3 : 5): [ 1 2 4 ]
g_tmp1_i (3 : 11): [ 1 2 3 ]


g_h (3 : 5): [ 1 2 4 ]
------------------------------ Fine copia_v_indx_i

241: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 1 0 0
	 0 0 1 1 0
	 0 1 0 0 0
 ]


g_Sin (5 : 5): [ 0 1 1 2 1 ]
------------------------------ Fine somma_righe_i

243: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 1 0 0
	 0 0 1 1 0
	 0 1 0 0 0
 ]


g_Sout (5 : 5): [ 0 1 2 1 1 ]
------------------------------ Fine somma_colonne_i


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 1 0 0
	 0 0 1 1 0
	 0 1 0 0 0
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 1 1 0
	 0 0 0 1 0
	 0 1 0 0 0
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 1 1 0
	 0 0 0 1 0
	 0 1 0 0 0
 ]
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 1 0 0
	 0 0 1 1 0
	 0 1 0 0 0
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 2
	 0 0 2 1 0
	 0 0 1 2 0
	 0 2 0 0 0
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 2
	 0 0 2 1 0
	 0 0 1 2 0
	 0 2 0 0 0
 ]
val = 0


g_ind (6 : 25): [ 10 13 14 18 19 22 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 2
	 0 0 2 1 0
	 0 0 1 2 0
	 0 2 0 0 0
 ]
g_ind (6 : 25): [ 10 13 14 18 19 22 ]
val = 1


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 1 1 0
	 0 0 1 1 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 1 1 0
	 0 0 1 1 0
	 0 1 0 0 0
 ]
val = 0


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (5 : 5): [ 0 0 0 0 0 ]
val = 0


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
riga = 1


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
r = 1
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
riga = 2


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
r = 2
val = 0


g_neighbours (1 : 25): [ 5 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
riga = 3


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
r = 3
val = 0


g_neighbours (1 : 25): [ 4 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
riga = 4


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
r = 4
val = 0


g_neighbours (1 : 25): [ 3 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
riga = 5


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
r = 5
val = 0


g_neighbours (1 : 25): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (5 : 5): [ 0 0 0 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 3 (962 interne); stringhe deallocate: 0 (312 interne)


*** Esco da cluster_coeff2 ***
254: somma_vs_T	<=> ris <- v + s
g_CCs (1 : 1): [ 0 ]
s = 0


g_tmp1_d (1 : 19): [ 0 ]
------------------------------ Fine somma_vs_di

255: segno_v_d	<=>	ris <- sign(v)
g_tmp1_d (1 : 19): [ 0 ]


g_segno (1 : 1): [ 0 ]
------------------------------ Fine segno_v_d

257: which_v_indxgt_i	<=>	ris <- which(v > val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indp (0 : 1): [ ]
------------------------------ Fine which_v_indxgt_i

259: which_v_indxle_i	<=>	ris <- which(v<=val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indm (1 : 1): [ 1 ]
------------------------------ Fine which_v_indxle_i

263: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indp (0 : 1): [ ]
val2 = 0.3


g_p (1 : 1): [ 1 ]
------------------------------ Fine f_aux9_d

265: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indm (1 : 1): [ 1 ]
val2 = 0.3


g_p (1 : 1): [ 1.7 ]
------------------------------ Fine f_aux9_d

277: min_v_d	<=>	ris <- min(v)
g_p (1 : 1): [ 1.7 ]


min = 1.7
------------------------------ Fine min_v_d

280: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_p (1 : 1): [ 1.7 ]
canc_NA = 0



ris: 1.7
------------------------------ Fine somma_v_d

280: dividi1_vs_d	<=>	v <- v / div
g_p (1 : 1): [ 1.7 ]
div = 1.700


g_p (1 : 1): [ 1 ]
------------------------------ Fine dividi1_vs_d

283: assegna1_v_indx_d	<=>	v[indx] <- val
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
g_CCind[i - 1] (7 : 7): [ 1 2 3 4 5 6 7 ]
val = 1


g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine assegna1_v_indx_d

301: moltiplica_vv_d	<=>	ris <- v1 * v2
g_prior_p_subnet (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]


g_ppp (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]
------------------------------ Fine moltiplica_vv_d

303: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]


max = 0.1428571428571428
------------------------------ Fine max_v_d

307: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]
canc_NA = 1



ris: 0.9999999999999998
------------------------------ Fine somma_v_d

307: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]
div = 1.000


g_ppp (7 : 7): [ 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 ]
------------------------------ Fine dividi1_vs_d

315: max_v_i		<=>	ris <- max(v)
g_dim (7 : 7): [ 2 2 2 2 2 2 2 ]


max = 2
------------------------------ Fine max_v_i

321: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 ]


max = 0.1428571428571429
------------------------------ Fine max_v_d

330: which_v_indxgt_d	<=>	ris <- which(v > val)
g_ppp (7 : 7): [ 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 ]
val = 0


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine which_v_indxgt_d

333: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 7
incr = 1


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine seq_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
k = 3, replace = 0
g_ppp (7 : 7): [ 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 ]


ris (3 : 3): [ 2 1 3 ]
*****************************************


Stringhe allocate: 3 (962 interne); stringhe deallocate: 0 (312 interne)

336: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_mod1 (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
------------------------------ Fine copia_m_i


***probmod***
63: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

65: InitMatr_i
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

67: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 2.5 2.5 2.5
	 2.5 2.5 2.5
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

69: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_mod1 (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_M_in (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

71: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod1 (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_M_out (2 : 2): [ 0 2 ]
------------------------------ Fine somma_colonne_i

74: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

90: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

91: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

136: InitVett_d
Sc (3 : 5): [ 0.5 0.5 0.5 ]
val = 0


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

139: InitVett_i
g_tmp_i1 (3 : 6): [ 1 2 3 ]
val = 1


g_tmp_i1 (3 : 6): [ 1 1 1 ]
------------------------------ Fine InitVett_i

140: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_i1 (3 : 6): [ 1 1 1 ]


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_i

145: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 1 1 2 1 ]
g_h (3 : 5): [ 1 2 4 ]


g_tmp_i1 (3 : 6): [ 0 1 2 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 2 ]
s = 1


g_S_new (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_T1 (3 : 5): [ 0 3.614836360604185 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 2 3 4 ]


g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_old1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 3 4 ]


g_old2 (3 : 5): [ 3 1 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 3 1 ]
s = -1


g_new1 (3 : 5): [ 0 2 0 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 3 1 0 ]
s = 1


g_new2 (3 : 5): [ 4 2 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_toll1 (3 : 5): [ nan 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 3 4 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 3 1 ]
g_T1 (3 : 5): [ 0 3.614836360604185 0.7867244574868211 ]


g_a (3 : 5): [ 1 -0.6148363606041851 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1 -0.6148363606041851 0.2132755425131789 ]


g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 2 0 ]
g_T1 (3 : 5): [ 0 3.614836360604185 0.7867244574868211 ]


g_b (3 : 5): [ 0 -1.614836360604185 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0 -1.614836360604185 -0.7867244574868211 ]


g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ 0 3.614836360604185 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.6148363606041851 1.614836360604185
	 0.2132755425131789 0.7867244574868211
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.6148363606041851 1.614836360604185
	 0.2132755425131789 0.7867244574868211
 ]


g_m (3 : 5): [ 1 1.614836360604185 0.7867244574868211 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
g_m (3 : 5): [ 1 1.614836360604185 0.7867244574868211 ]
g_T1 (3 : 5): [ 0 3.614836360604185 0.7867244574868211 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf -0.4467246092252654 -1 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan -0.3851636393958149 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ nan -0.3851636393958149 -0.7867244574868211 ]
val = 0

g_ind1 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan 0.6148363606041851 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ nan 0.6148363606041851 -0.2132755425131789 ]
val = 0


g_ind2 (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (2 : 5): [ 2 3 ]
g_ind2 (1 : 5): [ 2 ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 1): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 1): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 1): [ 2 ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf -0.4467246092252654 -1 ]
g_indinf (1 : 1): [ 2 ]
val = -inf


g_S1 (3 : 5): [ inf -inf -1 ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf -inf -1 ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf -inf -1 ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ inf -inf -1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf -inf -1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf -inf -1 ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf -inf -1 ]
val = inf


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf -inf -1 ]
g_ind (1 : 5): [ 1 ]
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
g_m (3 : 5): [ 1 1.614836360604185 0.7867244574868211 ]


g_S1 (3 : 5): [ 1 -inf -1 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 3 1 0 ]
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 ]


g_a (3 : 5): [ -0.6148363606041851 0.2132755425131789 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -0.6148363606041851 0.2132755425131789 -0.3224199317354524 ]


g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 4 2 1 ]
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 ]


g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]


g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
 ]


g_m (3 : 5): [ 0.6148363606041851 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
g_m (3 : 5): [ 0.6148363606041851 1.213275542513179 0.6775800682645476 ]
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 ]


g_S2 (3 : 5): [ 0.1700869138378981 -1.542186124973118 -2.101545225871788 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.7867244574868211 -0.6775800682645476 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.7867244574868211 -0.6775800682645476 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.6148363606041851 0.2132755425131789 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.6148363606041851 0.2132755425131789 -0.3224199317354524 ]
val = 0


g_ind2 (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (1 : 5): [ 2 ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (1 : 5): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 1): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 1): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 1): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 1): [ 2 ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.1700869138378981 -1.542186124973118 -2.101545225871788 ]
g_indinf (1 : 1): [ 2 ]
val = -inf


g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
g_m (3 : 5): [ 0.6148363606041851 1.213275542513179 0.6775800682645476 ]


g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 1 -inf -1 ]
g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]


Sc (3 : 5): [ 1.170086913837898 -inf -3.101545225871788 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 1.170086913837898 -inf -3.101545225871788 ]
div = 2.000


Sc (3 : 5): [ 0.5850434569189491 -inf -1.550772612935894 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (964 interne); stringhe deallocate: 0 (314 interne)

148: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.5850434569189491 -inf -1.550772612935894 ]
val = -inf


g_indok (2 : 5): [ 1 3 ]
------------------------------ Fine which_v_indxne_d

150: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_indok (2 : 5): [ 1 3 ]
val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 0 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

158: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

159: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_indok (2 : 5): [ 1 3 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 2


g_indInf (1 : 5): [ 2 ]
------------------------------ Fine elimina1_indx_i



g_indInf (1 : 5): [ 2 ]
------------------------------ Fine setdiff_i

161: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.5850434569189491 -inf -1.550772612935894 ]
g_indok (2 : 5): [ 1 3 ]


g_tmp_d1 (2 : 5): [ 0.5850434569189491 -1.550772612935894 ]
------------------------------ Fine copia_v_indx_d

165: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (2 : 5): [ 0.5850434569189491 -1.550772612935894 ]


min = -1.550772612935894
------------------------------ Fine min_v_d

166: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.5850434569189491 -inf -1.550772612935894 ]
g_indInf (1 : 5): [ 2 ]
val = -2.550772612935894


Sc (3 : 5): [ 0.5850434569189491 -2.550772612935894 -1.550772612935894 ]
------------------------------ Fine assegna1_vs_indx_d

176: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ 0 0 0 ]
Sc (3 : 5): [ 0.5850434569189491 -2.550772612935894 -1.550772612935894 ]


g_tmp_d1 (3 : 5): [ 0.5850434569189491 -2.550772612935894 -1.550772612935894 ]
------------------------------ Fine somma_vv_d

177: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_d1 (3 : 5): [ 0.5850434569189491 -2.550772612935894 -1.550772612935894 ]


ris (2 x 3 : 2 x 5): [
	 0.5850434569189491 -2.550772612935894 -1.550772612935894
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

90: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

91: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

109: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 1 2 1 1 ]
g_h (3 : 5): [ 1 2 4 ]


g_tmp_i1 (3 : 6): [ 0 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 1 ]
s = 2


g_S_new (3 : 5): [ 2 3 3 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 2 2 ]


g_T1 (3 : 5): [ nan 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 3 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 4 4 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 3 4 4 ]


g_T2 (3 : 5): [ 0.7867244574868211 0.3224199317354524 0.3224199317354524 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 2 2 ]


g_old1 (3 : 5): [ 1 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 3 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 4 4 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 4 4 ]


g_old2 (3 : 5): [ 1 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 3 3 ]
s = -1


g_new1 (3 : 5): [ 0 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 1 0 0 ]
s = 1


g_new2 (3 : 5): [ 2 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 2 2 ]


g_toll1 (3 : 5): [ nan 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 3 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 4 4 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 4 4 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 3 3 ]
g_T1 (3 : 5): [ nan 3.614836360604185 3.614836360604185 ]


g_a (3 : 5): [ nan -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan -0.6148363606041851 -0.6148363606041851 ]


g_a (3 : 5): [ nan 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 2 2 ]
g_T1 (3 : 5): [ nan 3.614836360604185 3.614836360604185 ]


g_b (3 : 5): [ nan -1.614836360604185 -1.614836360604185 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan -1.614836360604185 -1.614836360604185 ]


g_b (3 : 5): [ nan 1.614836360604185 1.614836360604185 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ nan 0.6148363606041851 0.6148363606041851 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ nan 1.614836360604185 1.614836360604185 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0 0
	 0.6148363606041851 1.614836360604185
	 0.6148363606041851 1.614836360604185
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0 0
	 0.6148363606041851 1.614836360604185
	 0.6148363606041851 1.614836360604185
 ]


g_m (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
g_m (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
g_T1 (3 : 5): [ nan 3.614836360604185 3.614836360604185 ]


g_S1 (3 : 5): [ nan -0.4467246092252654 -0.4467246092252654 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan -0.3851636393958149 -0.3851636393958149 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ nan -0.3851636393958149 -0.3851636393958149 ]
val = 0

g_ind1 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ nan 0.6148363606041851 0.6148363606041851 ]
val = 0


g_ind2 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (2 : 5): [ 2 3 ]
g_ind2 (2 : 5): [ 2 3 ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 4): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (2 : 4): [ 2 3 ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ nan -0.4467246092252654 -0.4467246092252654 ]
g_indinf (2 : 4): [ 2 3 ]
val = -inf


g_S1 (3 : 5): [ nan -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ nan -inf -inf ]
g_ind (1 : 5): [ 1 ]
val = 0


g_S1 (3 : 5): [ 0 -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ 0 -inf -inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ 0 -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ 0 -inf -inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ 0 -inf -inf ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ 0 -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
g_m (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]


g_S1 (3 : 5): [ 0 -inf -inf ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 1 0 0 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.3224199317354524 0.3224199317354524 ]


g_a (3 : 5): [ 0.2132755425131789 -0.3224199317354524 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 0.2132755425131789 -0.3224199317354524 -0.3224199317354524 ]


g_a (3 : 5): [ 0.2132755425131789 0.3224199317354524 0.3224199317354524 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 2 1 1 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.3224199317354524 0.3224199317354524 ]


g_b (3 : 5): [ 1.213275542513179 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 1.213275542513179 0.6775800682645476 0.6775800682645476 ]


g_b (3 : 5): [ 1.213275542513179 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 0.7867244574868211 0.3224199317354524 0.3224199317354524 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.2132755425131789 0.3224199317354524 0.3224199317354524 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.2132755425131789 0.3224199317354524 0.3224199317354524 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 1.213275542513179 0.6775800682645476 0.6775800682645476 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 1.213275542513179 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.2132755425131789 0.3224199317354524 0.3224199317354524 ]
g_b (3 : 5): [ 1.213275542513179 0.6775800682645476 0.6775800682645476 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
 ]


g_m (3 : 5): [ 1.213275542513179 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.2132755425131789 0.3224199317354524 0.3224199317354524 ]
g_b (3 : 5): [ 1.213275542513179 0.6775800682645476 0.6775800682645476 ]
g_m (3 : 5): [ 1.213275542513179 0.6775800682645476 0.6775800682645476 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.3224199317354524 0.3224199317354524 ]


g_S2 (3 : 5): [ -1.542186124973118 -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.2132755425131789 0.3224199317354524 0.3224199317354524 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.6775800682645476 -0.6775800682645476 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.6775800682645476 -0.6775800682645476 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 1.213275542513179 0.6775800682645476 0.6775800682645476 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.2132755425131789 -0.3224199317354524 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 0.2132755425131789 -0.3224199317354524 -0.3224199317354524 ]
val = 0


g_ind2 (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (1 : 5): [ 1 ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (1 : 5): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (1 : 4): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 4): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 4): [ 1 ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -1.542186124973118 -2.101545225871788 -2.101545225871788 ]
g_indinf (1 : 4): [ 1 ]
val = -inf


g_S2 (3 : 5): [ -inf -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -inf -2.101545225871788 -2.101545225871788 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ -inf -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ -inf -2.101545225871788 -2.101545225871788 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -2.101545225871788 -2.101545225871788 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.2132755425131789 0.3224199317354524 0.3224199317354524 ]
g_b (3 : 5): [ 1.213275542513179 0.6775800682645476 0.6775800682645476 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ -inf -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ -inf -2.101545225871788 -2.101545225871788 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -2.101545225871788 -2.101545225871788 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.2132755425131789 0.3224199317354524 0.3224199317354524 ]
g_b (3 : 5): [ 1.213275542513179 0.6775800682645476 0.6775800682645476 ]
g_m (3 : 5): [ 1.213275542513179 0.6775800682645476 0.6775800682645476 ]


g_S2 (3 : 5): [ -inf -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 -inf -inf ]
g_S2 (3 : 5): [ -inf -2.101545225871788 -2.101545225871788 ]


Sc (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ -inf -inf -inf ]
div = 2.000


Sc (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (965 interne); stringhe deallocate: 0 (315 interne)

112: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ -inf -inf -inf ]
val = -inf


g_indok (0 : 5): [ ]
------------------------------ Fine which_v_indxne_d

114: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_indok (0 : 5): [ ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

121: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

122: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_indok (0 : 5): [ ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i



g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine setdiff_i

124: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ -inf -inf -inf ]
g_indok (0 : 5): [ ]


g_tmp_d1 (0 : 5): [ ]
------------------------------ Fine copia_v_indx_d

129: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ -inf -inf -inf ]
g_indInf (3 : 5): [ 1 2 3 ]
val = -1


Sc (3 : 5): [ -1 -1 -1 ]
------------------------------ Fine assegna1_vs_indx_d

145: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 1 1 2 1 ]
g_h (3 : 5): [ 1 2 4 ]


g_tmp_i1 (3 : 6): [ 0 1 2 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 2 ]
s = 1


g_S_new (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_T1 (3 : 5): [ 0 3.614836360604185 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 2 3 4 ]


g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_old1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 3 4 ]


g_old2 (3 : 5): [ 3 1 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 3 1 ]
s = -1


g_new1 (3 : 5): [ 0 2 0 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 3 1 0 ]
s = 1


g_new2 (3 : 5): [ 4 2 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_toll1 (3 : 5): [ nan 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 3 4 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 3 1 ]
g_T1 (3 : 5): [ 0 3.614836360604185 0.7867244574868211 ]


g_a (3 : 5): [ 1 -0.6148363606041851 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1 -0.6148363606041851 0.2132755425131789 ]


g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 2 0 ]
g_T1 (3 : 5): [ 0 3.614836360604185 0.7867244574868211 ]


g_b (3 : 5): [ 0 -1.614836360604185 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0 -1.614836360604185 -0.7867244574868211 ]


g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ 0 3.614836360604185 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.6148363606041851 1.614836360604185
	 0.2132755425131789 0.7867244574868211
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.6148363606041851 1.614836360604185
	 0.2132755425131789 0.7867244574868211
 ]


g_m (3 : 5): [ 1 1.614836360604185 0.7867244574868211 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
g_m (3 : 5): [ 1 1.614836360604185 0.7867244574868211 ]
g_T1 (3 : 5): [ 0 3.614836360604185 0.7867244574868211 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf -0.4467246092252654 -1 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan -0.3851636393958149 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ nan -0.3851636393958149 -0.7867244574868211 ]
val = 0

g_ind1 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan 0.6148363606041851 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ nan 0.6148363606041851 -0.2132755425131789 ]
val = 0


g_ind2 (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (2 : 5): [ 2 3 ]
g_ind2 (1 : 5): [ 2 ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 4): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 4): [ 2 ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf -0.4467246092252654 -1 ]
g_indinf (1 : 4): [ 2 ]
val = -inf


g_S1 (3 : 5): [ inf -inf -1 ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf -inf -1 ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf -inf -1 ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ inf -inf -1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf -inf -1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf -inf -1 ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf -inf -1 ]
val = inf


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf -inf -1 ]
g_ind (1 : 5): [ 1 ]
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
g_m (3 : 5): [ 1 1.614836360604185 0.7867244574868211 ]


g_S1 (3 : 5): [ 1 -inf -1 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 3 1 0 ]
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 ]


g_a (3 : 5): [ -0.6148363606041851 0.2132755425131789 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -0.6148363606041851 0.2132755425131789 -0.3224199317354524 ]


g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 4 2 1 ]
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 ]


g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]


g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
 ]


g_m (3 : 5): [ 0.6148363606041851 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
g_m (3 : 5): [ 0.6148363606041851 1.213275542513179 0.6775800682645476 ]
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 ]


g_S2 (3 : 5): [ 0.1700869138378981 -1.542186124973118 -2.101545225871788 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.7867244574868211 -0.6775800682645476 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.7867244574868211 -0.6775800682645476 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.6148363606041851 0.2132755425131789 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.6148363606041851 0.2132755425131789 -0.3224199317354524 ]
val = 0


g_ind2 (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (1 : 5): [ 2 ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (1 : 5): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 4): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 4): [ 2 ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.1700869138378981 -1.542186124973118 -2.101545225871788 ]
g_indinf (1 : 4): [ 2 ]
val = -inf


g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
g_m (3 : 5): [ 0.6148363606041851 1.213275542513179 0.6775800682645476 ]


g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 1 -inf -1 ]
g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]


Sc (3 : 5): [ 1.170086913837898 -inf -3.101545225871788 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 1.170086913837898 -inf -3.101545225871788 ]
div = 2.000


Sc (3 : 5): [ 0.5850434569189491 -inf -1.550772612935894 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (967 interne); stringhe deallocate: 0 (317 interne)

148: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.5850434569189491 -inf -1.550772612935894 ]
val = -inf


g_indok (2 : 5): [ 1 3 ]
------------------------------ Fine which_v_indxne_d

150: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 1 0 1
	 0 0 0
 ]
riga = 2
g_indok (2 : 5): [ 1 3 ]
val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 0 1
	 1 0 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

158: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

159: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_indok (2 : 5): [ 1 3 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 2


g_indInf (1 : 5): [ 2 ]
------------------------------ Fine elimina1_indx_i



g_indInf (1 : 5): [ 2 ]
------------------------------ Fine setdiff_i

161: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.5850434569189491 -inf -1.550772612935894 ]
g_indok (2 : 5): [ 1 3 ]


g_tmp_d1 (2 : 5): [ 0.5850434569189491 -1.550772612935894 ]
------------------------------ Fine copia_v_indx_d

165: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (2 : 5): [ 0.5850434569189491 -1.550772612935894 ]


min = -1.550772612935894
------------------------------ Fine min_v_d

166: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.5850434569189491 -inf -1.550772612935894 ]
g_indInf (1 : 5): [ 2 ]
val = -2.550772612935894


Sc (3 : 5): [ 0.5850434569189491 -2.550772612935894 -1.550772612935894 ]
------------------------------ Fine assegna1_vs_indx_d

176: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ -1 -1 -1 ]
Sc (3 : 5): [ 0.5850434569189491 -2.550772612935894 -1.550772612935894 ]


g_tmp_d1 (3 : 5): [ -0.4149565430810509 -3.550772612935894 -2.550772612935894 ]
------------------------------ Fine somma_vv_d

177: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0.5850434569189491 -2.550772612935894 -1.550772612935894
	 0 0 0
 ]
riga = 2
g_tmp_d1 (3 : 5): [ -0.4149565430810509 -3.550772612935894 -2.550772612935894 ]


ris (2 x 3 : 2 x 5): [
	 0.5850434569189491 -2.550772612935894 -1.550772612935894
	 -0.4149565430810509 -3.550772612935894 -2.550772612935894
 ]
------------------------------ Fine aggiungi_mv_riga_d


Stringhe allocate: 3 (967 interne); stringhe deallocate: 0 (317 interne)


*** Esco da probmod ***

346: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
------------------------------ Fine copia_m_i


***probmod***
63: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

65: InitMatr_i
g_checkIN (2 x 3 : 2 x 5): [
	 1 0 1
	 1 0 1
 ]
val = 0


g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

67: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 0.2233623046126327 0.2233623046126327 0.2233623046126327
	 2.223362304612633 2.223362304612633 2.223362304612633
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

69: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_M_in (2 : 2): [ 1 0 ]
------------------------------ Fine somma_righe_i

71: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_M_out (2 : 2): [ 0 1 ]
------------------------------ Fine somma_colonne_i

74: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

90: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

91: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

136: InitVett_d
Sc (3 : 5): [ -1 -1 -1 ]
val = 0


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

139: InitVett_i
g_tmp_i1 (3 : 6): [ 1 2 3 ]
val = 1


g_tmp_i1 (3 : 6): [ 1 1 1 ]
------------------------------ Fine InitVett_i

140: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_i1 (3 : 6): [ 1 1 1 ]


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_i

145: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 1 1 2 1 ]
g_h (3 : 5): [ 1 2 4 ]


g_tmp_i1 (3 : 6): [ 0 1 2 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 2 ]
s = 1


g_S_new (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_T1 (3 : 5): [ 0 3.614836360604185 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 2 3 4 ]


g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_old1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 3 4 ]


g_old2 (3 : 5): [ 3 1 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 3 1 ]
s = -1


g_new1 (3 : 5): [ 0 2 0 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 3 1 0 ]
s = 1


g_new2 (3 : 5): [ 4 2 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_toll1 (3 : 5): [ nan 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 3 4 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 3 1 ]
g_T1 (3 : 5): [ 0 3.614836360604185 0.7867244574868211 ]


g_a (3 : 5): [ 1 -0.6148363606041851 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1 -0.6148363606041851 0.2132755425131789 ]


g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 2 0 ]
g_T1 (3 : 5): [ 0 3.614836360604185 0.7867244574868211 ]


g_b (3 : 5): [ 0 -1.614836360604185 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0 -1.614836360604185 -0.7867244574868211 ]


g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ 0 3.614836360604185 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.6148363606041851 1.614836360604185
	 0.2132755425131789 0.7867244574868211
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.6148363606041851 1.614836360604185
	 0.2132755425131789 0.7867244574868211
 ]


g_m (3 : 5): [ 1 1.614836360604185 0.7867244574868211 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
g_m (3 : 5): [ 1 1.614836360604185 0.7867244574868211 ]
g_T1 (3 : 5): [ 0 3.614836360604185 0.7867244574868211 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf -0.4467246092252654 -1 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan -0.3851636393958149 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ nan -0.3851636393958149 -0.7867244574868211 ]
val = 0

g_ind1 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan 0.6148363606041851 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ nan 0.6148363606041851 -0.2132755425131789 ]
val = 0


g_ind2 (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (2 : 5): [ 2 3 ]
g_ind2 (1 : 5): [ 2 ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 4): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 4): [ 2 ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf -0.4467246092252654 -1 ]
g_indinf (1 : 4): [ 2 ]
val = -inf


g_S1 (3 : 5): [ inf -inf -1 ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf -inf -1 ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf -inf -1 ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ inf -inf -1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf -inf -1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf -inf -1 ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf -inf -1 ]
val = inf


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf -inf -1 ]
g_ind (1 : 5): [ 1 ]
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
g_m (3 : 5): [ 1 1.614836360604185 0.7867244574868211 ]


g_S1 (3 : 5): [ 1 -inf -1 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 3 1 0 ]
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 ]


g_a (3 : 5): [ -0.6148363606041851 0.2132755425131789 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -0.6148363606041851 0.2132755425131789 -0.3224199317354524 ]


g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 4 2 1 ]
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 ]


g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]


g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
 ]


g_m (3 : 5): [ 0.6148363606041851 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
g_m (3 : 5): [ 0.6148363606041851 1.213275542513179 0.6775800682645476 ]
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 ]


g_S2 (3 : 5): [ 0.1700869138378981 -1.542186124973118 -2.101545225871788 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.7867244574868211 -0.6775800682645476 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.7867244574868211 -0.6775800682645476 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.6148363606041851 0.2132755425131789 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.6148363606041851 0.2132755425131789 -0.3224199317354524 ]
val = 0


g_ind2 (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (1 : 5): [ 2 ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (1 : 5): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 4): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 4): [ 2 ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.1700869138378981 -1.542186124973118 -2.101545225871788 ]
g_indinf (1 : 4): [ 2 ]
val = -inf


g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.3224199317354524 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 0.6775800682645476 ]
g_m (3 : 5): [ 0.6148363606041851 1.213275542513179 0.6775800682645476 ]


g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 1 -inf -1 ]
g_S2 (3 : 5): [ 0.1700869138378981 -inf -2.101545225871788 ]


Sc (3 : 5): [ 1.170086913837898 -inf -3.101545225871788 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 1.170086913837898 -inf -3.101545225871788 ]
div = 2.000


Sc (3 : 5): [ 0.5850434569189491 -inf -1.550772612935894 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (969 interne); stringhe deallocate: 0 (319 interne)

148: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.5850434569189491 -inf -1.550772612935894 ]
val = -inf


g_indok (2 : 5): [ 1 3 ]
------------------------------ Fine which_v_indxne_d

150: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_indok (2 : 5): [ 1 3 ]
val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 0 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

158: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

159: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_indok (2 : 5): [ 1 3 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 2


g_indInf (1 : 5): [ 2 ]
------------------------------ Fine elimina1_indx_i



g_indInf (1 : 5): [ 2 ]
------------------------------ Fine setdiff_i

161: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.5850434569189491 -inf -1.550772612935894 ]
g_indok (2 : 5): [ 1 3 ]


g_tmp_d1 (2 : 5): [ 0.5850434569189491 -1.550772612935894 ]
------------------------------ Fine copia_v_indx_d

165: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (2 : 5): [ 0.5850434569189491 -1.550772612935894 ]


min = -1.550772612935894
------------------------------ Fine min_v_d

166: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.5850434569189491 -inf -1.550772612935894 ]
g_indInf (1 : 5): [ 2 ]
val = -2.550772612935894


Sc (3 : 5): [ 0.5850434569189491 -2.550772612935894 -1.550772612935894 ]
------------------------------ Fine assegna1_vs_indx_d

176: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ 0 0 0 ]
Sc (3 : 5): [ 0.5850434569189491 -2.550772612935894 -1.550772612935894 ]


g_tmp_d1 (3 : 5): [ 0.5850434569189491 -2.550772612935894 -1.550772612935894 ]
------------------------------ Fine somma_vv_d

177: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_d1 (3 : 5): [ 0.5850434569189491 -2.550772612935894 -1.550772612935894 ]


ris (2 x 3 : 2 x 5): [
	 0.5850434569189491 -2.550772612935894 -1.550772612935894
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

90: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

91: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

109: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 1 2 1 1 ]
g_h (3 : 5): [ 1 2 4 ]


g_tmp_i1 (3 : 6): [ 0 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 1 ]
s = 1


g_S_new (3 : 5): [ 1 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 2 2 ]


g_T1 (3 : 5): [ nan 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 2 3 3 ]


g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 2 2 ]


g_old1 (3 : 5): [ 1 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 3 3 ]


g_old2 (3 : 5): [ 3 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 3 3 ]
s = -1


g_new1 (3 : 5): [ 0 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 3 1 1 ]
s = 1


g_new2 (3 : 5): [ 4 2 2 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 2 2 ]


g_toll1 (3 : 5): [ nan 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 3 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 3 3 ]
g_T1 (3 : 5): [ nan 3.614836360604185 3.614836360604185 ]


g_a (3 : 5): [ nan -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan -0.6148363606041851 -0.6148363606041851 ]


g_a (3 : 5): [ nan 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 2 2 ]
g_T1 (3 : 5): [ nan 3.614836360604185 3.614836360604185 ]


g_b (3 : 5): [ nan -1.614836360604185 -1.614836360604185 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan -1.614836360604185 -1.614836360604185 ]


g_b (3 : 5): [ nan 1.614836360604185 1.614836360604185 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ nan 0.6148363606041851 0.6148363606041851 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ nan 1.614836360604185 1.614836360604185 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0 0
	 0.6148363606041851 1.614836360604185
	 0.6148363606041851 1.614836360604185
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0 0
	 0.6148363606041851 1.614836360604185
	 0.6148363606041851 1.614836360604185
 ]


g_m (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
g_m (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
g_T1 (3 : 5): [ nan 3.614836360604185 3.614836360604185 ]


g_S1 (3 : 5): [ nan -0.4467246092252654 -0.4467246092252654 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan -0.3851636393958149 -0.3851636393958149 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ nan -0.3851636393958149 -0.3851636393958149 ]
val = 0

g_ind1 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ nan 0.6148363606041851 0.6148363606041851 ]
val = 0


g_ind2 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (2 : 5): [ 2 3 ]
g_ind2 (2 : 5): [ 2 3 ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 4): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (2 : 4): [ 2 3 ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ nan -0.4467246092252654 -0.4467246092252654 ]
g_indinf (2 : 4): [ 2 3 ]
val = -inf


g_S1 (3 : 5): [ nan -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ nan -inf -inf ]
g_ind (1 : 5): [ 1 ]
val = 0


g_S1 (3 : 5): [ 0 -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ 0 -inf -inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ 0 -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ 0 -inf -inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ 0 -inf -inf ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ 0 -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
g_m (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]


g_S1 (3 : 5): [ 0 -inf -inf ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 3 1 1 ]
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.7867244574868211 ]


g_a (3 : 5): [ -0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -0.6148363606041851 0.2132755425131789 0.2132755425131789 ]


g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 4 2 2 ]
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.7867244574868211 ]


g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]


g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.2132755425131789 1.213275542513179
	 0.2132755425131789 1.213275542513179
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.2132755425131789 1.213275542513179
	 0.2132755425131789 1.213275542513179
 ]


g_m (3 : 5): [ 0.6148363606041851 1.213275542513179 1.213275542513179 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
g_m (3 : 5): [ 0.6148363606041851 1.213275542513179 1.213275542513179 ]
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.7867244574868211 ]


g_S2 (3 : 5): [ 0.1700869138378981 -1.542186124973118 -1.542186124973118 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.7867244574868211 -0.7867244574868211 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
val = 0


g_ind2 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (2 : 5): [ 2 3 ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 4): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (2 : 4): [ 2 3 ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.1700869138378981 -1.542186124973118 -1.542186124973118 ]
g_indinf (2 : 4): [ 2 3 ]
val = -inf


g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
g_m (3 : 5): [ 0.6148363606041851 1.213275542513179 1.213275542513179 ]


g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 -inf -inf ]
g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]


Sc (3 : 5): [ 0.1700869138378981 -inf -inf ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 0.1700869138378981 -inf -inf ]
div = 2.000


Sc (3 : 5): [ 0.08504345691894905 -inf -inf ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (970 interne); stringhe deallocate: 0 (320 interne)

112: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.08504345691894905 -inf -inf ]
val = -inf


g_indok (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxne_d

114: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_indok (1 : 5): [ 1 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

121: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

122: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_indok (1 : 5): [ 1 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i



g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine setdiff_i

124: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.08504345691894905 -inf -inf ]
g_indok (1 : 5): [ 1 ]


g_tmp_d1 (1 : 5): [ 0.08504345691894905 ]
------------------------------ Fine copia_v_indx_d

128: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (1 : 5): [ 0.08504345691894905 ]


min = 0.08504345691894905
------------------------------ Fine min_v_d

129: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.08504345691894905 -inf -inf ]
g_indInf (2 : 5): [ 2 3 ]
val = -1


Sc (3 : 5): [ 0.08504345691894905 -1 -1 ]
------------------------------ Fine assegna1_vs_indx_d

172: InitVett_d
Sc (3 : 5): [ 0.5850434569189491 -2.550772612935894 -1.550772612935894 ]
val = 0


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

173: aggiungi_ms_riga_i	<=>	m[riga,] <- val # riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 1 0 1
	 0 0 0
 ]
riga = 2, val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 0 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_ms_riga_i

176: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ 0.08504345691894905 -1 -1 ]
Sc (3 : 5): [ 0 0 0 ]


g_tmp_d1 (3 : 5): [ 0.08504345691894905 -1 -1 ]
------------------------------ Fine somma_vv_d

177: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0.5850434569189491 -2.550772612935894 -1.550772612935894
	 0 0 0
 ]
riga = 2
g_tmp_d1 (3 : 5): [ 0.08504345691894905 -1 -1 ]


ris (2 x 3 : 2 x 5): [
	 0.5850434569189491 -2.550772612935894 -1.550772612935894
	 0.08504345691894905 -1 -1
 ]
------------------------------ Fine aggiungi_mv_riga_d

185: somma_m_d	<=>	ris <- sum(m)
ris (2 x 3 : 2 x 5): [
	 0.5850434569189491 -2.550772612935894 -1.550772612935894
	 0.08504345691894905 -1 -1
 ]


ris: -5.43145831203389
------------------------------ Fine somma_m_d

190: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 0 1
	 1 1 1
 ]


g_aus (3 : 5): [ 2 1 2 ]
------------------------------ Fine somma_colonne_i

192: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (3 : 5): [ 2 1 2 ]
val = 0


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

203: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 0 1
	 1 1 1
 ]


g_rs (2 : 2): [ 2 3 ]
------------------------------ Fine somma_righe_i

205: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 2 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

218: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 0 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (2 : 10): [ 1 3 ]
------------------------------ Fine which_m_rowindxne_i

220: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
g_I_add (2 : 10): [ 1 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (2 : 2): [ 1 3 ]


ris (2 : 2): [ 1 3 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 3 ]
------------------------------ Fine unione1_i

218: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 0 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

220: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (5 : 5): [ 1 3 1 2 3 ]


ris (3 : 5): [ 1 3 2 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 5): [ 1 3 2 ]
------------------------------ Fine unione1_i

233: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 0 0
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 0 0
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 0 0
 ]
------------------------------ Fine assegna1_mindxlt_i

235: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 0 0
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 0 0
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 0 0
 ]
------------------------------ Fine assegna1_m_indxgt_i

237: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 0 0
 ]


g_aus (3 : 5): [ 2 1 1 ]
------------------------------ Fine somma_colonne_i

239: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (3 : 5): [ 2 1 1 ]
val = 0


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

249: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 0 0
 ]


g_rs (2 : 2): [ 3 1 ]
------------------------------ Fine somma_righe_i

251: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 1 ]
decr = 0


g_ord_ind (2 : 2): [ 2 1 ]
------------------------------ Fine ordine_i

263: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 0 0
 ]
r = 2
val = 0


g_I_add (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_i

265: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 5): [ ]
g_I_add (1 : 10): [ 1 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (1 : 1): [ 1 ]


ris (1 : 1): [ 1 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 1 ]
------------------------------ Fine unione1_i

263: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 0 0
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

265: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 1 ]
g_I_add (3 : 10): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (4 : 4): [ 1 1 2 3 ]


ris (3 : 4): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 4): [ 1 2 3 ]
------------------------------ Fine unione1_i


Stringhe allocate: 3 (1010 interne); stringhe deallocate: 0 (360 interne)


*** Esco da probmod ***

362: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_mod3 (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
------------------------------ Fine copia_m_i


***probmod***
63: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 0 0
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

65: InitMatr_i
g_checkIN (2 x 3 : 2 x 5): [
	 1 0 1
	 1 1 1
 ]
val = 0


g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

67: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 2.223362304612633 2.223362304612633 2.223362304612633
	 2.223362304612633 2.223362304612633 2.223362304612633
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

69: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_mod3 (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_M_in (2 : 2): [ 0 2 ]
------------------------------ Fine somma_righe_i

71: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod3 (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_M_out (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

74: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

90: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

91: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

109: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 1 2 1 1 ]
g_h (3 : 5): [ 1 2 4 ]


g_tmp_i1 (3 : 6): [ 0 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 1 ]
s = 1


g_S_new (3 : 5): [ 1 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 2 2 ]


g_T1 (3 : 5): [ nan 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 2 3 3 ]


g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 2 2 ]


g_old1 (3 : 5): [ 1 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 3 3 ]


g_old2 (3 : 5): [ 3 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 3 3 ]
s = -1


g_new1 (3 : 5): [ 0 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 3 1 1 ]
s = 1


g_new2 (3 : 5): [ 4 2 2 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 2 2 ]


g_toll1 (3 : 5): [ nan 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 3 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 3 3 ]
g_T1 (3 : 5): [ nan 3.614836360604185 3.614836360604185 ]


g_a (3 : 5): [ nan -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan -0.6148363606041851 -0.6148363606041851 ]


g_a (3 : 5): [ nan 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 2 2 ]
g_T1 (3 : 5): [ nan 3.614836360604185 3.614836360604185 ]


g_b (3 : 5): [ nan -1.614836360604185 -1.614836360604185 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan -1.614836360604185 -1.614836360604185 ]


g_b (3 : 5): [ nan 1.614836360604185 1.614836360604185 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ nan 0.6148363606041851 0.6148363606041851 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ nan 1.614836360604185 1.614836360604185 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0 0
	 0.6148363606041851 1.614836360604185
	 0.6148363606041851 1.614836360604185
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0 0
	 0.6148363606041851 1.614836360604185
	 0.6148363606041851 1.614836360604185
 ]


g_m (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
g_m (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
g_T1 (3 : 5): [ nan 3.614836360604185 3.614836360604185 ]


g_S1 (3 : 5): [ nan -0.4467246092252654 -0.4467246092252654 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan -0.3851636393958149 -0.3851636393958149 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ nan -0.3851636393958149 -0.3851636393958149 ]
val = 0

g_ind1 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ nan 0.6148363606041851 0.6148363606041851 ]
val = 0


g_ind2 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (2 : 5): [ 2 3 ]
g_ind2 (2 : 5): [ 2 3 ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 4): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (2 : 4): [ 2 3 ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ nan -0.4467246092252654 -0.4467246092252654 ]
g_indinf (2 : 4): [ 2 3 ]
val = -inf


g_S1 (3 : 5): [ nan -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ nan -inf -inf ]
g_ind (1 : 5): [ 1 ]
val = 0


g_S1 (3 : 5): [ 0 -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ 0 -inf -inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ 0 -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ 0 -inf -inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ 0 -inf -inf ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ 0 -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
g_m (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]


g_S1 (3 : 5): [ 0 -inf -inf ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 3 1 1 ]
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.7867244574868211 ]


g_a (3 : 5): [ -0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -0.6148363606041851 0.2132755425131789 0.2132755425131789 ]


g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 4 2 2 ]
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.7867244574868211 ]


g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]


g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.2132755425131789 1.213275542513179
	 0.2132755425131789 1.213275542513179
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.2132755425131789 1.213275542513179
	 0.2132755425131789 1.213275542513179
 ]


g_m (3 : 5): [ 0.6148363606041851 1.213275542513179 1.213275542513179 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
g_m (3 : 5): [ 0.6148363606041851 1.213275542513179 1.213275542513179 ]
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.7867244574868211 ]


g_S2 (3 : 5): [ 0.1700869138378981 -1.542186124973118 -1.542186124973118 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.7867244574868211 -0.7867244574868211 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
val = 0


g_ind2 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (2 : 5): [ 2 3 ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 4): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (2 : 4): [ 2 3 ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.1700869138378981 -1.542186124973118 -1.542186124973118 ]
g_indinf (2 : 4): [ 2 3 ]
val = -inf


g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
g_m (3 : 5): [ 0.6148363606041851 1.213275542513179 1.213275542513179 ]


g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 -inf -inf ]
g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]


Sc (3 : 5): [ 0.1700869138378981 -inf -inf ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 0.1700869138378981 -inf -inf ]
div = 2.000


Sc (3 : 5): [ 0.08504345691894905 -inf -inf ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (1011 interne); stringhe deallocate: 0 (361 interne)

112: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.08504345691894905 -inf -inf ]
val = -inf


g_indok (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxne_d

114: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_indok (1 : 5): [ 1 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 0 0
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

121: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

122: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_indok (1 : 5): [ 1 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i



g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine setdiff_i

124: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.08504345691894905 -inf -inf ]
g_indok (1 : 5): [ 1 ]


g_tmp_d1 (1 : 5): [ 0.08504345691894905 ]
------------------------------ Fine copia_v_indx_d

128: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (1 : 5): [ 0.08504345691894905 ]


min = 0.08504345691894905
------------------------------ Fine min_v_d

129: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.08504345691894905 -inf -inf ]
g_indInf (2 : 5): [ 2 3 ]
val = -1


Sc (3 : 5): [ 0.08504345691894905 -1 -1 ]
------------------------------ Fine assegna1_vs_indx_d

172: InitVett_d
Sc (3 : 5): [ 0 0 0 ]
val = 0


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

173: aggiungi_ms_riga_i	<=>	m[riga,] <- val # riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1, val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_ms_riga_i

176: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ 0.08504345691894905 -1 -1 ]
Sc (3 : 5): [ 0 0 0 ]


g_tmp_d1 (3 : 5): [ 0.08504345691894905 -1 -1 ]
------------------------------ Fine somma_vv_d

177: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_d1 (3 : 5): [ 0.08504345691894905 -1 -1 ]


ris (2 x 3 : 2 x 5): [
	 0.08504345691894905 -1 -1
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

90: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 2


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

91: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

109: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 1 2 1 1 ]
g_h (3 : 5): [ 1 2 4 ]


g_tmp_i1 (3 : 6): [ 0 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 1 ]
s = 1


g_S_new (3 : 5): [ 1 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 2 2 ]


g_T1 (3 : 5): [ nan 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 2 3 3 ]


g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 2 2 ]


g_old1 (3 : 5): [ 1 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 3 3 ]


g_old2 (3 : 5): [ 3 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 3 3 ]
s = -1


g_new1 (3 : 5): [ 0 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 3 1 1 ]
s = 1


g_new2 (3 : 5): [ 4 2 2 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 2 2 ]


g_toll1 (3 : 5): [ nan 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 3 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 3 3 ]
g_T1 (3 : 5): [ nan 3.614836360604185 3.614836360604185 ]


g_a (3 : 5): [ nan -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan -0.6148363606041851 -0.6148363606041851 ]


g_a (3 : 5): [ nan 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 2 2 ]
g_T1 (3 : 5): [ nan 3.614836360604185 3.614836360604185 ]


g_b (3 : 5): [ nan -1.614836360604185 -1.614836360604185 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan -1.614836360604185 -1.614836360604185 ]


g_b (3 : 5): [ nan 1.614836360604185 1.614836360604185 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ nan 0.6148363606041851 0.6148363606041851 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ nan 1.614836360604185 1.614836360604185 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0 0
	 0.6148363606041851 1.614836360604185
	 0.6148363606041851 1.614836360604185
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0 0
	 0.6148363606041851 1.614836360604185
	 0.6148363606041851 1.614836360604185
 ]


g_m (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
g_m (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
g_T1 (3 : 5): [ nan 3.614836360604185 3.614836360604185 ]


g_S1 (3 : 5): [ nan -0.4467246092252654 -0.4467246092252654 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan -0.3851636393958149 -0.3851636393958149 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ nan -0.3851636393958149 -0.3851636393958149 ]
val = 0

g_ind1 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ nan 0.6148363606041851 0.6148363606041851 ]
val = 0


g_ind2 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (2 : 5): [ 2 3 ]
g_ind2 (2 : 5): [ 2 3 ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 4): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (2 : 4): [ 2 3 ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ nan -0.4467246092252654 -0.4467246092252654 ]
g_indinf (2 : 4): [ 2 3 ]
val = -inf


g_S1 (3 : 5): [ nan -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ nan -inf -inf ]
g_ind (1 : 5): [ 1 ]
val = 0


g_S1 (3 : 5): [ 0 -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ 0 -inf -inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ 0 -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ 0 -inf -inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ 0 -inf -inf ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ 0 -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0 0.6148363606041851 0.6148363606041851 ]
g_b (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]
g_m (3 : 5): [ 0 1.614836360604185 1.614836360604185 ]


g_S1 (3 : 5): [ 0 -inf -inf ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 3 1 1 ]
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.7867244574868211 ]


g_a (3 : 5): [ -0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -0.6148363606041851 0.2132755425131789 0.2132755425131789 ]


g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 4 2 2 ]
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.7867244574868211 ]


g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]


g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.2132755425131789 1.213275542513179
	 0.2132755425131789 1.213275542513179
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.2132755425131789 1.213275542513179
	 0.2132755425131789 1.213275542513179
 ]


g_m (3 : 5): [ 0.6148363606041851 1.213275542513179 1.213275542513179 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
g_m (3 : 5): [ 0.6148363606041851 1.213275542513179 1.213275542513179 ]
g_T2 (3 : 5): [ 3.614836360604185 0.7867244574868211 0.7867244574868211 ]


g_S2 (3 : 5): [ 0.1700869138378981 -1.542186124973118 -1.542186124973118 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.7867244574868211 -0.7867244574868211 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
val = 0


g_ind2 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (2 : 5): [ 2 3 ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 4): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (2 : 4): [ 2 3 ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.1700869138378981 -1.542186124973118 -1.542186124973118 ]
g_indinf (2 : 4): [ 2 3 ]
val = -inf


g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.6148363606041851 0.2132755425131789 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 1.213275542513179 1.213275542513179 ]
g_m (3 : 5): [ 0.6148363606041851 1.213275542513179 1.213275542513179 ]


g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 -inf -inf ]
g_S2 (3 : 5): [ 0.1700869138378981 -inf -inf ]


Sc (3 : 5): [ 0.1700869138378981 -inf -inf ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 0.1700869138378981 -inf -inf ]
div = 2.000


Sc (3 : 5): [ 0.08504345691894905 -inf -inf ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (1012 interne); stringhe deallocate: 0 (362 interne)

112: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.08504345691894905 -inf -inf ]
val = -inf


g_indok (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxne_d

114: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 1 0 0
	 0 0 0
 ]
riga = 2
g_indok (1 : 5): [ 1 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 0 0
	 1 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

121: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

122: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_indok (1 : 5): [ 1 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i



g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine setdiff_i

124: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.08504345691894905 -inf -inf ]
g_indok (1 : 5): [ 1 ]


g_tmp_d1 (1 : 5): [ 0.08504345691894905 ]
------------------------------ Fine copia_v_indx_d

128: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (1 : 5): [ 0.08504345691894905 ]


min = 0.08504345691894905
------------------------------ Fine min_v_d

129: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.08504345691894905 -inf -inf ]
g_indInf (2 : 5): [ 2 3 ]
val = -1


Sc (3 : 5): [ 0.08504345691894905 -1 -1 ]
------------------------------ Fine assegna1_vs_indx_d

145: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 1 1 2 1 ]
g_h (3 : 5): [ 1 2 4 ]


g_tmp_i1 (3 : 6): [ 0 1 2 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 2 ]
s = 2


g_S_new (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_T1 (3 : 5): [ 0 3.614836360604185 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 3 4 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 4 5 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 3 4 5 ]


g_T2 (3 : 5): [ 0.7867244574868211 0.3224199317354524 0.1712208549059974 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_old1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 3 4 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 4 5 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 4 5 ]


g_old2 (3 : 5): [ 1 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 3 1 ]
s = -1


g_new1 (3 : 5): [ 0 2 0 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 1 0 0 ]
s = 1


g_new2 (3 : 5): [ 2 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_toll1 (3 : 5): [ nan 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 3 4 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 4 5 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 4 5 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 3 1 ]
g_T1 (3 : 5): [ 0 3.614836360604185 0.7867244574868211 ]


g_a (3 : 5): [ 1 -0.6148363606041851 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1 -0.6148363606041851 0.2132755425131789 ]


g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 2 0 ]
g_T1 (3 : 5): [ 0 3.614836360604185 0.7867244574868211 ]


g_b (3 : 5): [ 0 -1.614836360604185 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0 -1.614836360604185 -0.7867244574868211 ]


g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ 0 3.614836360604185 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.6148363606041851 1.614836360604185
	 0.2132755425131789 0.7867244574868211
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.6148363606041851 1.614836360604185
	 0.2132755425131789 0.7867244574868211
 ]


g_m (3 : 5): [ 1 1.614836360604185 0.7867244574868211 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
g_m (3 : 5): [ 1 1.614836360604185 0.7867244574868211 ]
g_T1 (3 : 5): [ 0 3.614836360604185 0.7867244574868211 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf -0.4467246092252654 -1 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan -0.3851636393958149 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ nan -0.3851636393958149 -0.7867244574868211 ]
val = 0

g_ind1 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan 0.6148363606041851 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ nan 0.6148363606041851 -0.2132755425131789 ]
val = 0


g_ind2 (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (2 : 5): [ 2 3 ]
g_ind2 (1 : 5): [ 2 ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 4): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 4): [ 2 ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf -0.4467246092252654 -1 ]
g_indinf (1 : 4): [ 2 ]
val = -inf


g_S1 (3 : 5): [ inf -inf -1 ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf -inf -1 ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf -inf -1 ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ inf -inf -1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf -inf -1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf -inf -1 ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf -inf -1 ]
val = inf


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf -inf -1 ]
g_ind (1 : 5): [ 1 ]
g_a (3 : 5): [ 1 0.6148363606041851 0.2132755425131789 ]
g_b (3 : 5): [ 0 1.614836360604185 0.7867244574868211 ]
g_m (3 : 5): [ 1 1.614836360604185 0.7867244574868211 ]


g_S1 (3 : 5): [ 1 -inf -1 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 1 0 0 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.3224199317354524 0.1712208549059974 ]


g_a (3 : 5): [ 0.2132755425131789 -0.3224199317354524 -0.1712208549059974 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 0.2132755425131789 -0.3224199317354524 -0.1712208549059974 ]


g_a (3 : 5): [ 0.2132755425131789 0.3224199317354524 0.1712208549059974 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 2 1 1 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.3224199317354524 0.1712208549059974 ]


g_b (3 : 5): [ 1.213275542513179 0.6775800682645476 0.8287791450940025 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 1.213275542513179 0.6775800682645476 0.8287791450940025 ]


g_b (3 : 5): [ 1.213275542513179 0.6775800682645476 0.8287791450940025 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 0.7867244574868211 0.3224199317354524 0.1712208549059974 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.2132755425131789 0.3224199317354524 0.1712208549059974 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.2132755425131789 0.3224199317354524 0.1712208549059974 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 1.213275542513179 0.6775800682645476 0.8287791450940025 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 1.213275542513179 0.6775800682645476 0.8287791450940025 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.2132755425131789 0.3224199317354524 0.1712208549059974 ]
g_b (3 : 5): [ 1.213275542513179 0.6775800682645476 0.8287791450940025 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
	 0.1712208549059974 0.8287791450940025
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
	 0.1712208549059974 0.8287791450940025
 ]


g_m (3 : 5): [ 1.213275542513179 0.6775800682645476 0.8287791450940025 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.2132755425131789 0.3224199317354524 0.1712208549059974 ]
g_b (3 : 5): [ 1.213275542513179 0.6775800682645476 0.8287791450940025 ]
g_m (3 : 5): [ 1.213275542513179 0.6775800682645476 0.8287791450940025 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.3224199317354524 0.1712208549059974 ]


g_S2 (3 : 5): [ -1.542186124973118 -2.101545225871788 -4.840410039705815 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.2132755425131789 0.3224199317354524 0.1712208549059974 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.6775800682645476 -0.8287791450940025 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.6775800682645476 -0.8287791450940025 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 1.213275542513179 0.6775800682645476 0.8287791450940025 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.2132755425131789 -0.3224199317354524 -0.1712208549059975 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 0.2132755425131789 -0.3224199317354524 -0.1712208549059975 ]
val = 0


g_ind2 (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (1 : 5): [ 1 ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (1 : 5): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (1 : 4): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 4): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 4): [ 1 ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -1.542186124973118 -2.101545225871788 -4.840410039705815 ]
g_indinf (1 : 4): [ 1 ]
val = -inf


g_S2 (3 : 5): [ -inf -2.101545225871788 -4.840410039705815 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -inf -2.101545225871788 -4.840410039705815 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ -inf -2.101545225871788 -4.840410039705815 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ -inf -2.101545225871788 -4.840410039705815 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -2.101545225871788 -4.840410039705815 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.2132755425131789 0.3224199317354524 0.1712208549059974 ]
g_b (3 : 5): [ 1.213275542513179 0.6775800682645476 0.8287791450940025 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ -inf -2.101545225871788 -4.840410039705815 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ -inf -2.101545225871788 -4.840410039705815 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 0
ATTENZIONE (rep_s_d, scoremodular.c # 163): zero ripetizioni!


g_tmp1_d (0 : 5): [ ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -2.101545225871788 -4.840410039705815 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.2132755425131789 0.3224199317354524 0.1712208549059974 ]
g_b (3 : 5): [ 1.213275542513179 0.6775800682645476 0.8287791450940025 ]
g_m (3 : 5): [ 1.213275542513179 0.6775800682645476 0.8287791450940025 ]


g_S2 (3 : 5): [ -inf -2.101545225871788 -4.840410039705815 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 1 -inf -1 ]
g_S2 (3 : 5): [ -inf -2.101545225871788 -4.840410039705815 ]


Sc (3 : 5): [ -inf -inf -5.840410039705815 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ -inf -inf -5.840410039705815 ]
div = 2.000


Sc (3 : 5): [ -inf -inf -2.920205019852907 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (1014 interne); stringhe deallocate: 0 (364 interne)

148: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ -inf -inf -2.920205019852907 ]
val = -inf


g_indok (1 : 5): [ 3 ]
------------------------------ Fine which_v_indxne_d

150: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_indok (1 : 5): [ 3 ]
val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

158: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

159: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_indok (1 : 5): [ 3 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 1 2 3 ]


indx = 3
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 3


g_indInf (2 : 5): [ 1 2 ]
------------------------------ Fine elimina1_indx_i



g_indInf (2 : 5): [ 1 2 ]
------------------------------ Fine setdiff_i

161: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ -inf -inf -2.920205019852907 ]
g_indok (1 : 5): [ 3 ]


g_tmp_d1 (1 : 5): [ -2.920205019852907 ]
------------------------------ Fine copia_v_indx_d

165: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (1 : 5): [ -2.920205019852907 ]


min = -2.920205019852907
------------------------------ Fine min_v_d

166: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ -inf -inf -2.920205019852907 ]
g_indInf (2 : 5): [ 1 2 ]
val = -3.920205019852907


Sc (3 : 5): [ -3.920205019852907 -3.920205019852907 -2.920205019852907 ]
------------------------------ Fine assegna1_vs_indx_d

176: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ 0.08504345691894905 -1 -1 ]
Sc (3 : 5): [ -3.920205019852907 -3.920205019852907 -2.920205019852907 ]


g_tmp_d1 (3 : 5): [ -3.835161562933958 -4.920205019852908 -3.920205019852907 ]
------------------------------ Fine somma_vv_d

177: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0.08504345691894905 -1 -1
	 0 0 0
 ]
riga = 2
g_tmp_d1 (3 : 5): [ -3.835161562933958 -4.920205019852908 -3.920205019852907 ]


ris (2 x 3 : 2 x 5): [
	 0.08504345691894905 -1 -1
	 -3.835161562933958 -4.920205019852908 -3.920205019852907
 ]
------------------------------ Fine aggiungi_mv_riga_d

185: somma_m_d	<=>	ris <- sum(m)
ris (2 x 3 : 2 x 5): [
	 0.08504345691894905 -1 -1
	 -3.835161562933958 -4.920205019852908 -3.920205019852907
 ]


ris: -14.59052814572082
------------------------------ Fine somma_m_d

190: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 1
 ]


g_aus (3 : 5): [ 1 1 2 ]
------------------------------ Fine somma_colonne_i

192: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (3 : 5): [ 1 1 2 ]
val = 0


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

203: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 1
 ]


g_rs (2 : 2): [ 3 1 ]
------------------------------ Fine somma_righe_i

205: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 1 ]
decr = 0


g_ord_ind (2 : 2): [ 2 1 ]
------------------------------ Fine ordine_i

218: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 1
 ]
r = 2
val = 0


g_I_add (1 : 10): [ 3 ]
------------------------------ Fine which_m_rowindxne_i

220: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 4): [ ]
g_I_add (1 : 10): [ 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (1 : 1): [ 3 ]


ris (1 : 1): [ 3 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 3 ]
------------------------------ Fine unione1_i

218: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

220: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (4 : 4): [ 3 1 2 3 ]


ris (3 : 4): [ 3 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 4): [ 3 1 2 ]
------------------------------ Fine unione1_i

233: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 0 0
	 1 0 0
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 0 0
	 1 0 0
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 1 0 0
	 1 0 0
 ]
------------------------------ Fine assegna1_mindxlt_i

235: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 0 0
	 1 0 0
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 0 0
	 1 0 0
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 0 0
	 1 0 0
 ]
------------------------------ Fine assegna1_m_indxgt_i

237: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 0 0
	 1 0 0
 ]


g_aus (3 : 5): [ 2 0 0 ]
------------------------------ Fine somma_colonne_i

239: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (3 : 5): [ 2 0 0 ]
val = 0


g_tmp_i1 (1 : 6): [ 1 ]
------------------------------ Fine which_v_indxne_i


Stringhe allocate: 3 (1034 interne); stringhe deallocate: 0 (384 interne)


*** Esco da probmod ***

375: vettore3s_d		<=>	ris <- c(el1, el2, el3)
el1 = nan, el2 = -2.715729156016945, el3 = nan


g_pm (3 : 3): [ nan -2.715729156016945 nan ]
------------------------------ Fine vettore3s_d

376: copia_v_d	<=>	ris[st:end] <- v[st:end]
g_pm (3 : 3): [ nan -2.715729156016945 nan ]
st = 1
end = 3


g_prob_mod (3 : 3): [ nan -2.715729156016945 nan ]
------------------------------ Fine copia_v_d

378: assegna1_v_indxNA_d	<=>	v1[which(is.na(v2))] <- val oppure v1[which(!is.na(v2))] <- val
g_prob_mod (3 : 3): [ nan -2.715729156016945 nan ]
g_prob_mod (3 : 3): [ nan -2.715729156016945 nan ]
val = 0
complemento = 0


g_prob_mod (3 : 3): [ 0 -2.715729156016945 0 ]
------------------------------ Fine assegna1_v_indxNA_d

380: min_v_d	<=>	ris <- min(v)
g_prob_mod (3 : 3): [ 0 -2.715729156016945 0 ]


min = -2.715729156016945
------------------------------ Fine min_v_d

383: somma1_vs_d	<=>	v <- v + s
g_prob_mod (3 : 3): [ 0 -2.715729156016945 0 ]
s = 2.826840267128056


g_prob_mod (3 : 3): [ 2.826840267128056 0.1111111111111112 2.826840267128056 ]
------------------------------ Fine somma1_vs_d

385: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_pm (3 : 3): [ nan -2.715729156016945 nan ]
complemento = 0


g_tmp1_i (2 : 11): [ 1 3 ]
------------------------------ Fine which_v_indxNA_d

386: assegna1_v_indx_d	<=>	v[indx] <- val
g_prob_mod (3 : 3): [ 2.826840267128056 0.1111111111111112 2.826840267128056 ]
g_tmp1_i (2 : 11): [ 1 3 ]
val = 0


g_prob_mod (3 : 3): [ 0 0.1111111111111112 0 ]
------------------------------ Fine assegna1_v_indx_d

388: which_v_indxne_d	<=>	ris <- which(v != val)
g_prob_mod (3 : 3): [ 0 0.1111111111111112 0 ]
val = 0


g_ind (1 : 3): [ 2 ]
------------------------------ Fine which_v_indxne_d

392: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_prob_mod (3 : 3): [ 0 0.1111111111111112 0 ]
canc_NA = 0



ris: 0.1111111111111112
------------------------------ Fine somma_v_d

392: dividi1_vs_d	<=>	v <- v / div
g_prob_mod (3 : 3): [ 0 0.1111111111111112 0 ]
div = 0.111


g_prob_mod (3 : 3): [ 0 1 0 ]
------------------------------ Fine dividi1_vs_d

394: vettore3s_i		<=>	ris <- c(el1, el2, el3)
el1 = 1, el2 = 2, el3 = 3


g_tmp1_i (3 : 11): [ 1 2 3 ]
------------------------------ Fine vettore3s_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (3 : 11): [ 1 2 3 ]
k = 1, replace = 0
g_prob_mod (3 : 3): [ 0 1 0 ]


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 3 (1034 interne); stringhe deallocate: 0 (384 interne)

409: copia_m_i	<=>	ris <- da
g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_M (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
------------------------------ Fine copia_m_i

410: copia_m_d	<=>	ris <- da
ris (2 x 3 : 2 x 5): [
	 0.5850434569189491 -2.550772612935894 -1.550772612935894
	 0.08504345691894905 -1 -1
 ]


g_Sc (2 x 3 : 2 x 5): [
	 0.5850434569189491 -2.550772612935894 -1.550772612935894
	 0.08504345691894905 -1 -1
 ]
------------------------------ Fine copia_m_d

414: copia_v_i	<=>	ris[st:end] <- v[st:end]
VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]
st = 1
end = 2


g_hubs (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

438: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0.1428571428571429 0 0 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 ]
canc_NA = 0



ris: 0.7142857142857144
------------------------------ Fine somma_v_d

438: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0.1428571428571429 0 0 0.1428571428571429 0.1428571428571429 0.1428571428571429 0.1428571428571429 ]
div = 0.714


g_ppp (7 : 7): [ 0.2 0 0 0.2 0.2 0.2 0.2 ]
------------------------------ Fine dividi1_vs_d


***sampleB***

***sample***
g_hubs (2 : 2): [ 1 2 ]
k = 1, replace = 0


g_hubs (1 : 2): [ 1 ]
*****************************************


Stringhe allocate: 3 (1034 interne); stringhe deallocate: 0 (384 interne)


Stringhe allocate: 3 (1034 interne); stringhe deallocate: 0 (384 interne)

750: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (3 : 5): [ 1 2 4 ]
st = 1
end = 3


g_h1 (3 : 5): [ 1 2 4 ]
------------------------------ Fine copia_v_i


***assign_nodes***
46: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (3 : 5): [ 1 2 4 ]
st = 1
end = 3


g_or_h (3 : 5): [ 1 2 4 ]
------------------------------ Fine copia_v_i

48: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_aus_h (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

54: InitVett_i
g_index (2 : 2): [ 4 3 ]
val = 0


g_index (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_i

56: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_M (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_M_in (2 : 2): [ 1 0 ]
------------------------------ Fine somma_righe_i

58: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_M_in (2 : 2): [ 1 0 ]
decr = 1


g_Ord (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

63: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 3 : 2 x 5): [
	 0.5850434569189491 -2.550772612935894 -1.550772612935894
	 0.08504345691894905 -1 -1
 ]
r = 1

g_p (3 : 5): [ 0.5850434569189491 -2.550772612935894 -1.550772612935894 ]
------------------------------ Fine riga_d

65: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (3 : 5): [ 0.5850434569189491 -2.550772612935894 -1.550772612935894 ]
val = 0


g_tmp_i (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxle_d

68: min_v_d	<=>	ris <- min(v)
g_p (3 : 5): [ 0.5850434569189491 -2.550772612935894 -1.550772612935894 ]


min = -2.550772612935894
------------------------------ Fine min_v_d

69: somma1_vs_d	<=>	v <- v + s
g_p (3 : 5): [ 0.5850434569189491 -2.550772612935894 -1.550772612935894 ]
s = 2.661883724047005


g_p (3 : 5): [ 3.246927180965954 0.1111111111111112 1.111111111111111 ]
------------------------------ Fine somma1_vs_d

72: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 1 1 2 1 ]
g_h1 (3 : 5): [ 1 2 4 ]


g_Sin_h (3 : 5): [ 0 1 2 ]
------------------------------ Fine assegna_v_indxNA_i

77: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sin_h (3 : 5): [ 0 1 2 ]
val = 4


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

83: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (3 : 5): [ 3.246927180965954 0.1111111111111112 1.111111111111111 ]
g_aus_h (3 : 5): [ 1 2 3 ]


g_tmp_d (3 : 5): [ 3.246927180965954 0.1111111111111112 1.111111111111111 ]
------------------------------ Fine assegna_v_indxNA_d

84: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (3 : 5): [ 3.246927180965954 0.1111111111111112 1.111111111111111 ]
canc_NA = 0



ris: 4.469149403188176
------------------------------ Fine somma_v_d

85: dividi_vs_d	ris <- v / div
g_tmp_d (3 : 5): [ 3.246927180965954 0.1111111111111112 1.111111111111111 ]
div = 4.469


g_p (3 : 5): [ 0.7265201692853857 0.02486180279223768 0.2486180279223767 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (3 : 5): [ 1 2 4 ]
k = 1, replace = 0
g_p (3 : 5): [ 0.7265201692853857 0.02486180279223768 0.2486180279223767 ]


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 3 (1034 interne); stringhe deallocate: 0 (384 interne)

92: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (3 : 5): [ 1 2 4 ]
ris (1 : 1): [ 1 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 1
g_h1 (3 : 5): [ 1 2 4 ]


indx = 1
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (3 : 5): [ 1 2 4 ]
indx = 1


g_h1 (2 : 5): [ 2 4 ]
------------------------------ Fine elimina1_indx_i



g_h1 (2 : 5): [ 2 4 ]
------------------------------ Fine setdiff1_i

94: which_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (3 : 5): [ 1 2 4 ]
ris (1 : 1): [ 1 ]
2017: esiste_v_i	<=>	elem %IN% v
elem = 1
g_or_h (3 : 5): [ 1 2 4 ]


indx = 1
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 1 ]
------------------------------ Fine which_vv_eq_i

95: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (3 : 5): [ 1 2 3 ]
g_tmp_i (1 : 5): [ 1 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 1
g_aus_h (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
g_aus_h (3 : 5): [ 1 2 3 ]
indx = 1


g_aus_h (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i



g_aus_h (2 : 5): [ 2 3 ]
------------------------------ Fine setdiff1_i

63: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 3 : 2 x 5): [
	 0.5850434569189491 -2.550772612935894 -1.550772612935894
	 0.08504345691894905 -1 -1
 ]
r = 2

g_p (3 : 5): [ 0.08504345691894905 -1 -1 ]
------------------------------ Fine riga_d

65: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (3 : 5): [ 0.08504345691894905 -1 -1 ]
val = 0


g_tmp_i (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxle_d

68: min_v_d	<=>	ris <- min(v)
g_p (3 : 5): [ 0.08504345691894905 -1 -1 ]


min = -1
------------------------------ Fine min_v_d

69: somma1_vs_d	<=>	v <- v + s
g_p (3 : 5): [ 0.08504345691894905 -1 -1 ]
s = 1.111111111111111


g_p (3 : 5): [ 1.19615456803006 0.1111111111111112 0.1111111111111112 ]
------------------------------ Fine somma1_vs_d

72: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 1 1 2 1 ]
g_h1 (2 : 5): [ 2 4 ]


g_Sin_h (2 : 5): [ 1 2 ]
------------------------------ Fine assegna_v_indxNA_i

77: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sin_h (2 : 5): [ 1 2 ]
val = 5


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

83: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (3 : 5): [ 1.19615456803006 0.1111111111111112 0.1111111111111112 ]
g_aus_h (2 : 5): [ 2 3 ]


g_tmp_d (2 : 5): [ 0.1111111111111112 0.1111111111111112 ]
------------------------------ Fine assegna_v_indxNA_d

84: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (2 : 5): [ 0.1111111111111112 0.1111111111111112 ]
canc_NA = 0



ris: 0.2222222222222223
------------------------------ Fine somma_v_d

85: dividi_vs_d	ris <- v / div
g_tmp_d (2 : 5): [ 0.1111111111111112 0.1111111111111112 ]
div = 0.222


g_p (2 : 5): [ 0.5 0.5 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (2 : 5): [ 2 4 ]
k = 1, replace = 0
g_p (2 : 5): [ 0.5 0.5 ]


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 3 (1034 interne); stringhe deallocate: 0 (384 interne)

92: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (2 : 5): [ 2 4 ]
ris (1 : 1): [ 2 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 2
g_h1 (2 : 5): [ 2 4 ]


indx = 1
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (2 : 5): [ 2 4 ]
indx = 1


g_h1 (1 : 5): [ 4 ]
------------------------------ Fine elimina1_indx_i



g_h1 (1 : 5): [ 4 ]
------------------------------ Fine setdiff1_i

94: which_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (3 : 5): [ 1 2 4 ]
ris (1 : 1): [ 2 ]
2017: esiste_v_i	<=>	elem %IN% v
elem = 2
g_or_h (3 : 5): [ 1 2 4 ]


indx = 2
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 2 ]
------------------------------ Fine which_vv_eq_i

95: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (2 : 5): [ 2 3 ]
g_tmp_i (1 : 5): [ 2 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 2
g_aus_h (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
g_aus_h (2 : 5): [ 2 3 ]
indx = 1


g_aus_h (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i



g_aus_h (1 : 5): [ 3 ]
------------------------------ Fine setdiff1_i

103: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
riga = 1
val = 1


g_ind (1 : 5): [ 2 ]
------------------------------ Fine which_m_rowindxeq_i

105: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 1 2 ]
g_ind (1 : 5): [ 2 ]


g_co (1 : 4): [ 2 ]
------------------------------ Fine copia_v_indx_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 1 0 0
	 0 0 1 1 0
	 0 1 0 0 0
 ]
g_ri (1 : 1): [ 1 ]
g_co (1 : 4): [ 2 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 1 0 0
	 0 0 1 1 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 1
g_hubs (1 : 2): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

111: accoda1_vv_i	<=>	v1 <- c(v1, v2)
ris (0 : 1): [ ]
g_ri (1 : 1): [ 1 ]


ris (1 : 1): [ 1 ]
------------------------------ Fine accoda_vv_i

103: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
riga = 2
val = 1


g_ind (0 : 5): [ ]
------------------------------ Fine which_m_rowindxeq_i

105: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 1 2 ]
g_ind (0 : 5): [ ]


g_co (0 : 4): [ ]
------------------------------ Fine copia_v_indx_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 1 0 0
	 0 0 1 1 0
	 0 1 0 0 0
 ]
g_ri (1 : 1): [ 2 ]
g_co (0 : 4): [ ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 1 0 0
	 0 0 1 1 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 2
g_hubs (1 : 2): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i


*** Esco da assign_nodes ***


Stringhe allocate: 3 (1034 interne); stringhe deallocate: 0 (384 interne)

758: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_h (3 : 5): [ 1 2 4 ]
g_h1 (1 : 5): [ 4 ]
3089: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (3 : 5): [ 1 2 4 ]
st = 1
end = 3


g_tmp1_i (3 : 11): [ 1 2 4 ]
------------------------------ Fine copia_v_i

3091: esiste_v_i	<=>	elem %IN% v
elem = 4
g_tmp1_i (3 : 11): [ 1 2 4 ]


indx = 3
------------------------------ Fine esiste_v_i

3093: elimina1_indx_i	<=>	v <- v[-indx]
g_tmp1_i (3 : 11): [ 1 2 4 ]
indx = 3


g_tmp1_i (2 : 11): [ 1 2 ]
------------------------------ Fine elimina1_indx_i



g_tmp1_i (2 : 11): [ 1 2 ]
------------------------------ Fine setdiff_i

759: incr1_v_indx_i	<=>	v[indx] <- v[indx] + s
g_LG (5 : 5): [ -1 0 0 0 0 ]
g_tmp1_i (2 : 11): [ 1 2 ]
val = 1


g_LG (5 : 5): [ 0 1 0 0 0 ]
------------------------------ Fine incr1_v_indx_i

763: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (1 : 5): [ 4 ]
st = 1
end = 1


g_h (1 : 5): [ 4 ]
------------------------------ Fine copia_v_i

765: accoda1_vv_i	<=>	v1 <- c(v1, v2)
g_h_new (0 : 2): [ ]
ris (1 : 1): [ 1 ]


g_h_new (1 : 2): [ 1 ]
------------------------------ Fine accoda_vv_i

767: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 1 0 0
	 0 0 1 1 0
	 0 1 0 0 0
 ]


g_Sout (5 : 5): [ 0 2 2 1 1 ]
------------------------------ Fine somma_colonne_i

769: max_v_i		<=>	ris <- max(v)
g_Sout (5 : 5): [ 0 2 2 1 1 ]


max = 2
------------------------------ Fine max_v_i

771: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 3
incr = 1


g_tmp2_i (4 : 10): [ 0 1 2 3 ]
------------------------------ Fine seq_i


*** hist1 ***
g_Sout (5 : 5): [ 0 2 2 1 1 ]
g_tmp2_i (4 : 10): [ 0 1 2 3 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
g_tmp1_i (3 : 11): [ 1 2 4 ]
val = 0


g_tmp1_i (3 : 11): [ 0 0 0 ]
------------------------------ Fine InitVett_i



g_tmp1_i (3 : 11): [ 1 2 2 ]

Stringhe allocate: 3 (1034 interne); stringhe deallocate: 0 (384 interne)

773: promuovi_i	(implicita)
g_tmp1_i (3 : 11): [ 1 2 2 ]
ATTENZIONE (promuovi_i, linea HMM.c # 773): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

g_tmp1_d (3 : 19): [ 1 2 2 ]
------------------------------ Fine promuovi_i

774: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
start = 1
end = 3
g_tmp1_d (3 : 19): [ 1 2 2 ]


g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

776: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (5 x 5 : 5 x 5): [
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 1 0 0
	 0 0 1 1 0
	 0 1 0 0 0
 ]


g_Sin (5 : 5): [ 1 1 1 2 1 ]
------------------------------ Fine somma_righe_i

778: max_v_i		<=>	ris <- max(v)
g_Sin (5 : 5): [ 1 1 1 2 1 ]


max = 2
------------------------------ Fine max_v_i

780: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 3
incr = 1


g_tmp2_i (4 : 10): [ 0 1 2 3 ]
------------------------------ Fine seq_i


*** hist1 ***
g_Sin (5 : 5): [ 1 1 1 2 1 ]
g_tmp2_i (4 : 10): [ 0 1 2 3 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
g_tmp1_i (3 : 11): [ 1 2 2 ]
val = 0


g_tmp1_i (3 : 11): [ 0 0 0 ]
------------------------------ Fine InitVett_i



g_tmp1_i (3 : 11): [ 0 4 1 ]

Stringhe allocate: 3 (1035 interne); stringhe deallocate: 0 (385 interne)

782: promuovi_i	(implicita)
g_tmp1_i (3 : 11): [ 0 4 1 ]
ATTENZIONE (promuovi_i, linea HMM.c # 782): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

g_tmp1_d (3 : 19): [ 0 4 1 ]
------------------------------ Fine promuovi_i

783: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
g_Freq_in (7 : 7): [ 1 3 1 0 0 0 0 ]
start = 1
end = 3
g_tmp1_d (3 : 19): [ 0 4 1 ]


g_Freq_in (7 : 7): [ 0 4 1 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

797: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h_new (1 : 2): [ 1 ]
st = 1
end = 1


g_h (1 : 5): [ 1 ]
------------------------------ Fine copia_v_i

802: copia_v_indx_i	<=>	ris <- v[indx]
g_Sin (5 : 5): [ 1 1 1 2 1 ]
g_h (1 : 5): [ 1 ]


g_tmp2_i (1 : 10): [ 1 ]
------------------------------ Fine copia_v_indx_i

803: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp2_i (1 : 10): [ 1 ]
val = 5


g_tmp1_i (1 : 11): [ 1 ]
------------------------------ Fine which_v_indxne_i

804: copia_v_indx_i	<=>	ris <- v[indx]
g_h (1 : 5): [ 1 ]
g_tmp1_i (1 : 11): [ 1 ]


g_h (1 : 5): [ 1 ]
------------------------------ Fine copia_v_indx_i

894: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (5 x 5 : 5 x 5): [
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 1 0 0
	 0 0 1 1 0
	 0 1 0 0 0
 ]


g_Sr (5 : 5): [ 1 1 1 2 1 ]
------------------------------ Fine somma_righe_i

896: which_v_indxeq_i	<=>	ris <- which(v==val)
g_Sr (5 : 5): [ 1 1 1 2 1 ]
val = 0


g_ind (0 : 11): [ ]
------------------------------ Fine which_v_indxeq_i


*** write_m_i ***
ris (5 x 5 : 5 x 5): [
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 1 0 0
	 0 0 1 1 0
	 0 1 0 0 0
 ]

Stringhe allocate: 3 (1041 interne); stringhe deallocate: 0 (386 interne)

976: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp1_i (5 : 11): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

977: cbind2v_i	<=>	ris <- cbind(v1, v2)
g_tmp1_i (5 : 11): [ 1 2 3 4 5 ]
g_LG (5 : 5): [ 0 1 0 0 0 ]


g_tmpm_i (5 x 2 : 5 x 2): [
	 1 0
	 2 1
	 3 0
	 4 0
	 5 0
 ]
------------------------------ Fine cbind2v_i


*** write_m_i ***
g_tmpm_i (5 x 2 : 5 x 2): [
	 1 0
	 2 1
	 3 0
	 4 0
	 5 0
 ]

Stringhe allocate: 3 (1046 interne); stringhe deallocate: 0 (386 interne)


Stringhe allocate: 3 (1046 interne); stringhe deallocate: 0 (386 interne)


*** Esco da HMM1 ***
Trasformo la matrice
ris (5 x 5 : 5 x 5): [
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 1 0 0
	 0 0 1 1 0
	 0 1 0 0 0
 ]

Stringhe allocate: 3 (1046 interne); stringhe deallocate: 1 (1046 interne)

