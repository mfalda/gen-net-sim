
*** createMOD ***

*** createMOD1 ***

*** read_m_i ***
114: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (0 : 0): [ ]
s: 2
ATTENZIONE (accoda1_vs_i, linea /home/marco/hmm/read_table.c # 114): ingrandito il vettore da 0 a 1


tmp_i (1 : 2): [ 2 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (1 : 2): [ 2 ]
s: 3


tmp_i (2 : 2): [ 2 3 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (2 : 2): [ 2 3 ]
s: 5
ATTENZIONE (accoda1_vs_i, linea /home/marco/hmm/read_table.c # 118): ingrandito il vettore da 2 a 3


tmp_i (3 : 6): [ 2 3 5 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (3 : 6): [ 2 3 5 ]
s: 6


tmp_i (4 : 6): [ 2 3 5 6 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (4 : 6): [ 2 3 5 6 ]
s: 7


tmp_i (5 : 6): [ 2 3 5 6 7 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (5 : 6): [ 2 3 5 6 7 ]
s: 11


tmp_i (6 : 6): [ 2 3 5 6 7 11 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (6 : 6): [ 2 3 5 6 7 11 ]
s: 15
ATTENZIONE (accoda1_vs_i, linea /home/marco/hmm/read_table.c # 118): ingrandito il vettore da 6 a 7


tmp_i (7 : 14): [ 2 3 5 6 7 11 15 ]
------------------------------ Fine accoda1_vs_i

114: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (7 : 14): [ 2 3 5 6 7 11 15 ]
s: 0


tmp_i (8 : 14): [ 2 3 5 6 7 11 15 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (8 : 14): [ 2 3 5 6 7 11 15 0 ]
s: 0


tmp_i (9 : 14): [ 2 3 5 6 7 11 15 0 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (9 : 14): [ 2 3 5 6 7 11 15 0 0 ]
s: 0


tmp_i (10 : 14): [ 2 3 5 6 7 11 15 0 0 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (10 : 14): [ 2 3 5 6 7 11 15 0 0 0 ]
s: 0


tmp_i (11 : 14): [ 2 3 5 6 7 11 15 0 0 0 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (11 : 14): [ 2 3 5 6 7 11 15 0 0 0 0 ]
s: 0


tmp_i (12 : 14): [ 2 3 5 6 7 11 15 0 0 0 0 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (12 : 14): [ 2 3 5 6 7 11 15 0 0 0 0 0 ]
s: 1


tmp_i (13 : 14): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (13 : 14): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 ]
s: 1


tmp_i (14 : 14): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 ]
------------------------------ Fine accoda1_vs_i

114: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (14 : 14): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 ]
s: 0
ATTENZIONE (accoda1_vs_i, linea /home/marco/hmm/read_table.c # 114): ingrandito il vettore da 14 a 15


tmp_i (15 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (15 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 ]
s: 0


tmp_i (16 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (16 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 ]
s: 1


tmp_i (17 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (17 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 ]
s: 1


tmp_i (18 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (18 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 ]
s: 1


tmp_i (19 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (19 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 ]
s: 0


tmp_i (20 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (20 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 ]
s: 1


tmp_i (21 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 ]
------------------------------ Fine accoda1_vs_i

114: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (21 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 ]
s: 1


tmp_i (22 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (22 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 ]
s: 1


tmp_i (23 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (23 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 ]
s: 0


tmp_i (24 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (24 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 ]
s: 1


tmp_i (25 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (25 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 ]
s: 1


tmp_i (26 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (26 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 ]
s: 1


tmp_i (27 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (27 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 ]
s: 1


tmp_i (28 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 ]
------------------------------ Fine accoda1_vs_i

114: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (28 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 ]
s: 0


tmp_i (29 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (29 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 ]
s: 1


tmp_i (30 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (30 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 ]
s: 1
ATTENZIONE (accoda1_vs_i, linea /home/marco/hmm/read_table.c # 118): ingrandito il vettore da 30 a 31


tmp_i (31 : 62): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (31 : 62): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 ]
s: 0


tmp_i (32 : 62): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (32 : 62): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 0 ]
s: 1


tmp_i (33 : 62): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 0 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (33 : 62): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 0 1 ]
s: 1


tmp_i (34 : 62): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 0 1 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (34 : 62): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 0 1 1 ]
s: 1


tmp_i (35 : 62): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 0 1 1 1 ]
------------------------------ Fine accoda1_vs_i

ris (5 x 7 : 5 x 7): [
	 2 3 5 6 7 11 15
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]

Stringhe allocate: 2 (40 interne); stringhe deallocate: 0 (35 interne)

43: riga_i	<=>	ris <- m[r,]
ris (5 x 7 : 5 x 7): [
	 2 3 5 6 7 11 15
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]
r = 1

codes (7 : 7): [ 2 3 5 6 7 11 15 ]
------------------------------ Fine riga_i

45: elimina1_riga_i	<=>	m <- m[-riga,]
ris (5 x 7 : 5 x 7): [
	 2 3 5 6 7 11 15
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]
riga = 1


ris (4 x 7 : 5 x 7): [
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]
------------------------------ Fine elimina1_riga_i

51: colonna_i	<=>	ris <- m[,c]
ris (4 x 7 : 5 x 7): [
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]
c = 1

tmp1_i (4 : 4): [ 0 0 1 0 ]
------------------------------ Fine colonna_i

56: which_m_indxnsimm_i	<=>	ris <- which((m == t(m)) == 0)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


tmp2_i (2 : 4): [ 2 3 ]
------------------------------ Fine which_m_indxnsimm_i


***hubs***
28: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_S (2 : 2): [ 0 1 ]
------------------------------ Fine somma_colonne_i

30: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 0 1 ]


max = 1
------------------------------ Fine max_v_i

30: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 0 1 ]
val = 1


g_ind (1 : 2): [ 2 ]
------------------------------ Fine which_v_indxeq_i


*** pathlength ***
37: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
------------------------------ Fine copia_m_i

40: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
val = 0


g_tmp1_i (1 : 4): [ 3 ]
------------------------------ Fine which_m_indxne_i

41: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
g_tmp1_i (1 : 4): [ 3 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
------------------------------ Fine assegna1_ms_indx_i

44: InitMatr_d
ris (2 x 2 : 2 x 2): [
	 6.952042e-310 1.693686e+190
	 6.952042e-310 1.876801e-152
 ]
val = nan


ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
------------------------------ Fine InitMatr_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
c = 1, val = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine which_m_colindxne_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
colonna = 1
g_distanza (2 : 2): [ nan nan ]


ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
------------------------------ Fine assegna1_mv_colonna_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
c = 2, val = 0


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (1 : 4): [ 1 ]
val = 1


g_distanza (2 : 2): [ 1 nan ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 0): [ ]
g_neighbours (1 : 4): [ 1 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (1 : 1): [ 1 ]


g_visitati (1 : 1): [ 1 ]
------------------------------ Fine elimina_doppi_i



g_visitati (1 : 1): [ 1 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
c = 1, val = 0


g_tmp1_i (0 : 4): [ ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
g_new_neighbours (0 : 0): [ ]
g_tmp1_i (0 : 4): [ ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (0 : 0): [ ]


ris (0 : 0): [ ]
------------------------------ Fine elimina_doppi_i



ris (0 : 0): [ ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 0): [ ]
ris (0 : 0): [ ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (0 : 0): [ ]


ris (0 : 0): [ ]
------------------------------ Fine elimina_doppi_i



ris (0 : 0): [ ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (0 : 0): [ ]
g_visitati (1 : 1): [ 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



ris (0 : 0): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 0): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
colonna = 2
g_distanza (2 : 2): [ 1 nan ]


ris (2 x 2 : 2 x 2): [
	 nan 1
	 nan nan
 ]
------------------------------ Fine assegna1_mv_colonna_d

101: assegna1_m_indxNA_d	<=>	m1[which(is.na(m2))] # o suo complemento
ris (2 x 2 : 2 x 2): [
	 nan 1
	 nan nan
 ]
ris (2 x 2 : 2 x 2): [
	 nan 1
	 nan nan
 ]
val = inf
complemento = 0


ris (2 x 2 : 2 x 2): [
	 inf 1
	 inf inf
 ]
------------------------------ Fine assegna1_m_indxNA_d


Stringhe allocate: 2 (135 interne); stringhe deallocate: 0 (60 interne)


*** Esco da pathlength ***
34: diag_d	<=>	ris <- diag(m)
ris (2 x 2 : 2 x 2): [
	 inf 1
	 inf inf
 ]


g_tmp1_d (2 : 2): [ inf inf ]
------------------------------ Fine diag_d

35: min_v_d	<=>	ris <- min(v)
g_tmp1_d (2 : 2): [ inf inf ]


min = inf
------------------------------ Fine min_v_d

42: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (1 : 2): [ 2 ]
st = 1
end = 1


g_H (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

63: somma_righe_i	<=>	ris <- apply(m, 1, sum)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_tmp1_i (2 : 2): [ 1 0 ]
------------------------------ Fine somma_righe_i

64: somma1_vv_i	<=>	v1 <- v1 + v2
g_S (2 : 2): [ 0 1 ]
g_tmp1_i (2 : 2): [ 1 0 ]


g_S (2 : 2): [ 1 1 ]
------------------------------ Fine somma1_vv_i

66: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 1 1 ]


max = 1
------------------------------ Fine max_v_i

66: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 1 1 ]
val = 1


g_ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxeq_i

68: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (2 : 2): [ 1 2 ]
st = 1
end = 2


g_Hio (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i


Stringhe allocate: 2 (160 interne); stringhe deallocate: 0 (60 interne)


*** Esco da hubs ***


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 0
	 1 0
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 0
	 1 0
 ]
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
val = 0


g_ind (2 : 4): [ 2 3 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
g_ind (2 : 4): [ 2 3 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
val = 0


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (2 : 2): [ 6.952042e-310 6.952042e-310 ]
val = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 1


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 1
val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 2


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 2
val = 0


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (2 : 2): [ 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 2 (180 interne); stringhe deallocate: 0 (60 interne)


*** Esco da cluster_coeff2 ***
76: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


elem_ris->rete (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
------------------------------ Fine copia_m_i

79: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_H (1 : 1): [ 2 ]
st = 1
end = 1


elem_ris->hubs (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

85: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_Hio (2 : 2): [ 1 2 ]
st = 1
end = 2


elem_ris->hubsio (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

51: colonna_i	<=>	ris <- m[,c]
ris (4 x 7 : 5 x 7): [
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]
c = 2

tmp1_i (4 : 4): [ 0 0 1 1 ]
------------------------------ Fine colonna_i

56: which_m_indxnsimm_i	<=>	ris <- which((m == t(m)) == 0)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


tmp2_i (2 : 4): [ 2 3 ]
------------------------------ Fine which_m_indxnsimm_i


***hubs***
28: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_S (2 : 2): [ 0 2 ]
------------------------------ Fine somma_colonne_i

30: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 0 2 ]


max = 2
------------------------------ Fine max_v_i

30: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 0 2 ]
val = 2


g_ind (1 : 2): [ 2 ]
------------------------------ Fine which_v_indxeq_i


*** pathlength ***
37: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
------------------------------ Fine copia_m_i

40: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
val = 0


g_tmp1_i (2 : 4): [ 3 4 ]
------------------------------ Fine which_m_indxne_i

41: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
g_tmp1_i (2 : 4): [ 3 4 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
------------------------------ Fine assegna1_ms_indx_i

44: InitMatr_d
ris (2 x 2 : 2 x 2): [
	 inf 1
	 inf inf
 ]
val = nan


ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
------------------------------ Fine InitMatr_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
c = 1, val = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine which_m_colindxne_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
colonna = 1
g_distanza (2 : 2): [ nan nan ]


ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
------------------------------ Fine assegna1_mv_colonna_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
c = 2, val = 0


g_neighbours (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (2 : 4): [ 1 2 ]
val = 1


g_distanza (2 : 2): [ 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 1): [ ]
g_neighbours (2 : 4): [ 1 2 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (2 : 2): [ 1 2 ]


g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
c = 1, val = 0


g_tmp1_i (0 : 4): [ ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 0): [ ]
g_tmp1_i (0 : 4): [ ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (0 : 0): [ ]


ris (0 : 0): [ ]
------------------------------ Fine elimina_doppi_i



ris (0 : 0): [ ]
------------------------------ Fine unione1_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
c = 2, val = 0


g_tmp1_i (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 0): [ ]
g_tmp1_i (2 : 4): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 2 ]
ris (2 : 2): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (2 : 4): [ 1 2 ]
g_visitati (2 : 4): [ 1 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (2 : 4): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (2 : 4): [ 1 2 ]
indx = 1


ris (1 : 4): [ 2 ]
------------------------------ Fine elimina1_indx_i

2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (1 : 4): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 4): [ 2 ]
indx = 1


ris (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



ris (0 : 4): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 4): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
colonna = 2
g_distanza (2 : 2): [ 1 1 ]


ris (2 x 2 : 2 x 2): [
	 nan 1
	 nan 1
 ]
------------------------------ Fine assegna1_mv_colonna_d

101: assegna1_m_indxNA_d	<=>	m1[which(is.na(m2))] # o suo complemento
ris (2 x 2 : 2 x 2): [
	 nan 1
	 nan 1
 ]
ris (2 x 2 : 2 x 2): [
	 nan 1
	 nan 1
 ]
val = inf
complemento = 0


ris (2 x 2 : 2 x 2): [
	 inf 1
	 inf 1
 ]
------------------------------ Fine assegna1_m_indxNA_d


Stringhe allocate: 2 (230 interne); stringhe deallocate: 0 (95 interne)


*** Esco da pathlength ***
34: diag_d	<=>	ris <- diag(m)
ris (2 x 2 : 2 x 2): [
	 inf 1
	 inf 1
 ]


g_tmp1_d (2 : 2): [ inf 1 ]
------------------------------ Fine diag_d

35: min_v_d	<=>	ris <- min(v)
g_tmp1_d (2 : 2): [ inf 1 ]


min = 1
------------------------------ Fine min_v_d

42: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (1 : 2): [ 2 ]
st = 1
end = 1


g_H (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

63: somma_righe_i	<=>	ris <- apply(m, 1, sum)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_tmp1_i (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

64: somma1_vv_i	<=>	v1 <- v1 + v2
g_S (2 : 2): [ 0 2 ]
g_tmp1_i (2 : 2): [ 1 1 ]


g_S (2 : 2): [ 1 3 ]
------------------------------ Fine somma1_vv_i

66: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 1 3 ]


max = 3
------------------------------ Fine max_v_i

66: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 1 3 ]
val = 3


g_ind (1 : 2): [ 2 ]
------------------------------ Fine which_v_indxeq_i

68: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (1 : 2): [ 2 ]
st = 1
end = 1


g_Hio (1 : 2): [ 2 ]
------------------------------ Fine copia_v_i


Stringhe allocate: 2 (230 interne); stringhe deallocate: 0 (95 interne)


*** Esco da hubs ***


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 2
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 2
 ]
val = 0


g_ind (3 : 4): [ 2 3 4 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 2
 ]
g_ind (3 : 4): [ 2 3 4 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
val = 0


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (2 : 2): [ 0 0 ]
val = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 1


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 1
val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 2


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 2
val = 0


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (2 : 2): [ 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 2 (230 interne); stringhe deallocate: 0 (95 interne)


*** Esco da cluster_coeff2 ***
76: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


elem_ris->rete (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
------------------------------ Fine copia_m_i

79: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_H (1 : 1): [ 2 ]
st = 1
end = 1


elem_ris->hubs (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

85: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_Hio (1 : 2): [ 2 ]
st = 1
end = 1


elem_ris->hubsio (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

51: colonna_i	<=>	ris <- m[,c]
ris (4 x 7 : 5 x 7): [
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]
c = 3

tmp1_i (4 : 4): [ 0 1 0 1 ]
------------------------------ Fine colonna_i

56: which_m_indxnsimm_i	<=>	ris <- which((m == t(m)) == 0)
mod (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


tmp2_i (2 : 4): [ 2 3 ]
------------------------------ Fine which_m_indxnsimm_i


***hubs***
28: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
mod (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_S (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

30: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 1 1 ]


max = 1
------------------------------ Fine max_v_i

30: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 1 1 ]
val = 1


g_ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxeq_i


*** pathlength ***
37: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
------------------------------ Fine copia_m_i

40: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
val = 0


g_tmp1_i (2 : 4): [ 2 4 ]
------------------------------ Fine which_m_indxne_i

41: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
g_tmp1_i (2 : 4): [ 2 4 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

44: InitMatr_d
ris (2 x 2 : 2 x 2): [
	 inf 1
	 inf 1
 ]
val = nan


ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
------------------------------ Fine InitMatr_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
c = 1, val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (1 : 4): [ 2 ]
val = 1


g_distanza (2 : 2): [ nan 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 4): [ ]
g_neighbours (1 : 4): [ 2 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (1 : 1): [ 2 ]


g_visitati (1 : 4): [ 2 ]
------------------------------ Fine elimina_doppi_i



g_visitati (1 : 4): [ 2 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
c = 2, val = 0


g_tmp1_i (1 : 4): [ 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 4): [ ]
g_tmp1_i (1 : 4): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (1 : 1): [ 2 ]


ris (1 : 1): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 2 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 2 ]
ris (1 : 1): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 2 2 ]


ris (1 : 2): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 2): [ 2 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (1 : 2): [ 2 ]
g_visitati (1 : 4): [ 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 2): [ 2 ]
indx = 1


ris (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



ris (0 : 2): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 2): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
colonna = 1
g_distanza (2 : 2): [ nan 1 ]


ris (2 x 2 : 2 x 2): [
	 nan nan
	 1 nan
 ]
------------------------------ Fine assegna1_mv_colonna_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
c = 2, val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (1 : 4): [ 2 ]
val = 1


g_distanza (2 : 2): [ nan 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 4): [ ]
g_neighbours (1 : 4): [ 2 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (1 : 1): [ 2 ]


g_visitati (1 : 4): [ 2 ]
------------------------------ Fine elimina_doppi_i



g_visitati (1 : 4): [ 2 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
c = 2, val = 0


g_tmp1_i (1 : 4): [ 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 2): [ ]
g_tmp1_i (1 : 4): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (1 : 1): [ 2 ]


ris (1 : 1): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 2 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 2 ]
ris (1 : 1): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 2 2 ]


ris (1 : 2): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 2): [ 2 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (1 : 2): [ 2 ]
g_visitati (1 : 4): [ 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 2): [ 2 ]
indx = 1


ris (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



ris (0 : 2): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 2): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 nan nan
	 1 nan
 ]
colonna = 2
g_distanza (2 : 2): [ nan 1 ]


ris (2 x 2 : 2 x 2): [
	 nan nan
	 1 1
 ]
------------------------------ Fine assegna1_mv_colonna_d

101: assegna1_m_indxNA_d	<=>	m1[which(is.na(m2))] # o suo complemento
ris (2 x 2 : 2 x 2): [
	 nan nan
	 1 1
 ]
ris (2 x 2 : 2 x 2): [
	 nan nan
	 1 1
 ]
val = inf
complemento = 0


ris (2 x 2 : 2 x 2): [
	 inf inf
	 1 1
 ]
------------------------------ Fine assegna1_m_indxNA_d


Stringhe allocate: 2 (295 interne); stringhe deallocate: 0 (145 interne)


*** Esco da pathlength ***
34: diag_d	<=>	ris <- diag(m)
ris (2 x 2 : 2 x 2): [
	 inf inf
	 1 1
 ]


g_tmp1_d (2 : 2): [ inf 1 ]
------------------------------ Fine diag_d

35: min_v_d	<=>	ris <- min(v)
g_tmp1_d (2 : 2): [ inf 1 ]


min = 1
------------------------------ Fine min_v_d

46: assegna1_s_diag_d	<=>	diag_d(m) <- s
ris (2 x 2 : 2 x 2): [
	 inf inf
	 1 1
 ]
val = 0


ris (2 x 2 : 2 x 2): [
	 0 inf
	 1 0
 ]
------------------------------ Fine assegna1_s_diag_d

48: somma_colonne_d	<=>	ris <- apply(m, 2, sum)
ris (2 x 2 : 2 x 2): [
	 0 inf
	 1 0
 ]


g_tmp1_d (2 : 2): [ 1 inf ]
------------------------------ Fine somma_colonne_d

49: copia_v_indx_d	<=>	ris <- v[indx]
g_tmp1_d (2 : 2): [ 1 inf ]
g_ind (2 : 2): [ 1 2 ]


g_P (2 : 2): [ 1 inf ]
------------------------------ Fine copia_v_indx_d

51: min_v_d	<=>	ris <- min(v)
g_P (2 : 2): [ 1 inf ]


min = 1
------------------------------ Fine min_v_d

52: min_v_d	<=>	ris <- min(v)
g_P (2 : 2): [ 1 inf ]


min = 1
------------------------------ Fine min_v_d

52: which_v_indxeq_d	<=>	ris <- which(v==val)
g_P (2 : 2): [ 1 inf ]
val = 1


g_ind2 (1 : 2): [ 1 ]
------------------------------ Fine which_v_indxeq_d

53: copia_v_indx_i	<=>	ris <- v[indx]
g_ind (2 : 2): [ 1 2 ]
g_ind2 (1 : 2): [ 1 ]


g_H (1 : 1): [ 1 ]
------------------------------ Fine copia_v_indx_i

63: somma_righe_i	<=>	ris <- apply(m, 1, sum)
mod (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_tmp1_i (2 : 2): [ 0 2 ]
------------------------------ Fine somma_righe_i

64: somma1_vv_i	<=>	v1 <- v1 + v2
g_S (2 : 2): [ 1 1 ]
g_tmp1_i (2 : 2): [ 0 2 ]


g_S (2 : 2): [ 1 3 ]
------------------------------ Fine somma1_vv_i

66: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 1 3 ]


max = 3
------------------------------ Fine max_v_i

66: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 1 3 ]
val = 3


g_ind (1 : 2): [ 2 ]
------------------------------ Fine which_v_indxeq_i

68: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (1 : 2): [ 2 ]
st = 1
end = 1


g_Hio (1 : 2): [ 2 ]
------------------------------ Fine copia_v_i


Stringhe allocate: 2 (305 interne); stringhe deallocate: 0 (145 interne)


*** Esco da hubs ***


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
mod (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
mod (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 2
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 2
 ]
val = 0


g_ind (3 : 4): [ 2 3 4 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 2
 ]
g_ind (3 : 4): [ 2 3 4 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
val = 0


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (2 : 2): [ 0 0 ]
val = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 1


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 1
val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 2


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 2
val = 0


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (2 : 2): [ 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 2 (305 interne); stringhe deallocate: 0 (145 interne)


*** Esco da cluster_coeff2 ***
76: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


elem_ris->rete (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
------------------------------ Fine copia_m_i

79: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_H (1 : 1): [ 1 ]
st = 1
end = 1


elem_ris->hubs (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

85: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_Hio (1 : 2): [ 2 ]
st = 1
end = 1


elem_ris->hubsio (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

51: colonna_i	<=>	ris <- m[,c]
ris (4 x 7 : 5 x 7): [
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]
c = 4

tmp1_i (4 : 4): [ 0 1 1 0 ]
------------------------------ Fine colonna_i

56: which_m_indxnsimm_i	<=>	ris <- which((m == t(m)) == 0)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


tmp2_i (0 : 4): [ ]
------------------------------ Fine which_m_indxnsimm_i


***hubs***
28: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_S (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

30: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 1 1 ]


max = 1
------------------------------ Fine max_v_i

30: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 1 1 ]
val = 1


g_ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxeq_i


*** pathlength ***
37: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine copia_m_i

40: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
val = 0


g_tmp1_i (2 : 4): [ 2 3 ]
------------------------------ Fine which_m_indxne_i

41: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
g_tmp1_i (2 : 4): [ 2 3 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_ms_indx_i

44: InitMatr_d
ris (2 x 2 : 2 x 2): [
	 0 inf
	 1 0
 ]
val = nan


ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
------------------------------ Fine InitMatr_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
c = 1, val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (1 : 4): [ 2 ]
val = 1


g_distanza (2 : 2): [ nan 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 4): [ ]
g_neighbours (1 : 4): [ 2 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (1 : 1): [ 2 ]


g_visitati (1 : 4): [ 2 ]
------------------------------ Fine elimina_doppi_i



g_visitati (1 : 4): [ 2 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
c = 2, val = 0


g_tmp1_i (1 : 4): [ 1 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 2): [ ]
g_tmp1_i (1 : 4): [ 1 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (1 : 1): [ 1 ]


ris (1 : 1): [ 1 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 1 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 1 ]
ris (1 : 1): [ 1 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 1 1 ]


ris (1 : 2): [ 1 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 2): [ 1 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (1 : 2): [ 1 ]
g_visitati (1 : 4): [ 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (1 : 2): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i



ris (1 : 2): [ 1 ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (1 : 2): [ 1 ]
st = 1
end = 1


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine copia_v_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan 1 ]
g_neighbours (1 : 4): [ 1 ]
val = 2


g_distanza (2 : 2): [ 2 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (1 : 4): [ 2 ]
g_neighbours (1 : 4): [ 1 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (2 : 2): [ 2 1 ]


g_visitati (2 : 4): [ 2 1 ]
------------------------------ Fine elimina_doppi_i



g_visitati (2 : 4): [ 2 1 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
c = 1, val = 0


g_tmp1_i (1 : 4): [ 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 2): [ ]
g_tmp1_i (1 : 4): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (1 : 1): [ 2 ]


ris (1 : 1): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 2 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 2 ]
ris (1 : 1): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 2 2 ]


ris (1 : 2): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 2): [ 2 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (1 : 2): [ 2 ]
g_visitati (2 : 4): [ 2 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 2): [ 2 ]
indx = 1


ris (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i

2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i



ris (0 : 2): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 2): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
colonna = 1
g_distanza (2 : 2): [ 2 1 ]


ris (2 x 2 : 2 x 2): [
	 2 nan
	 1 nan
 ]
------------------------------ Fine assegna1_mv_colonna_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
c = 2, val = 0


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (1 : 4): [ 1 ]
val = 1


g_distanza (2 : 2): [ 1 nan ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 4): [ ]
g_neighbours (1 : 4): [ 1 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (1 : 1): [ 1 ]


g_visitati (1 : 4): [ 1 ]
------------------------------ Fine elimina_doppi_i



g_visitati (1 : 4): [ 1 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
c = 1, val = 0


g_tmp1_i (1 : 4): [ 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 2): [ ]
g_tmp1_i (1 : 4): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (1 : 1): [ 2 ]


ris (1 : 1): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 2 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 2 ]
ris (1 : 1): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 2 2 ]


ris (1 : 2): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 2): [ 2 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (1 : 2): [ 2 ]
g_visitati (1 : 4): [ 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (1 : 2): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i



ris (1 : 2): [ 2 ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (1 : 2): [ 2 ]
st = 1
end = 1


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine copia_v_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ 1 nan ]
g_neighbours (1 : 4): [ 2 ]
val = 2


g_distanza (2 : 2): [ 1 2 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (1 : 4): [ 1 ]
g_neighbours (1 : 4): [ 2 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (2 : 2): [ 1 2 ]


g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
c = 2, val = 0


g_tmp1_i (1 : 4): [ 1 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 2): [ ]
g_tmp1_i (1 : 4): [ 1 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (1 : 1): [ 1 ]


ris (1 : 1): [ 1 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 1 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 1 ]
ris (1 : 1): [ 1 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 1 1 ]


ris (1 : 2): [ 1 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 2): [ 1 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (1 : 2): [ 1 ]
g_visitati (2 : 4): [ 1 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (1 : 2): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 2): [ 1 ]
indx = 1


ris (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i

2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i



ris (0 : 2): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 2): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 2 nan
	 1 nan
 ]
colonna = 2
g_distanza (2 : 2): [ 1 2 ]


ris (2 x 2 : 2 x 2): [
	 2 1
	 1 2
 ]
------------------------------ Fine assegna1_mv_colonna_d

101: assegna1_m_indxNA_d	<=>	m1[which(is.na(m2))] # o suo complemento
ris (2 x 2 : 2 x 2): [
	 2 1
	 1 2
 ]
ris (2 x 2 : 2 x 2): [
	 2 1
	 1 2
 ]
val = inf
complemento = 0


ris (2 x 2 : 2 x 2): [
	 2 1
	 1 2
 ]
------------------------------ Fine assegna1_m_indxNA_d


Stringhe allocate: 2 (420 interne); stringhe deallocate: 0 (245 interne)


*** Esco da pathlength ***
34: diag_d	<=>	ris <- diag(m)
ris (2 x 2 : 2 x 2): [
	 2 1
	 1 2
 ]


g_tmp1_d (2 : 2): [ 2 2 ]
------------------------------ Fine diag_d

35: min_v_d	<=>	ris <- min(v)
g_tmp1_d (2 : 2): [ 2 2 ]


min = 2
------------------------------ Fine min_v_d

46: assegna1_s_diag_d	<=>	diag_d(m) <- s
ris (2 x 2 : 2 x 2): [
	 2 1
	 1 2
 ]
val = 0


ris (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_s_diag_d

48: somma_colonne_d	<=>	ris <- apply(m, 2, sum)
ris (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_tmp1_d (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_d

49: copia_v_indx_d	<=>	ris <- v[indx]
g_tmp1_d (2 : 2): [ 1 1 ]
g_ind (2 : 2): [ 1 2 ]


g_P (2 : 2): [ 1 1 ]
------------------------------ Fine copia_v_indx_d

51: min_v_d	<=>	ris <- min(v)
g_P (2 : 2): [ 1 1 ]


min = 1
------------------------------ Fine min_v_d

52: min_v_d	<=>	ris <- min(v)
g_P (2 : 2): [ 1 1 ]


min = 1
------------------------------ Fine min_v_d

52: which_v_indxeq_d	<=>	ris <- which(v==val)
g_P (2 : 2): [ 1 1 ]
val = 1


g_ind2 (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxeq_d

53: copia_v_indx_i	<=>	ris <- v[indx]
g_ind (2 : 2): [ 1 2 ]
g_ind2 (2 : 2): [ 1 2 ]


g_H (2 : 4): [ 1 2 ]
------------------------------ Fine copia_v_indx_i

63: somma_righe_i	<=>	ris <- apply(m, 1, sum)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_tmp1_i (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

64: somma1_vv_i	<=>	v1 <- v1 + v2
g_S (2 : 2): [ 1 1 ]
g_tmp1_i (2 : 2): [ 1 1 ]


g_S (2 : 2): [ 2 2 ]
------------------------------ Fine somma1_vv_i

66: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 2 2 ]


max = 2
------------------------------ Fine max_v_i

66: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 2 2 ]
val = 2


g_ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxeq_i

68: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (2 : 2): [ 1 2 ]
st = 1
end = 2


g_Hio (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i


Stringhe allocate: 2 (420 interne); stringhe deallocate: 0 (245 interne)


*** Esco da hubs ***


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 2
	 2 0
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 2
	 2 0
 ]
val = 0


g_ind (2 : 4): [ 2 3 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 2
	 2 0
 ]
g_ind (2 : 4): [ 2 3 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
val = 0


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (2 : 2): [ 0 0 ]
val = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 1


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 1
val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 2


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 2
val = 0


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (2 : 2): [ 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 2 (420 interne); stringhe deallocate: 0 (245 interne)


*** Esco da cluster_coeff2 ***
76: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


elem_ris->rete (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine copia_m_i

79: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_H (2 : 4): [ 1 2 ]
st = 1
end = 2


elem_ris->hubs (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

85: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_Hio (2 : 2): [ 1 2 ]
st = 1
end = 2


elem_ris->hubsio (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

51: colonna_i	<=>	ris <- m[,c]
ris (4 x 7 : 5 x 7): [
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]
c = 5

tmp1_i (4 : 4): [ 0 1 1 1 ]
------------------------------ Fine colonna_i

56: which_m_indxnsimm_i	<=>	ris <- which((m == t(m)) == 0)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


tmp2_i (0 : 4): [ ]
------------------------------ Fine which_m_indxnsimm_i


***hubs***
28: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_S (2 : 2): [ 1 2 ]
------------------------------ Fine somma_colonne_i

30: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 1 2 ]


max = 2
------------------------------ Fine max_v_i

30: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 1 2 ]
val = 2


g_ind (1 : 2): [ 2 ]
------------------------------ Fine which_v_indxeq_i


*** pathlength ***
37: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine copia_m_i

40: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
val = 0


g_tmp1_i (3 : 4): [ 2 3 4 ]
------------------------------ Fine which_m_indxne_i

41: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
g_tmp1_i (3 : 4): [ 2 3 4 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

44: InitMatr_d
ris (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
val = nan


ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
------------------------------ Fine InitMatr_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
c = 1, val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (1 : 4): [ 2 ]
val = 1


g_distanza (2 : 2): [ nan 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 4): [ ]
g_neighbours (1 : 4): [ 2 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (1 : 1): [ 2 ]


g_visitati (1 : 4): [ 2 ]
------------------------------ Fine elimina_doppi_i



g_visitati (1 : 4): [ 2 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
c = 2, val = 0


g_tmp1_i (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 2): [ ]
g_tmp1_i (2 : 4): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 2 ]
ris (2 : 2): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (2 : 4): [ 1 2 ]
g_visitati (1 : 4): [ 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (2 : 4): [ 1 2 ]


indx = 2
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (2 : 4): [ 1 2 ]
indx = 2


ris (1 : 4): [ 1 ]
------------------------------ Fine elimina1_indx_i



ris (1 : 4): [ 1 ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (1 : 4): [ 1 ]
st = 1
end = 1


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine copia_v_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan 1 ]
g_neighbours (1 : 4): [ 1 ]
val = 2


g_distanza (2 : 2): [ 2 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (1 : 4): [ 2 ]
g_neighbours (1 : 4): [ 1 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (2 : 2): [ 2 1 ]


g_visitati (2 : 4): [ 2 1 ]
------------------------------ Fine elimina_doppi_i



g_visitati (2 : 4): [ 2 1 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
c = 1, val = 0


g_tmp1_i (1 : 4): [ 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 4): [ ]
g_tmp1_i (1 : 4): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (1 : 1): [ 2 ]


ris (1 : 1): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 2 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 2 ]
ris (1 : 1): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 2 2 ]


ris (1 : 2): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 2): [ 2 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (1 : 2): [ 2 ]
g_visitati (2 : 4): [ 2 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 2): [ 2 ]
indx = 1


ris (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i

2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i



ris (0 : 2): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 2): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
colonna = 1
g_distanza (2 : 2): [ 2 1 ]


ris (2 x 2 : 2 x 2): [
	 2 nan
	 1 nan
 ]
------------------------------ Fine assegna1_mv_colonna_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
c = 2, val = 0


g_neighbours (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (2 : 4): [ 1 2 ]
val = 1


g_distanza (2 : 2): [ 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 4): [ ]
g_neighbours (2 : 4): [ 1 2 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (2 : 2): [ 1 2 ]


g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
c = 1, val = 0


g_tmp1_i (1 : 4): [ 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 2): [ ]
g_tmp1_i (1 : 4): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (1 : 1): [ 2 ]


ris (1 : 1): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 2 ]
------------------------------ Fine unione1_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
c = 2, val = 0


g_tmp1_i (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 2 ]
g_tmp1_i (2 : 4): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (3 : 3): [ 2 1 2 ]


ris (2 : 3): [ 2 1 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 3): [ 2 1 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 3): [ 2 1 ]
ris (2 : 3): [ 2 1 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (4 : 4): [ 2 1 2 1 ]


ris (2 : 4): [ 2 1 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 2 1 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (2 : 4): [ 2 1 ]
g_visitati (2 : 4): [ 1 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (2 : 4): [ 2 1 ]


indx = 2
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (2 : 4): [ 2 1 ]
indx = 2


ris (1 : 4): [ 2 ]
------------------------------ Fine elimina1_indx_i

2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (1 : 4): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 4): [ 2 ]
indx = 1


ris (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



ris (0 : 4): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 4): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 2 nan
	 1 nan
 ]
colonna = 2
g_distanza (2 : 2): [ 1 1 ]


ris (2 x 2 : 2 x 2): [
	 2 1
	 1 1
 ]
------------------------------ Fine assegna1_mv_colonna_d

101: assegna1_m_indxNA_d	<=>	m1[which(is.na(m2))] # o suo complemento
ris (2 x 2 : 2 x 2): [
	 2 1
	 1 1
 ]
ris (2 x 2 : 2 x 2): [
	 2 1
	 1 1
 ]
val = inf
complemento = 0


ris (2 x 2 : 2 x 2): [
	 2 1
	 1 1
 ]
------------------------------ Fine assegna1_m_indxNA_d


Stringhe allocate: 2 (520 interne); stringhe deallocate: 0 (330 interne)


*** Esco da pathlength ***
34: diag_d	<=>	ris <- diag(m)
ris (2 x 2 : 2 x 2): [
	 2 1
	 1 1
 ]


g_tmp1_d (2 : 2): [ 2 1 ]
------------------------------ Fine diag_d

35: min_v_d	<=>	ris <- min(v)
g_tmp1_d (2 : 2): [ 2 1 ]


min = 1
------------------------------ Fine min_v_d

42: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (1 : 2): [ 2 ]
st = 1
end = 1


g_H (1 : 4): [ 2 ]
------------------------------ Fine copia_v_i

63: somma_righe_i	<=>	ris <- apply(m, 1, sum)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_tmp1_i (2 : 2): [ 1 2 ]
------------------------------ Fine somma_righe_i

64: somma1_vv_i	<=>	v1 <- v1 + v2
g_S (2 : 2): [ 1 2 ]
g_tmp1_i (2 : 2): [ 1 2 ]


g_S (2 : 2): [ 2 4 ]
------------------------------ Fine somma1_vv_i

66: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 2 4 ]


max = 4
------------------------------ Fine max_v_i

66: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 2 4 ]
val = 4


g_ind (1 : 2): [ 2 ]
------------------------------ Fine which_v_indxeq_i

68: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (1 : 2): [ 2 ]
st = 1
end = 1


g_Hio (1 : 2): [ 2 ]
------------------------------ Fine copia_v_i


Stringhe allocate: 2 (520 interne); stringhe deallocate: 0 (330 interne)


*** Esco da hubs ***


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 2
	 2 2
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 2
	 2 2
 ]
val = 0


g_ind (3 : 4): [ 2 3 4 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 2
	 2 2
 ]
g_ind (3 : 4): [ 2 3 4 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
val = 0


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (2 : 2): [ 0 0 ]
val = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 1


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 1
val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 2


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 2
val = 0


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (2 : 2): [ 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 2 (520 interne); stringhe deallocate: 0 (330 interne)


*** Esco da cluster_coeff2 ***
76: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


elem_ris->rete (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine copia_m_i

79: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_H (1 : 4): [ 2 ]
st = 1
end = 1


elem_ris->hubs (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

85: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_Hio (1 : 2): [ 2 ]
st = 1
end = 1


elem_ris->hubsio (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

51: colonna_i	<=>	ris <- m[,c]
ris (4 x 7 : 5 x 7): [
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]
c = 6

tmp1_i (4 : 4): [ 1 0 1 1 ]
------------------------------ Fine colonna_i

56: which_m_indxnsimm_i	<=>	ris <- which((m == t(m)) == 0)
mod (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


tmp2_i (2 : 4): [ 2 3 ]
------------------------------ Fine which_m_indxnsimm_i


***hubs***
28: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
mod (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_S (2 : 2): [ 1 2 ]
------------------------------ Fine somma_colonne_i

30: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 1 2 ]


max = 2
------------------------------ Fine max_v_i

30: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 1 2 ]
val = 2


g_ind (1 : 2): [ 2 ]
------------------------------ Fine which_v_indxeq_i


*** pathlength ***
37: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
------------------------------ Fine copia_m_i

40: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
val = 0


g_tmp1_i (3 : 4): [ 1 3 4 ]
------------------------------ Fine which_m_indxne_i

41: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
g_tmp1_i (3 : 4): [ 1 3 4 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
------------------------------ Fine assegna1_ms_indx_i

44: InitMatr_d
ris (2 x 2 : 2 x 2): [
	 2 1
	 1 1
 ]
val = nan


ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
------------------------------ Fine InitMatr_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
c = 1, val = 0


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (1 : 4): [ 1 ]
val = 1


g_distanza (2 : 2): [ 1 nan ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 4): [ ]
g_neighbours (1 : 4): [ 1 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (1 : 1): [ 1 ]


g_visitati (1 : 4): [ 1 ]
------------------------------ Fine elimina_doppi_i



g_visitati (1 : 4): [ 1 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
c = 1, val = 0


g_tmp1_i (1 : 4): [ 1 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 4): [ ]
g_tmp1_i (1 : 4): [ 1 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (1 : 1): [ 1 ]


ris (1 : 1): [ 1 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 1 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 1 ]
ris (1 : 1): [ 1 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 1 1 ]


ris (1 : 2): [ 1 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 2): [ 1 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (1 : 2): [ 1 ]
g_visitati (1 : 4): [ 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (1 : 2): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 2): [ 1 ]
indx = 1


ris (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



ris (0 : 2): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 2): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
colonna = 1
g_distanza (2 : 2): [ 1 nan ]


ris (2 x 2 : 2 x 2): [
	 1 nan
	 nan nan
 ]
------------------------------ Fine assegna1_mv_colonna_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
c = 2, val = 0


g_neighbours (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (2 : 4): [ 1 2 ]
val = 1


g_distanza (2 : 2): [ 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 4): [ ]
g_neighbours (2 : 4): [ 1 2 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (2 : 2): [ 1 2 ]


g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
c = 1, val = 0


g_tmp1_i (1 : 4): [ 1 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 2): [ ]
g_tmp1_i (1 : 4): [ 1 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (1 : 1): [ 1 ]


ris (1 : 1): [ 1 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 1 ]
------------------------------ Fine unione1_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
c = 2, val = 0


g_tmp1_i (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 1 ]
g_tmp1_i (2 : 4): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (3 : 3): [ 1 1 2 ]


ris (2 : 3): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 3): [ 1 2 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 3): [ 1 2 ]
ris (2 : 3): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (2 : 4): [ 1 2 ]
g_visitati (2 : 4): [ 1 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (2 : 4): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (2 : 4): [ 1 2 ]
indx = 1


ris (1 : 4): [ 2 ]
------------------------------ Fine elimina1_indx_i

2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (1 : 4): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 4): [ 2 ]
indx = 1


ris (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



ris (0 : 4): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 4): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 1 nan
	 nan nan
 ]
colonna = 2
g_distanza (2 : 2): [ 1 1 ]


ris (2 x 2 : 2 x 2): [
	 1 1
	 nan 1
 ]
------------------------------ Fine assegna1_mv_colonna_d

101: assegna1_m_indxNA_d	<=>	m1[which(is.na(m2))] # o suo complemento
ris (2 x 2 : 2 x 2): [
	 1 1
	 nan 1
 ]
ris (2 x 2 : 2 x 2): [
	 1 1
	 nan 1
 ]
val = inf
complemento = 0


ris (2 x 2 : 2 x 2): [
	 1 1
	 inf 1
 ]
------------------------------ Fine assegna1_m_indxNA_d


Stringhe allocate: 2 (595 interne); stringhe deallocate: 0 (390 interne)


*** Esco da pathlength ***
34: diag_d	<=>	ris <- diag(m)
ris (2 x 2 : 2 x 2): [
	 1 1
	 inf 1
 ]


g_tmp1_d (2 : 2): [ 1 1 ]
------------------------------ Fine diag_d

35: min_v_d	<=>	ris <- min(v)
g_tmp1_d (2 : 2): [ 1 1 ]


min = 1
------------------------------ Fine min_v_d

42: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (1 : 2): [ 2 ]
st = 1
end = 1


g_H (1 : 4): [ 2 ]
------------------------------ Fine copia_v_i

63: somma_righe_i	<=>	ris <- apply(m, 1, sum)
mod (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_tmp1_i (2 : 2): [ 2 1 ]
------------------------------ Fine somma_righe_i

64: somma1_vv_i	<=>	v1 <- v1 + v2
g_S (2 : 2): [ 1 2 ]
g_tmp1_i (2 : 2): [ 2 1 ]


g_S (2 : 2): [ 3 3 ]
------------------------------ Fine somma1_vv_i

66: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 3 3 ]


max = 3
------------------------------ Fine max_v_i

66: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 3 3 ]
val = 3


g_ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxeq_i

68: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (2 : 2): [ 1 2 ]
st = 1
end = 2


g_Hio (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i


Stringhe allocate: 2 (595 interne); stringhe deallocate: 0 (390 interne)


*** Esco da hubs ***


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
mod (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 1 0
	 1 1
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 0
	 1 1
 ]
mod (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 2 1
	 1 2
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 2 1
	 1 2
 ]
val = 0


g_ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 2 1
	 1 2
 ]
g_ind (4 : 4): [ 1 2 3 4 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
val = 0


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (2 : 2): [ 0 0 ]
val = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 1


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 1
val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 2


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 2
val = 0


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (2 : 2): [ 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 2 (595 interne); stringhe deallocate: 0 (390 interne)


*** Esco da cluster_coeff2 ***
76: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


elem_ris->rete (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
------------------------------ Fine copia_m_i

79: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_H (1 : 4): [ 2 ]
st = 1
end = 1


elem_ris->hubs (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

85: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_Hio (2 : 2): [ 1 2 ]
st = 1
end = 2


elem_ris->hubsio (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

51: colonna_i	<=>	ris <- m[,c]
ris (4 x 7 : 5 x 7): [
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]
c = 7

tmp1_i (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine colonna_i

56: which_m_indxnsimm_i	<=>	ris <- which((m == t(m)) == 0)
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


tmp2_i (0 : 4): [ ]
------------------------------ Fine which_m_indxnsimm_i


***hubs***
28: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_S (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

30: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 2 2 ]


max = 2
------------------------------ Fine max_v_i

30: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 2 2 ]
val = 2


g_ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxeq_i


*** pathlength ***
37: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine copia_m_i

40: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
val = 0


g_tmp1_i (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_m_indxne_i

41: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
g_tmp1_i (4 : 4): [ 1 2 3 4 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

44: InitMatr_d
ris (2 x 2 : 2 x 2): [
	 1 1
	 inf 1
 ]
val = nan


ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
------------------------------ Fine InitMatr_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
c = 1, val = 0


g_neighbours (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (2 : 4): [ 1 2 ]
val = 1


g_distanza (2 : 2): [ 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 4): [ ]
g_neighbours (2 : 4): [ 1 2 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (2 : 2): [ 1 2 ]


g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
c = 1, val = 0


g_tmp1_i (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 4): [ ]
g_tmp1_i (2 : 4): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
c = 2, val = 0


g_tmp1_i (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 2 ]
g_tmp1_i (2 : 4): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 4): [ 1 2 ]
ris (2 : 4): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (2 : 4): [ 1 2 ]
g_visitati (2 : 4): [ 1 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (2 : 4): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (2 : 4): [ 1 2 ]
indx = 1


ris (1 : 4): [ 2 ]
------------------------------ Fine elimina1_indx_i

2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (1 : 4): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 4): [ 2 ]
indx = 1


ris (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



ris (0 : 4): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 4): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
colonna = 1
g_distanza (2 : 2): [ 1 1 ]


ris (2 x 2 : 2 x 2): [
	 1 nan
	 1 nan
 ]
------------------------------ Fine assegna1_mv_colonna_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
c = 2, val = 0


g_neighbours (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (2 : 4): [ 1 2 ]
val = 1


g_distanza (2 : 2): [ 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 4): [ ]
g_neighbours (2 : 4): [ 1 2 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (2 : 2): [ 1 2 ]


g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
c = 1, val = 0


g_tmp1_i (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 4): [ ]
g_tmp1_i (2 : 4): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
c = 2, val = 0


g_tmp1_i (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 2 ]
g_tmp1_i (2 : 4): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 4): [ 1 2 ]
ris (2 : 4): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (2 : 4): [ 1 2 ]
g_visitati (2 : 4): [ 1 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (2 : 4): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (2 : 4): [ 1 2 ]
indx = 1


ris (1 : 4): [ 2 ]
------------------------------ Fine elimina1_indx_i

2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (1 : 4): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 4): [ 2 ]
indx = 1


ris (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



ris (0 : 4): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 4): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 1 nan
	 1 nan
 ]
colonna = 2
g_distanza (2 : 2): [ 1 1 ]


ris (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine assegna1_mv_colonna_d

101: assegna1_m_indxNA_d	<=>	m1[which(is.na(m2))] # o suo complemento
ris (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
ris (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
val = inf
complemento = 0


ris (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine assegna1_m_indxNA_d


Stringhe allocate: 2 (680 interne); stringhe deallocate: 0 (460 interne)


*** Esco da pathlength ***
34: diag_d	<=>	ris <- diag(m)
ris (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_tmp1_d (2 : 2): [ 1 1 ]
------------------------------ Fine diag_d

35: min_v_d	<=>	ris <- min(v)
g_tmp1_d (2 : 2): [ 1 1 ]


min = 1
------------------------------ Fine min_v_d

46: assegna1_s_diag_d	<=>	diag_d(m) <- s
ris (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
val = 0


ris (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_s_diag_d

48: somma_colonne_d	<=>	ris <- apply(m, 2, sum)
ris (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_tmp1_d (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_d

49: copia_v_indx_d	<=>	ris <- v[indx]
g_tmp1_d (2 : 2): [ 1 1 ]
g_ind (2 : 2): [ 1 2 ]


g_P (2 : 2): [ 1 1 ]
------------------------------ Fine copia_v_indx_d

51: min_v_d	<=>	ris <- min(v)
g_P (2 : 2): [ 1 1 ]


min = 1
------------------------------ Fine min_v_d

52: min_v_d	<=>	ris <- min(v)
g_P (2 : 2): [ 1 1 ]


min = 1
------------------------------ Fine min_v_d

52: which_v_indxeq_d	<=>	ris <- which(v==val)
g_P (2 : 2): [ 1 1 ]
val = 1


g_ind2 (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxeq_d

53: copia_v_indx_i	<=>	ris <- v[indx]
g_ind (2 : 2): [ 1 2 ]
g_ind2 (2 : 2): [ 1 2 ]


g_H (2 : 4): [ 1 2 ]
------------------------------ Fine copia_v_indx_i

63: somma_righe_i	<=>	ris <- apply(m, 1, sum)
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_tmp1_i (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

64: somma1_vv_i	<=>	v1 <- v1 + v2
g_S (2 : 2): [ 2 2 ]
g_tmp1_i (2 : 2): [ 2 2 ]


g_S (2 : 2): [ 4 4 ]
------------------------------ Fine somma1_vv_i

66: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 4 4 ]


max = 4
------------------------------ Fine max_v_i

66: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 4 4 ]
val = 4


g_ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxeq_i

68: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (2 : 2): [ 1 2 ]
st = 1
end = 2


g_Hio (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i


Stringhe allocate: 2 (680 interne); stringhe deallocate: 0 (460 interne)


*** Esco da hubs ***


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 2 2
	 2 2
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 2 2
	 2 2
 ]
val = 0


g_ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 2 2
	 2 2
 ]
g_ind (4 : 4): [ 1 2 3 4 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
val = 0


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (2 : 2): [ 0 0 ]
val = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 1


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 1
val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 2


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 2
val = 0


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (2 : 2): [ 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 2 (680 interne); stringhe deallocate: 0 (460 interne)


*** Esco da cluster_coeff2 ***
76: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


elem_ris->rete (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine copia_m_i

79: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_H (2 : 4): [ 1 2 ]
st = 1
end = 2


elem_ris->hubs (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

85: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_Hio (2 : 2): [ 1 2 ]
st = 1
end = 2


elem_ris->hubsio (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i


Stringhe allocate: 2 (695 interne); stringhe deallocate: 2 (495 interne)


*** Esco da createMOD1 ***
Trasformo la matrice
elem_ris->rete (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
Trasformo il vettore elem_ris->hubs (1 : 1): [ 2 ]
Trasformo il vettore elem_ris->hubsio (2 : 2): [ 1 2 ]
Trasformo la matrice
elem_ris->rete (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
Trasformo il vettore elem_ris->hubs (1 : 1): [ 2 ]
Trasformo il vettore elem_ris->hubsio (1 : 1): [ 2 ]
Trasformo la matrice
elem_ris->rete (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
Trasformo il vettore elem_ris->hubs (1 : 1): [ 1 ]
Trasformo il vettore elem_ris->hubsio (1 : 1): [ 2 ]
Trasformo la matrice
elem_ris->rete (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
Trasformo il vettore elem_ris->hubs (2 : 2): [ 1 2 ]
Trasformo il vettore elem_ris->hubsio (2 : 2): [ 1 2 ]
Trasformo la matrice
elem_ris->rete (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
Trasformo il vettore elem_ris->hubs (1 : 1): [ 2 ]
Trasformo il vettore elem_ris->hubsio (1 : 1): [ 2 ]
Trasformo la matrice
elem_ris->rete (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
Trasformo il vettore elem_ris->hubs (1 : 1): [ 2 ]
Trasformo il vettore elem_ris->hubsio (2 : 2): [ 1 2 ]
Trasformo la matrice
elem_ris->rete (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
Trasformo il vettore elem_ris->hubs (2 : 2): [ 1 2 ]
Trasformo il vettore elem_ris->hubsio (2 : 2): [ 1 2 ]

Stringhe allocate: 2 (695 interne); stringhe deallocate: 2 (695 interne)


*** HMM ***
Il vettore 'degree' e` nullo
Ho trasformato la stringa 'INdegree' che vale 'free'
------------------------------ Fine inSTRINGA

Ho trasformato il vettore prior_p_subnet (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (1 : 1): [ 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (1 : 1): [ 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (1 : 1): [ 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (1 : 1): [ 1 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (1 : 1): [ 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (2 : 2): [ 1 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (1 : 1): [ 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (1 : 1): [ 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (1 : 1): [ 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (2 : 2): [ 1 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]

*** HMM1 ***
79: copia_v_d	<=>	ris[st:end] <- v[st:end]
prior_p_subnet (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
st = 1
end = 7


g_prior_p_subnet (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
------------------------------ Fine copia_v_d

88: rep_s_i	<=>	ris <- rep(num, rip)
num = 0
rip = 7


g_MC (7 : 7): [ 0 0 0 0 0 0 0 ]
------------------------------ Fine rep_s_i

94: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_tmp1_i (2 : 2): [ 1 0 ]
------------------------------ Fine somma_righe_i

98: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 1 0 ]


max = 1
------------------------------ Fine max_v_i

94: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_tmp1_i (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

98: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 1 1 ]


max = 1
------------------------------ Fine max_v_i

94: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_tmp1_i (2 : 2): [ 0 2 ]
------------------------------ Fine somma_righe_i

98: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 0 2 ]


max = 2
------------------------------ Fine max_v_i

94: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_tmp1_i (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

98: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 1 1 ]


max = 1
------------------------------ Fine max_v_i

94: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_tmp1_i (2 : 2): [ 1 2 ]
------------------------------ Fine somma_righe_i

98: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 1 2 ]


max = 2
------------------------------ Fine max_v_i

94: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_tmp1_i (2 : 2): [ 2 1 ]
------------------------------ Fine somma_righe_i

98: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 2 1 ]


max = 2
------------------------------ Fine max_v_i

94: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_tmp1_i (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

98: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 2 2 ]


max = 2
------------------------------ Fine max_v_i

120: rep_s_i	<=>	ris <- rep(num, rip)
num = -1
rip = 5


g_LG (5 : 5): [ -1 -1 -1 -1 -1 ]
------------------------------ Fine rep_s_i

123: InitMatr_i
ris (5 x 5 : 5 x 5): [
	 -820514936 0 209 32761 0
	 32761 0 0 1634038371 0
	 19612944 0 19532624 1834968436 161
	 0 0 0 1663984751 0
	 0 0 -820515176 0 24848064
 ]
val = 0


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

130: rep_s_d	<=>	ris <- rep(num, rip)
num = 0
rip = 6


g_tmp1_d (6 : 6): [ 0 0 0 0 0 0 ]
------------------------------ Fine rep_s_d

131: vettore2v_d		<=>	ris <- c(v1, v2)
g_scalare_d (1 : 1): [ 5 ]
g_tmp1_d (6 : 6): [ 0 0 0 0 0 0 ]


g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
------------------------------ Fine vettore2v_d

132: copia_v_d	<=>	ris[st:end] <- v[st:end]
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
st = 1
end = 7


g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
------------------------------ Fine copia_v_d

136: seq_d	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp1_d (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_d

137: exp_d	<=>	ris <- v ^ val
g_tmp1_d (5 : 6): [ 1 2 3 4 5 ]
val = -2.2


g_tmp2_d (5 : 5): [ 1 0.2176376 0.08919351 0.04736614 0.02899119 ]
------------------------------ Fine exp_d

140: vettore3v_d		<=>	ris <- c(v1, v2, v3)
g_scalare1_d (1 : 1): [ nan ]
g_tmp2_d (5 : 5): [ 1 0.2176376 0.08919351 0.04736614 0.02899119 ]
g_scalare_d (1 : 1): [ 0 ]


g_Prob (7 : 7): [ nan 1 0.2176376 0.08919351 0.04736614 0.02899119 0 ]
------------------------------ Fine vettore3v_d

142: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_Prob (7 : 7): [ nan 1 0.2176376 0.08919351 0.04736614 0.02899119 0 ]
canc_NA = 1



ris: 1.383188
------------------------------ Fine somma_v_d

142: dividi1_vs_d	<=>	v <- v / div
g_Prob (7 : 7): [ nan 1 0.2176376 0.08919351 0.04736614 0.02899119 0 ]
div = 1.383


g_Prob (7 : 7): [ nan 0.7229673 0.1573449 0.06448399 0.03424417 0.02095968 0 ]
------------------------------ Fine dividi1_vs_d

154: moltiplica_vs_d	<=>	ris <- v1 * v2
g_Prob (7 : 7): [ nan 0.7229673 0.1573449 0.06448399 0.03424417 0.02095968 0 ]
val = 5


g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
------------------------------ Fine moltiplica_vs_d

156: rep_s_d	<=>	ris <- rep(num, rip)
num = 0
rip = 7


g_STin (7 : 7): [ 0 0 0 0 0 0 0 ]
------------------------------ Fine rep_s_d

167: assegna_v_segm_d	<=>	v[st:end] <- val
g_STin (7 : 7): [ 0 0 0 0 0 0 0 ]
start = 1
end = 6
val = nan


g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
------------------------------ Fine assegna_v_segm_d

189: moltiplica_vs_d	<=>	ris <- v1 * v2
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
val = 0.1


g_tmp1_d (7 : 19): [ nan 0.3614836 0.07867245 0.03224199 0.01712209 0.01047984 0 ]
------------------------------ Fine moltiplica_vs_d

190: rep_s_d	<=>	ris <- rep(num, rip)
num = 1
rip = 7


g_tmp2_d (7 : 17): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine rep_s_d

191: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_tmp1_d (7 : 19): [ nan 0.3614836 0.07867245 0.03224199 0.01712209 0.01047984 0 ]
g_tmp2_d (7 : 17): [ 1 1 1 1 1 1 1 ]


g_aus (7 x 2 : 7 x 2): [
	 nan 1
	 0.3614836 1
	 0.07867245 1
	 0.03224199 1
	 0.01712209 1
	 0.01047984 1
	 0 1
 ]
------------------------------ Fine cbind2v_d

193: max_righe_d	<=>	ris <- apply(m, 1, max)
g_aus (7 x 2 : 7 x 2): [
	 nan 1
	 0.3614836 1
	 0.07867245 1
	 0.03224199 1
	 0.01712209 1
	 0.01047984 1
	 0 1
 ]


g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
------------------------------ Fine max_righe_d

195: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_h (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

203: rep_s_d	<=>	ris <- rep(num, rip)
num = 1
rip = 7


g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine rep_s_d

215: elimina_doppi_i	<=>	ris <- union(v, v)
g_CC (7 : 7): [ 0 0 0 0 0 0 0 ]


g_tmp1_i (1 : 11): [ 0 ]
------------------------------ Fine elimina_doppi_i

216: ordina_i	<=>	ris <- sort(v, decreasing=decr)
g_tmp1_i (1 : 11): [ 0 ]
decr = 0
1774: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp1_i (1 : 11): [ 0 ]
st = 1
end = 1


g_CCs (1 : 1): [ 0 ]
------------------------------ Fine copia_v_i



g_CCs (1 : 1): [ 0 ]
------------------------------ Fine ordina_i

225: rep_s_d	<=>	ris <- rep(num, rip)
num = 1
rip = 1


g_p (1 : 1): [ 1 ]
------------------------------ Fine rep_s_d

228: which_v_indxeq_i	<=>	ris <- which(v==val)
g_CC (7 : 7): [ 0 0 0 0 0 0 0 ]
val = 0


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine which_v_indxeq_i

229: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
st = 1
end = 7


g_CCind[i - 1] (7 : 7): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine copia_v_i

238: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_Sin (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_righe_i

240: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_Sout (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_colonne_i


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


g_ind (0 : 25): [ ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
g_ind (0 : 25): [ ]
val = 1


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (5 : 5): [ 6.952042e-310 6.952042e-310 8.041129e+165 4.566669e-72 1.693686e+190 ]
val = 0


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 1
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 2


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 2
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 3


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 3
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 4


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 4
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 5


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 5
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (5 : 5): [ 0 0 0 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 3 (270 interne); stringhe deallocate: 0 (0 interne)


*** Esco da cluster_coeff2 ***
250: somma_vs_i	<=>	ris <- v + s
g_CCs (1 : 1): [ 0 ]
s = 0


g_tmp1_i (1 : 11): [ 0 ]
------------------------------ Fine somma_vs_i

251: segno_v_i	<=>	ris <- sign(v)
g_tmp1_i (1 : 11): [ 0 ]


g_segno (1 : 1): [ 0 ]
------------------------------ Fine segno_v_i

253: which_v_indxgt_i	<=>	ris <- which(v > val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indp (0 : 1): [ ]
------------------------------ Fine which_v_indxgt_i

255: which_v_indxle_i	<=>	ris <- which(v<=val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indm (1 : 1): [ 1 ]
------------------------------ Fine which_v_indxle_i

259: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indp (0 : 1): [ ]
val2 = 0.3


g_p (1 : 1): [ 1 ]
------------------------------ Fine f_aux9_d

261: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indm (1 : 1): [ 1 ]
val2 = 0.3


g_p (1 : 1): [ 1.7 ]
------------------------------ Fine f_aux9_d

273: min_v_d	<=>	ris <- min(v)
g_p (1 : 1): [ 1.7 ]


min = 1.7
------------------------------ Fine min_v_d

276: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_p (1 : 1): [ 1.7 ]
canc_NA = 0



ris: 1.7
------------------------------ Fine somma_v_d

276: dividi1_vs_d	<=>	v <- v / div
g_p (1 : 1): [ 1.7 ]
div = 1.700


g_p (1 : 1): [ 1 ]
------------------------------ Fine dividi1_vs_d

279: assegna1_v_indx_d	<=>	v[indx] <- val
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
g_CCind[i - 1] (7 : 7): [ 1 2 3 4 5 6 7 ]
val = 1


g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine assegna1_v_indx_d

297: moltiplica_vv_d	<=>	ris <- v1 * v2
g_prior_p_subnet (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]


g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
------------------------------ Fine moltiplica_vv_d

299: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]


max = 0.1428571
------------------------------ Fine max_v_d

303: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
canc_NA = 1



ris: 1
------------------------------ Fine somma_v_d

303: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
div = 1.000


g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
------------------------------ Fine dividi1_vs_d

310: max_v_i		<=>	ris <- max(v)
g_dim (7 : 7): [ 2 2 2 2 2 2 2 ]


max = 2
------------------------------ Fine max_v_i

316: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]


max = 0.1428571
------------------------------ Fine max_v_d

324: which_v_indxgt_d	<=>	ris <- which(v > val)
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
val = 0


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine which_v_indxgt_d

327: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 7
incr = 1


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine seq_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
k = 3, replace = 0
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]


ris (3 : 3): [ 4 1 7 ]
*****************************************


Stringhe allocate: 3 (295 interne); stringhe deallocate: 0 (0 interne)

330: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_mod1 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine copia_m_i


***probmod***
60: InitMatr_i
g_checkOUT (2 x 5 : 2 x 5): [
	 -820515176 -820515176 12461520 12876032 15018544
	 32761 32761 0 0 0
 ]
val = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

62: InitMatr_i
g_checkIN (2 x 5 : 2 x 5): [
	 -820515176 -820515176 12341672 12341672 12341672
	 32761 32761 0 0 0
 ]
val = 0


g_checkIN (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

64: InitMatr_d
ris (2 x 5 : 2 x 5): [
	 6.952042e-310 6.138094e-317 6.138094e-317 6.138094e-317 6.138094e-317
	 6.952042e-310 6.138094e-317 6.138094e-317 6.138094e-317 6.138094e-317
 ]
val = 0


ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_d

66: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_mod1 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_M_in (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

68: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod1 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_M_out (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

71: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -820514792 17857504 22819760
	 32761 0 0
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

87: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

88: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

89: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

106: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_S_new (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_T2 (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ nan nan nan nan nan ]
complemento = 0


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (5 : 5): [ 6.952042e-310 6.952042e-310 6.097596e-317 6.097596e-317 6.097596e-317 ]
val = 0


g_S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]


g_a (5 : 5): [ -3.614836 -3.614836 -3.614836 -3.614836 -3.614836 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -3.614836 -3.614836 -3.614836 -3.614836 -3.614836 ]


g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]


g_b (5 : 5): [ -2.614836 -2.614836 -2.614836 -2.614836 -2.614836 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ -2.614836 -2.614836 -2.614836 -2.614836 -2.614836 ]


g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
 ]


g_m (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
g_m (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
g_T2 (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 1.614836 1.614836 1.614836 1.614836 1.614836 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 1.614836 1.614836 1.614836 1.614836 1.614836 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
g_m (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 0 0 0 0 0 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 1 1 1 1 1 ]
div = 2.000


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (465 interne); stringhe deallocate: 0 (0 interne)


*** Esco da scoremodular ***

109: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
val = -inf


g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

111: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

118: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

119: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

121: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

125: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

126: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

142: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_S_new (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_T2 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ nan nan nan nan nan ]
complemento = 0


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (5 : 5): [ 0 0 0 0 0 ]
val = 0


g_S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ nan nan nan nan nan ]
complemento = 0


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

170: InitVett_d
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = 0


g_S2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 0 0 0 0 0 ]
g_S2 (5 : 5): [ 0 0 0 0 0 ]


Sc (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 0 0 0 0 0 ]
div = 2.000


Sc (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (485 interne); stringhe deallocate: 0 (0 interne)


*** Esco da scoremodular ***

145: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 0 0 0 0 0 ]
val = -inf


g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

147: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

155: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

156: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

158: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 0 0 0 0 0 ]
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine copia_v_indx_d

162: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 0 0 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

163: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 0 0 0 0 0 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

173: somma_vv_d	<=>	ris <- v1 + v2
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
Sc (5 : 5): [ 0 0 0 0 0 ]


g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine somma_vv_d

174: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


ris (2 x 5 : 2 x 5): [
	 0.5 0.5 0.5 0.5 0.5
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

87: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

88: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

89: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

106: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_S_new (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_T2 (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ nan nan nan nan nan ]
complemento = 0


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (5 : 5): [ 0 0 0 0 0 ]
val = 0


g_S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]


g_a (5 : 5): [ -3.614836 -3.614836 -3.614836 -3.614836 -3.614836 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -3.614836 -3.614836 -3.614836 -3.614836 -3.614836 ]


g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]


g_b (5 : 5): [ -2.614836 -2.614836 -2.614836 -2.614836 -2.614836 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ -2.614836 -2.614836 -2.614836 -2.614836 -2.614836 ]


g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
 ]


g_m (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
g_m (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
g_T2 (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 1.614836 1.614836 1.614836 1.614836 1.614836 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 1.614836 1.614836 1.614836 1.614836 1.614836 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
g_m (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 0 0 0 0 0 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 1 1 1 1 1 ]
div = 2.000


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (485 interne); stringhe deallocate: 0 (0 interne)


*** Esco da scoremodular ***

109: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
val = -inf


g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

111: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

118: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

119: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

121: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

125: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

126: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

142: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_S_new (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_T2 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ nan nan nan nan nan ]
complemento = 0


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (5 : 5): [ 0 0 0 0 0 ]
val = 0


g_S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ nan nan nan nan nan ]
complemento = 0


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

170: InitVett_d
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = 0


g_S2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 0 0 0 0 0 ]
g_S2 (5 : 5): [ 0 0 0 0 0 ]


Sc (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 0 0 0 0 0 ]
div = 2.000


Sc (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (485 interne); stringhe deallocate: 0 (0 interne)


*** Esco da scoremodular ***

145: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 0 0 0 0 0 ]
val = -inf


g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

147: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

155: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

156: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

158: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 0 0 0 0 0 ]
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine copia_v_indx_d

162: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 0 0 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

163: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 0 0 0 0 0 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

173: somma_vv_d	<=>	ris <- v1 + v2
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
Sc (5 : 5): [ 0 0 0 0 0 ]


g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine somma_vv_d

174: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 0.5 0.5 0.5 0.5 0.5
	 0 0 0 0 0
 ]
riga = 2
g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


ris (2 x 5 : 2 x 5): [
	 0.5 0.5 0.5 0.5 0.5
	 0.5 0.5 0.5 0.5 0.5
 ]
------------------------------ Fine aggiungi_mv_riga_d

182: somma_m_d	<=>	ris <- sum(m)
ris (2 x 5 : 2 x 5): [
	 0.5 0.5 0.5 0.5 0.5
	 0.5 0.5 0.5 0.5 0.5
 ]


ris: 5
------------------------------ Fine somma_m_d

187: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_tmp_i3 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_colonne_i

189: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp_i3 (5 : 5): [ 2 2 2 2 2 ]
val = 0


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

200: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_rs (2 : 2): [ 5 5 ]
------------------------------ Fine somma_righe_i

202: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 5 5 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

215: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

217: unione1_i	<=>	v1 <- union(v1, v2)
g_I (0 : 0): [ ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

215: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

217: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

230: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

232: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

234: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_tmp_i3 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_colonne_i

236: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp_i3 (5 : 5): [ 2 2 2 2 2 ]
val = 0


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

246: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_rs (2 : 2): [ 5 5 ]
------------------------------ Fine somma_righe_i

248: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 5 5 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

260: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

262: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 10): [ ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

260: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

262: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i


Stringhe allocate: 3 (545 interne); stringhe deallocate: 0 (40 interne)

338: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
------------------------------ Fine copia_m_i


***probmod***
60: InitMatr_i
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

62: InitMatr_i
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val = 0


g_checkIN (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

64: InitMatr_d
ris (2 x 5 : 2 x 5): [
	 6.952042e-310 6.097596e-317 6.097596e-317 6.097596e-317 6.097596e-317
	 6.952042e-310 6.097596e-317 6.097596e-317 6.097596e-317 6.097596e-317
 ]
val = 0


ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_d

66: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_M_in (2 : 2): [ 1 0 ]
------------------------------ Fine somma_righe_i

68: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_M_out (2 : 2): [ 0 1 ]
------------------------------ Fine somma_colonne_i

71: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

87: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

88: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

89: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

133: InitVett_d
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
val = 0


Sc (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

136: InitVett_i
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
val = 1


g_tmp_i1 (5 : 6): [ 1 1 1 1 1 ]
------------------------------ Fine InitVett_i

137: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_tmp_i1 (5 : 6): [ 1 1 1 1 1 ]


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_i

142: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_S_new (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_T2 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ nan nan nan nan nan ]
complemento = 0


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (5 : 5): [ 0 0 0 0 0 ]
val = 0


g_S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ nan nan nan nan nan ]
complemento = 0


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

170: InitVett_d
g_S2 (5 : 5): [ 0 0 0 0 0 ]
val = 0


g_S2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 0 0 0 0 0 ]
g_S2 (5 : 5): [ 0 0 0 0 0 ]


Sc (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 0 0 0 0 0 ]
div = 2.000


Sc (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (555 interne); stringhe deallocate: 0 (40 interne)


*** Esco da scoremodular ***

145: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 0 0 0 0 0 ]
val = -inf


g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

147: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

155: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

156: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

158: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 0 0 0 0 0 ]
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine copia_v_indx_d

162: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 0 0 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

163: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 0 0 0 0 0 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

173: somma_vv_d	<=>	ris <- v1 + v2
Sc (5 : 5): [ 0 0 0 0 0 ]
Sc (5 : 5): [ 0 0 0 0 0 ]


g_tmp_d1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_vv_d

174: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_tmp_d1 (5 : 5): [ 0 0 0 0 0 ]


ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

87: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

88: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

89: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

106: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_S_new (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_T2 (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ nan nan nan nan nan ]
complemento = 0


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (5 : 5): [ 0 0 0 0 0 ]
val = 0


g_S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]


g_a (5 : 5): [ -3.614836 -3.614836 -3.614836 -3.614836 -3.614836 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -3.614836 -3.614836 -3.614836 -3.614836 -3.614836 ]


g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]


g_b (5 : 5): [ -2.614836 -2.614836 -2.614836 -2.614836 -2.614836 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ -2.614836 -2.614836 -2.614836 -2.614836 -2.614836 ]


g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
 ]


g_m (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
g_m (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
g_T2 (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 1.614836 1.614836 1.614836 1.614836 1.614836 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 1.614836 1.614836 1.614836 1.614836 1.614836 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]
g_b (5 : 5): [ 2.614836 2.614836 2.614836 2.614836 2.614836 ]
g_m (5 : 5): [ 3.614836 3.614836 3.614836 3.614836 3.614836 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 0 0 0 0 0 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 1 1 1 1 1 ]
div = 2.000


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (555 interne); stringhe deallocate: 0 (40 interne)


*** Esco da scoremodular ***

109: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
val = -inf


g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

111: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

118: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

119: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

121: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

125: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

126: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

169: InitVett_d
Sc (5 : 5): [ 0 0 0 0 0 ]
val = 0


Sc (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

170: aggiungi_ms_riga_i	<=>	m[riga,] <- val # riga <= dim(m)[0] + 1
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2, val = 1


g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_ms_riga_i

173: somma_vv_d	<=>	ris <- v1 + v2
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
Sc (5 : 5): [ 0 0 0 0 0 ]


g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine somma_vv_d

174: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 2
g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0.5 0.5 0.5 0.5 0.5
 ]
------------------------------ Fine aggiungi_mv_riga_d

182: somma_m_d	<=>	ris <- sum(m)
ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0.5 0.5 0.5 0.5 0.5
 ]


ris: 2.5
------------------------------ Fine somma_m_d

187: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_tmp_i3 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_colonne_i

189: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp_i3 (5 : 5): [ 2 2 2 2 2 ]
val = 0


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

200: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_rs (2 : 2): [ 5 5 ]
------------------------------ Fine somma_righe_i

202: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 5 5 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

215: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

217: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 10): [ ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

215: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

217: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

230: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

232: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

234: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_tmp_i3 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_colonne_i

236: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp_i3 (5 : 5): [ 2 2 2 2 2 ]
val = 0


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

246: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_rs (2 : 2): [ 5 5 ]
------------------------------ Fine somma_righe_i

248: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 5 5 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

260: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

262: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 10): [ ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

260: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

262: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i


Stringhe allocate: 3 (595 interne); stringhe deallocate: 0 (80 interne)

352: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_mod3 (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine copia_m_i


***probmod***
60: InitMatr_i
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

62: InitMatr_i
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val = 0


g_checkIN (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

64: InitMatr_d
ris (2 x 5 : 2 x 5): [
	 6.952042e-310 1.004847e-316 1.852746e-321 6.382566e-314 7.605233e-311
	 1.004847e-316 6.952042e-310 4.780643e-299 1.352645e-309 8.715176e+252
 ]
val = 0


ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_d

66: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_mod3 (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_M_in (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

68: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod3 (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_M_out (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

71: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

87: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 2


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

88: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

89: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

106: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 2


g_S_new (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_T2 (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ nan nan nan nan nan ]
complemento = 0


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (5 : 5): [ 0 0 0 0 0 ]
val = 0


g_S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]


g_a (5 : 5): [ -0.7867245 -0.7867245 -0.7867245 -0.7867245 -0.7867245 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -0.7867245 -0.7867245 -0.7867245 -0.7867245 -0.7867245 ]


g_a (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]


g_b (5 : 5): [ 0.2132755 0.2132755 0.2132755 0.2132755 0.2132755 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 0.2132755 0.2132755 0.2132755 0.2132755 0.2132755 ]


g_b (5 : 5): [ 0.2132755 0.2132755 0.2132755 0.2132755 0.2132755 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 0.2132755 0.2132755 0.2132755 0.2132755 0.2132755 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 0.2132755 0.2132755 0.2132755 0.2132755 0.2132755 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
g_b (5 : 5): [ 0.2132755 0.2132755 0.2132755 0.2132755 0.2132755 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 0.7867245 0.2132755
	 0.7867245 0.2132755
	 0.7867245 0.2132755
	 0.7867245 0.2132755
	 0.7867245 0.2132755
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 0.7867245 0.2132755
	 0.7867245 0.2132755
	 0.7867245 0.2132755
	 0.7867245 0.2132755
	 0.7867245 0.2132755
 ]


g_m (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
g_b (5 : 5): [ 0.2132755 0.2132755 0.2132755 0.2132755 0.2132755 ]
g_m (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
g_T2 (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.2132755 -0.2132755 -0.2132755 -0.2132755 -0.2132755 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ -0.2132755 -0.2132755 -0.2132755 -0.2132755 -0.2132755 ]
val = 0

g_ind1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 0.2132755 0.2132755 0.2132755 0.2132755 0.2132755 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.7867245 -0.7867245 -0.7867245 -0.7867245 -0.7867245 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ -0.7867245 -0.7867245 -0.7867245 -0.7867245 -0.7867245 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (5 : 5): [ 1 2 3 4 5 ]
g_ind2 (0 : 5): [ ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 4
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 5
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
g_b (5 : 5): [ 0.2132755 0.2132755 0.2132755 0.2132755 0.2132755 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
g_b (5 : 5): [ 0.2132755 0.2132755 0.2132755 0.2132755 0.2132755 ]
g_m (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 0 0 0 0 0 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 1 1 1 1 1 ]
div = 2.000


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (605 interne); stringhe deallocate: 0 (80 interne)


*** Esco da scoremodular ***

109: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
val = -inf


g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

111: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

118: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

119: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

121: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

125: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

126: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

142: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 2


g_S_new (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_T2 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ nan nan nan nan nan ]
complemento = 0


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (5 : 5): [ 0 0 0 0 0 ]
val = 0


g_S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ nan nan nan nan nan ]
complemento = 0


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

170: InitVett_d
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = 0


g_S2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 0 0 0 0 0 ]
g_S2 (5 : 5): [ 0 0 0 0 0 ]


Sc (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 0 0 0 0 0 ]
div = 2.000


Sc (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (605 interne); stringhe deallocate: 0 (80 interne)


*** Esco da scoremodular ***

145: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 0 0 0 0 0 ]
val = -inf


g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

147: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

155: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

156: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

158: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 0 0 0 0 0 ]
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine copia_v_indx_d

162: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 0 0 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

163: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 0 0 0 0 0 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

173: somma_vv_d	<=>	ris <- v1 + v2
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
Sc (5 : 5): [ 0 0 0 0 0 ]


g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine somma_vv_d

174: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


ris (2 x 5 : 2 x 5): [
	 0.5 0.5 0.5 0.5 0.5
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

87: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 2


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

88: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

89: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

106: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 2


g_S_new (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_T2 (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ nan nan nan nan nan ]
complemento = 0


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (5 : 5): [ 0 0 0 0 0 ]
val = 0


g_S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]


g_a (5 : 5): [ -0.7867245 -0.7867245 -0.7867245 -0.7867245 -0.7867245 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -0.7867245 -0.7867245 -0.7867245 -0.7867245 -0.7867245 ]


g_a (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]


g_b (5 : 5): [ 0.2132755 0.2132755 0.2132755 0.2132755 0.2132755 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 0.2132755 0.2132755 0.2132755 0.2132755 0.2132755 ]


g_b (5 : 5): [ 0.2132755 0.2132755 0.2132755 0.2132755 0.2132755 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 0.2132755 0.2132755 0.2132755 0.2132755 0.2132755 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 0.2132755 0.2132755 0.2132755 0.2132755 0.2132755 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
g_b (5 : 5): [ 0.2132755 0.2132755 0.2132755 0.2132755 0.2132755 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 0.7867245 0.2132755
	 0.7867245 0.2132755
	 0.7867245 0.2132755
	 0.7867245 0.2132755
	 0.7867245 0.2132755
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 0.7867245 0.2132755
	 0.7867245 0.2132755
	 0.7867245 0.2132755
	 0.7867245 0.2132755
	 0.7867245 0.2132755
 ]


g_m (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
g_b (5 : 5): [ 0.2132755 0.2132755 0.2132755 0.2132755 0.2132755 ]
g_m (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
g_T2 (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.2132755 -0.2132755 -0.2132755 -0.2132755 -0.2132755 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ -0.2132755 -0.2132755 -0.2132755 -0.2132755 -0.2132755 ]
val = 0

g_ind1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 0.2132755 0.2132755 0.2132755 0.2132755 0.2132755 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.7867245 -0.7867245 -0.7867245 -0.7867245 -0.7867245 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ -0.7867245 -0.7867245 -0.7867245 -0.7867245 -0.7867245 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (5 : 5): [ 1 2 3 4 5 ]
g_ind2 (0 : 5): [ ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 4
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 5
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
g_b (5 : 5): [ 0.2132755 0.2132755 0.2132755 0.2132755 0.2132755 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]
g_b (5 : 5): [ 0.2132755 0.2132755 0.2132755 0.2132755 0.2132755 ]
g_m (5 : 5): [ 0.7867245 0.7867245 0.7867245 0.7867245 0.7867245 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 0 0 0 0 0 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 1 1 1 1 1 ]
div = 2.000


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (605 interne); stringhe deallocate: 0 (80 interne)


*** Esco da scoremodular ***

109: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
val = -inf


g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

111: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

118: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

119: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

121: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

125: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

126: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

142: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 2


g_S_new (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_T2 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ nan nan nan nan nan ]
complemento = 0


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (5 : 5): [ 0 0 0 0 0 ]
val = 0


g_S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ nan nan nan nan nan ]


g_a (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ nan nan nan nan nan ]


g_b (5 : 5): [ nan nan nan nan nan ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ nan nan nan nan nan ]
complemento = 0


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

170: InitVett_d
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = 0


g_S2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 0 0 0 0 0 ]
g_S2 (5 : 5): [ 0 0 0 0 0 ]


Sc (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 0 0 0 0 0 ]
div = 2.000


Sc (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (605 interne); stringhe deallocate: 0 (80 interne)


*** Esco da scoremodular ***

145: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 0 0 0 0 0 ]
val = -inf


g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

147: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

155: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

156: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

158: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 0 0 0 0 0 ]
g_tmp_i3 (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine copia_v_indx_d

162: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 0 0 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

163: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 0 0 0 0 0 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

173: somma_vv_d	<=>	ris <- v1 + v2
Sc (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
Sc (5 : 5): [ 0 0 0 0 0 ]


g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine somma_vv_d

174: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 0.5 0.5 0.5 0.5 0.5
	 0 0 0 0 0
 ]
riga = 2
g_tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


ris (2 x 5 : 2 x 5): [
	 0.5 0.5 0.5 0.5 0.5
	 0.5 0.5 0.5 0.5 0.5
 ]
------------------------------ Fine aggiungi_mv_riga_d

182: somma_m_d	<=>	ris <- sum(m)
ris (2 x 5 : 2 x 5): [
	 0.5 0.5 0.5 0.5 0.5
	 0.5 0.5 0.5 0.5 0.5
 ]


ris: 5
------------------------------ Fine somma_m_d

187: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_tmp_i3 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_colonne_i

189: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp_i3 (5 : 5): [ 2 2 2 2 2 ]
val = 0


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

200: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_rs (2 : 2): [ 5 5 ]
------------------------------ Fine somma_righe_i

202: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 5 5 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

215: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

217: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 10): [ ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

215: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

217: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

230: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

232: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

234: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_tmp_i3 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_colonne_i

236: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp_i3 (5 : 5): [ 2 2 2 2 2 ]
val = 0


g_tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

246: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_rs (2 : 2): [ 5 5 ]
------------------------------ Fine somma_righe_i

248: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 5 5 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

260: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

262: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 10): [ ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

260: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

262: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i


Stringhe allocate: 3 (645 interne); stringhe deallocate: 0 (120 interne)

364: vettore3s_d		<=>	ris <- c(el1, el2, el3)
el1 = 2.5, el2 = 1.25, el3 = 2.5


g_pm (3 : 3): [ 2.5 1.25 2.5 ]
------------------------------ Fine vettore3s_d

365: copia_v_d	<=>	ris[st:end] <- v[st:end]
g_pm (3 : 3): [ 2.5 1.25 2.5 ]
st = 1
end = 3


g_prob_mod (3 : 3): [ 2.5 1.25 2.5 ]
------------------------------ Fine copia_v_d

367: assegna1_v_indxNA_d	<=>	v1[which(is.na(v2))] <- val oppure v1[which(!is.na(v2))] <- val
g_prob_mod (3 : 3): [ 2.5 1.25 2.5 ]
g_prob_mod (3 : 3): [ 2.5 1.25 2.5 ]
val = 0
complemento = 0


g_prob_mod (3 : 3): [ 2.5 1.25 2.5 ]
------------------------------ Fine assegna1_v_indxNA_d

369: min_v_d	<=>	ris <- min(v)
g_prob_mod (3 : 3): [ 2.5 1.25 2.5 ]


min = 1.25
------------------------------ Fine min_v_d

374: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_pm (3 : 3): [ 2.5 1.25 2.5 ]
complemento = 0


g_tmp1_i (0 : 11): [ ]
------------------------------ Fine which_v_indxNA_d

375: assegna1_v_indx_d	<=>	v[indx] <- val
g_prob_mod (3 : 3): [ 2.5 1.25 2.5 ]
g_tmp1_i (0 : 11): [ ]
val = 0


g_prob_mod (3 : 3): [ 2.5 1.25 2.5 ]
------------------------------ Fine assegna1_v_indx_d

377: which_v_indxne_d	<=>	ris <- which(v != val)
g_prob_mod (3 : 3): [ 2.5 1.25 2.5 ]
val = 0


g_ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

381: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_prob_mod (3 : 3): [ 2.5 1.25 2.5 ]
canc_NA = 0



ris: 6.25
------------------------------ Fine somma_v_d

381: dividi1_vs_d	<=>	v <- v / div
g_prob_mod (3 : 3): [ 2.5 1.25 2.5 ]
div = 6.250


g_prob_mod (3 : 3): [ 0.4 0.2 0.4 ]
------------------------------ Fine dividi1_vs_d

383: vettore3s_i		<=>	ris <- c(el1, el2, el3)
el1 = 1, el2 = 2, el3 = 3


g_tmp1_i (3 : 11): [ 1 2 3 ]
------------------------------ Fine vettore3s_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (3 : 11): [ 1 2 3 ]
k = 1, replace = 0
g_prob_mod (3 : 3): [ 0.4 0.2 0.4 ]


ris (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 3 (665 interne); stringhe deallocate: 0 (120 interne)

408: copia_m_i	<=>	ris <- da
g_mod3 (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_M (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine copia_m_i

409: copia_m_d	<=>	ris <- da
ris (2 x 5 : 2 x 5): [
	 0.5 0.5 0.5 0.5 0.5
	 0.5 0.5 0.5 0.5 0.5
 ]


g_Sc (2 x 5 : 2 x 5): [
	 0.5 0.5 0.5 0.5 0.5
	 0.5 0.5 0.5 0.5 0.5
 ]
------------------------------ Fine copia_m_d

411: copia_v_i	<=>	ris[st:end] <- v[st:end]
VECTOR_ELT(elem, 2) (2 : 2): [ 1 2 ]
st = 1
end = 2


g_hubs (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

427: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
canc_NA = 0



ris: 1
------------------------------ Fine somma_v_d

427: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
div = 1.000


g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
------------------------------ Fine dividi1_vs_d


***sampleB***

***sample***
g_hubs (2 : 2): [ 1 2 ]
k = 1, replace = 0


g_hubs (1 : 2): [ 2 ]
*****************************************


Stringhe allocate: 3 (680 interne); stringhe deallocate: 0 (120 interne)


Stringhe allocate: 3 (680 interne); stringhe deallocate: 0 (120 interne)

739: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_h1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i


***assign_nodes***
46: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_or_h (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

48: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_aus_h (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

54: InitVett_i
g_index (2 : 2): [ -820515176 32761 ]
val = 0


g_index (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_i

56: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_M (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_M_in (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

58: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_M_in (2 : 2): [ 2 2 ]
decr = 1


g_Ord (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

63: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 5 : 2 x 5): [
	 0.5 0.5 0.5 0.5 0.5
	 0.5 0.5 0.5 0.5 0.5
 ]
r = 1

g_p (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine riga_d

65: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
val = 0


g_tmp_i (0 : 5): [ ]
------------------------------ Fine which_v_indxle_d

72: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 0 0 0 0 ]
g_h1 (5 : 5): [ 1 2 3 4 5 ]


g_Sin_h (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i

77: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sin_h (5 : 5): [ 0 0 0 0 0 ]
val = 3


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

83: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_aus_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine assegna_v_indxNA_d

84: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
canc_NA = 0



ris: 2.5
------------------------------ Fine somma_v_d

85: dividi_vs_d	ris <- v / div
g_tmp_d (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
div = 2.500


g_p (5 : 5): [ 0.2 0.2 0.2 0.2 0.2 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (5 : 5): [ 1 2 3 4 5 ]
k = 1, replace = 0
g_p (5 : 5): [ 0.2 0.2 0.2 0.2 0.2 ]


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 3 (745 interne); stringhe deallocate: 0 (120 interne)

92: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (5 : 5): [ 1 2 3 4 5 ]
ris (1 : 1): [ 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 2
g_h1 (5 : 5): [ 1 2 3 4 5 ]


indx = 2
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (5 : 5): [ 1 2 3 4 5 ]
indx = 2


g_h1 (4 : 5): [ 1 3 4 5 ]
------------------------------ Fine elimina1_indx_i



g_h1 (4 : 5): [ 1 3 4 5 ]
------------------------------ Fine setdiff1_i

94: which_indx_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (5 : 5): [ 1 2 3 4 5 ]
ris (1 : 1): [ 2 ]
2032: esiste_v_i	<=>	elem %IN% v
elem = 2
g_or_h (5 : 5): [ 1 2 3 4 5 ]


indx = 2
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 1 ]
------------------------------ Fine which_indx_vv_eq_i

95: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (5 : 5): [ 1 2 3 4 5 ]
g_tmp_i (1 : 5): [ 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
g_aus_h (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
g_aus_h (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_aus_h (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i



g_aus_h (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine setdiff1_i

63: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 5 : 2 x 5): [
	 0.5 0.5 0.5 0.5 0.5
	 0.5 0.5 0.5 0.5 0.5
 ]
r = 2

g_p (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine riga_d

65: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
val = 0


g_tmp_i (0 : 5): [ ]
------------------------------ Fine which_v_indxle_d

72: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 0 0 0 0 ]
g_h1 (4 : 5): [ 1 3 4 5 ]


g_Sin_h (4 : 5): [ 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i

77: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sin_h (4 : 5): [ 0 0 0 0 ]
val = 3


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

83: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
g_aus_h (4 : 5): [ 2 3 4 5 ]


g_tmp_d (4 : 5): [ 0.5 0.5 0.5 0.5 ]
------------------------------ Fine assegna_v_indxNA_d

84: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (4 : 5): [ 0.5 0.5 0.5 0.5 ]
canc_NA = 0



ris: 2
------------------------------ Fine somma_v_d

85: dividi_vs_d	ris <- v / div
g_tmp_d (4 : 5): [ 0.5 0.5 0.5 0.5 ]
div = 2.000


g_p (4 : 5): [ 0.25 0.25 0.25 0.25 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (4 : 5): [ 1 3 4 5 ]
k = 1, replace = 0
g_p (4 : 5): [ 0.25 0.25 0.25 0.25 ]


ris (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 3 (745 interne); stringhe deallocate: 0 (120 interne)

92: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (4 : 5): [ 1 3 4 5 ]
ris (1 : 1): [ 3 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 3
g_h1 (4 : 5): [ 1 3 4 5 ]


indx = 2
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (4 : 5): [ 1 3 4 5 ]
indx = 2


g_h1 (3 : 5): [ 1 4 5 ]
------------------------------ Fine elimina1_indx_i



g_h1 (3 : 5): [ 1 4 5 ]
------------------------------ Fine setdiff1_i

94: which_indx_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (5 : 5): [ 1 2 3 4 5 ]
ris (1 : 1): [ 3 ]
2032: esiste_v_i	<=>	elem %IN% v
elem = 3
g_or_h (5 : 5): [ 1 2 3 4 5 ]


indx = 3
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 1 ]
------------------------------ Fine which_indx_vv_eq_i

95: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (4 : 5): [ 2 3 4 5 ]
g_tmp_i (1 : 5): [ 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
g_aus_h (4 : 5): [ 2 3 4 5 ]


indx = 0
------------------------------ Fine esiste_v_i



g_aus_h (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine setdiff1_i

103: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
riga = 1
val = 1


g_ind (2 : 5): [ 1 2 ]
------------------------------ Fine which_m_rowindxeq_i

105: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 2 3 ]
g_ind (2 : 5): [ 1 2 ]


g_co (2 : 2): [ 2 3 ]
------------------------------ Fine copia_v_indx_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
g_ri (1 : 1): [ 2 ]
g_co (2 : 2): [ 2 3 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 1
g_hubs (1 : 2): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i

103: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
riga = 2
val = 1


g_ind (2 : 5): [ 1 2 ]
------------------------------ Fine which_m_rowindxeq_i

105: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 2 3 ]
g_ind (2 : 5): [ 1 2 ]


g_co (2 : 2): [ 2 3 ]
------------------------------ Fine copia_v_indx_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
g_ri (1 : 1): [ 3 ]
g_co (2 : 2): [ 2 3 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 2
g_hubs (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

111: accoda1_vv_i	<=>	v1 <- c(v1, v2)
ris (0 : 1): [ ]
g_ri (1 : 1): [ 3 ]


ris (1 : 1): [ 3 ]
------------------------------ Fine accoda_vv_i


*** Esco da assign_nodes ***


Stringhe allocate: 3 (755 interne); stringhe deallocate: 0 (120 interne)

747: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_h (5 : 5): [ 1 2 3 4 5 ]
g_h1 (3 : 5): [ 1 4 5 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_tmp1_i (5 : 11): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_tmp1_i (5 : 11): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_tmp1_i (5 : 11): [ 1 2 3 4 5 ]
indx = 1


g_tmp1_i (4 : 11): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 4
g_tmp1_i (4 : 11): [ 2 3 4 5 ]


indx = 3
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_tmp1_i (4 : 11): [ 2 3 4 5 ]
indx = 3


g_tmp1_i (3 : 11): [ 2 3 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 5
g_tmp1_i (3 : 11): [ 2 3 5 ]


indx = 3
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_tmp1_i (3 : 11): [ 2 3 5 ]
indx = 3


g_tmp1_i (2 : 11): [ 2 3 ]
------------------------------ Fine elimina1_indx_i



g_tmp1_i (2 : 11): [ 2 3 ]
------------------------------ Fine setdiff_i

748: incr1_v_indx_i	<=>	v[indx] <- v[indx] + s
g_LG (5 : 5): [ -1 -1 -1 -1 -1 ]
g_tmp1_i (2 : 11): [ 2 3 ]
val = 1


g_LG (5 : 5): [ -1 0 0 -1 -1 ]
------------------------------ Fine incr1_v_indx_i

752: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (3 : 5): [ 1 4 5 ]
st = 1
end = 3


g_h (3 : 5): [ 1 4 5 ]
------------------------------ Fine copia_v_i

754: accoda1_vv_i	<=>	v1 <- c(v1, v2)
g_h_new (0 : 0): [ ]
ris (1 : 1): [ 3 ]
ATTENZIONE (accoda_vv_i, linea /home/marco/hmm/HMM.c # 754): ingrandito il vettore da 0 a 1!


g_h_new (1 : 2): [ 3 ]
------------------------------ Fine accoda_vv_i

756: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_Sout (5 : 5): [ 0 2 2 0 0 ]
------------------------------ Fine somma_colonne_i

758: max_v_i		<=>	ris <- max(v)
g_Sout (5 : 5): [ 0 2 2 0 0 ]


max = 2
------------------------------ Fine max_v_i

760: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 3
incr = 1


g_tmp2_i (4 : 4): [ 0 1 2 3 ]
------------------------------ Fine seq_i


*** hist1 ***
g_Sout (5 : 5): [ 0 2 2 0 0 ]
g_tmp2_i (4 : 4): [ 0 1 2 3 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
g_tmp1_i (3 : 11): [ 2 3 5 ]
val = 0


g_tmp1_i (3 : 11): [ 0 0 0 ]
------------------------------ Fine InitVett_i



g_tmp1_i (3 : 11): [ 3 0 2 ]

Stringhe allocate: 3 (766 interne); stringhe deallocate: 0 (126 interne)

762: promuovi_i	(implicita)
g_tmp1_i (3 : 11): [ 3 0 2 ]
ATTENZIONE (promuovi_i, linea /home/marco/hmm/HMM.c # 762): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

g_tmp1_d (3 : 19): [ 3 0 2 ]
------------------------------ Fine promuovi_i

763: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
start = 1
end = 3
g_tmp1_d (3 : 19): [ 3 0 2 ]


g_Freq_out (7 : 7): [ 3 0 2 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

765: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_Sin (5 : 5): [ 0 2 2 0 0 ]
------------------------------ Fine somma_righe_i

767: max_v_i		<=>	ris <- max(v)
g_Sin (5 : 5): [ 0 2 2 0 0 ]


max = 2
------------------------------ Fine max_v_i

769: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 3
incr = 1


g_tmp2_i (4 : 4): [ 0 1 2 3 ]
------------------------------ Fine seq_i


*** hist1 ***
g_Sin (5 : 5): [ 0 2 2 0 0 ]
g_tmp2_i (4 : 4): [ 0 1 2 3 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
g_tmp1_i (3 : 11): [ 3 0 2 ]
val = 0


g_tmp1_i (3 : 11): [ 0 0 0 ]
------------------------------ Fine InitVett_i



g_tmp1_i (3 : 11): [ 3 0 2 ]

Stringhe allocate: 3 (767 interne); stringhe deallocate: 0 (127 interne)

771: promuovi_i	(implicita)
g_tmp1_i (3 : 11): [ 3 0 2 ]
ATTENZIONE (promuovi_i, linea /home/marco/hmm/HMM.c # 771): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

g_tmp1_d (3 : 19): [ 3 0 2 ]
------------------------------ Fine promuovi_i

772: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
start = 1
end = 3
g_tmp1_d (3 : 19): [ 3 0 2 ]


g_Freq_in (7 : 7): [ 3 0 2 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

238: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_Sin (5 : 5): [ 0 2 2 0 0 ]
------------------------------ Fine somma_righe_i

240: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_Sout (5 : 5): [ 0 2 2 0 0 ]
------------------------------ Fine somma_colonne_i


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 2 2 0 0
	 0 2 2 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 2 2 0 0
	 0 2 2 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


g_ind (4 : 25): [ 7 8 12 13 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 2 2 0 0
	 0 2 2 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
g_ind (4 : 25): [ 7 8 12 13 ]
val = 1


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (5 : 5): [ 0 0 0 0 0 ]
val = 0


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 1
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 2


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 2
val = 0


g_neighbours (1 : 25): [ 3 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 3


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 3
val = 0


g_neighbours (1 : 25): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 4


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 4
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 5


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 5
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (5 : 5): [ 0 0 0 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 3 (768 interne); stringhe deallocate: 0 (128 interne)


*** Esco da cluster_coeff2 ***
250: somma_vs_i	<=>	ris <- v + s
g_CCs (1 : 1): [ 0 ]
s = 0


g_tmp1_i (1 : 11): [ 0 ]
------------------------------ Fine somma_vs_i

251: segno_v_i	<=>	ris <- sign(v)
g_tmp1_i (1 : 11): [ 0 ]


g_segno (1 : 1): [ 0 ]
------------------------------ Fine segno_v_i

253: which_v_indxgt_i	<=>	ris <- which(v > val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indp (0 : 1): [ ]
------------------------------ Fine which_v_indxgt_i

255: which_v_indxle_i	<=>	ris <- which(v<=val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indm (1 : 1): [ 1 ]
------------------------------ Fine which_v_indxle_i

259: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indp (0 : 1): [ ]
val2 = 0.3


g_p (1 : 1): [ 1 ]
------------------------------ Fine f_aux9_d

261: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indm (1 : 1): [ 1 ]
val2 = 0.3


g_p (1 : 1): [ 1.7 ]
------------------------------ Fine f_aux9_d

273: min_v_d	<=>	ris <- min(v)
g_p (1 : 1): [ 1.7 ]


min = 1.7
------------------------------ Fine min_v_d

276: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_p (1 : 1): [ 1.7 ]
canc_NA = 0



ris: 1.7
------------------------------ Fine somma_v_d

276: dividi1_vs_d	<=>	v <- v / div
g_p (1 : 1): [ 1.7 ]
div = 1.700


g_p (1 : 1): [ 1 ]
------------------------------ Fine dividi1_vs_d

279: assegna1_v_indx_d	<=>	v[indx] <- val
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
g_CCind[i - 1] (7 : 7): [ 1 2 3 4 5 6 7 ]
val = 1


g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine assegna1_v_indx_d

297: moltiplica_vv_d	<=>	ris <- v1 * v2
g_prior_p_subnet (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]


g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
------------------------------ Fine moltiplica_vv_d

299: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]


max = 0.1428571
------------------------------ Fine max_v_d

303: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
canc_NA = 1



ris: 1
------------------------------ Fine somma_v_d

303: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
div = 1.000


g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
------------------------------ Fine dividi1_vs_d

310: max_v_i		<=>	ris <- max(v)
g_dim (7 : 7): [ 2 2 2 2 2 2 2 ]


max = 2
------------------------------ Fine max_v_i

316: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]


max = 0.1428571
------------------------------ Fine max_v_d

324: which_v_indxgt_d	<=>	ris <- which(v > val)
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
val = 0


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine which_v_indxgt_d

327: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 7
incr = 1


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine seq_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
k = 3, replace = 0
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]


ris (3 : 3): [ 2 3 6 ]
*****************************************


Stringhe allocate: 3 (768 interne); stringhe deallocate: 0 (128 interne)

330: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_mod1 (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
------------------------------ Fine copia_m_i


***probmod***
60: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

62: InitMatr_i
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

64: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 0.5 0.5 0.5
	 0.5 0.5 0.5
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

66: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_mod1 (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_M_in (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

68: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod1 (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_M_out (2 : 2): [ 0 2 ]
------------------------------ Fine somma_colonne_i

71: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

87: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

88: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

89: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

133: InitVett_d
Sc (3 : 5): [ 0.5 0.5 0.5 ]
val = 0


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

136: InitVett_i
g_tmp_i1 (3 : 6): [ 1 2 3 ]
val = 1


g_tmp_i1 (3 : 6): [ 1 1 1 ]
------------------------------ Fine InitVett_i

137: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_i1 (3 : 6): [ 1 1 1 ]


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_i

142: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 2 2 0 0 ]
g_h (3 : 5): [ 1 4 5 ]


g_tmp_i1 (3 : 6): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_S_new (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_T2 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 3 0 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 3 0 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_old2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 0 0 0 ]
s = 1


g_new2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 0 0 0 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 0 0 0 ]
g_T2 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

170: InitVett_d
g_S2 (3 : 5): [ 0 0 0 ]
val = 0


g_S2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ 0 0 0 ]


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 0 0 0 ]
div = 2.000


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (768 interne); stringhe deallocate: 0 (128 interne)


*** Esco da scoremodular ***

145: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0 0 0 ]
val = -inf


g_tmp_i3 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

147: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_i3 (3 : 5): [ 1 2 3 ]
val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

155: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

156: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

158: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0 0 0 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine copia_v_indx_d

162: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

163: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0 0 0 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

173: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ 0 0 0 ]
Sc (3 : 5): [ 0 0 0 ]


g_tmp_d1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine somma_vv_d

174: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_d1 (3 : 5): [ 0 0 0 ]


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

87: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

88: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

89: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

106: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 2 2 0 0 ]
g_h (3 : 5): [ 1 4 5 ]


g_tmp_i1 (3 : 6): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 2


g_S_new (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_T2 (3 : 5): [ 0.7867245 0.7867245 0.7867245 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 0 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 0 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_old2 (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 2 2 2 ]
s = 1


g_new2 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 0 0 0 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 2 2 2 ]
g_T2 (3 : 5): [ 0.7867245 0.7867245 0.7867245 ]


g_a (3 : 5): [ 1.213276 1.213276 1.213276 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1.213276 1.213276 1.213276 ]


g_a (3 : 5): [ 1.213276 1.213276 1.213276 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 3 3 3 ]
g_T2 (3 : 5): [ 0.7867245 0.7867245 0.7867245 ]


g_b (3 : 5): [ 2.213276 2.213276 2.213276 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 2.213276 2.213276 2.213276 ]


g_b (3 : 5): [ 2.213276 2.213276 2.213276 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 0.7867245 0.7867245 0.7867245 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1.213276 1.213276 1.213276 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1.213276 1.213276 1.213276 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2.213276 2.213276 2.213276 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2.213276 2.213276 2.213276 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1.213276 1.213276 1.213276 ]
g_b (3 : 5): [ 2.213276 2.213276 2.213276 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1.213276 2.213276
	 1.213276 2.213276
	 1.213276 2.213276
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1.213276 2.213276
	 1.213276 2.213276
	 1.213276 2.213276
 ]


g_m (3 : 5): [ 2.213276 2.213276 2.213276 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1.213276 1.213276 1.213276 ]
g_b (3 : 5): [ 2.213276 2.213276 2.213276 ]
g_m (3 : 5): [ 2.213276 2.213276 2.213276 ]
g_T2 (3 : 5): [ 0.7867245 0.7867245 0.7867245 ]


g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1.213276 1.213276 1.213276 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.2132755 0.2132755 0.2132755 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0.2132755 0.2132755 0.2132755 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2.213276 2.213276 2.213276 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1.213276 1.213276 1.213276 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 1.213276 1.213276 1.213276 ]
val = 0


g_ind2 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (3 : 5): [ 1 2 3 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.213276 1.213276 1.213276 ]
g_b (3 : 5): [ 2.213276 2.213276 2.213276 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.213276 1.213276 1.213276 ]
g_b (3 : 5): [ 2.213276 2.213276 2.213276 ]
g_m (3 : 5): [ 2.213276 2.213276 2.213276 ]


g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]


Sc (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
div = 2.000


Sc (3 : 5): [ -1.40664 -1.40664 -1.40664 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (768 interne); stringhe deallocate: 0 (128 interne)


*** Esco da scoremodular ***

109: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ -1.40664 -1.40664 -1.40664 ]
val = -inf


g_tmp_i3 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

111: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_tmp_i3 (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

118: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

119: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

121: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ -1.40664 -1.40664 -1.40664 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ -1.40664 -1.40664 -1.40664 ]
------------------------------ Fine copia_v_indx_d

125: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ -1.40664 -1.40664 -1.40664 ]


min = -1.40664
------------------------------ Fine min_v_d

126: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ -1.40664 -1.40664 -1.40664 ]
g_indInf (0 : 5): [ ]
val = -2.40664


Sc (3 : 5): [ -1.40664 -1.40664 -1.40664 ]
------------------------------ Fine assegna1_vs_indx_d

142: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 2 2 0 0 ]
g_h (3 : 5): [ 1 4 5 ]


g_tmp_i1 (3 : 6): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_S_new (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_T2 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 3 0 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 3 0 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_old2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 0 0 0 ]
s = 1


g_new2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 0 0 0 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 0 0 0 ]
g_T2 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

170: InitVett_d
g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
val = 0


g_S2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ 0 0 0 ]


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 0 0 0 ]
div = 2.000


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (768 interne); stringhe deallocate: 0 (128 interne)


*** Esco da scoremodular ***

145: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0 0 0 ]
val = -inf


g_tmp_i3 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

147: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_tmp_i3 (3 : 5): [ 1 2 3 ]
val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

155: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

156: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

158: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0 0 0 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine copia_v_indx_d

162: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

163: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0 0 0 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

173: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ -1.40664 -1.40664 -1.40664 ]
Sc (3 : 5): [ 0 0 0 ]


g_tmp_d1 (3 : 5): [ -1.40664 -1.40664 -1.40664 ]
------------------------------ Fine somma_vv_d

174: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 2
g_tmp_d1 (3 : 5): [ -1.40664 -1.40664 -1.40664 ]


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 -1.40664 -1.40664 -1.40664
 ]
------------------------------ Fine aggiungi_mv_riga_d

182: somma_m_d	<=>	ris <- sum(m)
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 -1.40664 -1.40664 -1.40664
 ]


ris: -4.219919
------------------------------ Fine somma_m_d

187: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_tmp_i3 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_colonne_i

189: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp_i3 (3 : 5): [ 2 2 2 ]
val = 0


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

200: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 3 3 ]
------------------------------ Fine somma_righe_i

202: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

215: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

217: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 10): [ ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

215: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

217: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i

230: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

232: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

234: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_tmp_i3 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_colonne_i

236: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp_i3 (3 : 5): [ 2 2 2 ]
val = 0


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

246: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 3 3 ]
------------------------------ Fine somma_righe_i

248: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

260: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

262: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

260: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

262: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i


Stringhe allocate: 3 (808 interne); stringhe deallocate: 0 (168 interne)

338: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_mod2 (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
------------------------------ Fine copia_m_i


***probmod***
60: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

62: InitMatr_i
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

64: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0.5 0.5 0.5
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

66: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_mod2 (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_M_in (2 : 2): [ 0 2 ]
------------------------------ Fine somma_righe_i

68: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod2 (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_M_out (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

71: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

87: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

88: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

89: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

106: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 2 2 0 0 ]
g_h (3 : 5): [ 1 4 5 ]


g_tmp_i1 (3 : 6): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_S_new (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_T2 (3 : 5): [ 3.614836 3.614836 3.614836 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 0 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 0 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_old2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 0 0 0 ]
s = 1


g_new2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 0 0 0 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 0 0 0 ]
g_T2 (3 : 5): [ 3.614836 3.614836 3.614836 ]


g_a (3 : 5): [ -3.614836 -3.614836 -3.614836 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -3.614836 -3.614836 -3.614836 ]


g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ 3.614836 3.614836 3.614836 ]


g_b (3 : 5): [ -2.614836 -2.614836 -2.614836 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ -2.614836 -2.614836 -2.614836 ]


g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 3.614836 3.614836 3.614836 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
 ]


g_m (3 : 5): [ 3.614836 3.614836 3.614836 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]
g_m (3 : 5): [ 3.614836 3.614836 3.614836 ]
g_T2 (3 : 5): [ 3.614836 3.614836 3.614836 ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 2.614836 2.614836 2.614836 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 2.614836 2.614836 2.614836 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1.614836 1.614836 1.614836 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 1.614836 1.614836 1.614836 ]
val = 0


g_ind2 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (3 : 5): [ 1 2 3 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]
g_m (3 : 5): [ 3.614836 3.614836 3.614836 ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ 1 1 1 ]


Sc (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 1 1 1 ]
div = 2.000


Sc (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (808 interne); stringhe deallocate: 0 (168 interne)


*** Esco da scoremodular ***

109: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.5 0.5 0.5 ]
val = -inf


g_tmp_i3 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

111: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_i3 (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

118: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

119: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

121: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.5 0.5 0.5 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

125: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

126: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.5 0.5 0.5 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

169: InitVett_d
Sc (3 : 5): [ 0 0 0 ]
val = 0


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

170: aggiungi_ms_riga_i	<=>	m[riga,] <- val # riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1, val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_ms_riga_i

173: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ 0.5 0.5 0.5 ]
Sc (3 : 5): [ 0 0 0 ]


g_tmp_d1 (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine somma_vv_d

174: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_d1 (3 : 5): [ 0.5 0.5 0.5 ]


ris (2 x 3 : 2 x 5): [
	 0.5 0.5 0.5
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

87: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 2


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

88: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

89: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

106: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 2 2 0 0 ]
g_h (3 : 5): [ 1 4 5 ]


g_tmp_i1 (3 : 6): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_S_new (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_T2 (3 : 5): [ 3.614836 3.614836 3.614836 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 0 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 0 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_old2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 0 0 0 ]
s = 1


g_new2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 0 0 0 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 0 0 0 ]
g_T2 (3 : 5): [ 3.614836 3.614836 3.614836 ]


g_a (3 : 5): [ -3.614836 -3.614836 -3.614836 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -3.614836 -3.614836 -3.614836 ]


g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ 3.614836 3.614836 3.614836 ]


g_b (3 : 5): [ -2.614836 -2.614836 -2.614836 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ -2.614836 -2.614836 -2.614836 ]


g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 3.614836 3.614836 3.614836 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
 ]


g_m (3 : 5): [ 3.614836 3.614836 3.614836 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]
g_m (3 : 5): [ 3.614836 3.614836 3.614836 ]
g_T2 (3 : 5): [ 3.614836 3.614836 3.614836 ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 2.614836 2.614836 2.614836 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 2.614836 2.614836 2.614836 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1.614836 1.614836 1.614836 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 1.614836 1.614836 1.614836 ]
val = 0


g_ind2 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (3 : 5): [ 1 2 3 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]
g_m (3 : 5): [ 3.614836 3.614836 3.614836 ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ 1 1 1 ]


Sc (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 1 1 1 ]
div = 2.000


Sc (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (808 interne); stringhe deallocate: 0 (168 interne)


*** Esco da scoremodular ***

109: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.5 0.5 0.5 ]
val = -inf


g_tmp_i3 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

111: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_tmp_i3 (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

118: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

119: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

121: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.5 0.5 0.5 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

125: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

126: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.5 0.5 0.5 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

142: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 2 2 0 0 ]
g_h (3 : 5): [ 1 4 5 ]


g_tmp_i1 (3 : 6): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 2


g_S_new (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_T2 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 3 0 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 3 0 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_old2 (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 2 2 2 ]
s = 1


g_new2 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 0 0 0 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 2 2 2 ]
g_T2 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 3 3 3 ]
g_T2 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

170: InitVett_d
g_S2 (3 : 5): [ 1 1 1 ]
val = 0


g_S2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ 0 0 0 ]


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 0 0 0 ]
div = 2.000


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (808 interne); stringhe deallocate: 0 (168 interne)


*** Esco da scoremodular ***

145: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0 0 0 ]
val = -inf


g_tmp_i3 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

147: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_tmp_i3 (3 : 5): [ 1 2 3 ]
val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

155: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

156: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

158: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0 0 0 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine copia_v_indx_d

162: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

163: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0 0 0 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

173: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ 0.5 0.5 0.5 ]
Sc (3 : 5): [ 0 0 0 ]


g_tmp_d1 (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine somma_vv_d

174: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0.5 0.5 0.5
	 0 0 0
 ]
riga = 2
g_tmp_d1 (3 : 5): [ 0.5 0.5 0.5 ]


ris (2 x 3 : 2 x 5): [
	 0.5 0.5 0.5
	 0.5 0.5 0.5
 ]
------------------------------ Fine aggiungi_mv_riga_d

182: somma_m_d	<=>	ris <- sum(m)
ris (2 x 3 : 2 x 5): [
	 0.5 0.5 0.5
	 0.5 0.5 0.5
 ]


ris: 3
------------------------------ Fine somma_m_d

187: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_tmp_i3 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_colonne_i

189: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp_i3 (3 : 5): [ 2 2 2 ]
val = 0


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

200: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 3 3 ]
------------------------------ Fine somma_righe_i

202: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

215: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

217: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

215: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

217: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i

230: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

232: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

234: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_tmp_i3 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_colonne_i

236: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp_i3 (3 : 5): [ 2 2 2 ]
val = 0


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

246: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 3 3 ]
------------------------------ Fine somma_righe_i

248: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

260: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

262: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

260: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

262: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i


Stringhe allocate: 3 (848 interne); stringhe deallocate: 0 (208 interne)

352: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_mod3 (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
------------------------------ Fine copia_m_i


***probmod***
60: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

62: InitMatr_i
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

64: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 0.5 0.5 0.5
	 0.5 0.5 0.5
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

66: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_mod3 (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_M_in (2 : 2): [ 2 1 ]
------------------------------ Fine somma_righe_i

68: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod3 (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_M_out (2 : 2): [ 1 2 ]
------------------------------ Fine somma_colonne_i

71: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

87: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 2


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

88: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

89: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

106: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 2 2 0 0 ]
g_h (3 : 5): [ 1 4 5 ]


g_tmp_i1 (3 : 6): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_S_new (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_T2 (3 : 5): [ 3.614836 3.614836 3.614836 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 0 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 0 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_old2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 0 0 0 ]
s = 1


g_new2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 0 0 0 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 0 0 0 ]
g_T2 (3 : 5): [ 3.614836 3.614836 3.614836 ]


g_a (3 : 5): [ -3.614836 -3.614836 -3.614836 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -3.614836 -3.614836 -3.614836 ]


g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ 3.614836 3.614836 3.614836 ]


g_b (3 : 5): [ -2.614836 -2.614836 -2.614836 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ -2.614836 -2.614836 -2.614836 ]


g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 3.614836 3.614836 3.614836 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 3.614836 2.614836
	 3.614836 2.614836
	 3.614836 2.614836
 ]


g_m (3 : 5): [ 3.614836 3.614836 3.614836 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]
g_m (3 : 5): [ 3.614836 3.614836 3.614836 ]
g_T2 (3 : 5): [ 3.614836 3.614836 3.614836 ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 2.614836 2.614836 2.614836 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 2.614836 2.614836 2.614836 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1.614836 1.614836 1.614836 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 1.614836 1.614836 1.614836 ]
val = 0


g_ind2 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (3 : 5): [ 1 2 3 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 3.614836 3.614836 3.614836 ]
g_b (3 : 5): [ 2.614836 2.614836 2.614836 ]
g_m (3 : 5): [ 3.614836 3.614836 3.614836 ]


g_S2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ 1 1 1 ]


Sc (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 1 1 1 ]
div = 2.000


Sc (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (848 interne); stringhe deallocate: 0 (208 interne)


*** Esco da scoremodular ***

109: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.5 0.5 0.5 ]
val = -inf


g_tmp_i3 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

111: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_i3 (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

118: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

119: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

121: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.5 0.5 0.5 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

125: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

126: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.5 0.5 0.5 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

142: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 2 2 0 0 ]
g_h (3 : 5): [ 1 4 5 ]


g_tmp_i1 (3 : 6): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 2


g_S_new (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_T2 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 3 0 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 3 0 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_old2 (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 2 2 2 ]
s = 1


g_new2 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 0 0 0 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 2 2 2 ]
g_T2 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 3 3 3 ]
g_T2 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

170: InitVett_d
g_S2 (3 : 5): [ 1 1 1 ]
val = 0


g_S2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ 0 0 0 ]


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 0 0 0 ]
div = 2.000


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (848 interne); stringhe deallocate: 0 (208 interne)


*** Esco da scoremodular ***

145: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0 0 0 ]
val = -inf


g_tmp_i3 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

147: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_i3 (3 : 5): [ 1 2 3 ]
val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

155: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

156: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

158: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0 0 0 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine copia_v_indx_d

162: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

163: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0 0 0 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

173: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ 0.5 0.5 0.5 ]
Sc (3 : 5): [ 0 0 0 ]


g_tmp_d1 (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine somma_vv_d

174: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_d1 (3 : 5): [ 0.5 0.5 0.5 ]


ris (2 x 3 : 2 x 5): [
	 0.5 0.5 0.5
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

87: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

88: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

89: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

106: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 2 2 0 0 ]
g_h (3 : 5): [ 1 4 5 ]


g_tmp_i1 (3 : 6): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 2


g_S_new (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_T2 (3 : 5): [ 0.7867245 0.7867245 0.7867245 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 0 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 0 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_old2 (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 2 2 2 ]
s = 1


g_new2 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 0 0 0 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 2 2 2 ]
g_T2 (3 : 5): [ 0.7867245 0.7867245 0.7867245 ]


g_a (3 : 5): [ 1.213276 1.213276 1.213276 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1.213276 1.213276 1.213276 ]


g_a (3 : 5): [ 1.213276 1.213276 1.213276 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 3 3 3 ]
g_T2 (3 : 5): [ 0.7867245 0.7867245 0.7867245 ]


g_b (3 : 5): [ 2.213276 2.213276 2.213276 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 2.213276 2.213276 2.213276 ]


g_b (3 : 5): [ 2.213276 2.213276 2.213276 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 0.7867245 0.7867245 0.7867245 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1.213276 1.213276 1.213276 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1.213276 1.213276 1.213276 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2.213276 2.213276 2.213276 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2.213276 2.213276 2.213276 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1.213276 1.213276 1.213276 ]
g_b (3 : 5): [ 2.213276 2.213276 2.213276 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1.213276 2.213276
	 1.213276 2.213276
	 1.213276 2.213276
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1.213276 2.213276
	 1.213276 2.213276
	 1.213276 2.213276
 ]


g_m (3 : 5): [ 2.213276 2.213276 2.213276 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1.213276 1.213276 1.213276 ]
g_b (3 : 5): [ 2.213276 2.213276 2.213276 ]
g_m (3 : 5): [ 2.213276 2.213276 2.213276 ]
g_T2 (3 : 5): [ 0.7867245 0.7867245 0.7867245 ]


g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1.213276 1.213276 1.213276 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.2132755 0.2132755 0.2132755 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0.2132755 0.2132755 0.2132755 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2.213276 2.213276 2.213276 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1.213276 1.213276 1.213276 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 1.213276 1.213276 1.213276 ]
val = 0


g_ind2 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (3 : 5): [ 1 2 3 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.213276 1.213276 1.213276 ]
g_b (3 : 5): [ 2.213276 2.213276 2.213276 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.213276 1.213276 1.213276 ]
g_b (3 : 5): [ 2.213276 2.213276 2.213276 ]
g_m (3 : 5): [ 2.213276 2.213276 2.213276 ]


g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]


Sc (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
div = 2.000


Sc (3 : 5): [ -1.40664 -1.40664 -1.40664 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (848 interne); stringhe deallocate: 0 (208 interne)


*** Esco da scoremodular ***

109: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ -1.40664 -1.40664 -1.40664 ]
val = -inf


g_tmp_i3 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

111: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_tmp_i3 (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

118: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

119: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

121: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ -1.40664 -1.40664 -1.40664 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ -1.40664 -1.40664 -1.40664 ]
------------------------------ Fine copia_v_indx_d

125: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ -1.40664 -1.40664 -1.40664 ]


min = -1.40664
------------------------------ Fine min_v_d

126: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ -1.40664 -1.40664 -1.40664 ]
g_indInf (0 : 5): [ ]
val = -2.40664


Sc (3 : 5): [ -1.40664 -1.40664 -1.40664 ]
------------------------------ Fine assegna1_vs_indx_d

142: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 2 2 0 0 ]
g_h (3 : 5): [ 1 4 5 ]


g_tmp_i1 (3 : 6): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_S_new (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_T2 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 3 0 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 3 0 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_old2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 0 0 0 ]
s = 1


g_new2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 0 0 0 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 0 0 0 ]
g_T2 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

170: InitVett_d
g_S2 (3 : 5): [ -2.813279 -2.813279 -2.813279 ]
val = 0


g_S2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ 0 0 0 ]


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 0 0 0 ]
div = 2.000


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (848 interne); stringhe deallocate: 0 (208 interne)


*** Esco da scoremodular ***

145: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0 0 0 ]
val = -inf


g_tmp_i3 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

147: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_tmp_i3 (3 : 5): [ 1 2 3 ]
val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

155: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

156: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

158: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0 0 0 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine copia_v_indx_d

162: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

163: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0 0 0 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

173: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ -1.40664 -1.40664 -1.40664 ]
Sc (3 : 5): [ 0 0 0 ]


g_tmp_d1 (3 : 5): [ -1.40664 -1.40664 -1.40664 ]
------------------------------ Fine somma_vv_d

174: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0.5 0.5 0.5
	 0 0 0
 ]
riga = 2
g_tmp_d1 (3 : 5): [ -1.40664 -1.40664 -1.40664 ]


ris (2 x 3 : 2 x 5): [
	 0.5 0.5 0.5
	 -1.40664 -1.40664 -1.40664
 ]
------------------------------ Fine aggiungi_mv_riga_d

182: somma_m_d	<=>	ris <- sum(m)
ris (2 x 3 : 2 x 5): [
	 0.5 0.5 0.5
	 -1.40664 -1.40664 -1.40664
 ]


ris: -2.719919
------------------------------ Fine somma_m_d

187: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_tmp_i3 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_colonne_i

189: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp_i3 (3 : 5): [ 2 2 2 ]
val = 0


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

200: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 3 3 ]
------------------------------ Fine somma_righe_i

202: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

215: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

217: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

215: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

217: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i

230: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

232: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

234: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_tmp_i3 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_colonne_i

236: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp_i3 (3 : 5): [ 2 2 2 ]
val = 0


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

246: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 3 3 ]
------------------------------ Fine somma_righe_i

248: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

260: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

262: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

260: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

262: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i


Stringhe allocate: 3 (888 interne); stringhe deallocate: 0 (248 interne)

364: vettore3s_d		<=>	ris <- c(el1, el2, el3)
el1 = -2.109959, el2 = 1.5, el3 = -1.359959


g_pm (3 : 3): [ -2.109959 1.5 -1.359959 ]
------------------------------ Fine vettore3s_d

365: copia_v_d	<=>	ris[st:end] <- v[st:end]
g_pm (3 : 3): [ -2.109959 1.5 -1.359959 ]
st = 1
end = 3


g_prob_mod (3 : 3): [ -2.109959 1.5 -1.359959 ]
------------------------------ Fine copia_v_d

367: assegna1_v_indxNA_d	<=>	v1[which(is.na(v2))] <- val oppure v1[which(!is.na(v2))] <- val
g_prob_mod (3 : 3): [ -2.109959 1.5 -1.359959 ]
g_prob_mod (3 : 3): [ -2.109959 1.5 -1.359959 ]
val = 0
complemento = 0


g_prob_mod (3 : 3): [ -2.109959 1.5 -1.359959 ]
------------------------------ Fine assegna1_v_indxNA_d

369: min_v_d	<=>	ris <- min(v)
g_prob_mod (3 : 3): [ -2.109959 1.5 -1.359959 ]


min = -2.109959
------------------------------ Fine min_v_d

372: somma1_vs_d	<=>	v <- v + s
g_prob_mod (3 : 3): [ -2.109959 1.5 -1.359959 ]
s = 2.221071


g_prob_mod (3 : 3): [ 0.1111111 3.721071 0.8611111 ]
------------------------------ Fine somma1_vs_d

374: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_pm (3 : 3): [ -2.109959 1.5 -1.359959 ]
complemento = 0


g_tmp1_i (0 : 11): [ ]
------------------------------ Fine which_v_indxNA_d

375: assegna1_v_indx_d	<=>	v[indx] <- val
g_prob_mod (3 : 3): [ 0.1111111 3.721071 0.8611111 ]
g_tmp1_i (0 : 11): [ ]
val = 0


g_prob_mod (3 : 3): [ 0.1111111 3.721071 0.8611111 ]
------------------------------ Fine assegna1_v_indx_d

377: which_v_indxne_d	<=>	ris <- which(v != val)
g_prob_mod (3 : 3): [ 0.1111111 3.721071 0.8611111 ]
val = 0


g_ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

381: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_prob_mod (3 : 3): [ 0.1111111 3.721071 0.8611111 ]
canc_NA = 0



ris: 4.693293
------------------------------ Fine somma_v_d

381: dividi1_vs_d	<=>	v <- v / div
g_prob_mod (3 : 3): [ 0.1111111 3.721071 0.8611111 ]
div = 4.693


g_prob_mod (3 : 3): [ 0.02367445 0.7928486 0.183477 ]
------------------------------ Fine dividi1_vs_d

383: vettore3s_i		<=>	ris <- c(el1, el2, el3)
el1 = 1, el2 = 2, el3 = 3


g_tmp1_i (3 : 11): [ 1 2 3 ]
------------------------------ Fine vettore3s_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (3 : 11): [ 1 2 3 ]
k = 1, replace = 0
g_prob_mod (3 : 3): [ 0.02367445 0.7928486 0.183477 ]


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 3 (888 interne); stringhe deallocate: 0 (248 interne)

398: copia_m_i	<=>	ris <- da
g_mod2 (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_M (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
------------------------------ Fine copia_m_i

399: copia_m_d	<=>	ris <- da
ris (2 x 3 : 2 x 5): [
	 0.5 0.5 0.5
	 0.5 0.5 0.5
 ]


g_Sc (2 x 3 : 2 x 5): [
	 0.5 0.5 0.5
	 0.5 0.5 0.5
 ]
------------------------------ Fine copia_m_d

401: copia_v_i	<=>	ris[st:end] <- v[st:end]
VECTOR_ELT(elem, 2) (1 : 1): [ 1 ]
st = 1
end = 1


g_hubs (1 : 2): [ 1 ]
------------------------------ Fine copia_v_i

427: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
canc_NA = 0



ris: 1
------------------------------ Fine somma_v_d

427: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
div = 1.000


g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
------------------------------ Fine dividi1_vs_d

739: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (3 : 5): [ 1 4 5 ]
st = 1
end = 3


g_h1 (3 : 5): [ 1 4 5 ]
------------------------------ Fine copia_v_i


***assign_nodes***
46: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (3 : 5): [ 1 4 5 ]
st = 1
end = 3


g_or_h (3 : 5): [ 1 4 5 ]
------------------------------ Fine copia_v_i

48: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_aus_h (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

54: InitVett_i
g_index (2 : 2): [ 2 3 ]
val = 0


g_index (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_i

56: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_M (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_M_in (2 : 2): [ 0 2 ]
------------------------------ Fine somma_righe_i

58: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_M_in (2 : 2): [ 0 2 ]
decr = 1


g_Ord (2 : 2): [ 2 1 ]
------------------------------ Fine ordine_i

63: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 3 : 2 x 5): [
	 0.5 0.5 0.5
	 0.5 0.5 0.5
 ]
r = 2

g_p (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine riga_d

65: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (3 : 5): [ 0.5 0.5 0.5 ]
val = 0


g_tmp_i (0 : 5): [ ]
------------------------------ Fine which_v_indxle_d

72: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 2 2 0 0 ]
g_h1 (3 : 5): [ 1 4 5 ]


g_Sin_h (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i

77: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sin_h (3 : 5): [ 0 0 0 ]
val = 3


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

83: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (3 : 5): [ 0.5 0.5 0.5 ]
g_aus_h (3 : 5): [ 1 2 3 ]


g_tmp_d (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine assegna_v_indxNA_d

84: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (3 : 5): [ 0.5 0.5 0.5 ]
canc_NA = 0



ris: 1.5
------------------------------ Fine somma_v_d

85: dividi_vs_d	ris <- v / div
g_tmp_d (3 : 5): [ 0.5 0.5 0.5 ]
div = 1.500


g_p (3 : 5): [ 0.3333333 0.3333333 0.3333333 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (3 : 5): [ 1 4 5 ]
k = 1, replace = 0
g_p (3 : 5): [ 0.3333333 0.3333333 0.3333333 ]


ris (1 : 1): [ 5 ]
*****************************************


Stringhe allocate: 3 (888 interne); stringhe deallocate: 0 (248 interne)

92: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (3 : 5): [ 1 4 5 ]
ris (1 : 1): [ 5 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 5
g_h1 (3 : 5): [ 1 4 5 ]


indx = 3
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (3 : 5): [ 1 4 5 ]
indx = 3


g_h1 (2 : 5): [ 1 4 ]
------------------------------ Fine elimina1_indx_i



g_h1 (2 : 5): [ 1 4 ]
------------------------------ Fine setdiff1_i

94: which_indx_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (3 : 5): [ 1 4 5 ]
ris (1 : 1): [ 5 ]
2032: esiste_v_i	<=>	elem %IN% v
elem = 5
g_or_h (3 : 5): [ 1 4 5 ]


indx = 3
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 1 ]
------------------------------ Fine which_indx_vv_eq_i

95: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (3 : 5): [ 1 2 3 ]
g_tmp_i (1 : 5): [ 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
g_aus_h (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
g_aus_h (3 : 5): [ 1 2 3 ]
indx = 1


g_aus_h (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i



g_aus_h (2 : 5): [ 2 3 ]
------------------------------ Fine setdiff1_i

63: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 3 : 2 x 5): [
	 0.5 0.5 0.5
	 0.5 0.5 0.5
 ]
r = 1

g_p (3 : 5): [ 0.5 0.5 0.5 ]
------------------------------ Fine riga_d

65: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (3 : 5): [ 0.5 0.5 0.5 ]
val = 0


g_tmp_i (0 : 5): [ ]
------------------------------ Fine which_v_indxle_d

72: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 2 2 0 0 ]
g_h1 (2 : 5): [ 1 4 ]


g_Sin_h (2 : 5): [ 0 0 ]
------------------------------ Fine assegna_v_indxNA_i

77: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sin_h (2 : 5): [ 0 0 ]
val = 5


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

83: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (3 : 5): [ 0.5 0.5 0.5 ]
g_aus_h (2 : 5): [ 2 3 ]


g_tmp_d (2 : 5): [ 0.5 0.5 ]
------------------------------ Fine assegna_v_indxNA_d

84: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (2 : 5): [ 0.5 0.5 ]
canc_NA = 0



ris: 1
------------------------------ Fine somma_v_d

85: dividi_vs_d	ris <- v / div
g_tmp_d (2 : 5): [ 0.5 0.5 ]
div = 1.000


g_p (2 : 5): [ 0.5 0.5 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (2 : 5): [ 1 4 ]
k = 1, replace = 0
g_p (2 : 5): [ 0.5 0.5 ]


ris (1 : 1): [ 4 ]
*****************************************


Stringhe allocate: 3 (888 interne); stringhe deallocate: 0 (248 interne)

92: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (2 : 5): [ 1 4 ]
ris (1 : 1): [ 4 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 4
g_h1 (2 : 5): [ 1 4 ]


indx = 2
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (2 : 5): [ 1 4 ]
indx = 2


g_h1 (1 : 5): [ 1 ]
------------------------------ Fine elimina1_indx_i



g_h1 (1 : 5): [ 1 ]
------------------------------ Fine setdiff1_i

94: which_indx_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (3 : 5): [ 1 4 5 ]
ris (1 : 1): [ 4 ]
2032: esiste_v_i	<=>	elem %IN% v
elem = 4
g_or_h (3 : 5): [ 1 4 5 ]


indx = 2
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 1 ]
------------------------------ Fine which_indx_vv_eq_i

95: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (2 : 5): [ 2 3 ]
g_tmp_i (1 : 5): [ 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
g_aus_h (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i



g_aus_h (2 : 5): [ 2 3 ]
------------------------------ Fine setdiff1_i

103: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
riga = 1
val = 1


g_ind (0 : 5): [ ]
------------------------------ Fine which_m_rowindxeq_i

105: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 4 5 ]
g_ind (0 : 5): [ ]


g_co (0 : 2): [ ]
------------------------------ Fine copia_v_indx_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
g_ri (1 : 1): [ 4 ]
g_co (0 : 2): [ ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 1
g_hubs (1 : 2): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

111: accoda1_vv_i	<=>	v1 <- c(v1, v2)
ris (0 : 1): [ ]
g_ri (1 : 1): [ 4 ]


ris (1 : 1): [ 4 ]
------------------------------ Fine accoda_vv_i

103: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
riga = 2
val = 1


g_ind (2 : 5): [ 1 2 ]
------------------------------ Fine which_m_rowindxeq_i

105: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 4 5 ]
g_ind (2 : 5): [ 1 2 ]


g_co (2 : 2): [ 4 5 ]
------------------------------ Fine copia_v_indx_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
g_ri (1 : 1): [ 5 ]
g_co (2 : 2): [ 4 5 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 1 1
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 2
g_hubs (1 : 2): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i


*** Esco da assign_nodes ***


Stringhe allocate: 3 (888 interne); stringhe deallocate: 0 (248 interne)

747: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_h (3 : 5): [ 1 4 5 ]
g_h1 (1 : 5): [ 1 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (3 : 5): [ 1 4 5 ]
st = 1
end = 3


g_tmp1_i (3 : 11): [ 1 4 5 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_tmp1_i (3 : 11): [ 1 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_tmp1_i (3 : 11): [ 1 4 5 ]
indx = 1


g_tmp1_i (2 : 11): [ 4 5 ]
------------------------------ Fine elimina1_indx_i



g_tmp1_i (2 : 11): [ 4 5 ]
------------------------------ Fine setdiff_i

748: incr1_v_indx_i	<=>	v[indx] <- v[indx] + s
g_LG (5 : 5): [ -1 0 0 -1 -1 ]
g_tmp1_i (2 : 11): [ 4 5 ]
val = 1


g_LG (5 : 5): [ -1 0 0 0 0 ]
------------------------------ Fine incr1_v_indx_i

752: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (1 : 5): [ 1 ]
st = 1
end = 1


g_h (1 : 5): [ 1 ]
------------------------------ Fine copia_v_i

754: accoda1_vv_i	<=>	v1 <- c(v1, v2)
g_h_new (1 : 2): [ 3 ]
ris (1 : 1): [ 4 ]


g_h_new (2 : 2): [ 3 4 ]
------------------------------ Fine accoda_vv_i

756: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 1 1
 ]


g_Sout (5 : 5): [ 0 2 2 1 1 ]
------------------------------ Fine somma_colonne_i

758: max_v_i		<=>	ris <- max(v)
g_Sout (5 : 5): [ 0 2 2 1 1 ]


max = 2
------------------------------ Fine max_v_i

760: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 3
incr = 1


g_tmp2_i (4 : 4): [ 0 1 2 3 ]
------------------------------ Fine seq_i


*** hist1 ***
g_Sout (5 : 5): [ 0 2 2 1 1 ]
g_tmp2_i (4 : 4): [ 0 1 2 3 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
g_tmp1_i (3 : 11): [ 4 5 5 ]
val = 0


g_tmp1_i (3 : 11): [ 0 0 0 ]
------------------------------ Fine InitVett_i



g_tmp1_i (3 : 11): [ 1 2 2 ]

Stringhe allocate: 3 (888 interne); stringhe deallocate: 0 (248 interne)

762: promuovi_i	(implicita)
g_tmp1_i (3 : 11): [ 1 2 2 ]
ATTENZIONE (promuovi_i, linea /home/marco/hmm/HMM.c # 762): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

g_tmp1_d (3 : 19): [ 1 2 2 ]
------------------------------ Fine promuovi_i

763: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
g_Freq_out (7 : 7): [ 3 0 2 0 0 0 0 ]
start = 1
end = 3
g_tmp1_d (3 : 19): [ 1 2 2 ]


g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

765: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 1 1
 ]


g_Sin (5 : 5): [ 0 2 2 0 2 ]
------------------------------ Fine somma_righe_i

767: max_v_i		<=>	ris <- max(v)
g_Sin (5 : 5): [ 0 2 2 0 2 ]


max = 2
------------------------------ Fine max_v_i

769: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 3
incr = 1


g_tmp2_i (4 : 4): [ 0 1 2 3 ]
------------------------------ Fine seq_i


*** hist1 ***
g_Sin (5 : 5): [ 0 2 2 0 2 ]
g_tmp2_i (4 : 4): [ 0 1 2 3 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
g_tmp1_i (3 : 11): [ 1 2 2 ]
val = 0


g_tmp1_i (3 : 11): [ 0 0 0 ]
------------------------------ Fine InitVett_i



g_tmp1_i (3 : 11): [ 2 0 3 ]

Stringhe allocate: 3 (889 interne); stringhe deallocate: 0 (249 interne)

771: promuovi_i	(implicita)
g_tmp1_i (3 : 11): [ 2 0 3 ]
ATTENZIONE (promuovi_i, linea /home/marco/hmm/HMM.c # 771): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

g_tmp1_d (3 : 19): [ 2 0 3 ]
------------------------------ Fine promuovi_i

772: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
g_Freq_in (7 : 7): [ 3 0 2 0 0 0 0 ]
start = 1
end = 3
g_tmp1_d (3 : 19): [ 2 0 3 ]


g_Freq_in (7 : 7): [ 2 0 3 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

783: accoda1_vv_i	<=>	v1 <- c(v1, v2)
g_h (1 : 5): [ 1 ]
g_h_new (2 : 2): [ 3 4 ]


g_h (3 : 5): [ 1 3 4 ]
------------------------------ Fine accoda_vv_i

791: copia_v_indx_i	<=>	ris <- v[indx]
g_Sin (5 : 5): [ 0 2 2 0 2 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp2_i (3 : 4): [ 0 2 0 ]
------------------------------ Fine copia_v_indx_i

792: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp2_i (3 : 4): [ 0 2 0 ]
val = 5


g_tmp1_i (3 : 11): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

793: copia_v_indx_i	<=>	ris <- v[indx]
g_h (3 : 5): [ 1 3 4 ]
g_tmp1_i (3 : 11): [ 1 2 3 ]


g_h (3 : 5): [ 1 3 4 ]
------------------------------ Fine copia_v_indx_i

238: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 1 1
 ]


g_Sin (5 : 5): [ 0 2 2 0 2 ]
------------------------------ Fine somma_righe_i

240: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 1 1
 ]


g_Sout (5 : 5): [ 0 2 2 1 1 ]
------------------------------ Fine somma_colonne_i


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 1 1
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 1
	 0 0 0 0 1
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 1
	 0 0 0 0 1
 ]
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 1 1
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 2 2 0 0
	 0 2 2 0 0
	 0 0 0 0 1
	 0 0 0 1 2
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 2 2 0 0
	 0 2 2 0 0
	 0 0 0 0 1
	 0 0 0 1 2
 ]
val = 0


g_ind (7 : 25): [ 7 8 12 13 20 24 25 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 2 2 0 0
	 0 2 2 0 0
	 0 0 0 0 1
	 0 0 0 1 2
 ]
g_ind (7 : 25): [ 7 8 12 13 20 24 25 ]
val = 1


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
val = 0


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (5 : 5): [ 0 0 0 0 0 ]
val = 0


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
riga = 1


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
r = 1
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
riga = 2


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
r = 2
val = 0


g_neighbours (1 : 25): [ 3 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
riga = 3


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
r = 3
val = 0


g_neighbours (1 : 25): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
riga = 4


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
r = 4
val = 0


g_neighbours (1 : 25): [ 5 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
riga = 5


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
r = 5
val = 0


g_neighbours (1 : 25): [ 4 ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (5 : 5): [ 0 0 0 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 3 (890 interne); stringhe deallocate: 0 (250 interne)


*** Esco da cluster_coeff2 ***
250: somma_vs_i	<=>	ris <- v + s
g_CCs (1 : 1): [ 0 ]
s = 0


g_tmp1_i (1 : 11): [ 0 ]
------------------------------ Fine somma_vs_i

251: segno_v_i	<=>	ris <- sign(v)
g_tmp1_i (1 : 11): [ 0 ]


g_segno (1 : 1): [ 0 ]
------------------------------ Fine segno_v_i

253: which_v_indxgt_i	<=>	ris <- which(v > val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indp (0 : 1): [ ]
------------------------------ Fine which_v_indxgt_i

255: which_v_indxle_i	<=>	ris <- which(v<=val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indm (1 : 1): [ 1 ]
------------------------------ Fine which_v_indxle_i

259: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indp (0 : 1): [ ]
val2 = 0.3


g_p (1 : 1): [ 1 ]
------------------------------ Fine f_aux9_d

261: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indm (1 : 1): [ 1 ]
val2 = 0.3


g_p (1 : 1): [ 1.7 ]
------------------------------ Fine f_aux9_d

273: min_v_d	<=>	ris <- min(v)
g_p (1 : 1): [ 1.7 ]


min = 1.7
------------------------------ Fine min_v_d

276: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_p (1 : 1): [ 1.7 ]
canc_NA = 0



ris: 1.7
------------------------------ Fine somma_v_d

276: dividi1_vs_d	<=>	v <- v / div
g_p (1 : 1): [ 1.7 ]
div = 1.700


g_p (1 : 1): [ 1 ]
------------------------------ Fine dividi1_vs_d

279: assegna1_v_indx_d	<=>	v[indx] <- val
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
g_CCind[i - 1] (7 : 7): [ 1 2 3 4 5 6 7 ]
val = 1


g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine assegna1_v_indx_d

297: moltiplica_vv_d	<=>	ris <- v1 * v2
g_prior_p_subnet (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]


g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
------------------------------ Fine moltiplica_vv_d

299: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]


max = 0.1428571
------------------------------ Fine max_v_d

303: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
canc_NA = 1



ris: 1
------------------------------ Fine somma_v_d

303: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
div = 1.000


g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
------------------------------ Fine dividi1_vs_d

310: max_v_i		<=>	ris <- max(v)
g_dim (7 : 7): [ 2 2 2 2 2 2 2 ]


max = 2
------------------------------ Fine max_v_i

316: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]


max = 0.1428571
------------------------------ Fine max_v_d

324: which_v_indxgt_d	<=>	ris <- which(v > val)
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
val = 0


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine which_v_indxgt_d

327: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 7
incr = 1


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine seq_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
k = 3, replace = 0
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]


ris (3 : 3): [ 6 2 4 ]
*****************************************


Stringhe allocate: 3 (890 interne); stringhe deallocate: 0 (250 interne)

330: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_mod1 (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
------------------------------ Fine copia_m_i


***probmod***
60: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

62: InitMatr_i
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

64: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 -1.40664 -1.40664 -1.40664
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

66: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_mod1 (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_M_in (2 : 2): [ 2 1 ]
------------------------------ Fine somma_righe_i

68: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod1 (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_M_out (2 : 2): [ 1 2 ]
------------------------------ Fine somma_colonne_i

71: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

87: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 2


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

88: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

89: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

106: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 2 2 1 1 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 2 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 1 ]
s = 1


g_S_new (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (3 : 5): [ 2 4 3 ]


g_T2 (3 : 5): [ 3.614836 0.3224199 0.7867245 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_old1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 4 3 ]


g_old2 (3 : 5): [ 2 0 2 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 2 2 ]
s = -1


g_new1 (3 : 5): [ 0 1 1 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 2 0 2 ]
s = 1


g_new2 (3 : 5): [ 3 1 3 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_toll1 (3 : 5): [ nan 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 4 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 2 2 ]
g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]


g_a (3 : 5): [ nan 1.213276 -1.614836 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan 1.213276 -1.614836 ]


g_a (3 : 5): [ nan 1.213276 1.614836 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 1 1 ]
g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]


g_b (3 : 5): [ nan 0.2132755 -2.614836 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan 0.2132755 -2.614836 ]


g_b (3 : 5): [ nan 0.2132755 2.614836 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]
complemento = 0


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ nan 1.213276 1.614836 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_a (3 : 5): [ 0 1.213276 1.614836 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ nan 0.2132755 2.614836 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_b (3 : 5): [ 0 0.2132755 2.614836 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_b (3 : 5): [ 0 0.2132755 2.614836 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0 0
	 1.213276 0.2132755
	 1.614836 2.614836
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0 0
	 1.213276 0.2132755
	 1.614836 2.614836
 ]


g_m (3 : 5): [ 0 1.213276 2.614836 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_b (3 : 5): [ 0 0.2132755 2.614836 ]
g_m (3 : 5): [ 0 1.213276 2.614836 ]
g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]


g_S1 (3 : 5): [ nan 1.542186 -0.7233623 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan 0.2132755 0.6148364 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ nan 0.2132755 0.6148364 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 0.2132755 2.614836 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan -0.7867245 1.614836 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ nan -0.7867245 1.614836 ]
val = 0


g_ind2 (1 : 5): [ 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (1 : 5): [ 3 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ nan 1.542186 -0.7233623 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (3 : 5): [ nan 1.542186 -0.7233623 ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ nan 1.542186 -0.7233623 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_b (3 : 5): [ 0 0.2132755 2.614836 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_b (3 : 5): [ 0 0.2132755 2.614836 ]
g_m (3 : 5): [ 0 1.213276 2.614836 ]


g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 2 0 2 ]
g_T2 (3 : 5): [ 3.614836 0.3224199 0.7867245 ]


g_a (3 : 5): [ -1.614836 -0.3224199 1.213276 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -1.614836 -0.3224199 1.213276 ]


g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 3 1 3 ]
g_T2 (3 : 5): [ 3.614836 0.3224199 0.7867245 ]


g_b (3 : 5): [ -0.6148364 0.6775801 2.213276 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ -0.6148364 0.6775801 2.213276 ]


g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 3.614836 0.3224199 0.7867245 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1.614836 0.6148364
	 0.3224199 0.6775801
	 1.213276 2.213276
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1.614836 0.6148364
	 0.3224199 0.6775801
	 1.213276 2.213276
 ]


g_m (3 : 5): [ 1.614836 0.6775801 2.213276 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]
g_m (3 : 5): [ 1.614836 0.6775801 2.213276 ]
g_T2 (3 : 5): [ 3.614836 0.3224199 0.7867245 ]


g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.6148364 -0.6775801 0.2132755 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0.6148364 -0.6775801 0.2132755 ]
val = 0

g_ind1 (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.3851636 -0.3224199 1.213276 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.3851636 -0.3224199 1.213276 ]
val = 0


g_ind2 (1 : 5): [ 3 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (1 : 5): [ 2 ]
g_ind2 (1 : 5): [ 3 ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 3 ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 1): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 1): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
g_indinf (0 : 1): [ ]
val = -inf


g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]
g_m (3 : 5): [ 1.614836 0.6775801 2.213276 ]


g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]


Sc (3 : 5): [ 0.4467246 -0.5593591 -3.536641 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 0.4467246 -0.5593591 -3.536641 ]
div = 2.000


Sc (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (890 interne); stringhe deallocate: 0 (250 interne)


*** Esco da scoremodular ***

109: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
val = -inf


g_tmp_i3 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

111: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_i3 (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

118: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

119: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

121: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
------------------------------ Fine copia_v_indx_d

125: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]


min = -1.768321
------------------------------ Fine min_v_d

126: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
g_indInf (0 : 5): [ ]
val = -2.768321


Sc (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
------------------------------ Fine assegna1_vs_indx_d

142: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 2 2 0 2 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 2 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 2


g_S_new (3 : 5): [ 2 4 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 1 3 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 4 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 5 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 3 5 3 ]


g_T2 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 2 0 3 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 3 1 ]


g_old1 (3 : 5): [ 2 3 2 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 4 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 5 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 2 0 3 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 5 3 ]


g_old2 (3 : 5): [ 3 0 3 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 2 3 2 ]
s = -1


g_new1 (3 : 5): [ 1 2 1 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 3 0 3 ]
s = 1


g_new2 (3 : 5): [ 4 1 4 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 3 1 ]


g_toll1 (3 : 5): [ nan 1 nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 4 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 5 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 5 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 2 3 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 1 2 1 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 3 0 3 ]
g_T2 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 4 1 4 ]
g_T2 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

170: InitVett_d
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
val = 0


g_S2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ 0 0 0 ]


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 0 0 0 ]
div = 2.000


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (890 interne); stringhe deallocate: 0 (250 interne)


*** Esco da scoremodular ***

145: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0 0 0 ]
val = -inf


g_tmp_i3 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

147: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_i3 (3 : 5): [ 1 2 3 ]
val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

155: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

156: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

158: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0 0 0 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine copia_v_indx_d

162: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

163: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0 0 0 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

173: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
Sc (3 : 5): [ 0 0 0 ]


g_tmp_d1 (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
------------------------------ Fine somma_vv_d

174: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_d1 (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]


ris (2 x 3 : 2 x 5): [
	 0.2233623 -0.2796796 -1.768321
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

87: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

88: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

89: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

106: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 2 2 1 1 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 2 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 1 ]
s = 2


g_S_new (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 4 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 5 4 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (3 : 5): [ 3 5 4 ]


g_T2 (3 : 5): [ 0.7867245 0.1712209 0.3224199 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_old1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 4 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 5 4 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 5 4 ]


g_old2 (3 : 5): [ 2 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 2 2 ]
s = -1


g_new1 (3 : 5): [ 0 1 1 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 2 0 0 ]
s = 1


g_new2 (3 : 5): [ 3 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_toll1 (3 : 5): [ nan 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 4 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 5 4 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 5 4 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 2 2 ]
g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]


g_a (3 : 5): [ nan 1.213276 -1.614836 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan 1.213276 -1.614836 ]


g_a (3 : 5): [ nan 1.213276 1.614836 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 1 1 ]
g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]


g_b (3 : 5): [ nan 0.2132755 -2.614836 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan 0.2132755 -2.614836 ]


g_b (3 : 5): [ nan 0.2132755 2.614836 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]
complemento = 0


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ nan 1.213276 1.614836 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_a (3 : 5): [ 0 1.213276 1.614836 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ nan 0.2132755 2.614836 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_b (3 : 5): [ 0 0.2132755 2.614836 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_b (3 : 5): [ 0 0.2132755 2.614836 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0 0
	 1.213276 0.2132755
	 1.614836 2.614836
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0 0
	 1.213276 0.2132755
	 1.614836 2.614836
 ]


g_m (3 : 5): [ 0 1.213276 2.614836 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_b (3 : 5): [ 0 0.2132755 2.614836 ]
g_m (3 : 5): [ 0 1.213276 2.614836 ]
g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]


g_S1 (3 : 5): [ nan 1.542186 -0.7233623 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan 0.2132755 0.6148364 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ nan 0.2132755 0.6148364 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 0.2132755 2.614836 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan -0.7867245 1.614836 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ nan -0.7867245 1.614836 ]
val = 0


g_ind2 (1 : 5): [ 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (1 : 5): [ 3 ]


g_indinf (0 : 1): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ nan 1.542186 -0.7233623 ]
g_indinf (0 : 1): [ ]
val = -inf


g_S1 (3 : 5): [ nan 1.542186 -0.7233623 ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ nan 1.542186 -0.7233623 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_b (3 : 5): [ 0 0.2132755 2.614836 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_b (3 : 5): [ 0 0.2132755 2.614836 ]
g_m (3 : 5): [ 0 1.213276 2.614836 ]


g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 2 0 0 ]
g_T2 (3 : 5): [ 0.7867245 0.1712209 0.3224199 ]


g_a (3 : 5): [ 1.213276 -0.1712209 -0.3224199 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1.213276 -0.1712209 -0.3224199 ]


g_a (3 : 5): [ 1.213276 0.1712209 0.3224199 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 3 1 1 ]
g_T2 (3 : 5): [ 0.7867245 0.1712209 0.3224199 ]


g_b (3 : 5): [ 2.213276 0.8287791 0.6775801 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 2.213276 0.8287791 0.6775801 ]


g_b (3 : 5): [ 2.213276 0.8287791 0.6775801 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 0.7867245 0.1712209 0.3224199 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1.213276 0.1712209 0.3224199 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1.213276 0.1712209 0.3224199 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2.213276 0.8287791 0.6775801 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2.213276 0.8287791 0.6775801 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1.213276 0.1712209 0.3224199 ]
g_b (3 : 5): [ 2.213276 0.8287791 0.6775801 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1.213276 2.213276
	 0.1712209 0.8287791
	 0.3224199 0.6775801
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1.213276 2.213276
	 0.1712209 0.8287791
	 0.3224199 0.6775801
 ]


g_m (3 : 5): [ 2.213276 0.8287791 0.6775801 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1.213276 0.1712209 0.3224199 ]
g_b (3 : 5): [ 2.213276 0.8287791 0.6775801 ]
g_m (3 : 5): [ 2.213276 0.8287791 0.6775801 ]
g_T2 (3 : 5): [ 0.7867245 0.1712209 0.3224199 ]


g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1.213276 0.1712209 0.3224199 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.2132755 -0.8287791 -0.6775801 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0.2132755 -0.8287791 -0.6775801 ]
val = 0

g_ind1 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2.213276 0.8287791 0.6775801 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1.213276 -0.1712209 -0.3224199 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 1.213276 -0.1712209 -0.3224199 ]
val = 0


g_ind2 (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (2 : 5): [ 2 3 ]
g_ind2 (1 : 5): [ 1 ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 1): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 1): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 1): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
g_indinf (0 : 1): [ ]
val = -inf


g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.213276 0.1712209 0.3224199 ]
g_b (3 : 5): [ 2.213276 0.8287791 0.6775801 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.213276 0.1712209 0.3224199 ]
g_b (3 : 5): [ 2.213276 0.8287791 0.6775801 ]
g_m (3 : 5): [ 2.213276 0.8287791 0.6775801 ]


g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]


Sc (3 : 5): [ -2.813279 -3.298224 -2.824908 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ -2.813279 -3.298224 -2.824908 ]
div = 2.000


Sc (3 : 5): [ -1.40664 -1.649112 -1.412454 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (890 interne); stringhe deallocate: 0 (250 interne)


*** Esco da scoremodular ***

109: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ -1.40664 -1.649112 -1.412454 ]
val = -inf


g_tmp_i3 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

111: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_tmp_i3 (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

118: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

119: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

121: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ -1.40664 -1.649112 -1.412454 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ -1.40664 -1.649112 -1.412454 ]
------------------------------ Fine copia_v_indx_d

125: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ -1.40664 -1.649112 -1.412454 ]


min = -1.649112
------------------------------ Fine min_v_d

126: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ -1.40664 -1.649112 -1.412454 ]
g_indInf (0 : 5): [ ]
val = -2.649112


Sc (3 : 5): [ -1.40664 -1.649112 -1.412454 ]
------------------------------ Fine assegna1_vs_indx_d

142: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 2 2 0 2 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 2 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_S_new (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 1 3 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 2 4 2 ]


g_T2 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 2 0 3 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 3 1 ]


g_old1 (3 : 5): [ 2 3 2 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 2 0 3 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 4 2 ]


g_old2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 2 3 2 ]
s = -1


g_new1 (3 : 5): [ 1 2 1 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 0 0 0 ]
s = 1


g_new2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 3 1 ]


g_toll1 (3 : 5): [ nan 1 nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 4 2 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 2 3 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 1 2 1 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 0 0 0 ]
g_T2 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

170: InitVett_d
g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
val = 0


g_S2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ 0 0 0 ]


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 0 0 0 ]
div = 2.000


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (890 interne); stringhe deallocate: 0 (250 interne)


*** Esco da scoremodular ***

145: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0 0 0 ]
val = -inf


g_tmp_i3 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

147: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_tmp_i3 (3 : 5): [ 1 2 3 ]
val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

155: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

156: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

158: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0 0 0 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine copia_v_indx_d

162: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

163: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0 0 0 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

173: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ -1.40664 -1.649112 -1.412454 ]
Sc (3 : 5): [ 0 0 0 ]


g_tmp_d1 (3 : 5): [ -1.40664 -1.649112 -1.412454 ]
------------------------------ Fine somma_vv_d

174: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0.2233623 -0.2796796 -1.768321
	 0 0 0
 ]
riga = 2
g_tmp_d1 (3 : 5): [ -1.40664 -1.649112 -1.412454 ]


ris (2 x 3 : 2 x 5): [
	 0.2233623 -0.2796796 -1.768321
	 -1.40664 -1.649112 -1.412454
 ]
------------------------------ Fine aggiungi_mv_riga_d

182: somma_m_d	<=>	ris <- sum(m)
ris (2 x 3 : 2 x 5): [
	 0.2233623 -0.2796796 -1.768321
	 -1.40664 -1.649112 -1.412454
 ]


ris: -6.292843
------------------------------ Fine somma_m_d

187: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_tmp_i3 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_colonne_i

189: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp_i3 (3 : 5): [ 2 2 2 ]
val = 0


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

200: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 3 3 ]
------------------------------ Fine somma_righe_i

202: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

215: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

217: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

215: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

217: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i

230: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

232: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

234: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_tmp_i3 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_colonne_i

236: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp_i3 (3 : 5): [ 2 2 2 ]
val = 0


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

246: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 3 3 ]
------------------------------ Fine somma_righe_i

248: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

260: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

262: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

260: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

262: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i


Stringhe allocate: 3 (930 interne); stringhe deallocate: 0 (290 interne)

338: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
------------------------------ Fine copia_m_i


***probmod***
60: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

62: InitMatr_i
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

64: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 0.5 0.5 0.5
	 0.5 0.5 0.5
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

66: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_M_in (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

68: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_M_out (2 : 2): [ 0 2 ]
------------------------------ Fine somma_colonne_i

71: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

87: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

88: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

89: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

133: InitVett_d
Sc (3 : 5): [ -1.40664 -1.649112 -1.412454 ]
val = 0


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

136: InitVett_i
g_tmp_i1 (3 : 6): [ 1 2 3 ]
val = 1


g_tmp_i1 (3 : 6): [ 1 1 1 ]
------------------------------ Fine InitVett_i

137: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_i1 (3 : 6): [ 1 1 1 ]


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_i

142: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 2 2 0 2 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 2 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_S_new (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 1 3 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 2 4 2 ]


g_T2 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 2 0 3 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 3 1 ]


g_old1 (3 : 5): [ 2 3 2 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 2 0 3 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 4 2 ]


g_old2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 2 3 2 ]
s = -1


g_new1 (3 : 5): [ 1 2 1 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 0 0 0 ]
s = 1


g_new2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 3 1 ]


g_toll1 (3 : 5): [ nan 1 nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 4 2 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 2 3 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 1 2 1 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 0 0 0 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 0 0 0 ]
g_T2 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

170: InitVett_d
g_S2 (3 : 5): [ 0 0 0 ]
val = 0


g_S2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ 0 0 0 ]


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 0 0 0 ]
div = 2.000


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (930 interne); stringhe deallocate: 0 (290 interne)


*** Esco da scoremodular ***

145: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0 0 0 ]
val = -inf


g_tmp_i3 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

147: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_i3 (3 : 5): [ 1 2 3 ]
val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

155: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

156: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

158: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0 0 0 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine copia_v_indx_d

162: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

163: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0 0 0 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

173: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ 0 0 0 ]
Sc (3 : 5): [ 0 0 0 ]


g_tmp_d1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine somma_vv_d

174: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_d1 (3 : 5): [ 0 0 0 ]


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

87: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

88: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

89: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

106: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 2 2 1 1 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 2 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 1 ]
s = 2


g_S_new (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 4 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 5 4 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (3 : 5): [ 3 5 4 ]


g_T2 (3 : 5): [ 0.7867245 0.1712209 0.3224199 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_old1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 4 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 5 4 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 5 4 ]


g_old2 (3 : 5): [ 2 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 2 2 ]
s = -1


g_new1 (3 : 5): [ 0 1 1 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 2 0 0 ]
s = 1


g_new2 (3 : 5): [ 3 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_toll1 (3 : 5): [ nan 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 4 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 5 4 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 5 4 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 2 2 ]
g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]


g_a (3 : 5): [ nan 1.213276 -1.614836 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan 1.213276 -1.614836 ]


g_a (3 : 5): [ nan 1.213276 1.614836 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 1 1 ]
g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]


g_b (3 : 5): [ nan 0.2132755 -2.614836 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan 0.2132755 -2.614836 ]


g_b (3 : 5): [ nan 0.2132755 2.614836 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]
complemento = 0


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ nan 1.213276 1.614836 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_a (3 : 5): [ 0 1.213276 1.614836 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ nan 0.2132755 2.614836 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_b (3 : 5): [ 0 0.2132755 2.614836 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_b (3 : 5): [ 0 0.2132755 2.614836 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0 0
	 1.213276 0.2132755
	 1.614836 2.614836
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0 0
	 1.213276 0.2132755
	 1.614836 2.614836
 ]


g_m (3 : 5): [ 0 1.213276 2.614836 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_b (3 : 5): [ 0 0.2132755 2.614836 ]
g_m (3 : 5): [ 0 1.213276 2.614836 ]
g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]


g_S1 (3 : 5): [ nan 1.542186 -0.7233623 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan 0.2132755 0.6148364 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ nan 0.2132755 0.6148364 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 0.2132755 2.614836 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan -0.7867245 1.614836 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ nan -0.7867245 1.614836 ]
val = 0


g_ind2 (1 : 5): [ 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (1 : 5): [ 3 ]


g_indinf (0 : 1): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ nan 1.542186 -0.7233623 ]
g_indinf (0 : 1): [ ]
val = -inf


g_S1 (3 : 5): [ nan 1.542186 -0.7233623 ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ nan 1.542186 -0.7233623 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_b (3 : 5): [ 0 0.2132755 2.614836 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_b (3 : 5): [ 0 0.2132755 2.614836 ]
g_m (3 : 5): [ 0 1.213276 2.614836 ]


g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 2 0 0 ]
g_T2 (3 : 5): [ 0.7867245 0.1712209 0.3224199 ]


g_a (3 : 5): [ 1.213276 -0.1712209 -0.3224199 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1.213276 -0.1712209 -0.3224199 ]


g_a (3 : 5): [ 1.213276 0.1712209 0.3224199 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 3 1 1 ]
g_T2 (3 : 5): [ 0.7867245 0.1712209 0.3224199 ]


g_b (3 : 5): [ 2.213276 0.8287791 0.6775801 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 2.213276 0.8287791 0.6775801 ]


g_b (3 : 5): [ 2.213276 0.8287791 0.6775801 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 0.7867245 0.1712209 0.3224199 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1.213276 0.1712209 0.3224199 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1.213276 0.1712209 0.3224199 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2.213276 0.8287791 0.6775801 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2.213276 0.8287791 0.6775801 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1.213276 0.1712209 0.3224199 ]
g_b (3 : 5): [ 2.213276 0.8287791 0.6775801 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1.213276 2.213276
	 0.1712209 0.8287791
	 0.3224199 0.6775801
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1.213276 2.213276
	 0.1712209 0.8287791
	 0.3224199 0.6775801
 ]


g_m (3 : 5): [ 2.213276 0.8287791 0.6775801 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1.213276 0.1712209 0.3224199 ]
g_b (3 : 5): [ 2.213276 0.8287791 0.6775801 ]
g_m (3 : 5): [ 2.213276 0.8287791 0.6775801 ]
g_T2 (3 : 5): [ 0.7867245 0.1712209 0.3224199 ]


g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1.213276 0.1712209 0.3224199 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.2132755 -0.8287791 -0.6775801 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0.2132755 -0.8287791 -0.6775801 ]
val = 0

g_ind1 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2.213276 0.8287791 0.6775801 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1.213276 -0.1712209 -0.3224199 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 1.213276 -0.1712209 -0.3224199 ]
val = 0


g_ind2 (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (2 : 5): [ 2 3 ]
g_ind2 (1 : 5): [ 1 ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 1): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 1): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 1): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
g_indinf (0 : 1): [ ]
val = -inf


g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.213276 0.1712209 0.3224199 ]
g_b (3 : 5): [ 2.213276 0.8287791 0.6775801 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.213276 0.1712209 0.3224199 ]
g_b (3 : 5): [ 2.213276 0.8287791 0.6775801 ]
g_m (3 : 5): [ 2.213276 0.8287791 0.6775801 ]


g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]


Sc (3 : 5): [ -2.813279 -3.298224 -2.824908 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ -2.813279 -3.298224 -2.824908 ]
div = 2.000


Sc (3 : 5): [ -1.40664 -1.649112 -1.412454 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (930 interne); stringhe deallocate: 0 (290 interne)


*** Esco da scoremodular ***

109: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ -1.40664 -1.649112 -1.412454 ]
val = -inf


g_tmp_i3 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

111: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_tmp_i3 (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

118: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

119: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

121: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ -1.40664 -1.649112 -1.412454 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ -1.40664 -1.649112 -1.412454 ]
------------------------------ Fine copia_v_indx_d

125: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ -1.40664 -1.649112 -1.412454 ]


min = -1.649112
------------------------------ Fine min_v_d

126: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ -1.40664 -1.649112 -1.412454 ]
g_indInf (0 : 5): [ ]
val = -2.649112


Sc (3 : 5): [ -1.40664 -1.649112 -1.412454 ]
------------------------------ Fine assegna1_vs_indx_d

142: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 2 2 0 2 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 2 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_S_new (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 1 3 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 2 4 2 ]


g_T2 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 2 0 3 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 3 1 ]


g_old1 (3 : 5): [ 2 3 2 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 2 0 3 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 4 2 ]


g_old2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 2 3 2 ]
s = -1


g_new1 (3 : 5): [ 1 2 1 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 0 0 0 ]
s = 1


g_new2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 3 1 ]


g_toll1 (3 : 5): [ nan 1 nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 4 2 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 2 3 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 1 2 1 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 0 0 0 ]
g_T2 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

170: InitVett_d
g_S2 (3 : 5): [ -2.813279 -4.84041 -2.101545 ]
val = 0


g_S2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ 0 0 0 ]


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 0 0 0 ]
div = 2.000


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (930 interne); stringhe deallocate: 0 (290 interne)


*** Esco da scoremodular ***

145: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0 0 0 ]
val = -inf


g_tmp_i3 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

147: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_tmp_i3 (3 : 5): [ 1 2 3 ]
val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

155: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

156: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

158: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0 0 0 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine copia_v_indx_d

162: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

163: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0 0 0 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

173: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ -1.40664 -1.649112 -1.412454 ]
Sc (3 : 5): [ 0 0 0 ]


g_tmp_d1 (3 : 5): [ -1.40664 -1.649112 -1.412454 ]
------------------------------ Fine somma_vv_d

174: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 2
g_tmp_d1 (3 : 5): [ -1.40664 -1.649112 -1.412454 ]


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 -1.40664 -1.649112 -1.412454
 ]
------------------------------ Fine aggiungi_mv_riga_d

182: somma_m_d	<=>	ris <- sum(m)
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 -1.40664 -1.649112 -1.412454
 ]


ris: -4.468205
------------------------------ Fine somma_m_d

187: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_tmp_i3 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_colonne_i

189: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp_i3 (3 : 5): [ 2 2 2 ]
val = 0


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

200: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 3 3 ]
------------------------------ Fine somma_righe_i

202: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

215: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

217: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

215: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

217: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i

230: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

232: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

234: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_tmp_i3 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_colonne_i

236: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp_i3 (3 : 5): [ 2 2 2 ]
val = 0


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

246: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 3 3 ]
------------------------------ Fine somma_righe_i

248: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

260: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

262: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

260: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

262: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i


Stringhe allocate: 3 (970 interne); stringhe deallocate: 0 (330 interne)

352: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_mod3 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine copia_m_i


***probmod***
60: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

62: InitMatr_i
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

64: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 0.5 0.5 0.5
	 -1.40664 -1.40664 -1.40664
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

66: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_mod3 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_M_in (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

68: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod3 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_M_out (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

71: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

87: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

88: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

89: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

106: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 2 2 1 1 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 2 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 1 ]
s = 1


g_S_new (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (3 : 5): [ 2 4 3 ]


g_T2 (3 : 5): [ 3.614836 0.3224199 0.7867245 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_old1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 4 3 ]


g_old2 (3 : 5): [ 2 0 2 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 2 2 ]
s = -1


g_new1 (3 : 5): [ 0 1 1 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 2 0 2 ]
s = 1


g_new2 (3 : 5): [ 3 1 3 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_toll1 (3 : 5): [ nan 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 4 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 2 2 ]
g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]


g_a (3 : 5): [ nan 1.213276 -1.614836 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan 1.213276 -1.614836 ]


g_a (3 : 5): [ nan 1.213276 1.614836 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 1 1 ]
g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]


g_b (3 : 5): [ nan 0.2132755 -2.614836 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan 0.2132755 -2.614836 ]


g_b (3 : 5): [ nan 0.2132755 2.614836 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]
complemento = 0


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ nan 1.213276 1.614836 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_a (3 : 5): [ 0 1.213276 1.614836 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ nan 0.2132755 2.614836 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_b (3 : 5): [ 0 0.2132755 2.614836 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_b (3 : 5): [ 0 0.2132755 2.614836 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0 0
	 1.213276 0.2132755
	 1.614836 2.614836
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0 0
	 1.213276 0.2132755
	 1.614836 2.614836
 ]


g_m (3 : 5): [ 0 1.213276 2.614836 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_b (3 : 5): [ 0 0.2132755 2.614836 ]
g_m (3 : 5): [ 0 1.213276 2.614836 ]
g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]


g_S1 (3 : 5): [ nan 1.542186 -0.7233623 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan 0.2132755 0.6148364 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ nan 0.2132755 0.6148364 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 0.2132755 2.614836 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan -0.7867245 1.614836 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ nan -0.7867245 1.614836 ]
val = 0


g_ind2 (1 : 5): [ 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (1 : 5): [ 3 ]


g_indinf (0 : 1): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ nan 1.542186 -0.7233623 ]
g_indinf (0 : 1): [ ]
val = -inf


g_S1 (3 : 5): [ nan 1.542186 -0.7233623 ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ nan 1.542186 -0.7233623 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_b (3 : 5): [ 0 0.2132755 2.614836 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_b (3 : 5): [ 0 0.2132755 2.614836 ]
g_m (3 : 5): [ 0 1.213276 2.614836 ]


g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 2 0 2 ]
g_T2 (3 : 5): [ 3.614836 0.3224199 0.7867245 ]


g_a (3 : 5): [ -1.614836 -0.3224199 1.213276 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -1.614836 -0.3224199 1.213276 ]


g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 3 1 3 ]
g_T2 (3 : 5): [ 3.614836 0.3224199 0.7867245 ]


g_b (3 : 5): [ -0.6148364 0.6775801 2.213276 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ -0.6148364 0.6775801 2.213276 ]


g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 3.614836 0.3224199 0.7867245 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1.614836 0.6148364
	 0.3224199 0.6775801
	 1.213276 2.213276
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1.614836 0.6148364
	 0.3224199 0.6775801
	 1.213276 2.213276
 ]


g_m (3 : 5): [ 1.614836 0.6775801 2.213276 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]
g_m (3 : 5): [ 1.614836 0.6775801 2.213276 ]
g_T2 (3 : 5): [ 3.614836 0.3224199 0.7867245 ]


g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.6148364 -0.6775801 0.2132755 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0.6148364 -0.6775801 0.2132755 ]
val = 0

g_ind1 (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.3851636 -0.3224199 1.213276 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.3851636 -0.3224199 1.213276 ]
val = 0


g_ind2 (1 : 5): [ 3 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (1 : 5): [ 2 ]
g_ind2 (1 : 5): [ 3 ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 3 ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 1): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 1): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
g_indinf (0 : 1): [ ]
val = -inf


g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]
g_m (3 : 5): [ 1.614836 0.6775801 2.213276 ]


g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]


Sc (3 : 5): [ 0.4467246 -0.5593591 -3.536641 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 0.4467246 -0.5593591 -3.536641 ]
div = 2.000


Sc (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (970 interne); stringhe deallocate: 0 (330 interne)


*** Esco da scoremodular ***

109: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
val = -inf


g_tmp_i3 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

111: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_i3 (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

118: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

119: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

121: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
------------------------------ Fine copia_v_indx_d

125: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]


min = -1.768321
------------------------------ Fine min_v_d

126: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
g_indInf (0 : 5): [ ]
val = -2.768321


Sc (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
------------------------------ Fine assegna1_vs_indx_d

142: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 2 2 0 2 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 2 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_S_new (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 1 3 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 2 4 2 ]


g_T2 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 2 0 3 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 3 1 ]


g_old1 (3 : 5): [ 2 3 2 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 2 0 3 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 4 2 ]


g_old2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 2 3 2 ]
s = -1


g_new1 (3 : 5): [ 1 2 1 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 0 0 0 ]
s = 1


g_new2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 3 1 ]


g_toll1 (3 : 5): [ nan 1 nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 4 2 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 2 3 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 1 2 1 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 0 0 0 ]
g_T2 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

170: InitVett_d
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
val = 0


g_S2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ 0 0 0 ]


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 0 0 0 ]
div = 2.000


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (970 interne); stringhe deallocate: 0 (330 interne)


*** Esco da scoremodular ***

145: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0 0 0 ]
val = -inf


g_tmp_i3 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

147: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_i3 (3 : 5): [ 1 2 3 ]
val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

155: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

156: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

158: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0 0 0 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine copia_v_indx_d

162: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

163: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0 0 0 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

173: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
Sc (3 : 5): [ 0 0 0 ]


g_tmp_d1 (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
------------------------------ Fine somma_vv_d

174: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_tmp_d1 (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]


ris (2 x 3 : 2 x 5): [
	 0.2233623 -0.2796796 -1.768321
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

87: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


g_tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

88: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

89: interseca_i	<=>	ris <- intersect(v1, v2)
g_tmp_i1 (0 : 6): [ ]
g_tmp_i2 (0 : 6): [ ]


g_ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

106: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 2 2 1 1 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 2 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 1 ]
s = 1


g_S_new (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ nan 3.614836 0.7867245 0.3224199 0.1712209 0.1047984 0 ]
g_tmp_i1 (3 : 5): [ 2 4 3 ]


g_T2 (3 : 5): [ 3.614836 0.3224199 0.7867245 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_old1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 4 3 ]


g_old2 (3 : 5): [ 2 0 2 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 2 2 ]
s = -1


g_new1 (3 : 5): [ 0 1 1 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 2 0 2 ]
s = 1


g_new2 (3 : 5): [ 3 1 3 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_toll1 (3 : 5): [ nan 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 4 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 2 2 ]
g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]


g_a (3 : 5): [ nan 1.213276 -1.614836 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan 1.213276 -1.614836 ]


g_a (3 : 5): [ nan 1.213276 1.614836 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 1 1 ]
g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]


g_b (3 : 5): [ nan 0.2132755 -2.614836 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan 0.2132755 -2.614836 ]


g_b (3 : 5): [ nan 0.2132755 2.614836 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]
complemento = 0


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ nan 1.213276 1.614836 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_a (3 : 5): [ 0 1.213276 1.614836 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ nan 0.2132755 2.614836 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_b (3 : 5): [ 0 0.2132755 2.614836 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_b (3 : 5): [ 0 0.2132755 2.614836 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0 0
	 1.213276 0.2132755
	 1.614836 2.614836
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0 0
	 1.213276 0.2132755
	 1.614836 2.614836
 ]


g_m (3 : 5): [ 0 1.213276 2.614836 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_b (3 : 5): [ 0 0.2132755 2.614836 ]
g_m (3 : 5): [ 0 1.213276 2.614836 ]
g_T1 (3 : 5): [ nan 0.7867245 3.614836 ]


g_S1 (3 : 5): [ nan 1.542186 -0.7233623 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan 0.2132755 0.6148364 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ nan 0.2132755 0.6148364 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 0.2132755 2.614836 ]
g_toll1 (3 : 5): [ nan 1 1 ]


g_tmp1_d (3 : 5): [ nan -0.7867245 1.614836 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ nan -0.7867245 1.614836 ]
val = 0


g_ind2 (1 : 5): [ 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (1 : 5): [ 3 ]


g_indinf (0 : 1): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ nan 1.542186 -0.7233623 ]
g_indinf (0 : 1): [ ]
val = -inf


g_S1 (3 : 5): [ nan 1.542186 -0.7233623 ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ nan 1.542186 -0.7233623 ]
g_ind (1 : 5): [ 1 ]
val = 0


g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_b (3 : 5): [ 0 0.2132755 2.614836 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0 1.213276 1.614836 ]
g_b (3 : 5): [ 0 0.2132755 2.614836 ]
g_m (3 : 5): [ 0 1.213276 2.614836 ]


g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 2 0 2 ]
g_T2 (3 : 5): [ 3.614836 0.3224199 0.7867245 ]


g_a (3 : 5): [ -1.614836 -0.3224199 1.213276 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -1.614836 -0.3224199 1.213276 ]


g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 3 1 3 ]
g_T2 (3 : 5): [ 3.614836 0.3224199 0.7867245 ]


g_b (3 : 5): [ -0.6148364 0.6775801 2.213276 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ -0.6148364 0.6775801 2.213276 ]


g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 3.614836 0.3224199 0.7867245 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1.614836 0.6148364
	 0.3224199 0.6775801
	 1.213276 2.213276
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1.614836 0.6148364
	 0.3224199 0.6775801
	 1.213276 2.213276
 ]


g_m (3 : 5): [ 1.614836 0.6775801 2.213276 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]
g_m (3 : 5): [ 1.614836 0.6775801 2.213276 ]
g_T2 (3 : 5): [ 3.614836 0.3224199 0.7867245 ]


g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.6148364 -0.6775801 0.2132755 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0.6148364 -0.6775801 0.2132755 ]
val = 0

g_ind1 (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.3851636 -0.3224199 1.213276 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.3851636 -0.3224199 1.213276 ]
val = 0


g_ind2 (1 : 5): [ 3 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (1 : 5): [ 2 ]
g_ind2 (1 : 5): [ 3 ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 3 ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 1): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 1): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
g_indinf (0 : 1): [ ]
val = -inf


g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.614836 0.3224199 1.213276 ]
g_b (3 : 5): [ 0.6148364 0.6775801 2.213276 ]
g_m (3 : 5): [ 1.614836 0.6775801 2.213276 ]


g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]


Sc (3 : 5): [ 0.4467246 -0.5593591 -3.536641 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 0.4467246 -0.5593591 -3.536641 ]
div = 2.000


Sc (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (970 interne); stringhe deallocate: 0 (330 interne)


*** Esco da scoremodular ***

109: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
val = -inf


g_tmp_i3 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

111: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_tmp_i3 (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

118: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

119: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

121: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
------------------------------ Fine copia_v_indx_d

125: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]


min = -1.768321
------------------------------ Fine min_v_d

126: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
g_indInf (0 : 5): [ ]
val = -2.768321


Sc (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
------------------------------ Fine assegna1_vs_indx_d

142: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 2 2 0 2 ]
g_h (3 : 5): [ 1 3 4 ]


g_tmp_i1 (3 : 6): [ 0 2 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_S_new (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 1 3 1 ]


g_T1 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STin (7 : 7): [ nan nan nan nan nan nan 0 ]
g_tmp_i1 (3 : 5): [ 2 4 2 ]


g_T2 (3 : 5): [ nan nan nan ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 2 0 3 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 3 1 ]


g_old1 (3 : 5): [ 2 3 2 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (7 : 7): [ 2 0 3 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 4 2 ]


g_old2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 2 3 2 ]
s = -1


g_new1 (3 : 5): [ 1 2 1 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 0 0 0 ]
s = 1


g_new2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 6): [ 0 2 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 3 1 ]


g_toll1 (3 : 5): [ nan 1 nan ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ nan 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 4 2 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 2 3 2 ]
g_T1 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 1 2 1 ]
g_T1 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

122: InitVett_d
g_S1 (3 : 5): [ 0 1.542186 -0.7233623 ]
val = 0


g_S1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 0 0 0 ]
g_T2 (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ nan nan nan ]


g_a (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ nan nan nan ]


g_b (3 : 5): [ nan nan nan ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ nan nan nan ]
complemento = 0


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

170: InitVett_d
g_S2 (3 : 5): [ 0.4467246 -2.101545 -2.813279 ]
val = 0


g_S2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine InitVett_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 0 0 0 ]
g_S2 (3 : 5): [ 0 0 0 ]


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 0 0 0 ]
div = 2.000


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 3 (970 interne); stringhe deallocate: 0 (330 interne)


*** Esco da scoremodular ***

145: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0 0 0 ]
val = -inf


g_tmp_i3 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

147: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_tmp_i3 (3 : 5): [ 1 2 3 ]
val = 1


g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

155: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine seq_i

156: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 6): [ 1 2 3 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 6): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

158: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0 0 0 ]
g_tmp_i3 (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine copia_v_indx_d

162: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

163: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0 0 0 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

173: somma_vv_d	<=>	ris <- v1 + v2
Sc (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
Sc (3 : 5): [ 0 0 0 ]


g_tmp_d1 (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]
------------------------------ Fine somma_vv_d

174: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0.2233623 -0.2796796 -1.768321
	 0 0 0
 ]
riga = 2
g_tmp_d1 (3 : 5): [ 0.2233623 -0.2796796 -1.768321 ]


ris (2 x 3 : 2 x 5): [
	 0.2233623 -0.2796796 -1.768321
	 0.2233623 -0.2796796 -1.768321
 ]
------------------------------ Fine aggiungi_mv_riga_d

182: somma_m_d	<=>	ris <- sum(m)
ris (2 x 3 : 2 x 5): [
	 0.2233623 -0.2796796 -1.768321
	 0.2233623 -0.2796796 -1.768321
 ]


ris: -3.649276
------------------------------ Fine somma_m_d

187: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_tmp_i3 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_colonne_i

189: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp_i3 (3 : 5): [ 2 2 2 ]
val = 0


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

200: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 3 3 ]
------------------------------ Fine somma_righe_i

202: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

215: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

217: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

215: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkIN (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

217: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i

230: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

232: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

234: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_tmp_i3 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_colonne_i

236: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp_i3 (3 : 5): [ 2 2 2 ]
val = 0


g_tmp_i1 (3 : 6): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

246: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 3 3 ]
------------------------------ Fine somma_righe_i

248: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

260: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

262: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

260: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

262: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i


Stringhe allocate: 3 (1010 interne); stringhe deallocate: 0 (370 interne)

364: vettore3s_d		<=>	ris <- c(el1, el2, el3)
el1 = -3.146422, el2 = -2.234103, el3 = -1.824638


g_pm (3 : 3): [ -3.146422 -2.234103 -1.824638 ]
------------------------------ Fine vettore3s_d

365: copia_v_d	<=>	ris[st:end] <- v[st:end]
g_pm (3 : 3): [ -3.146422 -2.234103 -1.824638 ]
st = 1
end = 3


g_prob_mod (3 : 3): [ -3.146422 -2.234103 -1.824638 ]
------------------------------ Fine copia_v_d

367: assegna1_v_indxNA_d	<=>	v1[which(is.na(v2))] <- val oppure v1[which(!is.na(v2))] <- val
g_prob_mod (3 : 3): [ -3.146422 -2.234103 -1.824638 ]
g_prob_mod (3 : 3): [ -3.146422 -2.234103 -1.824638 ]
val = 0
complemento = 0


g_prob_mod (3 : 3): [ -3.146422 -2.234103 -1.824638 ]
------------------------------ Fine assegna1_v_indxNA_d

369: min_v_d	<=>	ris <- min(v)
g_prob_mod (3 : 3): [ -3.146422 -2.234103 -1.824638 ]


min = -3.146422
------------------------------ Fine min_v_d

372: somma1_vs_d	<=>	v <- v + s
g_prob_mod (3 : 3): [ -3.146422 -2.234103 -1.824638 ]
s = 3.257533


g_prob_mod (3 : 3): [ 0.1111111 1.02343 1.432895 ]
------------------------------ Fine somma1_vs_d

374: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_pm (3 : 3): [ -3.146422 -2.234103 -1.824638 ]
complemento = 0


g_tmp1_i (0 : 11): [ ]
------------------------------ Fine which_v_indxNA_d

375: assegna1_v_indx_d	<=>	v[indx] <- val
g_prob_mod (3 : 3): [ 0.1111111 1.02343 1.432895 ]
g_tmp1_i (0 : 11): [ ]
val = 0


g_prob_mod (3 : 3): [ 0.1111111 1.02343 1.432895 ]
------------------------------ Fine assegna1_v_indx_d

377: which_v_indxne_d	<=>	ris <- which(v != val)
g_prob_mod (3 : 3): [ 0.1111111 1.02343 1.432895 ]
val = 0


g_ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

381: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_prob_mod (3 : 3): [ 0.1111111 1.02343 1.432895 ]
canc_NA = 0



ris: 2.567436
------------------------------ Fine somma_v_d

381: dividi1_vs_d	<=>	v <- v / div
g_prob_mod (3 : 3): [ 0.1111111 1.02343 1.432895 ]
div = 2.567


g_prob_mod (3 : 3): [ 0.04327707 0.3986195 0.5581034 ]
------------------------------ Fine dividi1_vs_d

383: vettore3s_i		<=>	ris <- c(el1, el2, el3)
el1 = 1, el2 = 2, el3 = 3


g_tmp1_i (3 : 11): [ 1 2 3 ]
------------------------------ Fine vettore3s_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (3 : 11): [ 1 2 3 ]
k = 1, replace = 0
g_prob_mod (3 : 3): [ 0.04327707 0.3986195 0.5581034 ]


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 3 (1010 interne); stringhe deallocate: 0 (370 interne)

398: copia_m_i	<=>	ris <- da
g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_M (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
------------------------------ Fine copia_m_i

399: copia_m_d	<=>	ris <- da
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 -1.40664 -1.649112 -1.412454
 ]


g_Sc (2 x 3 : 2 x 5): [
	 0 0 0
	 -1.40664 -1.649112 -1.412454
 ]
------------------------------ Fine copia_m_d

401: copia_v_i	<=>	ris[st:end] <- v[st:end]
VECTOR_ELT(elem, 2) (1 : 1): [ 2 ]
st = 1
end = 1


g_hubs (1 : 2): [ 2 ]
------------------------------ Fine copia_v_i

427: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
canc_NA = 0



ris: 1
------------------------------ Fine somma_v_d

427: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
div = 1.000


g_ppp (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
------------------------------ Fine dividi1_vs_d

739: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (3 : 5): [ 1 3 4 ]
st = 1
end = 3


g_h1 (3 : 5): [ 1 3 4 ]
------------------------------ Fine copia_v_i


***assign_nodes***
46: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (3 : 5): [ 1 3 4 ]
st = 1
end = 3


g_or_h (3 : 5): [ 1 3 4 ]
------------------------------ Fine copia_v_i

48: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_aus_h (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

54: InitVett_i
g_index (2 : 2): [ 4 5 ]
val = 0


g_index (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_i

56: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_M (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_M_in (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

58: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_M_in (2 : 2): [ 1 1 ]
decr = 1


g_Ord (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

63: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 3 : 2 x 5): [
	 0 0 0
	 -1.40664 -1.649112 -1.412454
 ]
r = 1

g_p (3 : 5): [ 0 0 0 ]
------------------------------ Fine riga_d

65: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (3 : 5): [ 0 0 0 ]
val = 0


g_tmp_i (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxle_d

68: min_v_d	<=>	ris <- min(v)
g_p (3 : 5): [ 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

69: somma1_vs_d	<=>	v <- v + s
g_p (3 : 5): [ 0 0 0 ]
s = 0.1111111


g_p (3 : 5): [ 0.1111111 0.1111111 0.1111111 ]
------------------------------ Fine somma1_vs_d

72: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 2 2 0 2 ]
g_h1 (3 : 5): [ 1 3 4 ]


g_Sin_h (3 : 5): [ 0 2 0 ]
------------------------------ Fine assegna_v_indxNA_i

77: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sin_h (3 : 5): [ 0 2 0 ]
val = 4


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

83: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (3 : 5): [ 0.1111111 0.1111111 0.1111111 ]
g_aus_h (3 : 5): [ 1 2 3 ]


g_tmp_d (3 : 5): [ 0.1111111 0.1111111 0.1111111 ]
------------------------------ Fine assegna_v_indxNA_d

84: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (3 : 5): [ 0.1111111 0.1111111 0.1111111 ]
canc_NA = 0



ris: 0.3333333
------------------------------ Fine somma_v_d

85: dividi_vs_d	ris <- v / div
g_tmp_d (3 : 5): [ 0.1111111 0.1111111 0.1111111 ]
div = 0.333


g_p (3 : 5): [ 0.3333333 0.3333333 0.3333333 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (3 : 5): [ 1 3 4 ]
k = 1, replace = 0
g_p (3 : 5): [ 0.3333333 0.3333333 0.3333333 ]


ris (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 3 (1010 interne); stringhe deallocate: 0 (370 interne)

92: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (3 : 5): [ 1 3 4 ]
ris (1 : 1): [ 3 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 3
g_h1 (3 : 5): [ 1 3 4 ]


indx = 2
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (3 : 5): [ 1 3 4 ]
indx = 2


g_h1 (2 : 5): [ 1 4 ]
------------------------------ Fine elimina1_indx_i



g_h1 (2 : 5): [ 1 4 ]
------------------------------ Fine setdiff1_i

94: which_indx_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (3 : 5): [ 1 3 4 ]
ris (1 : 1): [ 3 ]
2032: esiste_v_i	<=>	elem %IN% v
elem = 3
g_or_h (3 : 5): [ 1 3 4 ]


indx = 2
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 1 ]
------------------------------ Fine which_indx_vv_eq_i

95: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (3 : 5): [ 1 2 3 ]
g_tmp_i (1 : 5): [ 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
g_aus_h (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
g_aus_h (3 : 5): [ 1 2 3 ]
indx = 1


g_aus_h (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i



g_aus_h (2 : 5): [ 2 3 ]
------------------------------ Fine setdiff1_i

63: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 3 : 2 x 5): [
	 0 0 0
	 -1.40664 -1.649112 -1.412454
 ]
r = 2

g_p (3 : 5): [ -1.40664 -1.649112 -1.412454 ]
------------------------------ Fine riga_d

65: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (3 : 5): [ -1.40664 -1.649112 -1.412454 ]
val = 0


g_tmp_i (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxle_d

68: min_v_d	<=>	ris <- min(v)
g_p (3 : 5): [ -1.40664 -1.649112 -1.412454 ]


min = -1.649112
------------------------------ Fine min_v_d

69: somma1_vs_d	<=>	v <- v + s
g_p (3 : 5): [ -1.40664 -1.649112 -1.412454 ]
s = 1.760223


g_p (3 : 5): [ 0.3535835 0.1111111 0.3477693 ]
------------------------------ Fine somma1_vs_d

72: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sin (5 : 5): [ 0 2 2 0 2 ]
g_h1 (2 : 5): [ 1 4 ]


g_Sin_h (2 : 5): [ 0 0 ]
------------------------------ Fine assegna_v_indxNA_i

77: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sin_h (2 : 5): [ 0 0 ]
val = 4


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

83: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (3 : 5): [ 0.3535835 0.1111111 0.3477693 ]
g_aus_h (2 : 5): [ 2 3 ]


g_tmp_d (2 : 5): [ 0.1111111 0.3477693 ]
------------------------------ Fine assegna_v_indxNA_d

84: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (2 : 5): [ 0.1111111 0.3477693 ]
canc_NA = 0



ris: 0.4588804
------------------------------ Fine somma_v_d

85: dividi_vs_d	ris <- v / div
g_tmp_d (2 : 5): [ 0.1111111 0.3477693 ]
div = 0.459


g_p (2 : 5): [ 0.2421352 0.7578648 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (2 : 5): [ 1 4 ]
k = 1, replace = 0
g_p (2 : 5): [ 0.2421352 0.7578648 ]


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 3 (1010 interne); stringhe deallocate: 0 (370 interne)

92: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (2 : 5): [ 1 4 ]
ris (1 : 1): [ 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
g_h1 (2 : 5): [ 1 4 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (2 : 5): [ 1 4 ]
indx = 1


g_h1 (1 : 5): [ 4 ]
------------------------------ Fine elimina1_indx_i



g_h1 (1 : 5): [ 4 ]
------------------------------ Fine setdiff1_i

94: which_indx_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (3 : 5): [ 1 3 4 ]
ris (1 : 1): [ 1 ]
2032: esiste_v_i	<=>	elem %IN% v
elem = 1
g_or_h (3 : 5): [ 1 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 1 ]
------------------------------ Fine which_indx_vv_eq_i

95: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (2 : 5): [ 2 3 ]
g_tmp_i (1 : 5): [ 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
g_aus_h (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i



g_aus_h (2 : 5): [ 2 3 ]
------------------------------ Fine setdiff1_i

103: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
riga = 1
val = 1


g_ind (1 : 5): [ 2 ]
------------------------------ Fine which_m_rowindxeq_i

105: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 3 1 ]
g_ind (1 : 5): [ 2 ]


g_co (1 : 2): [ 1 ]
------------------------------ Fine copia_v_indx_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 0 1 1 0 0
	 0 0 0 0 0
	 0 0 0 1 1
 ]
g_ri (1 : 1): [ 3 ]
g_co (1 : 2): [ 1 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 1 1 1 0 0
	 0 0 0 0 0
	 0 0 0 1 1
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 1
g_hubs (1 : 2): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i

103: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
riga = 2
val = 1


g_ind (1 : 5): [ 2 ]
------------------------------ Fine which_m_rowindxeq_i

105: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 3 1 ]
g_ind (1 : 5): [ 2 ]


g_co (1 : 2): [ 1 ]
------------------------------ Fine copia_v_indx_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 1 1 0 0
	 1 1 1 0 0
	 0 0 0 0 0
	 0 0 0 1 1
 ]
g_ri (1 : 1): [ 1 ]
g_co (1 : 2): [ 1 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 1 1 0 0
	 1 1 1 0 0
	 0 0 0 0 0
	 0 0 0 1 1
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 2
g_hubs (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

111: accoda1_vv_i	<=>	v1 <- c(v1, v2)
ris (0 : 1): [ ]
g_ri (1 : 1): [ 1 ]


ris (1 : 1): [ 1 ]
------------------------------ Fine accoda_vv_i


*** Esco da assign_nodes ***


Stringhe allocate: 3 (1010 interne); stringhe deallocate: 0 (370 interne)

747: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_h (3 : 5): [ 1 3 4 ]
g_h1 (1 : 5): [ 4 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (3 : 5): [ 1 3 4 ]
st = 1
end = 3


g_tmp1_i (3 : 11): [ 1 3 4 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 4
g_tmp1_i (3 : 11): [ 1 3 4 ]


indx = 3
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_tmp1_i (3 : 11): [ 1 3 4 ]
indx = 3


g_tmp1_i (2 : 11): [ 1 3 ]
------------------------------ Fine elimina1_indx_i



g_tmp1_i (2 : 11): [ 1 3 ]
------------------------------ Fine setdiff_i

748: incr1_v_indx_i	<=>	v[indx] <- v[indx] + s
g_LG (5 : 5): [ -1 0 0 0 0 ]
g_tmp1_i (2 : 11): [ 1 3 ]
val = 1


g_LG (5 : 5): [ 0 0 1 0 0 ]
------------------------------ Fine incr1_v_indx_i

752: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (1 : 5): [ 4 ]
st = 1
end = 1


g_h (1 : 5): [ 4 ]
------------------------------ Fine copia_v_i

754: accoda1_vv_i	<=>	v1 <- c(v1, v2)
g_h_new (0 : 2): [ ]
ris (1 : 1): [ 1 ]


g_h_new (1 : 2): [ 1 ]
------------------------------ Fine accoda_vv_i

756: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 1 1 0 0
	 1 1 1 0 0
	 0 0 0 0 0
	 0 0 0 1 1
 ]


g_Sout (5 : 5): [ 2 2 2 1 1 ]
------------------------------ Fine somma_colonne_i

758: max_v_i		<=>	ris <- max(v)
g_Sout (5 : 5): [ 2 2 2 1 1 ]


max = 2
------------------------------ Fine max_v_i

760: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 3
incr = 1


g_tmp2_i (4 : 4): [ 0 1 2 3 ]
------------------------------ Fine seq_i


*** hist1 ***
g_Sout (5 : 5): [ 2 2 2 1 1 ]
g_tmp2_i (4 : 4): [ 0 1 2 3 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
g_tmp1_i (3 : 11): [ 1 3 4 ]
val = 0


g_tmp1_i (3 : 11): [ 0 0 0 ]
------------------------------ Fine InitVett_i



g_tmp1_i (3 : 11): [ 0 2 3 ]

Stringhe allocate: 3 (1010 interne); stringhe deallocate: 0 (370 interne)

762: promuovi_i	(implicita)
g_tmp1_i (3 : 11): [ 0 2 3 ]
ATTENZIONE (promuovi_i, linea /home/marco/hmm/HMM.c # 762): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

g_tmp1_d (3 : 19): [ 0 2 3 ]
------------------------------ Fine promuovi_i

763: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
start = 1
end = 3
g_tmp1_d (3 : 19): [ 0 2 3 ]


g_Freq_out (7 : 7): [ 0 2 3 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

765: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 1 1 0 0
	 1 1 1 0 0
	 0 0 0 0 0
	 0 0 0 1 1
 ]


g_Sin (5 : 5): [ 1 2 3 0 2 ]
------------------------------ Fine somma_righe_i

767: max_v_i		<=>	ris <- max(v)
g_Sin (5 : 5): [ 1 2 3 0 2 ]


max = 3
------------------------------ Fine max_v_i

769: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 4
incr = 1


g_tmp2_i (5 : 13): [ 0 1 2 3 4 ]
------------------------------ Fine seq_i


*** hist1 ***
g_Sin (5 : 5): [ 1 2 3 0 2 ]
g_tmp2_i (5 : 13): [ 0 1 2 3 4 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
g_tmp1_i (4 : 11): [ 0 2 3 4 ]
val = 0


g_tmp1_i (4 : 11): [ 0 0 0 0 ]
------------------------------ Fine InitVett_i



g_tmp1_i (4 : 11): [ 1 1 2 1 ]

Stringhe allocate: 3 (1011 interne); stringhe deallocate: 0 (371 interne)

771: promuovi_i	(implicita)
g_tmp1_i (4 : 11): [ 1 1 2 1 ]
ATTENZIONE (promuovi_i, linea /home/marco/hmm/HMM.c # 771): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

g_tmp1_d (4 : 19): [ 1 1 2 1 ]
------------------------------ Fine promuovi_i

772: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
g_Freq_in (7 : 7): [ 2 0 3 0 0 0 0 ]
start = 1
end = 4
g_tmp1_d (4 : 19): [ 1 1 2 1 ]


g_Freq_in (7 : 7): [ 1 1 2 1 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

786: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h_new (1 : 2): [ 1 ]
st = 1
end = 1


g_h (1 : 5): [ 1 ]
------------------------------ Fine copia_v_i

791: copia_v_indx_i	<=>	ris <- v[indx]
g_Sin (5 : 5): [ 1 2 3 0 2 ]
g_h (1 : 5): [ 1 ]


g_tmp2_i (1 : 13): [ 1 ]
------------------------------ Fine copia_v_indx_i

792: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp2_i (1 : 13): [ 1 ]
val = 5


g_tmp1_i (1 : 11): [ 1 ]
------------------------------ Fine which_v_indxne_i

793: copia_v_indx_i	<=>	ris <- v[indx]
g_h (1 : 5): [ 1 ]
g_tmp1_i (1 : 11): [ 1 ]


g_h (1 : 5): [ 1 ]
------------------------------ Fine copia_v_indx_i


*** write_m_i ***
ris (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 1 1 0 0
	 1 1 1 0 0
	 0 0 0 0 0
	 0 0 0 1 1
 ]

Stringhe allocate: 3 (1012 interne); stringhe deallocate: 0 (372 interne)

966: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp1_i (5 : 11): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

967: cbind2v_i	<=>	ris <- cbind(v1, v2)
g_tmp1_i (5 : 11): [ 1 2 3 4 5 ]
g_LG (5 : 5): [ 0 0 1 0 0 ]


g_tmpm_i (5 x 2 : 5 x 2): [
	 1 0
	 2 0
	 3 1
	 4 0
	 5 0
 ]
------------------------------ Fine cbind2v_i


*** write_m_i ***
g_tmpm_i (5 x 2 : 5 x 2): [
	 1 0
	 2 0
	 3 1
	 4 0
	 5 0
 ]

Stringhe allocate: 3 (1017 interne); stringhe deallocate: 0 (372 interne)


Stringhe allocate: 3 (1017 interne); stringhe deallocate: 0 (372 interne)


*** Esco da HMM1 ***
Trasformo la matrice
ris (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 1 1 0 0
	 1 1 1 0 0
	 0 0 0 0 0
	 0 0 0 1 1
 ]

Stringhe allocate: 3 (1017 interne); stringhe deallocate: 1 (1017 interne)

