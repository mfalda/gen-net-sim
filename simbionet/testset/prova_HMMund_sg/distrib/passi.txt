
*** HMMund ***
Il vettore 'degree' e` nullo
Ho trasformato il vettore prior_p_subnet (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (1 : 1): [ 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (1 : 1): [ 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (1 : 1): [ 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (1 : 1): [ 1 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (1 : 1): [ 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (2 : 2): [ 1 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (1 : 1): [ 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (1 : 1): [ 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (1 : 1): [ 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (2 : 2): [ 1 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]

***HMM1_und***
81: copia_v_d	<=>	ris[st:end] <- v[st:end]
prior_p_subnet (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]
st = 1
end = 7


g_prior_p_subnet (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]
------------------------------ Fine copia_v_d

91: rep_s_i	<=>	ris <- rep(num, rip)
num = 0
rip = 7


g_MC (7 : 7): [ 0 0 0 0 0 0 0 ]
------------------------------ Fine rep_s_i

97: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_tmp1_i (2 : 2): [ 1 0 ]
------------------------------ Fine somma_righe_i

101: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 1 0 ]


max = 1
------------------------------ Fine max_v_i

97: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_tmp1_i (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

101: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 1 1 ]


max = 1
------------------------------ Fine max_v_i

97: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_tmp1_i (2 : 2): [ 0 2 ]
------------------------------ Fine somma_righe_i

101: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 0 2 ]


max = 2
------------------------------ Fine max_v_i

97: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_tmp1_i (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

101: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 1 1 ]


max = 1
------------------------------ Fine max_v_i

97: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_tmp1_i (2 : 2): [ 1 2 ]
------------------------------ Fine somma_righe_i

101: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 1 2 ]


max = 2
------------------------------ Fine max_v_i

97: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_tmp1_i (2 : 2): [ 2 1 ]
------------------------------ Fine somma_righe_i

101: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 2 1 ]


max = 2
------------------------------ Fine max_v_i

97: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_tmp1_i (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

101: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 2 2 ]


max = 2
------------------------------ Fine max_v_i

107: which_v_indxeq_i	<=>	ris <- which(v==val)
g_SIMM (7 : 7): [ 0 0 0 1 1 0 1 ]
val = 0


g_tmp1_i (4 : 11): [ 1 2 3 6 ]
------------------------------ Fine which_v_indxeq_i

108: assegna1_v_indx_d	<=>	v[indx] <- val
g_prior_p_subnet (7 : 7): [ 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 0.1428571428571428 ]
g_tmp1_i (4 : 11): [ 1 2 3 6 ]
val = 0


g_prior_p_subnet (7 : 7): [ 0 0 0 0.1428571428571428 0.1428571428571428 0 0.1428571428571428 ]
------------------------------ Fine assegna1_v_indx_d

110: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_prior_p_subnet (7 : 7): [ 0 0 0 0.1428571428571428 0.1428571428571428 0 0.1428571428571428 ]
canc_NA = 0



ris: 0.4285714285714285
------------------------------ Fine somma_v_d

110: dividi1_vs_d	<=>	v <- v / div
g_prior_p_subnet (7 : 7): [ 0 0 0 0.1428571428571428 0.1428571428571428 0 0.1428571428571428 ]
div = 0.429


g_prior_p_subnet (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
------------------------------ Fine dividi1_vs_d

113: rep_s_i	<=>	ris <- rep(num, rip)
num = -1
rip = 5


g_LG (5 : 5): [ -1 -1 -1 -1 -1 ]
------------------------------ Fine rep_s_i

116: InitMatr_i
ris (5 x 5 : 5 x 5): [
	 0 26024120 0 1508460 2117700569
	 0 26996056 14713528 28 2118062216
	 10 0 14713424 0 3
	 2 3 14713316 3384 14713388
	 0 33871503 2117780008 1 2117780028
 ]
val = 0


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

123: rep_s_d	<=>	ris <- rep(num, rip)
num = 0
rip = 6


g_tmp1_d (6 : 6): [ 0 0 0 0 0 0 ]
------------------------------ Fine rep_s_d

124: vettore2v_d		<=>	ris <- c(v1, v2)
g_scalare_d (1 : 1): [ 5 ]
g_tmp1_d (6 : 6): [ 0 0 0 0 0 0 ]


g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
------------------------------ Fine vettore2v_d

125: copia_v_d	<=>	ris[st:end] <- v[st:end]
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
st = 1
end = 7


g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
------------------------------ Fine copia_v_d

129: seq_d	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp1_d (5 : 6): [ 1 2 3 4 5 ]
------------------------------ Fine seq_d

130: exp_d	<=>	ris <- v ^ val
g_tmp1_d (5 : 6): [ 1 2 3 4 5 ]
val = -2.2


g_tmp2_d (5 : 5): [ 1 0.217637640824031 0.08919350686224783 0.04736614270344993 0.02899118654710781 ]
------------------------------ Fine exp_d

133: vettore3v_d		<=>	ris <- c(v1, v2, v3)
g_scalare1_d (1 : 1): [ nan ]
g_tmp2_d (5 : 5): [ 1 0.217637640824031 0.08919350686224783 0.04736614270344993 0.02899118654710781 ]
g_scalare_d (1 : 1): [ 0 ]


g_Prob (7 : 7): [ nan 1 0.217637640824031 0.08919350686224783 0.04736614270344993 0.02899118654710781 0 ]
------------------------------ Fine vettore3v_d

135: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_Prob (7 : 7): [ nan 1 0.217637640824031 0.08919350686224783 0.04736614270344993 0.02899118654710781 0 ]
canc_NA = 1



ris: 1.383188476936837
------------------------------ Fine somma_v_d

135: dividi1_vs_d	<=>	v <- v / div
g_Prob (7 : 7): [ nan 1 0.217637640824031 0.08919350686224783 0.04736614270344993 0.02899118654710781 0 ]
div = 1.383


g_Prob (7 : 7): [ nan 0.722967272120837 0.1573448914973642 0.06448398634709047 0.03424417098119949 0.02095967905350884 0 ]
------------------------------ Fine dividi1_vs_d

147: rep_s_d	<=>	ris <- rep(num, rip)
num = 0
rip = 7


g_STout (7 : 7): [ 0 0 0 0 0 0 0 ]
------------------------------ Fine rep_s_d

149: assegna_v_segm_d	<=>	v[st:end] <- val
g_STout (7 : 7): [ 0 0 0 0 0 0 0 ]
start = 7
end = 7
val = 0


g_STout (7 : 7): [ 0 0 0 0 0 0 0 ]
------------------------------ Fine assegna_v_segm_d

151: segmento_v_d	<=>	ris <- v[st:end]
g_Prob (7 : 7): [ nan 0.722967272120837 0.1573448914973642 0.06448398634709047 0.03424417098119949 0.02095967905350884 0 ]
start = 2
end = 6


g_tmp1_d (5 : 6): [ 0.722967272120837 0.1573448914973642 0.06448398634709047 0.03424417098119949 0.02095967905350884 ]
------------------------------ Fine segmento_v_d

152: moltiplica_vs_d	<=>	ris <- v1 * v2
g_tmp1_d (5 : 6): [ 0.722967272120837 0.1573448914973642 0.06448398634709047 0.03424417098119949 0.02095967905350884 ]
val = 5


g_tmp2_d (5 : 5): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 ]
------------------------------ Fine moltiplica_vs_d

154: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp1_d (5 : 6): [ 0.722967272120837 0.1573448914973642 0.06448398634709047 0.03424417098119949 0.02095967905350884 ]
canc_NA = 1



ris: 1
------------------------------ Fine somma_v_d

154: dividi1_vs_d	<=>	v <- v / div
g_tmp2_d (5 : 5): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 ]
div = 1.000


g_tmp2_d (5 : 5): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 ]
------------------------------ Fine dividi1_vs_d

155: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
g_STout (7 : 7): [ 0 0 0 0 0 0 0 ]
start = 2
end = 6
g_tmp2_d (5 : 5): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 ]


g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
------------------------------ Fine assegna1_v_segmv_d

157: moltiplica_vs_d	<=>	ris <- v1 * v2
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
val = 0.1


g_tmp1_d (7 : 19): [ 0 0.3614836360604186 0.07867244574868211 0.03224199317354524 0.01712208549059974 0.01047983952675442 0 ]
------------------------------ Fine moltiplica_vs_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = 1
rip = 7


g_tmp2_d (7 : 17): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine rep_s_d

159: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_tmp1_d (7 : 19): [ 0 0.3614836360604186 0.07867244574868211 0.03224199317354524 0.01712208549059974 0.01047983952675442 0 ]
g_tmp2_d (7 : 17): [ 1 1 1 1 1 1 1 ]


g_aus (7 x 2 : 7 x 2): [
	 0 1
	 0.3614836360604186 1
	 0.07867244574868211 1
	 0.03224199317354524 1
	 0.01712208549059974 1
	 0.01047983952675442 1
	 0 1
 ]
------------------------------ Fine cbind2v_d

161: max_righe_d	<=>	ris <- apply(m, 1, max)
g_aus (7 x 2 : 7 x 2): [
	 0 1
	 0.3614836360604186 1
	 0.07867244574868211 1
	 0.03224199317354524 1
	 0.01712208549059974 1
	 0.01047983952675442 1
	 0 1
 ]


g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine max_righe_d

163: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_h (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

171: rep_s_d	<=>	ris <- rep(num, rip)
num = 1
rip = 7


g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine rep_s_d

175: elimina_doppi_i	<=>	ris <- union(v, v)
g_CC (7 : 7): [ 0 0 0 0 0 0 0 ]


g_tmp1_i (1 : 11): [ 0 ]
------------------------------ Fine elimina_doppi_i

176: ordina_i	<=>	ris <- sort(v, decreasing=decr)
g_tmp1_i (1 : 11): [ 0 ]
decr = 0
1776: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp1_i (1 : 11): [ 0 ]
st = 1
end = 1


g_CCs (1 : 1): [ 0 ]
------------------------------ Fine copia_v_i



g_CCs (1 : 1): [ 0 ]
------------------------------ Fine ordina_i

193: rep_s_d	<=>	ris <- rep(num, rip)
num = 1
rip = 1


g_p (1 : 1): [ 1 ]
------------------------------ Fine rep_s_d

196: which_v_indxeq_i	<=>	ris <- which(v==val)
g_CC (7 : 7): [ 0 0 0 0 0 0 0 ]
val = 0


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine which_v_indxeq_i

198: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
st = 1
end = 7


g_CCind[i - 1] (7 : 7): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine copia_v_i

208: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_Sout (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_colonne_i


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


g_ind (0 : 25): [ ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
g_ind (0 : 25): [ ]
val = 1


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (5 : 5): [ 3.614835750845661 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 ]
val = 0


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 1
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 2


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 2
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 3


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 3
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 4


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 4
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 5


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 5
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (5 : 5): [ 0 0 0 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 2 (265 interne); stringhe deallocate: 0 (0 interne)


*** Esco da cluster_coeff2 ***
220: somma_vs_T	<=> ris <- v + s
g_CCs (1 : 1): [ 0 ]
s = 0


g_tmp1_d (1 : 19): [ 0 ]
------------------------------ Fine somma_vs_di

221: segno_v_d	<=>	ris <- sign(v)
g_tmp1_d (1 : 19): [ 0 ]


g_segno (1 : 1): [ 0 ]
------------------------------ Fine segno_v_d

223: which_v_indxgt_i	<=>	ris <- which(v > val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indp (0 : 1): [ ]
------------------------------ Fine which_v_indxgt_i

225: which_v_indxle_i	<=>	ris <- which(v<=val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indm (1 : 1): [ 1 ]
------------------------------ Fine which_v_indxle_i

229: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indp (0 : 1): [ ]
val2 = 0.3


g_p (1 : 1): [ 1 ]
------------------------------ Fine f_aux9_d

231: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indm (1 : 1): [ 1 ]
val2 = 0.3


g_p (1 : 1): [ 1.7 ]
------------------------------ Fine f_aux9_d

243: min_v_d	<=>	ris <- min(v)
g_p (1 : 1): [ 1.7 ]


min = 1.7
------------------------------ Fine min_v_d

246: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_p (1 : 1): [ 1.7 ]
canc_NA = 0



ris: 1.7
------------------------------ Fine somma_v_d

246: dividi1_vs_d	<=>	v <- v / div
g_p (1 : 1): [ 1.7 ]
div = 1.700


g_p (1 : 1): [ 1 ]
------------------------------ Fine dividi1_vs_d

249: assegna1_v_indx_d	<=>	v[indx] <- val
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
g_CCind[i - 1] (7 : 7): [ 1 2 3 4 5 6 7 ]
val = 1


g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine assegna1_v_indx_d

267: moltiplica_vv_d	<=>	ris <- v1 * v2
g_prior_p_subnet (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]


g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
------------------------------ Fine moltiplica_vv_d

269: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]


max = 0.3333333333333333
------------------------------ Fine max_v_d

273: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
canc_NA = 1



ris: 1
------------------------------ Fine somma_v_d

273: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
div = 1.000


g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
------------------------------ Fine dividi1_vs_d

281: max_v_i		<=>	ris <- max(v)
g_dim (7 : 7): [ 2 2 2 2 2 2 2 ]


max = 2
------------------------------ Fine max_v_i

287: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]


max = 0.3333333333333333
------------------------------ Fine max_v_d

295: which_v_indxgt_d	<=>	ris <- which(v > val)
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
val = 0


g_tmp1_i (3 : 11): [ 4 5 7 ]
------------------------------ Fine which_v_indxgt_d

298: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 7
incr = 1


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine seq_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
k = 3, replace = 0
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]


ris (3 : 3): [ 7 5 4 ]
*****************************************


Stringhe allocate: 2 (290 interne); stringhe deallocate: 0 (0 interne)

301: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_mod1 (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine copia_m_i


***probmod_und***
56: InitMatr_i
g_checkOUT (2 x 5 : 2 x 5): [
	 0 3211313 1211070720 794915941 778397537
	 2 167772209 1294945613 1801675120 7562354
 ]
val = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

58: InitMatr_d
ris (2 x 5 : 2 x 5): [
	 3.802320133198661e-301 8.487983163861089e-314 6.365987386729655e-314 7.516308358942081e-299 9.881312916824931e-324
	 1.303213949893673e-316 2.54639494925714e-313 5.682267591672344e-299 4.313154391439195e-301 9.535447818987265e-307
 ]
val = 0


ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_d

60: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod1 (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_M_out (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

63: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 26342840 0 0
	 2425208 0 0
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 2


g_S_new (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ 5 5 5 5 5 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 4 4 4 4 4 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T1 (5 : 5): [ 0 0 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 5 5 5 5 5 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 4 4 4 4 4 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]


g_m (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 4 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 5 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 5 5 5 5 5 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 4 4 4 4 4 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S1 (5 : 5): [ inf inf inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (5 : 5): [ inf inf inf inf inf ]
val = inf


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (5 : 5): [ 1 2 3 4 5 ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]


g_S1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_a (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]


g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
val = 0

g_ind1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (5 : 5): [ 1 2 3 4 5 ]
g_ind2 (0 : 5): [ ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 4
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 5
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 5 5 5 5 5 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 6 6 6 6 6 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 6 6 6 6 6 ]
div = 2.000


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (455 interne); stringhe deallocate: 0 (5 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 3 3 3 3 3 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3108: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]


min = 3
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
Sc (5 : 5): [ 3 3 3 3 3 ]


ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 2


g_S_new (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ 5 5 5 5 5 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 4 4 4 4 4 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T1 (5 : 5): [ 0 0 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 5 5 5 5 5 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 4 4 4 4 4 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]


g_m (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 4 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 5 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 5 5 5 5 5 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 4 4 4 4 4 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S1 (5 : 5): [ inf inf inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (5 : 5): [ inf inf inf inf inf ]
val = inf


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (5 : 5): [ 1 2 3 4 5 ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]


g_S1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_a (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]


g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
val = 0

g_ind1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (5 : 5): [ 1 2 3 4 5 ]
g_ind2 (0 : 5): [ ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 4
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 5
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 5 5 5 5 5 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 6 6 6 6 6 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 6 6 6 6 6 ]
div = 2.000


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (475 interne); stringhe deallocate: 0 (10 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 3 3 3 3 3 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3108: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]


min = 3
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 0 0 0 0 0
 ]
riga = 2
Sc (5 : 5): [ 3 3 3 3 3 ]


ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 3 3 3 3 3
 ]
------------------------------ Fine aggiungi_mv_riga_d

134: somma_m_d	<=>	ris <- sum(m)
ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 3 3 3 3 3
 ]


ris: 30
------------------------------ Fine somma_m_d

137: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

139: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

141: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_aus (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_colonne_i

143: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (5 : 5): [ 2 2 2 2 2 ]
val = 0


g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

153: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_rs (2 : 2): [ 5 5 ]
------------------------------ Fine somma_righe_i

155: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 5 5 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
g_I (0 : 0): [ ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3022: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3022: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i


Stringhe allocate: 2 (520 interne); stringhe deallocate: 0 (30 interne)


*** Esco da probmod_und ***

311: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine copia_m_i


***probmod_und***
56: InitMatr_i
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

58: InitMatr_d
ris (2 x 5 : 2 x 5): [
	 5.842414621812633e-308 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_d

60: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_M_out (2 : 2): [ 1 2 ]
------------------------------ Fine somma_colonne_i

63: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_S_new (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ 5 5 5 5 5 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 4 4 4 4 4 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T1 (5 : 5): [ 0 0 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 5 5 5 5 5 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 4 4 4 4 4 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]


g_m (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 4 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 5 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 5 5 5 5 5 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 4 4 4 4 4 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S1 (5 : 5): [ inf inf inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (5 : 5): [ inf inf inf inf inf ]
val = inf


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (5 : 5): [ 1 2 3 4 5 ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]


g_S1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]


g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 5 5 5 5 5 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 6 6 6 6 6 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 6 6 6 6 6 ]
div = 2.000


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (535 interne); stringhe deallocate: 0 (35 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 3 3 3 3 3 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3108: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]


min = 3
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
Sc (5 : 5): [ 3 3 3 3 3 ]


ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 2


g_S_new (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ 5 5 5 5 5 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 4 4 4 4 4 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T1 (5 : 5): [ 0 0 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 5 5 5 5 5 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 4 4 4 4 4 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]


g_m (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 4 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 5 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 5 5 5 5 5 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 4 4 4 4 4 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S1 (5 : 5): [ inf inf inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (5 : 5): [ inf inf inf inf inf ]
val = inf


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (5 : 5): [ 1 2 3 4 5 ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]


g_S1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_a (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]


g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
val = 0

g_ind1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (5 : 5): [ 1 2 3 4 5 ]
g_ind2 (0 : 5): [ ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 4
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 5
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 5 5 5 5 5 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 6 6 6 6 6 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 6 6 6 6 6 ]
div = 2.000


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (540 interne); stringhe deallocate: 0 (40 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 3 3 3 3 3 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3108: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]


min = 3
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 0 0 0 0 0
 ]
riga = 2
Sc (5 : 5): [ 3 3 3 3 3 ]


ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 3 3 3 3 3
 ]
------------------------------ Fine aggiungi_mv_riga_d

134: somma_m_d	<=>	ris <- sum(m)
ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 3 3 3 3 3
 ]


ris: 30
------------------------------ Fine somma_m_d

137: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

139: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

141: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_aus (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_colonne_i

143: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (5 : 5): [ 2 2 2 2 2 ]
val = 0


g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

153: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_rs (2 : 2): [ 5 5 ]
------------------------------ Fine somma_righe_i

155: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 5 5 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 10): [ ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3022: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3022: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i


Stringhe allocate: 2 (560 interne); stringhe deallocate: 0 (60 interne)


*** Esco da probmod_und ***

327: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_mod3 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine copia_m_i


***probmod_und***
56: InitMatr_i
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

58: InitMatr_d
ris (2 x 5 : 2 x 5): [
	 5.842414621812633e-308 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_d

60: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod3 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_M_out (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

63: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_S_new (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ 5 5 5 5 5 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 4 4 4 4 4 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T1 (5 : 5): [ 0 0 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 5 5 5 5 5 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 4 4 4 4 4 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]


g_m (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 4 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 5 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 5 5 5 5 5 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 4 4 4 4 4 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S1 (5 : 5): [ inf inf inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (5 : 5): [ inf inf inf inf inf ]
val = inf


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (5 : 5): [ 1 2 3 4 5 ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]


g_S1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]


g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 5 5 5 5 5 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 6 6 6 6 6 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 6 6 6 6 6 ]
div = 2.000


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (575 interne); stringhe deallocate: 0 (65 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 3 3 3 3 3 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3108: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]


min = 3
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
Sc (5 : 5): [ 3 3 3 3 3 ]


ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_S_new (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ 5 5 5 5 5 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 4 4 4 4 4 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T1 (5 : 5): [ 0 0 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 5 5 5 5 5 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 4 4 4 4 4 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]


g_m (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 4 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 5 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 5 5 5 5 5 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 4 4 4 4 4 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S1 (5 : 5): [ inf inf inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (5 : 5): [ inf inf inf inf inf ]
val = inf


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (5 : 5): [ 1 2 3 4 5 ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]


g_S1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]


g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
g_b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 5 5 5 5 5 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 6 6 6 6 6 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 6 6 6 6 6 ]
div = 2.000


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (580 interne); stringhe deallocate: 0 (70 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 3 3 3 3 3 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3108: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]


min = 3
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 0 0 0 0 0
 ]
riga = 2
Sc (5 : 5): [ 3 3 3 3 3 ]


ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 3 3 3 3 3
 ]
------------------------------ Fine aggiungi_mv_riga_d

134: somma_m_d	<=>	ris <- sum(m)
ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 3 3 3 3 3
 ]


ris: 30
------------------------------ Fine somma_m_d

137: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

139: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

141: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_aus (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_colonne_i

143: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (5 : 5): [ 2 2 2 2 2 ]
val = 0


g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

153: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_rs (2 : 2): [ 5 5 ]
------------------------------ Fine somma_righe_i

155: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 5 5 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 10): [ ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3022: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3022: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i


Stringhe allocate: 2 (600 interne); stringhe deallocate: 0 (90 interne)


*** Esco da probmod_und ***

340: vettore3s_d		<=>	ris <- c(el1, el2, el3)
el1 = 15, el2 = 15, el3 = 15


g_pm (3 : 3): [ 15 15 15 ]
------------------------------ Fine vettore3s_d

341: copia_v_d	<=>	ris[st:end] <- v[st:end]
g_pm (3 : 3): [ 15 15 15 ]
st = 1
end = 3


g_prob_mod (3 : 3): [ 15 15 15 ]
------------------------------ Fine copia_v_d

343: assegna1_v_indxNA_d	<=>	v1[which(is.na(v2))] <- val oppure v1[which(!is.na(v2))] <- val
g_prob_mod (3 : 3): [ 15 15 15 ]
g_prob_mod (3 : 3): [ 15 15 15 ]
val = 0
complemento = 0


g_prob_mod (3 : 3): [ 15 15 15 ]
------------------------------ Fine assegna1_v_indxNA_d

345: min_v_d	<=>	ris <- min(v)
g_prob_mod (3 : 3): [ 15 15 15 ]


min = 15
------------------------------ Fine min_v_d

350: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_pm (3 : 3): [ 15 15 15 ]
complemento = 0


g_tmp1_i (0 : 11): [ ]
------------------------------ Fine which_v_indxNA_d

351: assegna1_v_indx_d	<=>	v[indx] <- val
g_prob_mod (3 : 3): [ 15 15 15 ]
g_tmp1_i (0 : 11): [ ]
val = 0


g_prob_mod (3 : 3): [ 15 15 15 ]
------------------------------ Fine assegna1_v_indx_d

353: which_v_indxne_d	<=>	ris <- which(v != val)
g_prob_mod (3 : 3): [ 15 15 15 ]
val = 0


g_ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

357: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_prob_mod (3 : 3): [ 15 15 15 ]
canc_NA = 0



ris: 45
------------------------------ Fine somma_v_d

357: dividi1_vs_d	<=>	v <- v / div
g_prob_mod (3 : 3): [ 15 15 15 ]
div = 45.000


g_prob_mod (3 : 3): [ 0.3333333333333333 0.3333333333333333 0.3333333333333333 ]
------------------------------ Fine dividi1_vs_d

359: vettore3s_i		<=>	ris <- c(el1, el2, el3)
el1 = 1, el2 = 2, el3 = 3


g_tmp1_i (3 : 11): [ 1 2 3 ]
------------------------------ Fine vettore3s_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (3 : 11): [ 1 2 3 ]
k = 1, replace = 0
g_prob_mod (3 : 3): [ 0.3333333333333333 0.3333333333333333 0.3333333333333333 ]


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 2 (620 interne); stringhe deallocate: 0 (90 interne)

371: copia_m_i	<=>	ris <- da
g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_M (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine copia_m_i

372: copia_m_d	<=>	ris <- da
ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 3 3 3 3 3
 ]


g_Sc (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 3 3 3 3 3
 ]
------------------------------ Fine copia_m_d

373: copia_v_i	<=>	ris[st:end] <- v[st:end]
VECTOR_ELT(elem, 6) (1 : 1): [ 2 ]
st = 1
end = 1


g_hubs (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

394: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
canc_NA = 0



ris: 1
------------------------------ Fine somma_v_d

394: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
div = 1.000


g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
------------------------------ Fine dividi1_vs_d

672: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_h1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i


***assign_nodes_und***
44: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_or_h (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

46: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_aus_h (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

52: InitVett_i
g_index (2 : 2): [ 26356192 2425208 ]
val = 0


g_index (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_i

54: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_M (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_M_out (2 : 2): [ 1 2 ]
------------------------------ Fine somma_righe_i

56: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_M_out (2 : 2): [ 1 2 ]
decr = 1


g_Ord (2 : 2): [ 2 1 ]
------------------------------ Fine ordine_i

61: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 3 3 3 3 3
 ]
r = 2

g_p (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine riga_d

63: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (5 : 5): [ 3 3 3 3 3 ]
val = 0


g_tmp_i (0 : 5): [ ]
------------------------------ Fine which_v_indxle_d

70: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h1 (5 : 5): [ 1 2 3 4 5 ]


g_Sout_h (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i

75: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sout_h (5 : 5): [ 0 0 0 0 0 ]
val = 3


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

81: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (5 : 5): [ 3 3 3 3 3 ]
g_aus_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

82: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (5 : 5): [ 3 3 3 3 3 ]
canc_NA = 0



ris: 15
------------------------------ Fine somma_v_d

83: dividi_vs_d	ris <- v / div
g_tmp_d (5 : 5): [ 3 3 3 3 3 ]
div = 15.000


g_p (5 : 5): [ 0.2 0.2 0.2 0.2 0.2 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (5 : 5): [ 1 2 3 4 5 ]
k = 1, replace = 0
g_p (5 : 5): [ 0.2 0.2 0.2 0.2 0.2 ]


ris (1 : 1): [ 5 ]
*****************************************


Stringhe allocate: 2 (700 interne); stringhe deallocate: 0 (90 interne)

90: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (5 : 5): [ 1 2 3 4 5 ]
ris (1 : 1): [ 5 ]
2065: esiste_v_i	<=>	elem %IN% v
elem = 5
g_h1 (5 : 5): [ 1 2 3 4 5 ]


indx = 5
------------------------------ Fine esiste_v_i

2067: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (5 : 5): [ 1 2 3 4 5 ]
indx = 5


g_h1 (4 : 5): [ 1 2 3 4 ]
------------------------------ Fine elimina1_indx_i



g_h1 (4 : 5): [ 1 2 3 4 ]
------------------------------ Fine setdiff1_i

92: which_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (5 : 5): [ 1 2 3 4 5 ]
ris (1 : 1): [ 5 ]
2034: esiste_v_i	<=>	elem %IN% v
elem = 5
g_or_h (5 : 5): [ 1 2 3 4 5 ]


indx = 5
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 5 ]
------------------------------ Fine which_vv_eq_i

93: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (5 : 5): [ 1 2 3 4 5 ]
g_tmp_i (1 : 5): [ 5 ]
2065: esiste_v_i	<=>	elem %IN% v
elem = 5
g_aus_h (5 : 5): [ 1 2 3 4 5 ]


indx = 5
------------------------------ Fine esiste_v_i

2067: elimina1_indx_i	<=>	v <- v[-indx]
g_aus_h (5 : 5): [ 1 2 3 4 5 ]
indx = 5


g_aus_h (4 : 5): [ 1 2 3 4 ]
------------------------------ Fine elimina1_indx_i



g_aus_h (4 : 5): [ 1 2 3 4 ]
------------------------------ Fine setdiff1_i

61: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 3 3 3 3 3
 ]
r = 1

g_p (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine riga_d

63: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (5 : 5): [ 3 3 3 3 3 ]
val = 0


g_tmp_i (0 : 5): [ ]
------------------------------ Fine which_v_indxle_d

70: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h1 (4 : 5): [ 1 2 3 4 ]


g_Sout_h (4 : 5): [ 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i

75: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sout_h (4 : 5): [ 0 0 0 0 ]
val = 4


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

81: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (5 : 5): [ 3 3 3 3 3 ]
g_aus_h (4 : 5): [ 1 2 3 4 ]


g_tmp_d (4 : 5): [ 3 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

82: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (4 : 5): [ 3 3 3 3 ]
canc_NA = 0



ris: 12
------------------------------ Fine somma_v_d

83: dividi_vs_d	ris <- v / div
g_tmp_d (4 : 5): [ 3 3 3 3 ]
div = 12.000


g_p (4 : 5): [ 0.25 0.25 0.25 0.25 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (4 : 5): [ 1 2 3 4 ]
k = 1, replace = 0
g_p (4 : 5): [ 0.25 0.25 0.25 0.25 ]


ris (1 : 1): [ 4 ]
*****************************************


Stringhe allocate: 2 (700 interne); stringhe deallocate: 0 (90 interne)

90: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (4 : 5): [ 1 2 3 4 ]
ris (1 : 1): [ 4 ]
2065: esiste_v_i	<=>	elem %IN% v
elem = 4
g_h1 (4 : 5): [ 1 2 3 4 ]


indx = 4
------------------------------ Fine esiste_v_i

2067: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (4 : 5): [ 1 2 3 4 ]
indx = 4


g_h1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine elimina1_indx_i



g_h1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine setdiff1_i

92: which_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (5 : 5): [ 1 2 3 4 5 ]
ris (1 : 1): [ 4 ]
2034: esiste_v_i	<=>	elem %IN% v
elem = 4
g_or_h (5 : 5): [ 1 2 3 4 5 ]


indx = 4
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 4 ]
------------------------------ Fine which_vv_eq_i

93: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (4 : 5): [ 1 2 3 4 ]
g_tmp_i (1 : 5): [ 4 ]
2065: esiste_v_i	<=>	elem %IN% v
elem = 4
g_aus_h (4 : 5): [ 1 2 3 4 ]


indx = 4
------------------------------ Fine esiste_v_i

2067: elimina1_indx_i	<=>	v <- v[-indx]
g_aus_h (4 : 5): [ 1 2 3 4 ]
indx = 4


g_aus_h (3 : 5): [ 1 2 3 ]
------------------------------ Fine elimina1_indx_i



g_aus_h (3 : 5): [ 1 2 3 ]
------------------------------ Fine setdiff1_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
riga = 1
val = 1


g_ind (1 : 5): [ 2 ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 4 5 ]
g_ind (1 : 5): [ 2 ]


g_co (1 : 1): [ 5 ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
g_ri (1 : 1): [ 4 ]
g_co (1 : 1): [ 5 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 0 0
 ]
g_co (1 : 1): [ 5 ]
g_ri (1 : 1): [ 4 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 1
g_hubs (1 : 1): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
riga = 2
val = 1


g_ind (2 : 5): [ 1 2 ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 4 5 ]
g_ind (2 : 5): [ 1 2 ]


g_co (2 : 4): [ 4 5 ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
g_ri (1 : 1): [ 5 ]
g_co (2 : 4): [ 4 5 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
------------------------------ Fine assegna1_m_vv_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
g_co (2 : 4): [ 4 5 ]
g_ri (1 : 1): [ 5 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 2
g_hubs (1 : 1): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

111: accoda1_vv_i	<=>	v1 <- c(v1, v2)
ris (0 : 1): [ ]
g_ri (1 : 1): [ 5 ]


ris (1 : 1): [ 5 ]
------------------------------ Fine accoda_vv_i


Stringhe allocate: 2 (710 interne); stringhe deallocate: 0 (90 interne)

680: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_h (5 : 5): [ 1 2 3 4 5 ]
g_h1 (3 : 5): [ 1 2 3 ]
3108: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_tmp1_i (5 : 11): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 1
g_tmp1_i (5 : 11): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_tmp1_i (5 : 11): [ 1 2 3 4 5 ]
indx = 1


g_tmp1_i (4 : 11): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 2
g_tmp1_i (4 : 11): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_tmp1_i (4 : 11): [ 2 3 4 5 ]
indx = 1


g_tmp1_i (3 : 11): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 3
g_tmp1_i (3 : 11): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_tmp1_i (3 : 11): [ 3 4 5 ]
indx = 1


g_tmp1_i (2 : 11): [ 4 5 ]
------------------------------ Fine elimina1_indx_i



g_tmp1_i (2 : 11): [ 4 5 ]
------------------------------ Fine setdiff_i

681: incr1_v_indx_i	<=>	v[indx] <- v[indx] + s
g_LG (5 : 5): [ -1 -1 -1 -1 -1 ]
g_tmp1_i (2 : 11): [ 4 5 ]
val = 1


g_LG (5 : 5): [ -1 -1 -1 0 0 ]
------------------------------ Fine incr1_v_indx_i

685: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_h (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

687: accoda1_vv_i	<=>	v1 <- c(v1, v2)
g_h_new (0 : 0): [ ]
ris (1 : 1): [ 5 ]
ATTENZIONE (accoda_vv_i, linea HMM_und.c # 687): ingrandito il vettore da 0 a 1!


g_h_new (1 : 2): [ 5 ]
------------------------------ Fine accoda_vv_i

689: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]


g_Sout (5 : 5): [ 0 0 0 1 2 ]
------------------------------ Fine somma_colonne_i

691: max_v_i		<=>	ris <- max(v)
g_Sout (5 : 5): [ 0 0 0 1 2 ]


max = 2
------------------------------ Fine max_v_i

693: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 3
incr = 1


g_tmp2_i (4 : 4): [ 0 1 2 3 ]
------------------------------ Fine seq_i


*** hist1 ***
g_Sout (5 : 5): [ 0 0 0 1 2 ]
g_tmp2_i (4 : 4): [ 0 1 2 3 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
g_tmp1_i (3 : 11): [ 4 5 5 ]
val = 0


g_tmp1_i (3 : 11): [ 0 0 0 ]
------------------------------ Fine InitVett_i



g_tmp1_i (3 : 11): [ 3 1 1 ]

Stringhe allocate: 2 (721 interne); stringhe deallocate: 0 (96 interne)

695: promuovi_i	(implicita)
g_tmp1_i (3 : 11): [ 3 1 1 ]
ATTENZIONE (promuovi_i, linea HMM_und.c # 695): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

g_tmp1_d (3 : 19): [ 3 1 1 ]
------------------------------ Fine promuovi_i

696: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
start = 1
end = 3
g_tmp1_d (3 : 19): [ 3 1 1 ]


g_Freq_out (7 : 7): [ 3 1 1 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

208: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]


g_Sout (5 : 5): [ 0 0 0 1 2 ]
------------------------------ Fine somma_colonne_i


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 2
	 0 0 0 2 2
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 2
	 0 0 0 2 2
 ]
val = 0


g_ind (3 : 25): [ 20 24 25 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 2
	 0 0 0 2 2
 ]
g_ind (3 : 25): [ 20 24 25 ]
val = 1


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
val = 0


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (5 : 5): [ 0 0 0 0 0 ]
val = 0


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
riga = 1


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
r = 1
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
riga = 2


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
r = 2
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
riga = 3


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
r = 3
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
riga = 4


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
r = 4
val = 0


g_neighbours (1 : 25): [ 5 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
riga = 5


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
r = 5
val = 0


g_neighbours (1 : 25): [ 4 ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (5 : 5): [ 0 0 0 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 2 (722 interne); stringhe deallocate: 0 (97 interne)


*** Esco da cluster_coeff2 ***
220: somma_vs_T	<=> ris <- v + s
g_CCs (1 : 1): [ 0 ]
s = 0


g_tmp1_d (1 : 19): [ 0 ]
------------------------------ Fine somma_vs_di

221: segno_v_d	<=>	ris <- sign(v)
g_tmp1_d (1 : 19): [ 0 ]


g_segno (1 : 1): [ 0 ]
------------------------------ Fine segno_v_d

223: which_v_indxgt_i	<=>	ris <- which(v > val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indp (0 : 1): [ ]
------------------------------ Fine which_v_indxgt_i

225: which_v_indxle_i	<=>	ris <- which(v<=val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indm (1 : 1): [ 1 ]
------------------------------ Fine which_v_indxle_i

229: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indp (0 : 1): [ ]
val2 = 0.3


g_p (1 : 1): [ 1 ]
------------------------------ Fine f_aux9_d

231: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indm (1 : 1): [ 1 ]
val2 = 0.3


g_p (1 : 1): [ 1.7 ]
------------------------------ Fine f_aux9_d

243: min_v_d	<=>	ris <- min(v)
g_p (1 : 1): [ 1.7 ]


min = 1.7
------------------------------ Fine min_v_d

246: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_p (1 : 1): [ 1.7 ]
canc_NA = 0



ris: 1.7
------------------------------ Fine somma_v_d

246: dividi1_vs_d	<=>	v <- v / div
g_p (1 : 1): [ 1.7 ]
div = 1.700


g_p (1 : 1): [ 1 ]
------------------------------ Fine dividi1_vs_d

249: assegna1_v_indx_d	<=>	v[indx] <- val
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
g_CCind[i - 1] (7 : 7): [ 1 2 3 4 5 6 7 ]
val = 1


g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine assegna1_v_indx_d

267: moltiplica_vv_d	<=>	ris <- v1 * v2
g_prior_p_subnet (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]


g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
------------------------------ Fine moltiplica_vv_d

269: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]


max = 0.3333333333333333
------------------------------ Fine max_v_d

273: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
canc_NA = 1



ris: 1
------------------------------ Fine somma_v_d

273: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
div = 1.000


g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
------------------------------ Fine dividi1_vs_d

281: max_v_i		<=>	ris <- max(v)
g_dim (7 : 7): [ 2 2 2 2 2 2 2 ]


max = 2
------------------------------ Fine max_v_i

287: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]


max = 0.3333333333333333
------------------------------ Fine max_v_d

295: which_v_indxgt_d	<=>	ris <- which(v > val)
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
val = 0


g_tmp1_i (3 : 11): [ 4 5 7 ]
------------------------------ Fine which_v_indxgt_d

298: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 7
incr = 1


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine seq_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
k = 3, replace = 0
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]


ris (3 : 3): [ 7 5 4 ]
*****************************************


Stringhe allocate: 2 (722 interne); stringhe deallocate: 0 (97 interne)

301: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_mod1 (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine copia_m_i


***probmod_und***
56: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

58: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 3 3 3
	 3 3 3
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

60: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod1 (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_M_out (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

63: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 1 2 ]
g_h (3 : 5): [ 1 2 3 ]


g_tmp_i1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 2


g_S_new (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 1 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 1 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_old2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 1 1 1 ]
s = 1


g_new2 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 3 3 3 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 2 2 2 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T1 (3 : 5): [ 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 3 3 3 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2 2 2 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]


g_m (3 : 5): [ 3 3 3 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 3 3 3 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 2 2 2 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2 2 2 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1 1 1 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 1 1 1 ]
val = 0


g_ind2 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (3 : 5): [ 1 2 3 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S1 (3 : 5): [ inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf inf inf ]
val = inf


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (3 : 5): [ 1 2 3 ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]


g_S1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_a (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_a (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 2 2 2 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_b (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]


g_b (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_b (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.2132755425131789 1.213275542513179
	 0.2132755425131789 1.213275542513179
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.2132755425131789 1.213275542513179
	 0.2132755425131789 1.213275542513179
 ]


g_m (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_b (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]
g_m (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (3 : 5): [ -1.542186124973118 -1.542186124973118 -1.542186124973118 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
val = 0


g_ind2 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (3 : 5): [ 1 2 3 ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (3 : 5): [ 1 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (1 : 3): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (3 : 5): [ 1 2 3 ]


indx = 3
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (2 : 3): [ 1 2 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (3 : 3): [ 1 2 3 ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -1.542186124973118 -1.542186124973118 -1.542186124973118 ]
g_indinf (3 : 3): [ 1 2 3 ]
val = -inf


g_S2 (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -inf -inf -inf ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S2 (3 : 5): [ -inf -inf -inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_b (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ -inf -inf -inf ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_b (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]
g_m (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]


g_S2 (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 3 3 3 ]
g_S2 (3 : 5): [ -inf -inf -inf ]


Sc (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ -inf -inf -inf ]
div = 2.000


Sc (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (725 interne); stringhe deallocate: 0 (100 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ -inf -inf -inf ]
val = -inf


g_indok (0 : 5): [ ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_indok (0 : 5): [ ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 5): [ 1 2 3 ]
g_indok (0 : 5): [ ]
3108: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i



g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ -inf -inf -inf ]
g_indok (0 : 5): [ ]


g_tmp_d1 (0 : 5): [ ]
------------------------------ Fine copia_v_indx_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ -inf -inf -inf ]
g_indInf (3 : 5): [ 1 2 3 ]
val = -1


Sc (3 : 5): [ -1 -1 -1 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 2
Sc (3 : 5): [ -1 -1 -1 ]


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 -1 -1 -1
 ]
------------------------------ Fine aggiungi_mv_riga_d


Stringhe allocate: 2 (725 interne); stringhe deallocate: 0 (100 interne)


*** Esco da probmod_und ***

311: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine copia_m_i


***probmod_und***
56: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

58: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 3 3 3
	 3 3 3
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

60: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_M_out (2 : 2): [ 1 2 ]
------------------------------ Fine somma_colonne_i

63: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 1 2 ]
g_h (3 : 5): [ 1 2 3 ]


g_tmp_i1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_S_new (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 1 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 1 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_old2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 1 1 1 ]
s = 1


g_new2 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 3 3 3 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 2 2 2 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T1 (3 : 5): [ 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 3 3 3 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2 2 2 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]


g_m (3 : 5): [ 3 3 3 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 3 3 3 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 2 2 2 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2 2 2 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1 1 1 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 1 1 1 ]
val = 0


g_ind2 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (3 : 5): [ 1 2 3 ]


g_indinf (0 : 3): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_indinf (0 : 3): [ ]
val = -inf


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S1 (3 : 5): [ inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf inf inf ]
val = inf


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (3 : 5): [ 1 2 3 ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]


g_S1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_a (3 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 2 2 2 ]
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_b (3 : 5): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 ]


g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]


g_m (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_m (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
val = 0


g_ind2 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (3 : 5): [ 1 2 3 ]


g_indinf (0 : 3): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
g_indinf (0 : 3): [ ]
val = -inf


g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_m (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]


g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 3 3 3 ]
g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]


Sc (3 : 5): [ 3.723362304612633 3.723362304612633 3.723362304612633 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 3.723362304612633 3.723362304612633 3.723362304612633 ]
div = 2.000


Sc (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (728 interne); stringhe deallocate: 0 (103 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
val = -inf


g_indok (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_indok (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 5): [ 1 2 3 ]
g_indok (3 : 5): [ 1 2 3 ]
3108: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
g_indok (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]


min = 1.861681152306316
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
Sc (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]


ris (2 x 3 : 2 x 5): [
	 1.861681152306316 1.861681152306316 1.861681152306316
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 1 2 ]
g_h (3 : 5): [ 1 2 3 ]


g_tmp_i1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 2


g_S_new (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 1 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 1 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_old2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 1 1 1 ]
s = 1


g_new2 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 3 3 3 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 2 2 2 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T1 (3 : 5): [ 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 3 3 3 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2 2 2 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]


g_m (3 : 5): [ 3 3 3 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 3 3 3 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 2 2 2 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2 2 2 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1 1 1 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 1 1 1 ]
val = 0


g_ind2 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (3 : 5): [ 1 2 3 ]


g_indinf (0 : 3): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_indinf (0 : 3): [ ]
val = -inf


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S1 (3 : 5): [ inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf inf inf ]
val = inf


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (3 : 5): [ 1 2 3 ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]


g_S1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_a (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


g_a (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 2 2 2 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_b (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]


g_b (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_b (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.2132755425131789 1.213275542513179
	 0.2132755425131789 1.213275542513179
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.2132755425131789 1.213275542513179
	 0.2132755425131789 1.213275542513179
 ]


g_m (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_b (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]
g_m (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


g_S2 (3 : 5): [ -1.542186124973118 -1.542186124973118 -1.542186124973118 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
val = 0


g_ind2 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (3 : 5): [ 1 2 3 ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (3 : 5): [ 1 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (1 : 3): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (3 : 5): [ 1 2 3 ]


indx = 3
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (2 : 3): [ 1 2 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (3 : 3): [ 1 2 3 ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -1.542186124973118 -1.542186124973118 -1.542186124973118 ]
g_indinf (3 : 3): [ 1 2 3 ]
val = -inf


g_S2 (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -inf -inf -inf ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S2 (3 : 5): [ -inf -inf -inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_b (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ -inf -inf -inf ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
g_b (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]
g_m (3 : 5): [ 1.213275542513179 1.213275542513179 1.213275542513179 ]


g_S2 (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 3 3 3 ]
g_S2 (3 : 5): [ -inf -inf -inf ]


Sc (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ -inf -inf -inf ]
div = 2.000


Sc (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (731 interne); stringhe deallocate: 0 (106 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ -inf -inf -inf ]
val = -inf


g_indok (0 : 5): [ ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_indok (0 : 5): [ ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 5): [ 1 2 3 ]
g_indok (0 : 5): [ ]
3108: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i



g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ -inf -inf -inf ]
g_indok (0 : 5): [ ]


g_tmp_d1 (0 : 5): [ ]
------------------------------ Fine copia_v_indx_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ -inf -inf -inf ]
g_indInf (3 : 5): [ 1 2 3 ]
val = -1


Sc (3 : 5): [ -1 -1 -1 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 1.861681152306316 1.861681152306316 1.861681152306316
	 0 0 0
 ]
riga = 2
Sc (3 : 5): [ -1 -1 -1 ]


ris (2 x 3 : 2 x 5): [
	 1.861681152306316 1.861681152306316 1.861681152306316
	 -1 -1 -1
 ]
------------------------------ Fine aggiungi_mv_riga_d


Stringhe allocate: 2 (731 interne); stringhe deallocate: 0 (106 interne)


*** Esco da probmod_und ***

327: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_mod3 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine copia_m_i


***probmod_und***
56: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

58: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 3 3 3
	 3 3 3
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

60: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod3 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_M_out (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

63: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 1 2 ]
g_h (3 : 5): [ 1 2 3 ]


g_tmp_i1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_S_new (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 1 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 1 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_old2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 1 1 1 ]
s = 1


g_new2 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 3 3 3 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 2 2 2 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T1 (3 : 5): [ 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 3 3 3 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2 2 2 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]


g_m (3 : 5): [ 3 3 3 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 3 3 3 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 2 2 2 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2 2 2 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1 1 1 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 1 1 1 ]
val = 0


g_ind2 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (3 : 5): [ 1 2 3 ]


g_indinf (0 : 3): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_indinf (0 : 3): [ ]
val = -inf


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S1 (3 : 5): [ inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf inf inf ]
val = inf


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (3 : 5): [ 1 2 3 ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]


g_S1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_a (3 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 2 2 2 ]
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_b (3 : 5): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 ]


g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]


g_m (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_m (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
val = 0


g_ind2 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (3 : 5): [ 1 2 3 ]


g_indinf (0 : 3): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
g_indinf (0 : 3): [ ]
val = -inf


g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_m (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]


g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 3 3 3 ]
g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]


Sc (3 : 5): [ 3.723362304612633 3.723362304612633 3.723362304612633 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 3.723362304612633 3.723362304612633 3.723362304612633 ]
div = 2.000


Sc (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (734 interne); stringhe deallocate: 0 (109 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
val = -inf


g_indok (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_indok (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 5): [ 1 2 3 ]
g_indok (3 : 5): [ 1 2 3 ]
3108: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
g_indok (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]


min = 1.861681152306316
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
Sc (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]


ris (2 x 3 : 2 x 5): [
	 1.861681152306316 1.861681152306316 1.861681152306316
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 1 2 ]
g_h (3 : 5): [ 1 2 3 ]


g_tmp_i1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_S_new (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 1 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 1 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_old2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 1 1 1 ]
s = 1


g_new2 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 3 3 3 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 2 2 2 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T1 (3 : 5): [ 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 3 3 3 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2 2 2 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]


g_m (3 : 5): [ 3 3 3 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 3 3 3 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 2 2 2 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2 2 2 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1 1 1 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 1 1 1 ]
val = 0


g_ind2 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (3 : 5): [ 1 2 3 ]


g_indinf (0 : 3): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_indinf (0 : 3): [ ]
val = -inf


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S1 (3 : 5): [ inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf inf inf ]
val = inf


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (3 : 5): [ 1 2 3 ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]


g_S1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_a (3 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 2 2 2 ]
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_b (3 : 5): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 ]


g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]


g_m (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_m (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_T2 (3 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
val = 0


g_ind2 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (3 : 5): [ 1 2 3 ]


g_indinf (0 : 3): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
g_indinf (0 : 3): [ ]
val = -inf


g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]
g_b (3 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 ]
g_m (3 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 ]


g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 3 3 3 ]
g_S2 (3 : 5): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]


Sc (3 : 5): [ 3.723362304612633 3.723362304612633 3.723362304612633 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 3.723362304612633 3.723362304612633 3.723362304612633 ]
div = 2.000


Sc (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (737 interne); stringhe deallocate: 0 (112 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
val = -inf


g_indok (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_indok (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 5): [ 1 2 3 ]
g_indok (3 : 5): [ 1 2 3 ]
3108: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
g_indok (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]


min = 1.861681152306316
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 1.861681152306316 1.861681152306316 1.861681152306316
	 0 0 0
 ]
riga = 2
Sc (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]


ris (2 x 3 : 2 x 5): [
	 1.861681152306316 1.861681152306316 1.861681152306316
	 1.861681152306316 1.861681152306316 1.861681152306316
 ]
------------------------------ Fine aggiungi_mv_riga_d

134: somma_m_d	<=>	ris <- sum(m)
ris (2 x 3 : 2 x 5): [
	 1.861681152306316 1.861681152306316 1.861681152306316
	 1.861681152306316 1.861681152306316 1.861681152306316
 ]


ris: 11.1700869138379
------------------------------ Fine somma_m_d

137: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

139: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

141: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_aus (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_colonne_i

143: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (3 : 5): [ 2 2 2 ]
val = 0


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

153: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 3 3 ]
------------------------------ Fine somma_righe_i

155: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 10): [ ]
g_I_add (3 : 10): [ 1 2 3 ]
3022: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3022: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i


Stringhe allocate: 2 (757 interne); stringhe deallocate: 0 (132 interne)


*** Esco da probmod_und ***

340: vettore3s_d		<=>	ris <- c(el1, el2, el3)
el1 = nan, el2 = nan, el3 = 5.585043456918949


g_pm (3 : 3): [ nan nan 5.585043456918949 ]
------------------------------ Fine vettore3s_d

341: copia_v_d	<=>	ris[st:end] <- v[st:end]
g_pm (3 : 3): [ nan nan 5.585043456918949 ]
st = 1
end = 3


g_prob_mod (3 : 3): [ nan nan 5.585043456918949 ]
------------------------------ Fine copia_v_d

343: assegna1_v_indxNA_d	<=>	v1[which(is.na(v2))] <- val oppure v1[which(!is.na(v2))] <- val
g_prob_mod (3 : 3): [ nan nan 5.585043456918949 ]
g_prob_mod (3 : 3): [ nan nan 5.585043456918949 ]
val = 0
complemento = 0


g_prob_mod (3 : 3): [ 0 0 5.585043456918949 ]
------------------------------ Fine assegna1_v_indxNA_d

345: min_v_d	<=>	ris <- min(v)
g_prob_mod (3 : 3): [ 0 0 5.585043456918949 ]


min = 0
------------------------------ Fine min_v_d

348: somma1_vs_d	<=>	v <- v + s
g_prob_mod (3 : 3): [ 0 0 5.585043456918949 ]
s = 0.1111111111111111


g_prob_mod (3 : 3): [ 0.1111111111111111 0.1111111111111111 5.696154568030059 ]
------------------------------ Fine somma1_vs_d

350: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_pm (3 : 3): [ nan nan 5.585043456918949 ]
complemento = 0


g_tmp1_i (2 : 11): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

351: assegna1_v_indx_d	<=>	v[indx] <- val
g_prob_mod (3 : 3): [ 0.1111111111111111 0.1111111111111111 5.696154568030059 ]
g_tmp1_i (2 : 11): [ 1 2 ]
val = 0


g_prob_mod (3 : 3): [ 0 0 5.696154568030059 ]
------------------------------ Fine assegna1_v_indx_d

353: which_v_indxne_d	<=>	ris <- which(v != val)
g_prob_mod (3 : 3): [ 0 0 5.696154568030059 ]
val = 0


g_ind (1 : 3): [ 3 ]
------------------------------ Fine which_v_indxne_d

357: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_prob_mod (3 : 3): [ 0 0 5.696154568030059 ]
canc_NA = 0



ris: 5.696154568030059
------------------------------ Fine somma_v_d

357: dividi1_vs_d	<=>	v <- v / div
g_prob_mod (3 : 3): [ 0 0 5.696154568030059 ]
div = 5.696


g_prob_mod (3 : 3): [ 0 0 1 ]
------------------------------ Fine dividi1_vs_d

359: vettore3s_i		<=>	ris <- c(el1, el2, el3)
el1 = 1, el2 = 2, el3 = 3


g_tmp1_i (3 : 11): [ 1 2 3 ]
------------------------------ Fine vettore3s_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (3 : 11): [ 1 2 3 ]
k = 1, replace = 0
g_prob_mod (3 : 3): [ 0 0 1 ]


ris (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 2 (757 interne); stringhe deallocate: 0 (132 interne)

378: copia_m_i	<=>	ris <- da
g_mod3 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_M (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine copia_m_i

379: copia_m_d	<=>	ris <- da
ris (2 x 3 : 2 x 5): [
	 1.861681152306316 1.861681152306316 1.861681152306316
	 1.861681152306316 1.861681152306316 1.861681152306316
 ]


g_Sc (2 x 3 : 2 x 5): [
	 1.861681152306316 1.861681152306316 1.861681152306316
	 1.861681152306316 1.861681152306316 1.861681152306316
 ]
------------------------------ Fine copia_m_d

380: copia_v_i	<=>	ris[st:end] <- v[st:end]
VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]
st = 1
end = 2


g_hubs (2 : 4): [ 1 2 ]
------------------------------ Fine copia_v_i

394: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0 0 0 ]
canc_NA = 0



ris: 0.3333333333333333
------------------------------ Fine somma_v_d

394: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0 0 0 ]
div = 0.333


g_ppp (7 : 7): [ 0 0 0 1 0 0 0 ]
------------------------------ Fine dividi1_vs_d


***sampleB***

***sample***
g_hubs (2 : 4): [ 1 2 ]
k = 1, replace = 0


g_hubs (1 : 4): [ 1 ]
*****************************************


Stringhe allocate: 2 (757 interne); stringhe deallocate: 0 (132 interne)


Stringhe allocate: 2 (757 interne); stringhe deallocate: 0 (132 interne)

672: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_h1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i


***assign_nodes_und***
44: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_or_h (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

46: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_aus_h (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

52: InitVett_i
g_index (2 : 2): [ 4 5 ]
val = 0


g_index (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_i

54: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_M (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_M_out (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

56: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_M_out (2 : 2): [ 1 1 ]
decr = 1


g_Ord (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

61: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 3 : 2 x 5): [
	 1.861681152306316 1.861681152306316 1.861681152306316
	 1.861681152306316 1.861681152306316 1.861681152306316
 ]
r = 1

g_p (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
------------------------------ Fine riga_d

63: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
val = 0


g_tmp_i (0 : 5): [ ]
------------------------------ Fine which_v_indxle_d

70: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 1 2 ]
g_h1 (3 : 5): [ 1 2 3 ]


g_Sout_h (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i

75: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sout_h (3 : 5): [ 0 0 0 ]
val = 4


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

81: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
g_aus_h (3 : 5): [ 1 2 3 ]


g_tmp_d (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
------------------------------ Fine assegna_v_indxNA_d

82: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
canc_NA = 0



ris: 5.58504345691895
------------------------------ Fine somma_v_d

83: dividi_vs_d	ris <- v / div
g_tmp_d (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
div = 5.585


g_p (3 : 5): [ 0.3333333333333333 0.3333333333333333 0.3333333333333333 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (3 : 5): [ 1 2 3 ]
k = 1, replace = 0
g_p (3 : 5): [ 0.3333333333333333 0.3333333333333333 0.3333333333333333 ]


ris (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 2 (757 interne); stringhe deallocate: 0 (132 interne)

90: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (3 : 5): [ 1 2 3 ]
ris (1 : 1): [ 3 ]
2065: esiste_v_i	<=>	elem %IN% v
elem = 3
g_h1 (3 : 5): [ 1 2 3 ]


indx = 3
------------------------------ Fine esiste_v_i

2067: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (3 : 5): [ 1 2 3 ]
indx = 3


g_h1 (2 : 5): [ 1 2 ]
------------------------------ Fine elimina1_indx_i



g_h1 (2 : 5): [ 1 2 ]
------------------------------ Fine setdiff1_i

92: which_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (3 : 5): [ 1 2 3 ]
ris (1 : 1): [ 3 ]
2034: esiste_v_i	<=>	elem %IN% v
elem = 3
g_or_h (3 : 5): [ 1 2 3 ]


indx = 3
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 3 ]
------------------------------ Fine which_vv_eq_i

93: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (3 : 5): [ 1 2 3 ]
g_tmp_i (1 : 5): [ 3 ]
2065: esiste_v_i	<=>	elem %IN% v
elem = 3
g_aus_h (3 : 5): [ 1 2 3 ]


indx = 3
------------------------------ Fine esiste_v_i

2067: elimina1_indx_i	<=>	v <- v[-indx]
g_aus_h (3 : 5): [ 1 2 3 ]
indx = 3


g_aus_h (2 : 5): [ 1 2 ]
------------------------------ Fine elimina1_indx_i



g_aus_h (2 : 5): [ 1 2 ]
------------------------------ Fine setdiff1_i

61: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 3 : 2 x 5): [
	 1.861681152306316 1.861681152306316 1.861681152306316
	 1.861681152306316 1.861681152306316 1.861681152306316
 ]
r = 2

g_p (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
------------------------------ Fine riga_d

63: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
val = 0


g_tmp_i (0 : 5): [ ]
------------------------------ Fine which_v_indxle_d

70: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 1 2 ]
g_h1 (2 : 5): [ 1 2 ]


g_Sout_h (2 : 5): [ 0 0 ]
------------------------------ Fine assegna_v_indxNA_i

75: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sout_h (2 : 5): [ 0 0 ]
val = 4


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

81: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (3 : 5): [ 1.861681152306316 1.861681152306316 1.861681152306316 ]
g_aus_h (2 : 5): [ 1 2 ]


g_tmp_d (2 : 5): [ 1.861681152306316 1.861681152306316 ]
------------------------------ Fine assegna_v_indxNA_d

82: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (2 : 5): [ 1.861681152306316 1.861681152306316 ]
canc_NA = 0



ris: 3.723362304612633
------------------------------ Fine somma_v_d

83: dividi_vs_d	ris <- v / div
g_tmp_d (2 : 5): [ 1.861681152306316 1.861681152306316 ]
div = 3.723


g_p (2 : 5): [ 0.5 0.5 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (2 : 5): [ 1 2 ]
k = 1, replace = 0
g_p (2 : 5): [ 0.5 0.5 ]


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 2 (757 interne); stringhe deallocate: 0 (132 interne)

90: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (2 : 5): [ 1 2 ]
ris (1 : 1): [ 2 ]
2065: esiste_v_i	<=>	elem %IN% v
elem = 2
g_h1 (2 : 5): [ 1 2 ]


indx = 2
------------------------------ Fine esiste_v_i

2067: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (2 : 5): [ 1 2 ]
indx = 2


g_h1 (1 : 5): [ 1 ]
------------------------------ Fine elimina1_indx_i



g_h1 (1 : 5): [ 1 ]
------------------------------ Fine setdiff1_i

92: which_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (3 : 5): [ 1 2 3 ]
ris (1 : 1): [ 2 ]
2034: esiste_v_i	<=>	elem %IN% v
elem = 2
g_or_h (3 : 5): [ 1 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 2 ]
------------------------------ Fine which_vv_eq_i

93: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (2 : 5): [ 1 2 ]
g_tmp_i (1 : 5): [ 2 ]
2065: esiste_v_i	<=>	elem %IN% v
elem = 2
g_aus_h (2 : 5): [ 1 2 ]


indx = 2
------------------------------ Fine esiste_v_i

2067: elimina1_indx_i	<=>	v <- v[-indx]
g_aus_h (2 : 5): [ 1 2 ]
indx = 2


g_aus_h (1 : 5): [ 1 ]
------------------------------ Fine elimina1_indx_i



g_aus_h (1 : 5): [ 1 ]
------------------------------ Fine setdiff1_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 1
val = 1


g_ind (1 : 5): [ 2 ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 3 2 ]
g_ind (1 : 5): [ 2 ]


g_co (1 : 4): [ 2 ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
g_ri (1 : 1): [ 3 ]
g_co (1 : 4): [ 2 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
------------------------------ Fine assegna1_m_vv_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
g_co (1 : 4): [ 2 ]
g_ri (1 : 1): [ 3 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 1
g_hubs (1 : 4): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

111: accoda1_vv_i	<=>	v1 <- c(v1, v2)
ris (0 : 1): [ ]
g_ri (1 : 1): [ 3 ]


ris (1 : 1): [ 3 ]
------------------------------ Fine accoda_vv_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 2
val = 1


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 3 2 ]
g_ind (1 : 5): [ 1 ]


g_co (1 : 4): [ 3 ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
g_ri (1 : 1): [ 2 ]
g_co (1 : 4): [ 3 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
------------------------------ Fine assegna1_m_vv_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
g_co (1 : 4): [ 3 ]
g_ri (1 : 1): [ 2 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 2
g_hubs (1 : 4): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 2 (757 interne); stringhe deallocate: 0 (132 interne)

680: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_h (3 : 5): [ 1 2 3 ]
g_h1 (1 : 5): [ 1 ]
3108: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_tmp1_i (3 : 11): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 1
g_tmp1_i (3 : 11): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_tmp1_i (3 : 11): [ 1 2 3 ]
indx = 1


g_tmp1_i (2 : 11): [ 2 3 ]
------------------------------ Fine elimina1_indx_i



g_tmp1_i (2 : 11): [ 2 3 ]
------------------------------ Fine setdiff_i

681: incr1_v_indx_i	<=>	v[indx] <- v[indx] + s
g_LG (5 : 5): [ -1 -1 -1 0 0 ]
g_tmp1_i (2 : 11): [ 2 3 ]
val = 1


g_LG (5 : 5): [ -1 0 0 0 0 ]
------------------------------ Fine incr1_v_indx_i

685: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (1 : 5): [ 1 ]
st = 1
end = 1


g_h (1 : 5): [ 1 ]
------------------------------ Fine copia_v_i

687: accoda1_vv_i	<=>	v1 <- c(v1, v2)
g_h_new (1 : 2): [ 5 ]
ris (1 : 1): [ 3 ]


g_h_new (2 : 2): [ 5 3 ]
------------------------------ Fine accoda_vv_i

689: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]


g_Sout (5 : 5): [ 0 1 1 1 2 ]
------------------------------ Fine somma_colonne_i

691: max_v_i		<=>	ris <- max(v)
g_Sout (5 : 5): [ 0 1 1 1 2 ]


max = 2
------------------------------ Fine max_v_i

693: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 3
incr = 1


g_tmp2_i (4 : 4): [ 0 1 2 3 ]
------------------------------ Fine seq_i


*** hist1 ***
g_Sout (5 : 5): [ 0 1 1 1 2 ]
g_tmp2_i (4 : 4): [ 0 1 2 3 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
g_tmp1_i (3 : 11): [ 2 3 3 ]
val = 0


g_tmp1_i (3 : 11): [ 0 0 0 ]
------------------------------ Fine InitVett_i



g_tmp1_i (3 : 11): [ 1 3 1 ]

Stringhe allocate: 2 (757 interne); stringhe deallocate: 0 (132 interne)

695: promuovi_i	(implicita)
g_tmp1_i (3 : 11): [ 1 3 1 ]
ATTENZIONE (promuovi_i, linea HMM_und.c # 695): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

g_tmp1_d (3 : 19): [ 1 3 1 ]
------------------------------ Fine promuovi_i

696: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
g_Freq_out (7 : 7): [ 3 1 1 0 0 0 0 ]
start = 1
end = 3
g_tmp1_d (3 : 19): [ 1 3 1 ]


g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

706: accoda1_vv_i	<=>	v1 <- c(v1, v2)
g_h (1 : 5): [ 1 ]
g_h_new (2 : 2): [ 5 3 ]


g_h (3 : 5): [ 1 5 3 ]
------------------------------ Fine accoda_vv_i

714: copia_v_indx_i	<=>	ris <- v[indx]
g_Sout (5 : 5): [ 0 1 1 1 2 ]
g_h (3 : 5): [ 1 5 3 ]


g_tmp2_i (3 : 4): [ 0 2 1 ]
------------------------------ Fine copia_v_indx_i

715: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp2_i (3 : 4): [ 0 2 1 ]
val = 5


g_tmp1_i (3 : 11): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

716: copia_v_indx_i	<=>	ris <- v[indx]
g_h (3 : 5): [ 1 5 3 ]
g_tmp1_i (3 : 11): [ 1 2 3 ]


g_h (3 : 5): [ 1 5 3 ]
------------------------------ Fine copia_v_indx_i

208: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]


g_Sout (5 : 5): [ 0 1 1 1 2 ]
------------------------------ Fine somma_colonne_i


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 2 0 0
	 0 2 0 0 0
	 0 0 0 0 2
	 0 0 0 2 2
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 2 0 0
	 0 2 0 0 0
	 0 0 0 0 2
	 0 0 0 2 2
 ]
val = 0


g_ind (5 : 25): [ 8 12 20 24 25 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 2 0 0
	 0 2 0 0 0
	 0 0 0 0 2
	 0 0 0 2 2
 ]
g_ind (5 : 25): [ 8 12 20 24 25 ]
val = 1


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
val = 0


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (5 : 5): [ 0 0 0 0 0 ]
val = 0


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
riga = 1


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
r = 1
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
riga = 2


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
r = 2
val = 0


g_neighbours (1 : 25): [ 3 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
riga = 3


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
r = 3
val = 0


g_neighbours (1 : 25): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
riga = 4


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
r = 4
val = 0


g_neighbours (1 : 25): [ 5 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
riga = 5


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
r = 5
val = 0


g_neighbours (1 : 25): [ 4 ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (5 : 5): [ 0 0 0 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 2 (758 interne); stringhe deallocate: 0 (133 interne)


*** Esco da cluster_coeff2 ***
220: somma_vs_T	<=> ris <- v + s
g_CCs (1 : 1): [ 0 ]
s = 0


g_tmp1_d (1 : 19): [ 0 ]
------------------------------ Fine somma_vs_di

221: segno_v_d	<=>	ris <- sign(v)
g_tmp1_d (1 : 19): [ 0 ]


g_segno (1 : 1): [ 0 ]
------------------------------ Fine segno_v_d

223: which_v_indxgt_i	<=>	ris <- which(v > val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indp (0 : 1): [ ]
------------------------------ Fine which_v_indxgt_i

225: which_v_indxle_i	<=>	ris <- which(v<=val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indm (1 : 1): [ 1 ]
------------------------------ Fine which_v_indxle_i

229: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indp (0 : 1): [ ]
val2 = 0.3


g_p (1 : 1): [ 1 ]
------------------------------ Fine f_aux9_d

231: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indm (1 : 1): [ 1 ]
val2 = 0.3


g_p (1 : 1): [ 1.7 ]
------------------------------ Fine f_aux9_d

243: min_v_d	<=>	ris <- min(v)
g_p (1 : 1): [ 1.7 ]


min = 1.7
------------------------------ Fine min_v_d

246: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_p (1 : 1): [ 1.7 ]
canc_NA = 0



ris: 1.7
------------------------------ Fine somma_v_d

246: dividi1_vs_d	<=>	v <- v / div
g_p (1 : 1): [ 1.7 ]
div = 1.700


g_p (1 : 1): [ 1 ]
------------------------------ Fine dividi1_vs_d

249: assegna1_v_indx_d	<=>	v[indx] <- val
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
g_CCind[i - 1] (7 : 7): [ 1 2 3 4 5 6 7 ]
val = 1


g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine assegna1_v_indx_d

267: moltiplica_vv_d	<=>	ris <- v1 * v2
g_prior_p_subnet (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]


g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
------------------------------ Fine moltiplica_vv_d

269: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]


max = 0.3333333333333333
------------------------------ Fine max_v_d

273: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
canc_NA = 1



ris: 1
------------------------------ Fine somma_v_d

273: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
div = 1.000


g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
------------------------------ Fine dividi1_vs_d

281: max_v_i		<=>	ris <- max(v)
g_dim (7 : 7): [ 2 2 2 2 2 2 2 ]


max = 2
------------------------------ Fine max_v_i

287: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]


max = 0.3333333333333333
------------------------------ Fine max_v_d

295: which_v_indxgt_d	<=>	ris <- which(v > val)
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]
val = 0


g_tmp1_i (3 : 11): [ 4 5 7 ]
------------------------------ Fine which_v_indxgt_d

298: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 7
incr = 1


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine seq_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
k = 3, replace = 0
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0.3333333333333333 ]


ris (3 : 3): [ 7 5 4 ]
*****************************************


Stringhe allocate: 2 (758 interne); stringhe deallocate: 0 (133 interne)

301: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_mod1 (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine copia_m_i


***probmod_und***
56: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

58: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 -1 -1 -1
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

60: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod1 (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_M_out (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

63: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 1 1 1 2 ]
g_h (3 : 5): [ 1 5 3 ]


g_tmp_i1 (3 : 5): [ 0 2 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 2


g_S_new (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 4 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 5 4 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 3 5 4 ]


g_T2 (3 : 5): [ 0.7867244574868211 0.1712208549059974 0.3224199317354524 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_old1 (3 : 5): [ 1 1 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 4 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 5 4 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 5 4 ]


g_old2 (3 : 5): [ 1 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 1 3 ]
s = -1


g_new1 (3 : 5): [ 0 0 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 1 0 0 ]
s = 1


g_new2 (3 : 5): [ 2 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_toll1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 4 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 5 4 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 5 4 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 1 3 ]
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]


g_a (3 : 5): [ 1 0.2132755425131789 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1 0.2132755425131789 -0.6148363606041851 ]


g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 0 2 ]
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]


g_b (3 : 5): [ 0 -0.7867244574868211 -1.614836360604185 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0 -0.7867244574868211 -1.614836360604185 ]


g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.2132755425131789 0.7867244574868211
	 0.6148363606041851 1.614836360604185
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.2132755425131789 0.7867244574868211
	 0.6148363606041851 1.614836360604185
 ]


g_m (3 : 5): [ 1 0.7867244574868211 1.614836360604185 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_m (3 : 5): [ 1 0.7867244574868211 1.614836360604185 ]
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf -1 -0.4467246092252654 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0 -0.7867244574868211 -0.3851636393958149 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0 -0.7867244574868211 -0.3851636393958149 ]
val = 0

g_ind1 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -1 -0.2132755425131789 0.6148363606041851 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -1 -0.2132755425131789 0.6148363606041851 ]
val = 0


g_ind2 (1 : 5): [ 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (2 : 5): [ 2 3 ]
g_ind2 (1 : 5): [ 3 ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 3 ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 3): [ 3 ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf -1 -0.4467246092252654 ]
g_indinf (1 : 3): [ 3 ]
val = -inf


g_S1 (3 : 5): [ inf -1 -inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf -1 -inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf -1 -inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S1 (3 : 5): [ inf -1 -inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf -1 -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf -1 -inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf -1 -inf ]
val = inf


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf -1 -inf ]
g_ind (1 : 5): [ 1 ]
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_m (3 : 5): [ 1 0.7867244574868211 1.614836360604185 ]


g_S1 (3 : 5): [ 1 -1 -inf ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 1 0 0 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.1712208549059974 0.3224199317354524 ]


g_a (3 : 5): [ 0.2132755425131789 -0.1712208549059974 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 0.2132755425131789 -0.1712208549059974 -0.3224199317354524 ]


g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 2 1 1 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.1712208549059974 0.3224199317354524 ]


g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]


g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T2 (3 : 5): [ 0.7867244574868211 0.1712208549059974 0.3224199317354524 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.1712208549059974 0.8287791450940025
	 0.3224199317354524 0.6775800682645476
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.1712208549059974 0.8287791450940025
	 0.3224199317354524 0.6775800682645476
 ]


g_m (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
g_m (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.1712208549059974 0.3224199317354524 ]


g_S2 (3 : 5): [ -1.542186124973118 -4.840410039705815 -2.101545225871788 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.8287791450940025 -0.6775800682645476 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.8287791450940025 -0.6775800682645476 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.2132755425131789 -0.1712208549059975 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 0.2132755425131789 -0.1712208549059975 -0.3224199317354524 ]
val = 0


g_ind2 (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (1 : 5): [ 1 ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (1 : 5): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (1 : 3): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 3): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 3): [ 1 ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -1.542186124973118 -4.840410039705815 -2.101545225871788 ]
g_indinf (1 : 3): [ 1 ]
val = -inf


g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
g_m (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]


g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 1 -1 -inf ]
g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]


Sc (3 : 5): [ -inf -5.840410039705815 -inf ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ -inf -5.840410039705815 -inf ]
div = 2.000


Sc (3 : 5): [ -inf -2.920205019852907 -inf ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (759 interne); stringhe deallocate: 0 (134 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ -inf -2.920205019852907 -inf ]
val = -inf


g_indok (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_indok (1 : 5): [ 2 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 0
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 5): [ 1 2 3 ]
g_indok (1 : 5): [ 2 ]
3108: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (3 : 5): [ 1 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 2


g_indInf (2 : 5): [ 1 3 ]
------------------------------ Fine elimina1_indx_i



g_indInf (2 : 5): [ 1 3 ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ -inf -2.920205019852907 -inf ]
g_indok (1 : 5): [ 2 ]


g_tmp_d1 (1 : 5): [ -2.920205019852907 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (1 : 5): [ -2.920205019852907 ]


min = -2.920205019852907
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ -inf -2.920205019852907 -inf ]
g_indInf (2 : 5): [ 1 3 ]
val = -3.920205019852907


Sc (3 : 5): [ -3.920205019852907 -2.920205019852907 -3.920205019852907 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
Sc (3 : 5): [ -3.920205019852907 -2.920205019852907 -3.920205019852907 ]


ris (2 x 3 : 2 x 5): [
	 -3.920205019852907 -2.920205019852907 -3.920205019852907
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 1 1 1 2 ]
g_h (3 : 5): [ 1 5 3 ]


g_tmp_i1 (3 : 5): [ 0 2 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 2


g_S_new (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 4 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 5 4 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 3 5 4 ]


g_T2 (3 : 5): [ 0.7867244574868211 0.1712208549059974 0.3224199317354524 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_old1 (3 : 5): [ 1 1 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 4 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 5 4 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 5 4 ]


g_old2 (3 : 5): [ 1 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 1 3 ]
s = -1


g_new1 (3 : 5): [ 0 0 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 1 0 0 ]
s = 1


g_new2 (3 : 5): [ 2 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_toll1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 4 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 5 4 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 5 4 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 1 3 ]
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]


g_a (3 : 5): [ 1 0.2132755425131789 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1 0.2132755425131789 -0.6148363606041851 ]


g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 0 2 ]
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]


g_b (3 : 5): [ 0 -0.7867244574868211 -1.614836360604185 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0 -0.7867244574868211 -1.614836360604185 ]


g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.2132755425131789 0.7867244574868211
	 0.6148363606041851 1.614836360604185
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.2132755425131789 0.7867244574868211
	 0.6148363606041851 1.614836360604185
 ]


g_m (3 : 5): [ 1 0.7867244574868211 1.614836360604185 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_m (3 : 5): [ 1 0.7867244574868211 1.614836360604185 ]
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf -1 -0.4467246092252654 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0 -0.7867244574868211 -0.3851636393958149 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0 -0.7867244574868211 -0.3851636393958149 ]
val = 0

g_ind1 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -1 -0.2132755425131789 0.6148363606041851 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -1 -0.2132755425131789 0.6148363606041851 ]
val = 0


g_ind2 (1 : 5): [ 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (2 : 5): [ 2 3 ]
g_ind2 (1 : 5): [ 3 ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 3 ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 3): [ 3 ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf -1 -0.4467246092252654 ]
g_indinf (1 : 3): [ 3 ]
val = -inf


g_S1 (3 : 5): [ inf -1 -inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf -1 -inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf -1 -inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S1 (3 : 5): [ inf -1 -inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf -1 -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf -1 -inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf -1 -inf ]
val = inf


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf -1 -inf ]
g_ind (1 : 5): [ 1 ]
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_m (3 : 5): [ 1 0.7867244574868211 1.614836360604185 ]


g_S1 (3 : 5): [ 1 -1 -inf ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 1 0 0 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.1712208549059974 0.3224199317354524 ]


g_a (3 : 5): [ 0.2132755425131789 -0.1712208549059974 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 0.2132755425131789 -0.1712208549059974 -0.3224199317354524 ]


g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 2 1 1 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.1712208549059974 0.3224199317354524 ]


g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]


g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T2 (3 : 5): [ 0.7867244574868211 0.1712208549059974 0.3224199317354524 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.1712208549059974 0.8287791450940025
	 0.3224199317354524 0.6775800682645476
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.1712208549059974 0.8287791450940025
	 0.3224199317354524 0.6775800682645476
 ]


g_m (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
g_m (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.1712208549059974 0.3224199317354524 ]


g_S2 (3 : 5): [ -1.542186124973118 -4.840410039705815 -2.101545225871788 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.8287791450940025 -0.6775800682645476 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.8287791450940025 -0.6775800682645476 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.2132755425131789 -0.1712208549059975 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 0.2132755425131789 -0.1712208549059975 -0.3224199317354524 ]
val = 0


g_ind2 (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (1 : 5): [ 1 ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (1 : 5): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (1 : 3): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 3): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 3): [ 1 ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -1.542186124973118 -4.840410039705815 -2.101545225871788 ]
g_indinf (1 : 3): [ 1 ]
val = -inf


g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
g_m (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]


g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 1 -1 -inf ]
g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]


Sc (3 : 5): [ -inf -5.840410039705815 -inf ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ -inf -5.840410039705815 -inf ]
div = 2.000


Sc (3 : 5): [ -inf -2.920205019852907 -inf ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (760 interne); stringhe deallocate: 0 (135 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ -inf -2.920205019852907 -inf ]
val = -inf


g_indok (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 0
	 0 0 0
 ]
riga = 2
g_indok (1 : 5): [ 2 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 0
	 0 1 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 5): [ 1 2 3 ]
g_indok (1 : 5): [ 2 ]
3108: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (3 : 5): [ 1 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 2


g_indInf (2 : 5): [ 1 3 ]
------------------------------ Fine elimina1_indx_i



g_indInf (2 : 5): [ 1 3 ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ -inf -2.920205019852907 -inf ]
g_indok (1 : 5): [ 2 ]


g_tmp_d1 (1 : 5): [ -2.920205019852907 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (1 : 5): [ -2.920205019852907 ]


min = -2.920205019852907
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ -inf -2.920205019852907 -inf ]
g_indInf (2 : 5): [ 1 3 ]
val = -3.920205019852907


Sc (3 : 5): [ -3.920205019852907 -2.920205019852907 -3.920205019852907 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 -3.920205019852907 -2.920205019852907 -3.920205019852907
	 0 0 0
 ]
riga = 2
Sc (3 : 5): [ -3.920205019852907 -2.920205019852907 -3.920205019852907 ]


ris (2 x 3 : 2 x 5): [
	 -3.920205019852907 -2.920205019852907 -3.920205019852907
	 -3.920205019852907 -2.920205019852907 -3.920205019852907
 ]
------------------------------ Fine aggiungi_mv_riga_d

134: somma_m_d	<=>	ris <- sum(m)
ris (2 x 3 : 2 x 5): [
	 -3.920205019852907 -2.920205019852907 -3.920205019852907
	 -3.920205019852907 -2.920205019852907 -3.920205019852907
 ]


ris: -21.52123011911744
------------------------------ Fine somma_m_d

137: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 0
	 0 1 0
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 0
	 0 1 0
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 0
	 0 1 0
 ]
------------------------------ Fine assegna1_mindxlt_i

139: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 0
	 0 1 0
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 0
	 0 1 0
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 0
	 0 1 0
 ]
------------------------------ Fine assegna1_m_indxgt_i

141: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 0
	 0 1 0
 ]


g_aus (3 : 5): [ 0 2 0 ]
------------------------------ Fine somma_colonne_i

143: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (3 : 5): [ 0 2 0 ]
val = 0


g_tmp_i1 (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxne_i


Stringhe allocate: 2 (760 interne); stringhe deallocate: 0 (135 interne)


*** Esco da probmod_und ***

311: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine copia_m_i


***probmod_und***
56: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 0
	 0 1 0
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

58: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 1.861681152306316 1.861681152306316 1.861681152306316
	 -1 -1 -1
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

60: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_M_out (2 : 2): [ 1 2 ]
------------------------------ Fine somma_colonne_i

63: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 1 1 1 2 ]
g_h (3 : 5): [ 1 5 3 ]


g_tmp_i1 (3 : 5): [ 0 2 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 1


g_S_new (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 2 4 3 ]


g_T2 (3 : 5): [ 3.614836360604185 0.3224199317354524 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_old1 (3 : 5): [ 1 1 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 4 3 ]


g_old2 (3 : 5): [ 3 0 1 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 1 3 ]
s = -1


g_new1 (3 : 5): [ 0 0 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 3 0 1 ]
s = 1


g_new2 (3 : 5): [ 4 1 2 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_toll1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 4 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 1 3 ]
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]


g_a (3 : 5): [ 1 0.2132755425131789 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1 0.2132755425131789 -0.6148363606041851 ]


g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 0 2 ]
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]


g_b (3 : 5): [ 0 -0.7867244574868211 -1.614836360604185 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0 -0.7867244574868211 -1.614836360604185 ]


g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.2132755425131789 0.7867244574868211
	 0.6148363606041851 1.614836360604185
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.2132755425131789 0.7867244574868211
	 0.6148363606041851 1.614836360604185
 ]


g_m (3 : 5): [ 1 0.7867244574868211 1.614836360604185 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_m (3 : 5): [ 1 0.7867244574868211 1.614836360604185 ]
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf -1 -0.4467246092252654 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0 -0.7867244574868211 -0.3851636393958149 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0 -0.7867244574868211 -0.3851636393958149 ]
val = 0

g_ind1 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -1 -0.2132755425131789 0.6148363606041851 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -1 -0.2132755425131789 0.6148363606041851 ]
val = 0


g_ind2 (1 : 5): [ 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (2 : 5): [ 2 3 ]
g_ind2 (1 : 5): [ 3 ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 3 ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 3): [ 3 ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf -1 -0.4467246092252654 ]
g_indinf (1 : 3): [ 3 ]
val = -inf


g_S1 (3 : 5): [ inf -1 -inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf -1 -inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf -1 -inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S1 (3 : 5): [ inf -1 -inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf -1 -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf -1 -inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf -1 -inf ]
val = inf


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf -1 -inf ]
g_ind (1 : 5): [ 1 ]
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_m (3 : 5): [ 1 0.7867244574868211 1.614836360604185 ]


g_S1 (3 : 5): [ 1 -1 -inf ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 3 0 1 ]
g_T2 (3 : 5): [ 3.614836360604185 0.3224199317354524 0.7867244574868211 ]


g_a (3 : 5): [ -0.6148363606041851 -0.3224199317354524 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -0.6148363606041851 -0.3224199317354524 0.2132755425131789 ]


g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 4 1 2 ]
g_T2 (3 : 5): [ 3.614836360604185 0.3224199317354524 0.7867244574868211 ]


g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]


g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T2 (3 : 5): [ 3.614836360604185 0.3224199317354524 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.3224199317354524 0.6775800682645476
	 0.2132755425131789 1.213275542513179
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.3224199317354524 0.6775800682645476
	 0.2132755425131789 1.213275542513179
 ]


g_m (3 : 5): [ 0.6148363606041851 0.6775800682645476 1.213275542513179 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
g_m (3 : 5): [ 0.6148363606041851 0.6775800682645476 1.213275542513179 ]
g_T2 (3 : 5): [ 3.614836360604185 0.3224199317354524 0.7867244574868211 ]


g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -1.542186124973118 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.6775800682645476 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.6775800682645476 -0.7867244574868211 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.6148363606041851 -0.3224199317354524 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.6148363606041851 -0.3224199317354524 0.2132755425131789 ]
val = 0


g_ind2 (1 : 5): [ 3 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (1 : 5): [ 3 ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (1 : 5): [ 3 ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 3 ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 3): [ 3 ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -1.542186124973118 ]
g_indinf (1 : 3): [ 3 ]
val = -inf


g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
g_m (3 : 5): [ 0.6148363606041851 0.6775800682645476 1.213275542513179 ]


g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 1 -1 -inf ]
g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]


Sc (3 : 5): [ 1.170086913837898 -3.101545225871788 -inf ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 1.170086913837898 -3.101545225871788 -inf ]
div = 2.000


Sc (3 : 5): [ 0.5850434569189491 -1.550772612935894 -inf ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (761 interne); stringhe deallocate: 0 (136 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.5850434569189491 -1.550772612935894 -inf ]
val = -inf


g_indok (2 : 5): [ 1 2 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_indok (2 : 5): [ 1 2 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 5): [ 1 2 3 ]
g_indok (2 : 5): [ 1 2 ]
3108: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i



g_indInf (1 : 5): [ 3 ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.5850434569189491 -1.550772612935894 -inf ]
g_indok (2 : 5): [ 1 2 ]


g_tmp_d1 (2 : 5): [ 0.5850434569189491 -1.550772612935894 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (2 : 5): [ 0.5850434569189491 -1.550772612935894 ]


min = -1.550772612935894
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.5850434569189491 -1.550772612935894 -inf ]
g_indInf (1 : 5): [ 3 ]
val = -2.550772612935894


Sc (3 : 5): [ 0.5850434569189491 -1.550772612935894 -2.550772612935894 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
Sc (3 : 5): [ 0.5850434569189491 -1.550772612935894 -2.550772612935894 ]


ris (2 x 3 : 2 x 5): [
	 0.5850434569189491 -1.550772612935894 -2.550772612935894
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 1 1 1 2 ]
g_h (3 : 5): [ 1 5 3 ]


g_tmp_i1 (3 : 5): [ 0 2 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 2


g_S_new (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 4 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 5 4 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 3 5 4 ]


g_T2 (3 : 5): [ 0.7867244574868211 0.1712208549059974 0.3224199317354524 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_old1 (3 : 5): [ 1 1 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 4 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 5 4 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 5 4 ]


g_old2 (3 : 5): [ 1 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 1 3 ]
s = -1


g_new1 (3 : 5): [ 0 0 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 1 0 0 ]
s = 1


g_new2 (3 : 5): [ 2 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_toll1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 4 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 5 4 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 5 4 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 1 3 ]
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]


g_a (3 : 5): [ 1 0.2132755425131789 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1 0.2132755425131789 -0.6148363606041851 ]


g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 0 2 ]
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]


g_b (3 : 5): [ 0 -0.7867244574868211 -1.614836360604185 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0 -0.7867244574868211 -1.614836360604185 ]


g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.2132755425131789 0.7867244574868211
	 0.6148363606041851 1.614836360604185
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.2132755425131789 0.7867244574868211
	 0.6148363606041851 1.614836360604185
 ]


g_m (3 : 5): [ 1 0.7867244574868211 1.614836360604185 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_m (3 : 5): [ 1 0.7867244574868211 1.614836360604185 ]
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf -1 -0.4467246092252654 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0 -0.7867244574868211 -0.3851636393958149 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0 -0.7867244574868211 -0.3851636393958149 ]
val = 0

g_ind1 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -1 -0.2132755425131789 0.6148363606041851 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -1 -0.2132755425131789 0.6148363606041851 ]
val = 0


g_ind2 (1 : 5): [ 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (2 : 5): [ 2 3 ]
g_ind2 (1 : 5): [ 3 ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 3 ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 3): [ 3 ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf -1 -0.4467246092252654 ]
g_indinf (1 : 3): [ 3 ]
val = -inf


g_S1 (3 : 5): [ inf -1 -inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf -1 -inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf -1 -inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S1 (3 : 5): [ inf -1 -inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf -1 -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf -1 -inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf -1 -inf ]
val = inf


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf -1 -inf ]
g_ind (1 : 5): [ 1 ]
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_m (3 : 5): [ 1 0.7867244574868211 1.614836360604185 ]


g_S1 (3 : 5): [ 1 -1 -inf ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 1 0 0 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.1712208549059974 0.3224199317354524 ]


g_a (3 : 5): [ 0.2132755425131789 -0.1712208549059974 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 0.2132755425131789 -0.1712208549059974 -0.3224199317354524 ]


g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 2 1 1 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.1712208549059974 0.3224199317354524 ]


g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]


g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T2 (3 : 5): [ 0.7867244574868211 0.1712208549059974 0.3224199317354524 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.1712208549059974 0.8287791450940025
	 0.3224199317354524 0.6775800682645476
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.1712208549059974 0.8287791450940025
	 0.3224199317354524 0.6775800682645476
 ]


g_m (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
g_m (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
g_T2 (3 : 5): [ 0.7867244574868211 0.1712208549059974 0.3224199317354524 ]


g_S2 (3 : 5): [ -1.542186124973118 -4.840410039705815 -2.101545225871788 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.8287791450940025 -0.6775800682645476 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.7867244574868211 -0.8287791450940025 -0.6775800682645476 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.2132755425131789 -0.1712208549059975 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 0.2132755425131789 -0.1712208549059975 -0.3224199317354524 ]
val = 0


g_ind2 (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (1 : 5): [ 1 ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (1 : 5): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (1 : 3): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 3): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 3): [ 1 ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -1.542186124973118 -4.840410039705815 -2.101545225871788 ]
g_indinf (1 : 3): [ 1 ]
val = -inf


g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.2132755425131789 0.1712208549059974 0.3224199317354524 ]
g_b (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]
g_m (3 : 5): [ 1.213275542513179 0.8287791450940025 0.6775800682645476 ]


g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 1 -1 -inf ]
g_S2 (3 : 5): [ -inf -4.840410039705815 -2.101545225871788 ]


Sc (3 : 5): [ -inf -5.840410039705815 -inf ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ -inf -5.840410039705815 -inf ]
div = 2.000


Sc (3 : 5): [ -inf -2.920205019852907 -inf ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (762 interne); stringhe deallocate: 0 (137 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ -inf -2.920205019852907 -inf ]
val = -inf


g_indok (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 0 0 0
 ]
riga = 2
g_indok (1 : 5): [ 2 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 0 1 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 5): [ 1 2 3 ]
g_indok (1 : 5): [ 2 ]
3108: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (3 : 5): [ 1 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 2


g_indInf (2 : 5): [ 1 3 ]
------------------------------ Fine elimina1_indx_i



g_indInf (2 : 5): [ 1 3 ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ -inf -2.920205019852907 -inf ]
g_indok (1 : 5): [ 2 ]


g_tmp_d1 (1 : 5): [ -2.920205019852907 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (1 : 5): [ -2.920205019852907 ]


min = -2.920205019852907
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ -inf -2.920205019852907 -inf ]
g_indInf (2 : 5): [ 1 3 ]
val = -3.920205019852907


Sc (3 : 5): [ -3.920205019852907 -2.920205019852907 -3.920205019852907 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0.5850434569189491 -1.550772612935894 -2.550772612935894
	 0 0 0
 ]
riga = 2
Sc (3 : 5): [ -3.920205019852907 -2.920205019852907 -3.920205019852907 ]


ris (2 x 3 : 2 x 5): [
	 0.5850434569189491 -1.550772612935894 -2.550772612935894
	 -3.920205019852907 -2.920205019852907 -3.920205019852907
 ]
------------------------------ Fine aggiungi_mv_riga_d

134: somma_m_d	<=>	ris <- sum(m)
ris (2 x 3 : 2 x 5): [
	 0.5850434569189491 -1.550772612935894 -2.550772612935894
	 -3.920205019852907 -2.920205019852907 -3.920205019852907
 ]


ris: -14.27711682851156
------------------------------ Fine somma_m_d

137: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 0 1 0
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 0 1 0
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 0 1 0
 ]
------------------------------ Fine assegna1_mindxlt_i

139: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 0 1 0
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 0 1 0
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 0 1 0
 ]
------------------------------ Fine assegna1_m_indxgt_i

141: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 0 1 0
 ]


g_aus (3 : 5): [ 1 2 0 ]
------------------------------ Fine somma_colonne_i

143: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (3 : 5): [ 1 2 0 ]
val = 0


g_tmp_i1 (2 : 5): [ 1 2 ]
------------------------------ Fine which_v_indxne_i

153: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 0 1 0
 ]


g_rs (2 : 2): [ 2 1 ]
------------------------------ Fine somma_righe_i

155: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 2 1 ]
decr = 0


g_ord_ind (2 : 2): [ 2 1 ]
------------------------------ Fine ordine_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 0 1 0
 ]
r = 2
val = 0


g_I_add (1 : 10): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
g_I_add (1 : 10): [ 2 ]
3022: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (1 : 1): [ 2 ]


ris (1 : 1): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 2 ]
------------------------------ Fine unione1_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 0 1 0
 ]
r = 1
val = 0


g_I_add (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 2 ]
g_I_add (2 : 10): [ 1 2 ]
3022: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 2 1 2 ]


ris (2 : 3): [ 2 1 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 3): [ 2 1 ]
------------------------------ Fine unione1_i


Stringhe allocate: 2 (782 interne); stringhe deallocate: 0 (157 interne)


*** Esco da probmod_und ***

327: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_mod3 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine copia_m_i


***probmod_und***
56: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 0 1 0
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

58: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 1.861681152306316 1.861681152306316 1.861681152306316
	 1.861681152306316 1.861681152306316 1.861681152306316
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

60: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod3 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_M_out (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

63: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 1 1 1 2 ]
g_h (3 : 5): [ 1 5 3 ]


g_tmp_i1 (3 : 5): [ 0 2 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 1


g_S_new (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 2 4 3 ]


g_T2 (3 : 5): [ 3.614836360604185 0.3224199317354524 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_old1 (3 : 5): [ 1 1 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 4 3 ]


g_old2 (3 : 5): [ 3 0 1 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 1 3 ]
s = -1


g_new1 (3 : 5): [ 0 0 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 3 0 1 ]
s = 1


g_new2 (3 : 5): [ 4 1 2 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_toll1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 4 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 1 3 ]
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]


g_a (3 : 5): [ 1 0.2132755425131789 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1 0.2132755425131789 -0.6148363606041851 ]


g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 0 2 ]
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]


g_b (3 : 5): [ 0 -0.7867244574868211 -1.614836360604185 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0 -0.7867244574868211 -1.614836360604185 ]


g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.2132755425131789 0.7867244574868211
	 0.6148363606041851 1.614836360604185
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.2132755425131789 0.7867244574868211
	 0.6148363606041851 1.614836360604185
 ]


g_m (3 : 5): [ 1 0.7867244574868211 1.614836360604185 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_m (3 : 5): [ 1 0.7867244574868211 1.614836360604185 ]
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf -1 -0.4467246092252654 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0 -0.7867244574868211 -0.3851636393958149 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0 -0.7867244574868211 -0.3851636393958149 ]
val = 0

g_ind1 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -1 -0.2132755425131789 0.6148363606041851 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -1 -0.2132755425131789 0.6148363606041851 ]
val = 0


g_ind2 (1 : 5): [ 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (2 : 5): [ 2 3 ]
g_ind2 (1 : 5): [ 3 ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 3 ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 3): [ 3 ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf -1 -0.4467246092252654 ]
g_indinf (1 : 3): [ 3 ]
val = -inf


g_S1 (3 : 5): [ inf -1 -inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf -1 -inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf -1 -inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S1 (3 : 5): [ inf -1 -inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf -1 -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf -1 -inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf -1 -inf ]
val = inf


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf -1 -inf ]
g_ind (1 : 5): [ 1 ]
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_m (3 : 5): [ 1 0.7867244574868211 1.614836360604185 ]


g_S1 (3 : 5): [ 1 -1 -inf ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 3 0 1 ]
g_T2 (3 : 5): [ 3.614836360604185 0.3224199317354524 0.7867244574868211 ]


g_a (3 : 5): [ -0.6148363606041851 -0.3224199317354524 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -0.6148363606041851 -0.3224199317354524 0.2132755425131789 ]


g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 4 1 2 ]
g_T2 (3 : 5): [ 3.614836360604185 0.3224199317354524 0.7867244574868211 ]


g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]


g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T2 (3 : 5): [ 3.614836360604185 0.3224199317354524 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.3224199317354524 0.6775800682645476
	 0.2132755425131789 1.213275542513179
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.3224199317354524 0.6775800682645476
	 0.2132755425131789 1.213275542513179
 ]


g_m (3 : 5): [ 0.6148363606041851 0.6775800682645476 1.213275542513179 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
g_m (3 : 5): [ 0.6148363606041851 0.6775800682645476 1.213275542513179 ]
g_T2 (3 : 5): [ 3.614836360604185 0.3224199317354524 0.7867244574868211 ]


g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -1.542186124973118 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.6775800682645476 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.6775800682645476 -0.7867244574868211 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.6148363606041851 -0.3224199317354524 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.6148363606041851 -0.3224199317354524 0.2132755425131789 ]
val = 0


g_ind2 (1 : 5): [ 3 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (1 : 5): [ 3 ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (1 : 5): [ 3 ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 3 ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 3): [ 3 ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -1.542186124973118 ]
g_indinf (1 : 3): [ 3 ]
val = -inf


g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
g_m (3 : 5): [ 0.6148363606041851 0.6775800682645476 1.213275542513179 ]


g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 1 -1 -inf ]
g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]


Sc (3 : 5): [ 1.170086913837898 -3.101545225871788 -inf ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 1.170086913837898 -3.101545225871788 -inf ]
div = 2.000


Sc (3 : 5): [ 0.5850434569189491 -1.550772612935894 -inf ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (783 interne); stringhe deallocate: 0 (158 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.5850434569189491 -1.550772612935894 -inf ]
val = -inf


g_indok (2 : 5): [ 1 2 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_indok (2 : 5): [ 1 2 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 5): [ 1 2 3 ]
g_indok (2 : 5): [ 1 2 ]
3108: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i



g_indInf (1 : 5): [ 3 ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.5850434569189491 -1.550772612935894 -inf ]
g_indok (2 : 5): [ 1 2 ]


g_tmp_d1 (2 : 5): [ 0.5850434569189491 -1.550772612935894 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (2 : 5): [ 0.5850434569189491 -1.550772612935894 ]


min = -1.550772612935894
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.5850434569189491 -1.550772612935894 -inf ]
g_indInf (1 : 5): [ 3 ]
val = -2.550772612935894


Sc (3 : 5): [ 0.5850434569189491 -1.550772612935894 -2.550772612935894 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
Sc (3 : 5): [ 0.5850434569189491 -1.550772612935894 -2.550772612935894 ]


ris (2 x 3 : 2 x 5): [
	 0.5850434569189491 -1.550772612935894 -2.550772612935894
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 1 1 1 2 ]
g_h (3 : 5): [ 1 5 3 ]


g_tmp_i1 (3 : 5): [ 0 2 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 1


g_S_new (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (3 : 5): [ 2 4 3 ]


g_T2 (3 : 5): [ 3.614836360604185 0.3224199317354524 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_old1 (3 : 5): [ 1 1 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 4 3 ]


g_old2 (3 : 5): [ 3 0 1 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 1 3 ]
s = -1


g_new1 (3 : 5): [ 0 0 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 3 0 1 ]
s = 1


g_new2 (3 : 5): [ 4 1 2 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 2 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 3 2 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 3 2 ]


g_toll1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 3 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 4 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 4 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 1 3 ]
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]


g_a (3 : 5): [ 1 0.2132755425131789 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1 0.2132755425131789 -0.6148363606041851 ]


g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 0 2 ]
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]


g_b (3 : 5): [ 0 -0.7867244574868211 -1.614836360604185 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0 -0.7867244574868211 -1.614836360604185 ]


g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.2132755425131789 0.7867244574868211
	 0.6148363606041851 1.614836360604185
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.2132755425131789 0.7867244574868211
	 0.6148363606041851 1.614836360604185
 ]


g_m (3 : 5): [ 1 0.7867244574868211 1.614836360604185 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_m (3 : 5): [ 1 0.7867244574868211 1.614836360604185 ]
g_T1 (3 : 5): [ 0 0.7867244574868211 3.614836360604185 ]
ATTENZIONE (f_aux_d, linea scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf -1 -0.4467246092252654 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0 -0.7867244574868211 -0.3851636393958149 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0 -0.7867244574868211 -0.3851636393958149 ]
val = 0

g_ind1 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -1 -0.2132755425131789 0.6148363606041851 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -1 -0.2132755425131789 0.6148363606041851 ]
val = 0


g_ind2 (1 : 5): [ 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (2 : 5): [ 2 3 ]
g_ind2 (1 : 5): [ 3 ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 3 ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 3): [ 3 ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf -1 -0.4467246092252654 ]
g_indinf (1 : 3): [ 3 ]
val = -inf


g_S1 (3 : 5): [ inf -1 -inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf -1 -inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf -1 -inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S1 (3 : 5): [ inf -1 -inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf -1 -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf -1 -inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf -1 -inf ]
val = inf


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf -1 -inf ]
g_ind (1 : 5): [ 1 ]
g_a (3 : 5): [ 1 0.2132755425131789 0.6148363606041851 ]
g_b (3 : 5): [ 0 0.7867244574868211 1.614836360604185 ]
g_m (3 : 5): [ 1 0.7867244574868211 1.614836360604185 ]


g_S1 (3 : 5): [ 1 -1 -inf ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 3 0 1 ]
g_T2 (3 : 5): [ 3.614836360604185 0.3224199317354524 0.7867244574868211 ]


g_a (3 : 5): [ -0.6148363606041851 -0.3224199317354524 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -0.6148363606041851 -0.3224199317354524 0.2132755425131789 ]


g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 4 1 2 ]
g_T2 (3 : 5): [ 3.614836360604185 0.3224199317354524 0.7867244574868211 ]


g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]


g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T2 (3 : 5): [ 3.614836360604185 0.3224199317354524 0.7867244574868211 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.3224199317354524 0.6775800682645476
	 0.2132755425131789 1.213275542513179
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.3224199317354524 0.6775800682645476
	 0.2132755425131789 1.213275542513179
 ]


g_m (3 : 5): [ 0.6148363606041851 0.6775800682645476 1.213275542513179 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
g_m (3 : 5): [ 0.6148363606041851 0.6775800682645476 1.213275542513179 ]
g_T2 (3 : 5): [ 3.614836360604185 0.3224199317354524 0.7867244574868211 ]


g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -1.542186124973118 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.6775800682645476 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.3851636393958149 -0.6775800682645476 -0.7867244574868211 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.6148363606041851 -0.3224199317354524 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.6148363606041851 -0.3224199317354524 0.2132755425131789 ]
val = 0


g_ind2 (1 : 5): [ 3 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (1 : 5): [ 3 ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (1 : 5): [ 3 ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 3 ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 3): [ 3 ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -1.542186124973118 ]
g_indinf (1 : 3): [ 3 ]
val = -inf


g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.6148363606041851 0.3224199317354524 0.2132755425131789 ]
g_b (3 : 5): [ 0.3851636393958149 0.6775800682645476 1.213275542513179 ]
g_m (3 : 5): [ 0.6148363606041851 0.6775800682645476 1.213275542513179 ]


g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 1 -1 -inf ]
g_S2 (3 : 5): [ 0.1700869138378981 -2.101545225871788 -inf ]


Sc (3 : 5): [ 1.170086913837898 -3.101545225871788 -inf ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 1.170086913837898 -3.101545225871788 -inf ]
div = 2.000


Sc (3 : 5): [ 0.5850434569189491 -1.550772612935894 -inf ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (784 interne); stringhe deallocate: 0 (159 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.5850434569189491 -1.550772612935894 -inf ]
val = -inf


g_indok (2 : 5): [ 1 2 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 0 0 0
 ]
riga = 2
g_indok (2 : 5): [ 1 2 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 1 1 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 5): [ 1 2 3 ]
g_indok (2 : 5): [ 1 2 ]
3108: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i



g_indInf (1 : 5): [ 3 ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.5850434569189491 -1.550772612935894 -inf ]
g_indok (2 : 5): [ 1 2 ]


g_tmp_d1 (2 : 5): [ 0.5850434569189491 -1.550772612935894 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (2 : 5): [ 0.5850434569189491 -1.550772612935894 ]


min = -1.550772612935894
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.5850434569189491 -1.550772612935894 -inf ]
g_indInf (1 : 5): [ 3 ]
val = -2.550772612935894


Sc (3 : 5): [ 0.5850434569189491 -1.550772612935894 -2.550772612935894 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0.5850434569189491 -1.550772612935894 -2.550772612935894
	 0 0 0
 ]
riga = 2
Sc (3 : 5): [ 0.5850434569189491 -1.550772612935894 -2.550772612935894 ]


ris (2 x 3 : 2 x 5): [
	 0.5850434569189491 -1.550772612935894 -2.550772612935894
	 0.5850434569189491 -1.550772612935894 -2.550772612935894
 ]
------------------------------ Fine aggiungi_mv_riga_d

134: somma_m_d	<=>	ris <- sum(m)
ris (2 x 3 : 2 x 5): [
	 0.5850434569189491 -1.550772612935894 -2.550772612935894
	 0.5850434569189491 -1.550772612935894 -2.550772612935894
 ]


ris: -7.033003537905678
------------------------------ Fine somma_m_d

137: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 1 1 0
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 1 1 0
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 1 1 0
 ]
------------------------------ Fine assegna1_mindxlt_i

139: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 1 1 0
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 1 1 0
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 1 1 0
 ]
------------------------------ Fine assegna1_m_indxgt_i

141: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 1 1 0
 ]


g_aus (3 : 5): [ 2 2 0 ]
------------------------------ Fine somma_colonne_i

143: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (3 : 5): [ 2 2 0 ]
val = 0


g_tmp_i1 (2 : 5): [ 1 2 ]
------------------------------ Fine which_v_indxne_i

153: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 1 1 0
 ]


g_rs (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

155: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 2 2 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 1 1 0
 ]
r = 1
val = 0


g_I_add (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 3): [ ]
g_I_add (2 : 10): [ 1 2 ]
3022: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 0
	 1 1 0
 ]
r = 2
val = 0


g_I_add (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 2 ]
g_I_add (2 : 10): [ 1 2 ]
3022: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i


Stringhe allocate: 2 (804 interne); stringhe deallocate: 0 (179 interne)


*** Esco da probmod_und ***

340: vettore3s_d		<=>	ris <- c(el1, el2, el3)
el1 = nan, el2 = -7.138558414255781, el3 = -3.516501768952839


g_pm (3 : 3): [ nan -7.138558414255781 -3.516501768952839 ]
------------------------------ Fine vettore3s_d

341: copia_v_d	<=>	ris[st:end] <- v[st:end]
g_pm (3 : 3): [ nan -7.138558414255781 -3.516501768952839 ]
st = 1
end = 3


g_prob_mod (3 : 3): [ nan -7.138558414255781 -3.516501768952839 ]
------------------------------ Fine copia_v_d

343: assegna1_v_indxNA_d	<=>	v1[which(is.na(v2))] <- val oppure v1[which(!is.na(v2))] <- val
g_prob_mod (3 : 3): [ nan -7.138558414255781 -3.516501768952839 ]
g_prob_mod (3 : 3): [ nan -7.138558414255781 -3.516501768952839 ]
val = 0
complemento = 0


g_prob_mod (3 : 3): [ 0 -7.138558414255781 -3.516501768952839 ]
------------------------------ Fine assegna1_v_indxNA_d

345: min_v_d	<=>	ris <- min(v)
g_prob_mod (3 : 3): [ 0 -7.138558414255781 -3.516501768952839 ]


min = -7.138558414255781
------------------------------ Fine min_v_d

348: somma1_vs_d	<=>	v <- v + s
g_prob_mod (3 : 3): [ 0 -7.138558414255781 -3.516501768952839 ]
s = 7.249669525366891


g_prob_mod (3 : 3): [ 7.249669525366891 0.1111111111111107 3.733167756414052 ]
------------------------------ Fine somma1_vs_d

350: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_pm (3 : 3): [ nan -7.138558414255781 -3.516501768952839 ]
complemento = 0


g_tmp1_i (1 : 11): [ 1 ]
------------------------------ Fine which_v_indxNA_d

351: assegna1_v_indx_d	<=>	v[indx] <- val
g_prob_mod (3 : 3): [ 7.249669525366891 0.1111111111111107 3.733167756414052 ]
g_tmp1_i (1 : 11): [ 1 ]
val = 0


g_prob_mod (3 : 3): [ 0 0.1111111111111107 3.733167756414052 ]
------------------------------ Fine assegna1_v_indx_d

353: which_v_indxne_d	<=>	ris <- which(v != val)
g_prob_mod (3 : 3): [ 0 0.1111111111111107 3.733167756414052 ]
val = 0


g_ind (2 : 3): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

357: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_prob_mod (3 : 3): [ 0 0.1111111111111107 3.733167756414052 ]
canc_NA = 0



ris: 3.844278867525163
------------------------------ Fine somma_v_d

357: dividi1_vs_d	<=>	v <- v / div
g_prob_mod (3 : 3): [ 0 0.1111111111111107 3.733167756414052 ]
div = 3.844


g_prob_mod (3 : 3): [ 0 0.02890297893051679 0.9710970210694833 ]
------------------------------ Fine dividi1_vs_d

359: vettore3s_i		<=>	ris <- c(el1, el2, el3)
el1 = 1, el2 = 2, el3 = 3


g_tmp1_i (3 : 11): [ 1 2 3 ]
------------------------------ Fine vettore3s_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (3 : 11): [ 1 2 3 ]
k = 1, replace = 0
g_prob_mod (3 : 3): [ 0 0.02890297893051679 0.9710970210694833 ]


ris (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 2 (804 interne); stringhe deallocate: 0 (179 interne)

378: copia_m_i	<=>	ris <- da
g_mod3 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_M (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine copia_m_i

379: copia_m_d	<=>	ris <- da
ris (2 x 3 : 2 x 5): [
	 0.5850434569189491 -1.550772612935894 -2.550772612935894
	 0.5850434569189491 -1.550772612935894 -2.550772612935894
 ]


g_Sc (2 x 3 : 2 x 5): [
	 0.5850434569189491 -1.550772612935894 -2.550772612935894
	 0.5850434569189491 -1.550772612935894 -2.550772612935894
 ]
------------------------------ Fine copia_m_d

380: copia_v_i	<=>	ris[st:end] <- v[st:end]
VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]
st = 1
end = 2


g_hubs (2 : 4): [ 1 2 ]
------------------------------ Fine copia_v_i

394: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0 ]
canc_NA = 0



ris: 0.6666666666666666
------------------------------ Fine somma_v_d

394: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0 0 0 0.3333333333333333 0.3333333333333333 0 0 ]
div = 0.667


g_ppp (7 : 7): [ 0 0 0 0.5 0.5 0 0 ]
------------------------------ Fine dividi1_vs_d


***sampleB***

***sample***
g_hubs (2 : 4): [ 1 2 ]
k = 1, replace = 0


g_hubs (1 : 4): [ 2 ]
*****************************************


Stringhe allocate: 2 (804 interne); stringhe deallocate: 0 (179 interne)


Stringhe allocate: 2 (804 interne); stringhe deallocate: 0 (179 interne)

672: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (3 : 5): [ 1 5 3 ]
st = 1
end = 3


g_h1 (3 : 5): [ 1 5 3 ]
------------------------------ Fine copia_v_i


***assign_nodes_und***
44: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (3 : 5): [ 1 5 3 ]
st = 1
end = 3


g_or_h (3 : 5): [ 1 5 3 ]
------------------------------ Fine copia_v_i

46: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_aus_h (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

52: InitVett_i
g_index (2 : 2): [ 3 2 ]
val = 0


g_index (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_i

54: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_M (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_M_out (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

56: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_M_out (2 : 2): [ 1 1 ]
decr = 1


g_Ord (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

61: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 3 : 2 x 5): [
	 0.5850434569189491 -1.550772612935894 -2.550772612935894
	 0.5850434569189491 -1.550772612935894 -2.550772612935894
 ]
r = 1

g_p (3 : 5): [ 0.5850434569189491 -1.550772612935894 -2.550772612935894 ]
------------------------------ Fine riga_d

63: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (3 : 5): [ 0.5850434569189491 -1.550772612935894 -2.550772612935894 ]
val = 0


g_tmp_i (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxle_d

66: min_v_d	<=>	ris <- min(v)
g_p (3 : 5): [ 0.5850434569189491 -1.550772612935894 -2.550772612935894 ]


min = -2.550772612935894
------------------------------ Fine min_v_d

67: somma1_vs_d	<=>	v <- v + s
g_p (3 : 5): [ 0.5850434569189491 -1.550772612935894 -2.550772612935894 ]
s = 2.661883724047005


g_p (3 : 5): [ 3.246927180965954 1.111111111111111 0.1111111111111112 ]
------------------------------ Fine somma1_vs_d

70: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 1 1 1 2 ]
g_h1 (3 : 5): [ 1 5 3 ]


g_Sout_h (3 : 5): [ 0 2 1 ]
------------------------------ Fine assegna_v_indxNA_i

75: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sout_h (3 : 5): [ 0 2 1 ]
val = 4


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

81: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (3 : 5): [ 3.246927180965954 1.111111111111111 0.1111111111111112 ]
g_aus_h (3 : 5): [ 1 2 3 ]


g_tmp_d (3 : 5): [ 3.246927180965954 1.111111111111111 0.1111111111111112 ]
------------------------------ Fine assegna_v_indxNA_d

82: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (3 : 5): [ 3.246927180965954 1.111111111111111 0.1111111111111112 ]
canc_NA = 0



ris: 4.469149403188176
------------------------------ Fine somma_v_d

83: dividi_vs_d	ris <- v / div
g_tmp_d (3 : 5): [ 3.246927180965954 1.111111111111111 0.1111111111111112 ]
div = 4.469


g_p (3 : 5): [ 0.7265201692853857 0.2486180279223767 0.02486180279223768 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (3 : 5): [ 1 5 3 ]
k = 1, replace = 0
g_p (3 : 5): [ 0.7265201692853857 0.2486180279223767 0.02486180279223768 ]


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 2 (804 interne); stringhe deallocate: 0 (179 interne)

90: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (3 : 5): [ 1 5 3 ]
ris (1 : 1): [ 1 ]
2065: esiste_v_i	<=>	elem %IN% v
elem = 1
g_h1 (3 : 5): [ 1 5 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2067: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (3 : 5): [ 1 5 3 ]
indx = 1


g_h1 (2 : 5): [ 5 3 ]
------------------------------ Fine elimina1_indx_i



g_h1 (2 : 5): [ 5 3 ]
------------------------------ Fine setdiff1_i

92: which_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (3 : 5): [ 1 5 3 ]
ris (1 : 1): [ 1 ]
2034: esiste_v_i	<=>	elem %IN% v
elem = 1
g_or_h (3 : 5): [ 1 5 3 ]


indx = 1
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 1 ]
------------------------------ Fine which_vv_eq_i

93: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (3 : 5): [ 1 2 3 ]
g_tmp_i (1 : 5): [ 1 ]
2065: esiste_v_i	<=>	elem %IN% v
elem = 1
g_aus_h (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2067: elimina1_indx_i	<=>	v <- v[-indx]
g_aus_h (3 : 5): [ 1 2 3 ]
indx = 1


g_aus_h (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i



g_aus_h (2 : 5): [ 2 3 ]
------------------------------ Fine setdiff1_i

61: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 3 : 2 x 5): [
	 0.5850434569189491 -1.550772612935894 -2.550772612935894
	 0.5850434569189491 -1.550772612935894 -2.550772612935894
 ]
r = 2

g_p (3 : 5): [ 0.5850434569189491 -1.550772612935894 -2.550772612935894 ]
------------------------------ Fine riga_d

63: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (3 : 5): [ 0.5850434569189491 -1.550772612935894 -2.550772612935894 ]
val = 0


g_tmp_i (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxle_d

66: min_v_d	<=>	ris <- min(v)
g_p (3 : 5): [ 0.5850434569189491 -1.550772612935894 -2.550772612935894 ]


min = -2.550772612935894
------------------------------ Fine min_v_d

67: somma1_vs_d	<=>	v <- v + s
g_p (3 : 5): [ 0.5850434569189491 -1.550772612935894 -2.550772612935894 ]
s = 2.661883724047005


g_p (3 : 5): [ 3.246927180965954 1.111111111111111 0.1111111111111112 ]
------------------------------ Fine somma1_vs_d

70: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 1 1 1 2 ]
g_h1 (2 : 5): [ 5 3 ]


g_Sout_h (2 : 5): [ 2 1 ]
------------------------------ Fine assegna_v_indxNA_i

75: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sout_h (2 : 5): [ 2 1 ]
val = 4


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

81: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (3 : 5): [ 3.246927180965954 1.111111111111111 0.1111111111111112 ]
g_aus_h (2 : 5): [ 2 3 ]


g_tmp_d (2 : 5): [ 1.111111111111111 0.1111111111111112 ]
------------------------------ Fine assegna_v_indxNA_d

82: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (2 : 5): [ 1.111111111111111 0.1111111111111112 ]
canc_NA = 0



ris: 1.222222222222222
------------------------------ Fine somma_v_d

83: dividi_vs_d	ris <- v / div
g_tmp_d (2 : 5): [ 1.111111111111111 0.1111111111111112 ]
div = 1.222


g_p (2 : 5): [ 0.9090909090909091 0.09090909090909094 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (2 : 5): [ 5 3 ]
k = 1, replace = 0
g_p (2 : 5): [ 0.9090909090909091 0.09090909090909094 ]


ris (1 : 1): [ 5 ]
*****************************************


Stringhe allocate: 2 (804 interne); stringhe deallocate: 0 (179 interne)

90: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (2 : 5): [ 5 3 ]
ris (1 : 1): [ 5 ]
2065: esiste_v_i	<=>	elem %IN% v
elem = 5
g_h1 (2 : 5): [ 5 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2067: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (2 : 5): [ 5 3 ]
indx = 1


g_h1 (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i



g_h1 (1 : 5): [ 3 ]
------------------------------ Fine setdiff1_i

92: which_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (3 : 5): [ 1 5 3 ]
ris (1 : 1): [ 5 ]
2034: esiste_v_i	<=>	elem %IN% v
elem = 5
g_or_h (3 : 5): [ 1 5 3 ]


indx = 2
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 5 ]
------------------------------ Fine which_vv_eq_i

93: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (2 : 5): [ 2 3 ]
g_tmp_i (1 : 5): [ 5 ]
2065: esiste_v_i	<=>	elem %IN% v
elem = 5
g_aus_h (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i



g_aus_h (2 : 5): [ 2 3 ]
------------------------------ Fine setdiff1_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 1
val = 1


g_ind (1 : 5): [ 2 ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 1 5 ]
g_ind (1 : 5): [ 2 ]


g_co (1 : 4): [ 5 ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
g_ri (1 : 1): [ 1 ]
g_co (1 : 4): [ 5 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 1
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
------------------------------ Fine assegna1_m_vv_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 1
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 0 0 0 1 1
 ]
g_co (1 : 4): [ 5 ]
g_ri (1 : 1): [ 1 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 1
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 1
g_hubs (1 : 4): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 2
val = 1


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 1 5 ]
g_ind (1 : 5): [ 1 ]


g_co (1 : 4): [ 1 ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 1
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
g_ri (1 : 1): [ 5 ]
g_co (1 : 4): [ 1 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 1
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
------------------------------ Fine assegna1_m_vv_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 1
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
g_co (1 : 4): [ 1 ]
g_ri (1 : 1): [ 5 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 1
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 2
g_hubs (1 : 4): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

111: accoda1_vv_i	<=>	v1 <- c(v1, v2)
ris (0 : 1): [ ]
g_ri (1 : 1): [ 5 ]


ris (1 : 1): [ 5 ]
------------------------------ Fine accoda_vv_i


Stringhe allocate: 2 (804 interne); stringhe deallocate: 0 (179 interne)

680: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_h (3 : 5): [ 1 5 3 ]
g_h1 (1 : 5): [ 3 ]
3108: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (3 : 5): [ 1 5 3 ]
st = 1
end = 3


g_tmp1_i (3 : 11): [ 1 5 3 ]
------------------------------ Fine copia_v_i

3110: esiste_v_i	<=>	elem %IN% v
elem = 3
g_tmp1_i (3 : 11): [ 1 5 3 ]


indx = 3
------------------------------ Fine esiste_v_i

3112: elimina1_indx_i	<=>	v <- v[-indx]
g_tmp1_i (3 : 11): [ 1 5 3 ]
indx = 3


g_tmp1_i (2 : 11): [ 1 5 ]
------------------------------ Fine elimina1_indx_i



g_tmp1_i (2 : 11): [ 1 5 ]
------------------------------ Fine setdiff_i

681: incr1_v_indx_i	<=>	v[indx] <- v[indx] + s
g_LG (5 : 5): [ -1 0 0 0 0 ]
g_tmp1_i (2 : 11): [ 1 5 ]
val = 1


g_LG (5 : 5): [ 0 0 0 0 1 ]
------------------------------ Fine incr1_v_indx_i

685: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (1 : 5): [ 3 ]
st = 1
end = 1


g_h (1 : 5): [ 3 ]
------------------------------ Fine copia_v_i

687: accoda1_vv_i	<=>	v1 <- c(v1, v2)
g_h_new (0 : 2): [ ]
ris (1 : 1): [ 5 ]


g_h_new (1 : 2): [ 5 ]
------------------------------ Fine accoda_vv_i

689: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 1
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]


g_Sout (5 : 5): [ 1 1 1 1 3 ]
------------------------------ Fine somma_colonne_i

691: max_v_i		<=>	ris <- max(v)
g_Sout (5 : 5): [ 1 1 1 1 3 ]


max = 3
------------------------------ Fine max_v_i

693: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 4
incr = 1


g_tmp2_i (5 : 13): [ 0 1 2 3 4 ]
------------------------------ Fine seq_i


*** hist1 ***
g_Sout (5 : 5): [ 1 1 1 1 3 ]
g_tmp2_i (5 : 13): [ 0 1 2 3 4 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
g_tmp1_i (4 : 11): [ 1 5 3 4 ]
val = 0


g_tmp1_i (4 : 11): [ 0 0 0 0 ]
------------------------------ Fine InitVett_i



g_tmp1_i (4 : 11): [ 0 4 0 1 ]

Stringhe allocate: 2 (804 interne); stringhe deallocate: 0 (179 interne)

695: promuovi_i	(implicita)
g_tmp1_i (4 : 11): [ 0 4 0 1 ]
ATTENZIONE (promuovi_i, linea HMM_und.c # 695): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

g_tmp1_d (4 : 19): [ 0 4 0 1 ]
------------------------------ Fine promuovi_i

696: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
g_Freq_out (7 : 7): [ 1 3 1 0 0 0 0 ]
start = 1
end = 4
g_tmp1_d (4 : 19): [ 0 4 0 1 ]


g_Freq_out (7 : 7): [ 0 4 0 1 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

709: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h_new (1 : 2): [ 5 ]
st = 1
end = 1


g_h (1 : 5): [ 5 ]
------------------------------ Fine copia_v_i

714: copia_v_indx_i	<=>	ris <- v[indx]
g_Sout (5 : 5): [ 1 1 1 1 3 ]
g_h (1 : 5): [ 5 ]


g_tmp2_i (1 : 13): [ 3 ]
------------------------------ Fine copia_v_indx_i

715: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp2_i (1 : 13): [ 3 ]
val = 5


g_tmp1_i (1 : 11): [ 1 ]
------------------------------ Fine which_v_indxne_i

716: copia_v_indx_i	<=>	ris <- v[indx]
g_h (1 : 5): [ 5 ]
g_tmp1_i (1 : 11): [ 1 ]


g_h (1 : 5): [ 5 ]
------------------------------ Fine copia_v_indx_i


***check_conn***
32: trasponi_i	<=>	ris <- t(m)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 1
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]


g_Mt (5 x 5 : 5 x 5): [
	 0 0 0 0 1
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
------------------------------ Fine trasponi_i

33: somma_mm_i	<=>	ris <- m1 + m2
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 1
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
g_Mt (5 x 5 : 5 x 5): [
	 0 0 0 0 1
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]


g_Maus (5 x 5 : 5 x 5): [
	 0 0 0 0 2
	 0 0 2 0 0
	 0 2 0 0 0
	 0 0 0 0 2
	 2 0 0 2 2
 ]
------------------------------ Fine somma_mm_i

35: which_m_indxne_i	<=>	ris <- which(m!=val)
g_Maus (5 x 5 : 5 x 5): [
	 0 0 0 0 2
	 0 0 2 0 0
	 0 2 0 0 0
	 0 0 0 0 2
	 2 0 0 2 2
 ]
val = 0


g_ind (7 : 25): [ 5 8 12 20 21 24 25 ]
------------------------------ Fine which_m_indxne_i

38: assegna1_ms_indx_i	<=>	m[indx] = val
g_Maus (5 x 5 : 5 x 5): [
	 0 0 0 0 2
	 0 0 2 0 0
	 0 2 0 0 0
	 0 0 0 0 2
	 2 0 0 2 2
 ]
g_ind (7 : 25): [ 5 8 12 20 21 24 25 ]
val = 1


g_Maus (5 x 5 : 5 x 5): [
	 0 0 0 0 1
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

42: InitVett_i
g_tmp_i (4 : 4): [ 2425208 2425208 0 0 ]
val = 0


g_tmp_i (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_i

44: vettore2v_i		<=>	ris <- c(v1, v2)
g_scalare_i (1 : 1): [ 1 ]
g_tmp_i (4 : 4): [ 0 0 0 0 ]


g_colore (5 : 5): [ 1 0 0 0 0 ]
------------------------------ Fine vettore2v_i

47: InitVett_d
g_tmp1_d (4 : 4): [ 5.842414621812633e-308 0 0 0 ]
val = inf


g_tmp1_d (4 : 4): [ inf inf inf inf ]
------------------------------ Fine InitVett_d

49: vettore2v_d		<=>	ris <- c(v1, v2)
g_scalare_d (1 : 1): [ 0 ]
g_tmp1_d (4 : 4): [ inf inf inf inf ]


ris (5 : 5): [ 0 inf inf inf inf ]
------------------------------ Fine vettore2v_d

54: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_Maus (5 x 5 : 5 x 5): [
	 0 0 0 0 1
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
r = 1
val = 0


g_adj (1 : 25): [ 5 ]
------------------------------ Fine which_m_rowindxne_i

63: accoda1_vs_i	<=>	v <- c(v, s)
g_grigi (1 : 1): [ 1 ]
s: 5
ATTENZIONE (accoda1_vs_i, linea check_conn.c # 63): ingrandito il vettore da 1 a 2


g_grigi (2 : 4): [ 1 5 ]
------------------------------ Fine accoda1_vs_i

70: segmento1_v_i	<=>	v <- v[st:end]
g_grigi (2 : 4): [ 1 5 ]
start = 2
end = 2


g_grigi (1 : 4): [ 5 ]
------------------------------ Fine segmento1_v_i

54: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_Maus (5 x 5 : 5 x 5): [
	 0 0 0 0 1
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
r = 5
val = 0


g_adj (3 : 25): [ 1 4 5 ]
------------------------------ Fine which_m_rowindxne_i

63: accoda1_vs_i	<=>	v <- c(v, s)
g_grigi (1 : 4): [ 5 ]
s: 4


g_grigi (2 : 4): [ 5 4 ]
------------------------------ Fine accoda1_vs_i

70: segmento1_v_i	<=>	v <- v[st:end]
g_grigi (2 : 4): [ 5 4 ]
start = 2
end = 2


g_grigi (1 : 4): [ 4 ]
------------------------------ Fine segmento1_v_i

54: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_Maus (5 x 5 : 5 x 5): [
	 0 0 0 0 1
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
r = 4
val = 0


g_adj (1 : 25): [ 5 ]
------------------------------ Fine which_m_rowindxne_i


Stringhe allocate: 2 (866 interne); stringhe deallocate: 0 (186 interne)


*** Esco da check_conn ***

781: which_v_indxeq_d	<=>	ris <- which(v==val)
ris (5 : 5): [ 0 inf inf 2 1 ]
val = inf


g_non_connessi (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxeq_d


*** connetti_scalefree ***
58: copia_v_d	<=>	ris[st:end] <- v[st:end]
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
st = 1
end = 7


g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine copia_v_d

60: which_v_indxeq_d	<=>	ris <- which(v==val)
ris (5 : 5): [ 0 inf inf 2 1 ]
val = inf


g_non_connessi (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxeq_d

62: which_v_indxne_d	<=>	ris <- which(v != val)
ris (5 : 5): [ 0 inf inf 2 1 ]
val = inf


g_connessi (3 : 5): [ 1 4 5 ]
------------------------------ Fine which_v_indxne_d

66: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 1
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]


g_Sout (5 : 5): [ 1 1 1 1 3 ]
------------------------------ Fine somma_colonne_i

68: max_v_i		<=>	ris <- max(v)
g_Sout (5 : 5): [ 1 1 1 1 3 ]


max = 3
------------------------------ Fine max_v_i

70: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 4
incr = 1


g_tmp1_i (5 : 5): [ 0 1 2 3 4 ]
------------------------------ Fine seq_i


*** hist1 ***
g_Sout (5 : 5): [ 1 1 1 1 3 ]
g_tmp1_i (5 : 5): [ 0 1 2 3 4 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
ris (4 : 4): [ 2425208 2425208 0 0 ]
val = 0


ris (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_i



ris (4 : 4): [ 0 4 0 1 ]

Stringhe allocate: 2 (901 interne); stringhe deallocate: 0 (186 interne)

72: promuovi_i	(implicita)
ris (4 : 4): [ 0 4 0 1 ]
ATTENZIONE (promuovi_i, linea connetti_scalefree.c # 72): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

g_Freq_out (4 : 4): [ 0 4 0 1 ]
------------------------------ Fine promuovi_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_Sout (5 : 5): [ 1 1 1 1 3 ]
s = 1


g_S_new (5 : 5): [ 2 2 2 2 4 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_Sout (5 : 5): [ 1 1 1 1 3 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 4 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 4 ]


g_T1 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 0.3224199317354524 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 4 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 5 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 5 ]


g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.1712208549059974 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_Sout (5 : 5): [ 1 1 1 1 3 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 4 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (4 : 4): [ 0 4 0 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 4 ]


g_old1 (5 : 5): [ 4 4 4 4 1 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 4 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 5 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (4 : 4): [ 0 4 0 1 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 5 ]
ATTENZIONE (assegna_vindxNA_d, linea scoremodular.c # 58): assegnato NA per via di un elemento specificato alla posizione 5 che e` al di fuori dei limiti dell'array (4)!


g_old2 (5 : 5): [ 0 0 0 0 nan ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 4 4 4 4 1 ]
s = -1


g_new1 (5 : 5): [ 3 3 3 3 0 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 nan ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 nan ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_Sout (5 : 5): [ 1 1 1 1 3 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 4 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 4 ]


g_toll1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 4 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 5 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 5 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 4 4 4 4 1 ]
g_T1 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 0.3224199317354524 ]


g_a (5 : 5): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.6775800682645476 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.6775800682645476 ]


g_a (5 : 5): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.6775800682645476 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 3 3 3 3 0 ]
g_T1 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 0.3224199317354524 ]


g_b (5 : 5): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 -0.3224199317354524 ]


g_b (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.3224199317354524 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T1 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 0.3224199317354524 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.6775800682645476 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.6775800682645476 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.3224199317354524 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.3224199317354524 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.6775800682645476 ]
g_b (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.3224199317354524 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 0.3851636393958149 0.6148363606041851
	 0.3851636393958149 0.6148363606041851
	 0.3851636393958149 0.6148363606041851
	 0.3851636393958149 0.6148363606041851
	 0.6775800682645476 0.3224199317354524
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 0.3851636393958149 0.6148363606041851
	 0.3851636393958149 0.6148363606041851
	 0.3851636393958149 0.6148363606041851
	 0.3851636393958149 0.6148363606041851
	 0.6775800682645476 0.3224199317354524
 ]


g_m (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6775800682645476 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.6775800682645476 ]
g_b (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.3224199317354524 ]
g_m (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6775800682645476 ]
g_T1 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 0.3224199317354524 ]


g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.6775800682645476 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 -0.3224199317354524 ]
val = 0

g_ind1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.3224199317354524 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.3851636393958149 -0.3851636393958149 -0.3851636393958149 -0.3851636393958149 -0.6775800682645476 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ -0.3851636393958149 -0.3851636393958149 -0.3851636393958149 -0.3851636393958149 -0.6775800682645476 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (5 : 5): [ 1 2 3 4 5 ]
g_ind2 (0 : 5): [ ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 4
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 5
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 3): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
g_indinf (0 : 3): [ ]
val = -inf


g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.6775800682645476 ]
g_b (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.3224199317354524 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.6775800682645476 ]
g_b (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.3224199317354524 ]
g_m (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6775800682645476 ]


g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 nan ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.1712208549059974 ]


g_a (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 nan ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 nan ]


g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 nan ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.1712208549059974 ]


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 nan ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 nan ]


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 nan ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.1712208549059974 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 nan ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 nan ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 nan ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 nan nan
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 nan nan
 ]


g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 nan ]
g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.1712208549059974 ]


g_S2 (5 : 5): [ 1 1 1 1 nan ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 nan ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 nan ]
val = 0

g_ind1 (4 : 5): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 nan ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 nan ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 nan ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (4 : 5): [ 1 2 3 4 ]
g_ind2 (0 : 5): [ ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 4
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 3): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 nan ]
g_indinf (0 : 3): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 nan ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 nan ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 nan ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S2 (5 : 5): [ 1 1 1 1 nan ]
complemento = 0


g_ind (1 : 5): [ 5 ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 nan ]
g_ind (1 : 5): [ 5 ]
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 nan ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 nan ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 nan ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 nan ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 nan ]
g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]


g_S2 (5 : 5): [ 1 1 1 1 nan ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
g_S2 (5 : 5): [ 1 1 1 1 nan ]


Sc (5 : 5): [ 0.8299130861621019 0.8299130861621019 0.8299130861621019 0.8299130861621019 nan ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 0.8299130861621019 0.8299130861621019 0.8299130861621019 0.8299130861621019 nan ]
div = 2.000


Sc (5 : 5): [ 0.414956543081051 0.414956543081051 0.414956543081051 0.414956543081051 nan ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (913 interne); stringhe deallocate: 0 (188 interne)


*** Esco da scoremodular ***

78: which_v_indxeq_i	<=>	ris <- which(v==val)
g_Sout (5 : 5): [ 1 1 1 1 3 ]
val = 5


g_tmp1_i (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_i

79: assegna1_v_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 0.414956543081051 0.414956543081051 0.414956543081051 0.414956543081051 nan ]
g_tmp1_i (0 : 5): [ ]
val = -inf


Sc (5 : 5): [ 0.414956543081051 0.414956543081051 0.414956543081051 0.414956543081051 nan ]
------------------------------ Fine assegna1_v_indx_d

82: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 1
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]


g_Sin (5 : 5): [ 1 1 1 1 3 ]
------------------------------ Fine somma_righe_i

84: max_v_i		<=>	ris <- max(v)
g_Sin (5 : 5): [ 1 1 1 1 3 ]


max = 3
------------------------------ Fine max_v_i

86: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 4
incr = 1


g_tmp1_i (5 : 5): [ 0 1 2 3 4 ]
------------------------------ Fine seq_i


*** hist1 ***
g_Sin (5 : 5): [ 1 1 1 1 3 ]
g_tmp1_i (5 : 5): [ 0 1 2 3 4 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
ris (4 : 4): [ 2425896 2425896 0 0 ]
val = 0


ris (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_i



ris (4 : 4): [ 0 4 0 1 ]

Stringhe allocate: 2 (923 interne); stringhe deallocate: 0 (188 interne)

88: promuovi_i	(implicita)
ris (4 : 4): [ 0 4 0 1 ]
ATTENZIONE (promuovi_i, linea connetti_scalefree.c # 88): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

g_Freq_in (4 : 4): [ 0 4 0 1 ]
------------------------------ Fine promuovi_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_Sin (5 : 5): [ 1 1 1 1 3 ]
s = 1


g_S_new (5 : 5): [ 2 2 2 2 4 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_Sin (5 : 5): [ 1 1 1 1 3 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 4 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 4 ]


g_T1 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 0.3224199317354524 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 4 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 5 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 5 ]


g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.1712208549059974 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_Sin (5 : 5): [ 1 1 1 1 3 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 4 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (4 : 4): [ 0 4 0 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 4 ]


g_old1 (5 : 5): [ 4 4 4 4 1 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 4 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 5 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_in (4 : 4): [ 0 4 0 1 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 5 ]
ATTENZIONE (assegna_vindxNA_d, linea scoremodular.c # 58): assegnato NA per via di un elemento specificato alla posizione 5 che e` al di fuori dei limiti dell'array (4)!


g_old2 (5 : 5): [ 0 0 0 0 nan ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 4 4 4 4 1 ]
s = -1


g_new1 (5 : 5): [ 3 3 3 3 0 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 nan ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 nan ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_Sin (5 : 5): [ 1 1 1 1 3 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 4 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 4 ]


g_toll1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 4 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 5 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 5 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 4 4 4 4 1 ]
g_T1 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 0.3224199317354524 ]


g_a (5 : 5): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.6775800682645476 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.6775800682645476 ]


g_a (5 : 5): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.6775800682645476 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 3 3 3 3 0 ]
g_T1 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 0.3224199317354524 ]


g_b (5 : 5): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 -0.3224199317354524 ]


g_b (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.3224199317354524 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T1 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 0.3224199317354524 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.6775800682645476 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.6775800682645476 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.3224199317354524 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.3224199317354524 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.6775800682645476 ]
g_b (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.3224199317354524 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 0.3851636393958149 0.6148363606041851
	 0.3851636393958149 0.6148363606041851
	 0.3851636393958149 0.6148363606041851
	 0.3851636393958149 0.6148363606041851
	 0.6775800682645476 0.3224199317354524
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 0.3851636393958149 0.6148363606041851
	 0.3851636393958149 0.6148363606041851
	 0.3851636393958149 0.6148363606041851
	 0.3851636393958149 0.6148363606041851
	 0.6775800682645476 0.3224199317354524
 ]


g_m (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6775800682645476 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.6775800682645476 ]
g_b (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.3224199317354524 ]
g_m (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6775800682645476 ]
g_T1 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 0.3224199317354524 ]


g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.6775800682645476 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 -0.3224199317354524 ]
val = 0

g_ind1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.3224199317354524 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.3851636393958149 -0.3851636393958149 -0.3851636393958149 -0.3851636393958149 -0.6775800682645476 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ -0.3851636393958149 -0.3851636393958149 -0.3851636393958149 -0.3851636393958149 -0.6775800682645476 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (5 : 5): [ 1 2 3 4 5 ]
g_ind2 (0 : 5): [ ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 4
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 5
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 3): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
g_indinf (0 : 3): [ ]
val = -inf


g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.6775800682645476 ]
g_b (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.3224199317354524 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.3851636393958149 0.6775800682645476 ]
g_b (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.3224199317354524 ]
g_m (5 : 5): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6775800682645476 ]


g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 nan ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.1712208549059974 ]


g_a (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 nan ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 nan ]


g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 nan ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.1712208549059974 ]


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 nan ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 nan ]


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 nan ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.1712208549059974 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 nan ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 nan ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 nan ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 nan nan
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 nan nan
 ]


g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 nan ]
g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]
g_T2 (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.1712208549059974 ]


g_S2 (5 : 5): [ 1 1 1 1 nan ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 nan ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 nan ]
val = 0

g_ind1 (4 : 5): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 nan ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 nan ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 nan ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (4 : 5): [ 1 2 3 4 ]
g_ind2 (0 : 5): [ ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 4
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 3): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 nan ]
g_indinf (0 : 3): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 nan ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 nan ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 nan ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is.na(v)) oppure which(!is.na(v))
g_S2 (5 : 5): [ 1 1 1 1 nan ]
complemento = 0


g_ind (1 : 5): [ 5 ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 nan ]
g_ind (1 : 5): [ 5 ]
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 nan ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 nan ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 nan ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 nan ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]
g_b (5 : 5): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 nan ]
g_m (5 : 5): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 nan ]


g_S2 (5 : 5): [ 1 1 1 1 nan ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 -0.1700869138378981 2.101545225871788 ]
g_S2 (5 : 5): [ 1 1 1 1 nan ]


Sc (5 : 5): [ 0.8299130861621019 0.8299130861621019 0.8299130861621019 0.8299130861621019 nan ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 0.8299130861621019 0.8299130861621019 0.8299130861621019 0.8299130861621019 nan ]
div = 2.000


Sc (5 : 5): [ 0.414956543081051 0.414956543081051 0.414956543081051 0.414956543081051 nan ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (935 interne); stringhe deallocate: 0 (190 interne)


*** Esco da scoremodular ***

92: which_v_indxeq_i	<=>	ris <- which(v==val)
g_Sin (5 : 5): [ 1 1 1 1 3 ]
val = 5


g_tmp1_i (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_i

93: assegna1_v_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 0.414956543081051 0.414956543081051 0.414956543081051 0.414956543081051 nan ]
g_tmp1_i (0 : 5): [ ]
val = -inf


Sc (5 : 5): [ 0.414956543081051 0.414956543081051 0.414956543081051 0.414956543081051 nan ]
------------------------------ Fine assegna1_v_indx_d

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 0.414956543081051 0.414956543081051 0.414956543081051 0.414956543081051 nan ]
val = -inf


g_tmp2_i (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

96: interseca_i	<=>	ris <- intersect(v1, v2)
g_connessi (3 : 5): [ 1 4 5 ]
g_tmp2_i (5 : 5): [ 1 2 3 4 5 ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 1
g_tmp2_i (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 1
g_co_in (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 4
g_tmp2_i (5 : 5): [ 1 2 3 4 5 ]


indx = 4
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 4
g_co_in (1 : 3): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 5
g_tmp2_i (5 : 5): [ 1 2 3 4 5 ]


indx = 5
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 5
g_co_in (2 : 3): [ 1 4 ]


indx = 0
------------------------------ Fine esiste_v_i



g_co_in (3 : 3): [ 1 4 5 ]
------------------------------ Fine interseca_i

98: interseca_i	<=>	ris <- intersect(v1, v2)
g_non_connessi (2 : 5): [ 2 3 ]
g_tmp2_i (5 : 5): [ 1 2 3 4 5 ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_tmp2_i (5 : 5): [ 1 2 3 4 5 ]


indx = 2
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_nonco_in (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_tmp2_i (5 : 5): [ 1 2 3 4 5 ]


indx = 3
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_nonco_in (1 : 2): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i



g_nonco_in (2 : 2): [ 2 3 ]
------------------------------ Fine interseca_i

100: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 0.414956543081051 0.414956543081051 0.414956543081051 0.414956543081051 nan ]
val = -inf


g_tmp1_i (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

101: interseca_i	<=>	ris <- intersect(v1, v2)
g_connessi (3 : 5): [ 1 4 5 ]
g_tmp1_i (5 : 5): [ 1 2 3 4 5 ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 1
g_tmp1_i (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 1
g_co_out (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 4
g_tmp1_i (5 : 5): [ 1 2 3 4 5 ]


indx = 4
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 4
g_co_out (1 : 3): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 5
g_tmp1_i (5 : 5): [ 1 2 3 4 5 ]


indx = 5
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 5
g_co_out (2 : 3): [ 1 4 ]


indx = 0
------------------------------ Fine esiste_v_i



g_co_out (3 : 3): [ 1 4 5 ]
------------------------------ Fine interseca_i

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_non_connessi (2 : 5): [ 2 3 ]
g_tmp1_i (5 : 5): [ 1 2 3 4 5 ]
2478: esiste_v_i	<=>	elem %IN% v
elem = 2
g_tmp1_i (5 : 5): [ 1 2 3 4 5 ]


indx = 2
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 2
g_nonco_out (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2478: esiste_v_i	<=>	elem %IN% v
elem = 3
g_tmp1_i (5 : 5): [ 1 2 3 4 5 ]


indx = 3
------------------------------ Fine esiste_v_i

2479: esiste_v_i	<=>	elem %IN% v
elem = 3
g_nonco_out (1 : 2): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i



g_nonco_out (2 : 2): [ 2 3 ]
------------------------------ Fine interseca_i

130: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 0.414956543081051 0.414956543081051 0.414956543081051 0.414956543081051 nan ]
g_nonco_in (2 : 2): [ 2 3 ]


g_Sc1_in (2 : 2): [ 0.414956543081051 0.414956543081051 ]
------------------------------ Fine copia_v_indx_d

132: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 0.414956543081051 0.414956543081051 0.414956543081051 0.414956543081051 nan ]
g_co_out (3 : 3): [ 1 4 5 ]


g_Sc1_out (3 : 3): [ 0.414956543081051 0.414956543081051 nan ]
------------------------------ Fine copia_v_indx_d

134: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 0.414956543081051 0.414956543081051 0.414956543081051 0.414956543081051 nan ]
g_co_in (3 : 3): [ 1 4 5 ]


g_Sc2_in (3 : 3): [ 0.414956543081051 0.414956543081051 nan ]
------------------------------ Fine copia_v_indx_d

136: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 0.414956543081051 0.414956543081051 0.414956543081051 0.414956543081051 nan ]
g_nonco_out (2 : 2): [ 2 3 ]


g_Sc2_out (2 : 2): [ 0.414956543081051 0.414956543081051 ]
------------------------------ Fine copia_v_indx_d

140: media_v_d	<=>	ris <- mean(v)
g_Sc1_in (2 : 2): [ 0.414956543081051 0.414956543081051 ]


media = 0.415
------------------------------ Fine media_v_d

140: media_v_d	<=>	ris <- mean(v)
g_Sc1_out (3 : 3): [ 0.414956543081051 0.414956543081051 nan ]


media = nan
------------------------------ Fine media_v_d

142: media_v_d	<=>	ris <- mean(v)
g_Sc2_in (3 : 3): [ 0.414956543081051 0.414956543081051 nan ]


media = nan
------------------------------ Fine media_v_d

142: media_v_d	<=>	ris <- mean(v)
g_Sc2_out (2 : 2): [ 0.414956543081051 0.414956543081051 ]


media = 0.415
------------------------------ Fine media_v_d

144: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = nan, el2 = nan


g_p (2 : 2): [ nan nan ]
------------------------------ Fine vettore2s_d

146: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (2 : 2): [ nan nan ]
val = 0


g_tmp1_i (0 : 5): [ ]
------------------------------ Fine which_v_indxle_d

151: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_p (2 : 2): [ nan nan ]
canc_NA = 0



ris: nan
------------------------------ Fine somma_v_d

151: dividi1_vs_d	<=>	v <- v / div
g_p (2 : 2): [ nan nan ]
div = nan


g_p (2 : 2): [ nan nan ]
------------------------------ Fine dividi1_vs_d

153: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 2


g_tmp1_i (2 : 5): [ 1 2 ]
------------------------------ Fine vettore2s_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (2 : 5): [ 1 2 ]
k = 1, replace = 0
g_p (2 : 2): [ nan nan ]


g_tmp2_i (1 : 5): [ 2 ]
*****************************************


Stringhe allocate: 2 (985 interne); stringhe deallocate: 0 (190 interne)

161: which_v_indxle_d	<=>	ris <- which(v<=val)
g_Sc2_in (3 : 3): [ 0.414956543081051 0.414956543081051 nan ]
val = 0


g_tmp1_i (0 : 5): [ ]
------------------------------ Fine which_v_indxle_d

165: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_Sc2_in (3 : 3): [ 0.414956543081051 0.414956543081051 nan ]
canc_NA = 0



ris: nan
------------------------------ Fine somma_v_d

165: dividi_vs_d	ris <- v / div
g_Sc2_in (3 : 3): [ 0.414956543081051 0.414956543081051 nan ]
div = nan


g_p_in (3 : 3): [ nan nan nan ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_co_in (3 : 3): [ 1 4 5 ]
k = 1, replace = 0
g_p_in (3 : 3): [ nan nan nan ]


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 2 (995 interne); stringhe deallocate: 0 (190 interne)

169: which_v_indxle_d	<=>	ris <- which(v<=val)
g_Sc2_out (2 : 2): [ 0.414956543081051 0.414956543081051 ]
val = 0


g_tmp1_i (0 : 5): [ ]
------------------------------ Fine which_v_indxle_d

173: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_Sc2_out (2 : 2): [ 0.414956543081051 0.414956543081051 ]
canc_NA = 0



ris: 0.8299130861621019
------------------------------ Fine somma_v_d

173: dividi_vs_d	ris <- v / div
g_Sc2_out (2 : 2): [ 0.414956543081051 0.414956543081051 ]
div = 0.830


g_p_out (2 : 2): [ 0.5 0.5 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_nonco_out (2 : 2): [ 2 3 ]
k = 1, replace = 0
g_p_out (2 : 2): [ 0.5 0.5 ]


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 2 (1005 interne); stringhe deallocate: 0 (190 interne)

201: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 1
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
ris (1 : 1): [ 1 ]
ris (1 : 1): [ 2 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 1 0 0 1
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
------------------------------ Fine assegna1_m_vv_i

204: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 1 0 0 1
	 0 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
ris (1 : 1): [ 2 ]
ris (1 : 1): [ 1 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 1 0 0 1
	 1 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
------------------------------ Fine assegna1_m_vv_i


Stringhe allocate: 2 (1005 interne); stringhe deallocate: 0 (190 interne)


*** Esco da connetti_scalefree ***


***check_conn***
32: trasponi_i	<=>	ris <- t(m)
ris (5 x 5 : 5 x 5): [
	 0 1 0 0 1
	 1 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]


g_Mt (5 x 5 : 5 x 5): [
	 0 1 0 0 1
	 1 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
------------------------------ Fine trasponi_i

33: somma_mm_i	<=>	ris <- m1 + m2
ris (5 x 5 : 5 x 5): [
	 0 1 0 0 1
	 1 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
g_Mt (5 x 5 : 5 x 5): [
	 0 1 0 0 1
	 1 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]


g_Maus (5 x 5 : 5 x 5): [
	 0 2 0 0 2
	 2 0 2 0 0
	 0 2 0 0 0
	 0 0 0 0 2
	 2 0 0 2 2
 ]
------------------------------ Fine somma_mm_i

35: which_m_indxne_i	<=>	ris <- which(m!=val)
g_Maus (5 x 5 : 5 x 5): [
	 0 2 0 0 2
	 2 0 2 0 0
	 0 2 0 0 0
	 0 0 0 0 2
	 2 0 0 2 2
 ]
val = 0


g_ind (9 : 25): [ 2 5 6 8 12 20 21 24 25 ]
------------------------------ Fine which_m_indxne_i

38: assegna1_ms_indx_i	<=>	m[indx] = val
g_Maus (5 x 5 : 5 x 5): [
	 0 2 0 0 2
	 2 0 2 0 0
	 0 2 0 0 0
	 0 0 0 0 2
	 2 0 0 2 2
 ]
g_ind (9 : 25): [ 2 5 6 8 12 20 21 24 25 ]
val = 1


g_Maus (5 x 5 : 5 x 5): [
	 0 1 0 0 1
	 1 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

42: InitVett_i
g_tmp_i (4 : 4): [ 0 0 0 0 ]
val = 0


g_tmp_i (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_i

44: vettore2v_i		<=>	ris <- c(v1, v2)
g_scalare_i (1 : 1): [ 1 ]
g_tmp_i (4 : 4): [ 0 0 0 0 ]


g_colore (5 : 5): [ 1 0 0 0 0 ]
------------------------------ Fine vettore2v_i

47: InitVett_d
g_tmp1_d (4 : 4): [ inf inf inf inf ]
val = inf


g_tmp1_d (4 : 4): [ inf inf inf inf ]
------------------------------ Fine InitVett_d

49: vettore2v_d		<=>	ris <- c(v1, v2)
g_scalare_d (1 : 1): [ 0 ]
g_tmp1_d (4 : 4): [ inf inf inf inf ]


ris (5 : 5): [ 0 inf inf inf inf ]
------------------------------ Fine vettore2v_d

54: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_Maus (5 x 5 : 5 x 5): [
	 0 1 0 0 1
	 1 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
r = 1
val = 0


g_adj (2 : 25): [ 2 5 ]
------------------------------ Fine which_m_rowindxne_i

63: accoda1_vs_i	<=>	v <- c(v, s)
g_grigi (1 : 4): [ 1 ]
s: 2


g_grigi (2 : 4): [ 1 2 ]
------------------------------ Fine accoda1_vs_i

63: accoda1_vs_i	<=>	v <- c(v, s)
g_grigi (2 : 4): [ 1 2 ]
s: 5


g_grigi (3 : 4): [ 1 2 5 ]
------------------------------ Fine accoda1_vs_i

70: segmento1_v_i	<=>	v <- v[st:end]
g_grigi (3 : 4): [ 1 2 5 ]
start = 2
end = 3


g_grigi (2 : 4): [ 2 5 ]
------------------------------ Fine segmento1_v_i

54: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_Maus (5 x 5 : 5 x 5): [
	 0 1 0 0 1
	 1 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
r = 2
val = 0


g_adj (2 : 25): [ 1 3 ]
------------------------------ Fine which_m_rowindxne_i

63: accoda1_vs_i	<=>	v <- c(v, s)
g_grigi (2 : 4): [ 2 5 ]
s: 3


g_grigi (3 : 4): [ 2 5 3 ]
------------------------------ Fine accoda1_vs_i

70: segmento1_v_i	<=>	v <- v[st:end]
g_grigi (3 : 4): [ 2 5 3 ]
start = 2
end = 3


g_grigi (2 : 4): [ 5 3 ]
------------------------------ Fine segmento1_v_i

54: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_Maus (5 x 5 : 5 x 5): [
	 0 1 0 0 1
	 1 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
r = 5
val = 0


g_adj (3 : 25): [ 1 4 5 ]
------------------------------ Fine which_m_rowindxne_i

63: accoda1_vs_i	<=>	v <- c(v, s)
g_grigi (2 : 4): [ 5 3 ]
s: 4


g_grigi (3 : 4): [ 5 3 4 ]
------------------------------ Fine accoda1_vs_i

70: segmento1_v_i	<=>	v <- v[st:end]
g_grigi (3 : 4): [ 5 3 4 ]
start = 2
end = 3


g_grigi (2 : 4): [ 3 4 ]
------------------------------ Fine segmento1_v_i

54: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_Maus (5 x 5 : 5 x 5): [
	 0 1 0 0 1
	 1 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
r = 3
val = 0


g_adj (1 : 25): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

70: segmento1_v_i	<=>	v <- v[st:end]
g_grigi (2 : 4): [ 3 4 ]
start = 2
end = 2


g_grigi (1 : 4): [ 4 ]
------------------------------ Fine segmento1_v_i

54: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_Maus (5 x 5 : 5 x 5): [
	 0 1 0 0 1
	 1 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]
r = 4
val = 0


g_adj (1 : 25): [ 5 ]
------------------------------ Fine which_m_rowindxne_i


Stringhe allocate: 2 (1005 interne); stringhe deallocate: 0 (190 interne)


*** Esco da check_conn ***

791: which_v_indxeq_d	<=>	ris <- which(v==val)
ris (5 : 5): [ 0 1 2 2 1 ]
val = inf


g_non_connessi (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d


*** write_m_i ***
ris (5 x 5 : 5 x 5): [
	 0 1 0 0 1
	 1 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]

Stringhe allocate: 2 (1005 interne); stringhe deallocate: 0 (190 interne)

809: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp1_i (5 : 11): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

810: cbind2v_i	<=>	ris <- cbind(v1, v2)
g_tmp1_i (5 : 11): [ 1 2 3 4 5 ]
g_LG (5 : 5): [ 0 0 0 0 1 ]


g_tmpm_i (5 x 2 : 5 x 2): [
	 1 0
	 2 0
	 3 0
	 4 0
	 5 1
 ]
------------------------------ Fine cbind2v_i


*** write_m_i ***
g_tmpm_i (5 x 2 : 5 x 2): [
	 1 0
	 2 0
	 3 0
	 4 0
	 5 1
 ]

Stringhe allocate: 2 (1010 interne); stringhe deallocate: 0 (190 interne)


Stringhe allocate: 2 (1010 interne); stringhe deallocate: 0 (190 interne)


*** Esco da HMM1_und ***
Trasformo la matrice
ris (5 x 5 : 5 x 5): [
	 0 1 0 0 1
	 1 0 1 0 0
	 0 1 0 0 0
	 0 0 0 0 1
	 1 0 0 1 1
 ]

Stringhe allocate: 2 (1010 interne); stringhe deallocate: 0 (1010 interne)

