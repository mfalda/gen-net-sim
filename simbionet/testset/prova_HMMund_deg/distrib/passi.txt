
*** createMOD ***

*** createMOD1 ***

*** read_m_i ***
114: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (0 : 0): [ ]
s: 2
ATTENZIONE (accoda1_vs_i, linea /home/marco/hmm/read_table.c # 114): ingrandito il vettore da 0 a 1


tmp_i (1 : 2): [ 2 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (1 : 2): [ 2 ]
s: 3


tmp_i (2 : 2): [ 2 3 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (2 : 2): [ 2 3 ]
s: 5
ATTENZIONE (accoda1_vs_i, linea /home/marco/hmm/read_table.c # 118): ingrandito il vettore da 2 a 3


tmp_i (3 : 6): [ 2 3 5 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (3 : 6): [ 2 3 5 ]
s: 6


tmp_i (4 : 6): [ 2 3 5 6 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (4 : 6): [ 2 3 5 6 ]
s: 7


tmp_i (5 : 6): [ 2 3 5 6 7 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (5 : 6): [ 2 3 5 6 7 ]
s: 11


tmp_i (6 : 6): [ 2 3 5 6 7 11 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (6 : 6): [ 2 3 5 6 7 11 ]
s: 15
ATTENZIONE (accoda1_vs_i, linea /home/marco/hmm/read_table.c # 118): ingrandito il vettore da 6 a 7


tmp_i (7 : 14): [ 2 3 5 6 7 11 15 ]
------------------------------ Fine accoda1_vs_i

114: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (7 : 14): [ 2 3 5 6 7 11 15 ]
s: 0


tmp_i (8 : 14): [ 2 3 5 6 7 11 15 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (8 : 14): [ 2 3 5 6 7 11 15 0 ]
s: 0


tmp_i (9 : 14): [ 2 3 5 6 7 11 15 0 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (9 : 14): [ 2 3 5 6 7 11 15 0 0 ]
s: 0


tmp_i (10 : 14): [ 2 3 5 6 7 11 15 0 0 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (10 : 14): [ 2 3 5 6 7 11 15 0 0 0 ]
s: 0


tmp_i (11 : 14): [ 2 3 5 6 7 11 15 0 0 0 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (11 : 14): [ 2 3 5 6 7 11 15 0 0 0 0 ]
s: 0


tmp_i (12 : 14): [ 2 3 5 6 7 11 15 0 0 0 0 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (12 : 14): [ 2 3 5 6 7 11 15 0 0 0 0 0 ]
s: 1


tmp_i (13 : 14): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (13 : 14): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 ]
s: 1


tmp_i (14 : 14): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 ]
------------------------------ Fine accoda1_vs_i

114: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (14 : 14): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 ]
s: 0
ATTENZIONE (accoda1_vs_i, linea /home/marco/hmm/read_table.c # 114): ingrandito il vettore da 14 a 15


tmp_i (15 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (15 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 ]
s: 0


tmp_i (16 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (16 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 ]
s: 1


tmp_i (17 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (17 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 ]
s: 1


tmp_i (18 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (18 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 ]
s: 1


tmp_i (19 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (19 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 ]
s: 0


tmp_i (20 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (20 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 ]
s: 1


tmp_i (21 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 ]
------------------------------ Fine accoda1_vs_i

114: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (21 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 ]
s: 1


tmp_i (22 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (22 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 ]
s: 1


tmp_i (23 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (23 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 ]
s: 0


tmp_i (24 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (24 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 ]
s: 1


tmp_i (25 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (25 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 ]
s: 1


tmp_i (26 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (26 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 ]
s: 1


tmp_i (27 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (27 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 ]
s: 1


tmp_i (28 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 ]
------------------------------ Fine accoda1_vs_i

114: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (28 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 ]
s: 0


tmp_i (29 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (29 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 ]
s: 1


tmp_i (30 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (30 : 30): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 ]
s: 1
ATTENZIONE (accoda1_vs_i, linea /home/marco/hmm/read_table.c # 118): ingrandito il vettore da 30 a 31


tmp_i (31 : 62): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (31 : 62): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 ]
s: 0


tmp_i (32 : 62): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 0 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (32 : 62): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 0 ]
s: 1


tmp_i (33 : 62): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 0 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (33 : 62): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 0 1 ]
s: 1


tmp_i (34 : 62): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 0 1 1 ]
------------------------------ Fine accoda1_vs_i

118: accoda1_vs_i	<=>	v <- c(v, s)
tmp_i (34 : 62): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 0 1 1 ]
s: 1


tmp_i (35 : 62): [ 2 3 5 6 7 11 15 0 0 0 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 0 1 1 1 ]
------------------------------ Fine accoda1_vs_i

ris (5 x 7 : 5 x 7): [
	 2 3 5 6 7 11 15
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]

Stringhe allocate: 2 (40 interne); stringhe deallocate: 0 (35 interne)

43: riga_i	<=>	ris <- m[r,]
ris (5 x 7 : 5 x 7): [
	 2 3 5 6 7 11 15
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]
r = 1

codes (7 : 7): [ 2 3 5 6 7 11 15 ]
------------------------------ Fine riga_i

45: elimina1_riga_i	<=>	m <- m[-riga,]
ris (5 x 7 : 5 x 7): [
	 2 3 5 6 7 11 15
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]
riga = 1


ris (4 x 7 : 5 x 7): [
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]
------------------------------ Fine elimina1_riga_i

51: colonna_i	<=>	ris <- m[,c]
ris (4 x 7 : 5 x 7): [
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]
c = 1

tmp1_i (4 : 4): [ 0 0 1 0 ]
------------------------------ Fine colonna_i

56: which_m_indxnsimm_i	<=>	ris <- which((m == t(m)) == 0)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


tmp2_i (2 : 4): [ 2 3 ]
------------------------------ Fine which_m_indxnsimm_i


***hubs***
28: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_S (2 : 2): [ 0 1 ]
------------------------------ Fine somma_colonne_i

30: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 0 1 ]


max = 1
------------------------------ Fine max_v_i

30: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 0 1 ]
val = 1


g_ind (1 : 2): [ 2 ]
------------------------------ Fine which_v_indxeq_i


*** pathlength ***
37: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
------------------------------ Fine copia_m_i

40: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
val = 0


g_tmp1_i (1 : 4): [ 3 ]
------------------------------ Fine which_m_indxne_i

41: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
g_tmp1_i (1 : 4): [ 3 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
------------------------------ Fine assegna1_ms_indx_i

44: InitMatr_d
ris (2 x 2 : 2 x 2): [
	 6.929526e-310 1.693686e+190
	 6.929526e-310 1.876801e-152
 ]
val = nan


ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
------------------------------ Fine InitMatr_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
c = 1, val = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine which_m_colindxne_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
colonna = 1
g_distanza (2 : 2): [ nan nan ]


ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
------------------------------ Fine assegna1_mv_colonna_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
c = 2, val = 0


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (1 : 4): [ 1 ]
val = 1


g_distanza (2 : 2): [ 1 nan ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 0): [ ]
g_neighbours (1 : 4): [ 1 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (1 : 1): [ 1 ]


g_visitati (1 : 1): [ 1 ]
------------------------------ Fine elimina_doppi_i



g_visitati (1 : 1): [ 1 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
c = 1, val = 0


g_tmp1_i (0 : 4): [ ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
g_new_neighbours (0 : 0): [ ]
g_tmp1_i (0 : 4): [ ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (0 : 0): [ ]


ris (0 : 0): [ ]
------------------------------ Fine elimina_doppi_i



ris (0 : 0): [ ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 0): [ ]
ris (0 : 0): [ ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (0 : 0): [ ]


ris (0 : 0): [ ]
------------------------------ Fine elimina_doppi_i



ris (0 : 0): [ ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (0 : 0): [ ]
g_visitati (1 : 1): [ 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



ris (0 : 0): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 0): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
colonna = 2
g_distanza (2 : 2): [ 1 nan ]


ris (2 x 2 : 2 x 2): [
	 nan 1
	 nan nan
 ]
------------------------------ Fine assegna1_mv_colonna_d

101: assegna1_m_indxNA_d	<=>	m1[which(is.na(m2))] # o suo complemento
ris (2 x 2 : 2 x 2): [
	 nan 1
	 nan nan
 ]
ris (2 x 2 : 2 x 2): [
	 nan 1
	 nan nan
 ]
val = inf
complemento = 0


ris (2 x 2 : 2 x 2): [
	 inf 1
	 inf inf
 ]
------------------------------ Fine assegna1_m_indxNA_d


Stringhe allocate: 2 (135 interne); stringhe deallocate: 0 (60 interne)


*** Esco da pathlength ***
34: diag_d	<=>	ris <- diag(m)
ris (2 x 2 : 2 x 2): [
	 inf 1
	 inf inf
 ]


g_tmp1_d (2 : 2): [ inf inf ]
------------------------------ Fine diag_d

35: min_v_d	<=>	ris <- min(v)
g_tmp1_d (2 : 2): [ inf inf ]


min = inf
------------------------------ Fine min_v_d

42: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (1 : 2): [ 2 ]
st = 1
end = 1


g_H (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

63: somma_righe_i	<=>	ris <- apply(m, 1, sum)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_tmp1_i (2 : 2): [ 1 0 ]
------------------------------ Fine somma_righe_i

64: somma1_vv_i	<=>	v1 <- v1 + v2
g_S (2 : 2): [ 0 1 ]
g_tmp1_i (2 : 2): [ 1 0 ]


g_S (2 : 2): [ 1 1 ]
------------------------------ Fine somma1_vv_i

66: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 1 1 ]


max = 1
------------------------------ Fine max_v_i

66: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 1 1 ]
val = 1


g_ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxeq_i

68: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (2 : 2): [ 1 2 ]
st = 1
end = 2


g_Hio (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i


Stringhe allocate: 2 (160 interne); stringhe deallocate: 0 (60 interne)


*** Esco da hubs ***


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 0
	 1 0
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 0
	 1 0
 ]
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
val = 0


g_ind (2 : 4): [ 2 3 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
g_ind (2 : 4): [ 2 3 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
val = 0


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (2 : 2): [ 6.929526e-310 6.929526e-310 ]
val = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 1


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 1
val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 2


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 2
val = 0


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (2 : 2): [ 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 2 (180 interne); stringhe deallocate: 0 (60 interne)


*** Esco da cluster_coeff2 ***
76: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


elem_ris->rete (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
------------------------------ Fine copia_m_i

79: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_H (1 : 1): [ 2 ]
st = 1
end = 1


elem_ris->hubs (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

85: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_Hio (2 : 2): [ 1 2 ]
st = 1
end = 2


elem_ris->hubsio (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

51: colonna_i	<=>	ris <- m[,c]
ris (4 x 7 : 5 x 7): [
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]
c = 2

tmp1_i (4 : 4): [ 0 0 1 1 ]
------------------------------ Fine colonna_i

56: which_m_indxnsimm_i	<=>	ris <- which((m == t(m)) == 0)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


tmp2_i (2 : 4): [ 2 3 ]
------------------------------ Fine which_m_indxnsimm_i


***hubs***
28: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_S (2 : 2): [ 0 2 ]
------------------------------ Fine somma_colonne_i

30: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 0 2 ]


max = 2
------------------------------ Fine max_v_i

30: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 0 2 ]
val = 2


g_ind (1 : 2): [ 2 ]
------------------------------ Fine which_v_indxeq_i


*** pathlength ***
37: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
------------------------------ Fine copia_m_i

40: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
val = 0


g_tmp1_i (2 : 4): [ 3 4 ]
------------------------------ Fine which_m_indxne_i

41: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
g_tmp1_i (2 : 4): [ 3 4 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
------------------------------ Fine assegna1_ms_indx_i

44: InitMatr_d
ris (2 x 2 : 2 x 2): [
	 inf 1
	 inf inf
 ]
val = nan


ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
------------------------------ Fine InitMatr_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
c = 1, val = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine which_m_colindxne_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
colonna = 1
g_distanza (2 : 2): [ nan nan ]


ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
------------------------------ Fine assegna1_mv_colonna_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
c = 2, val = 0


g_neighbours (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (2 : 4): [ 1 2 ]
val = 1


g_distanza (2 : 2): [ 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 1): [ ]
g_neighbours (2 : 4): [ 1 2 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (2 : 2): [ 1 2 ]


g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
c = 1, val = 0


g_tmp1_i (0 : 4): [ ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 0): [ ]
g_tmp1_i (0 : 4): [ ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (0 : 0): [ ]


ris (0 : 0): [ ]
------------------------------ Fine elimina_doppi_i



ris (0 : 0): [ ]
------------------------------ Fine unione1_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
c = 2, val = 0


g_tmp1_i (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 0): [ ]
g_tmp1_i (2 : 4): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 2 ]
ris (2 : 2): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (2 : 4): [ 1 2 ]
g_visitati (2 : 4): [ 1 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (2 : 4): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (2 : 4): [ 1 2 ]
indx = 1


ris (1 : 4): [ 2 ]
------------------------------ Fine elimina1_indx_i

2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (1 : 4): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 4): [ 2 ]
indx = 1


ris (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



ris (0 : 4): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 4): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
colonna = 2
g_distanza (2 : 2): [ 1 1 ]


ris (2 x 2 : 2 x 2): [
	 nan 1
	 nan 1
 ]
------------------------------ Fine assegna1_mv_colonna_d

101: assegna1_m_indxNA_d	<=>	m1[which(is.na(m2))] # o suo complemento
ris (2 x 2 : 2 x 2): [
	 nan 1
	 nan 1
 ]
ris (2 x 2 : 2 x 2): [
	 nan 1
	 nan 1
 ]
val = inf
complemento = 0


ris (2 x 2 : 2 x 2): [
	 inf 1
	 inf 1
 ]
------------------------------ Fine assegna1_m_indxNA_d


Stringhe allocate: 2 (230 interne); stringhe deallocate: 0 (95 interne)


*** Esco da pathlength ***
34: diag_d	<=>	ris <- diag(m)
ris (2 x 2 : 2 x 2): [
	 inf 1
	 inf 1
 ]


g_tmp1_d (2 : 2): [ inf 1 ]
------------------------------ Fine diag_d

35: min_v_d	<=>	ris <- min(v)
g_tmp1_d (2 : 2): [ inf 1 ]


min = 1
------------------------------ Fine min_v_d

42: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (1 : 2): [ 2 ]
st = 1
end = 1


g_H (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

63: somma_righe_i	<=>	ris <- apply(m, 1, sum)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_tmp1_i (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

64: somma1_vv_i	<=>	v1 <- v1 + v2
g_S (2 : 2): [ 0 2 ]
g_tmp1_i (2 : 2): [ 1 1 ]


g_S (2 : 2): [ 1 3 ]
------------------------------ Fine somma1_vv_i

66: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 1 3 ]


max = 3
------------------------------ Fine max_v_i

66: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 1 3 ]
val = 3


g_ind (1 : 2): [ 2 ]
------------------------------ Fine which_v_indxeq_i

68: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (1 : 2): [ 2 ]
st = 1
end = 1


g_Hio (1 : 2): [ 2 ]
------------------------------ Fine copia_v_i


Stringhe allocate: 2 (230 interne); stringhe deallocate: 0 (95 interne)


*** Esco da hubs ***


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 2
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 2
 ]
val = 0


g_ind (3 : 4): [ 2 3 4 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 2
 ]
g_ind (3 : 4): [ 2 3 4 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
val = 0


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (2 : 2): [ 0 0 ]
val = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 1


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 1
val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 2


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 2
val = 0


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (2 : 2): [ 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 2 (230 interne); stringhe deallocate: 0 (95 interne)


*** Esco da cluster_coeff2 ***
76: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


elem_ris->rete (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
------------------------------ Fine copia_m_i

79: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_H (1 : 1): [ 2 ]
st = 1
end = 1


elem_ris->hubs (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

85: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_Hio (1 : 2): [ 2 ]
st = 1
end = 1


elem_ris->hubsio (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

51: colonna_i	<=>	ris <- m[,c]
ris (4 x 7 : 5 x 7): [
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]
c = 3

tmp1_i (4 : 4): [ 0 1 0 1 ]
------------------------------ Fine colonna_i

56: which_m_indxnsimm_i	<=>	ris <- which((m == t(m)) == 0)
mod (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


tmp2_i (2 : 4): [ 2 3 ]
------------------------------ Fine which_m_indxnsimm_i


***hubs***
28: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
mod (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_S (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

30: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 1 1 ]


max = 1
------------------------------ Fine max_v_i

30: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 1 1 ]
val = 1


g_ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxeq_i


*** pathlength ***
37: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
------------------------------ Fine copia_m_i

40: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
val = 0


g_tmp1_i (2 : 4): [ 2 4 ]
------------------------------ Fine which_m_indxne_i

41: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
g_tmp1_i (2 : 4): [ 2 4 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

44: InitMatr_d
ris (2 x 2 : 2 x 2): [
	 inf 1
	 inf 1
 ]
val = nan


ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
------------------------------ Fine InitMatr_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
c = 1, val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (1 : 4): [ 2 ]
val = 1


g_distanza (2 : 2): [ nan 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 4): [ ]
g_neighbours (1 : 4): [ 2 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (1 : 1): [ 2 ]


g_visitati (1 : 4): [ 2 ]
------------------------------ Fine elimina_doppi_i



g_visitati (1 : 4): [ 2 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
c = 2, val = 0


g_tmp1_i (1 : 4): [ 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 4): [ ]
g_tmp1_i (1 : 4): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (1 : 1): [ 2 ]


ris (1 : 1): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 2 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 2 ]
ris (1 : 1): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 2 2 ]


ris (1 : 2): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 2): [ 2 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (1 : 2): [ 2 ]
g_visitati (1 : 4): [ 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 2): [ 2 ]
indx = 1


ris (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



ris (0 : 2): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 2): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
colonna = 1
g_distanza (2 : 2): [ nan 1 ]


ris (2 x 2 : 2 x 2): [
	 nan nan
	 1 nan
 ]
------------------------------ Fine assegna1_mv_colonna_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
c = 2, val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (1 : 4): [ 2 ]
val = 1


g_distanza (2 : 2): [ nan 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 4): [ ]
g_neighbours (1 : 4): [ 2 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (1 : 1): [ 2 ]


g_visitati (1 : 4): [ 2 ]
------------------------------ Fine elimina_doppi_i



g_visitati (1 : 4): [ 2 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
c = 2, val = 0


g_tmp1_i (1 : 4): [ 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 2): [ ]
g_tmp1_i (1 : 4): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (1 : 1): [ 2 ]


ris (1 : 1): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 2 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 2 ]
ris (1 : 1): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 2 2 ]


ris (1 : 2): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 2): [ 2 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (1 : 2): [ 2 ]
g_visitati (1 : 4): [ 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 2): [ 2 ]
indx = 1


ris (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



ris (0 : 2): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 2): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 nan nan
	 1 nan
 ]
colonna = 2
g_distanza (2 : 2): [ nan 1 ]


ris (2 x 2 : 2 x 2): [
	 nan nan
	 1 1
 ]
------------------------------ Fine assegna1_mv_colonna_d

101: assegna1_m_indxNA_d	<=>	m1[which(is.na(m2))] # o suo complemento
ris (2 x 2 : 2 x 2): [
	 nan nan
	 1 1
 ]
ris (2 x 2 : 2 x 2): [
	 nan nan
	 1 1
 ]
val = inf
complemento = 0


ris (2 x 2 : 2 x 2): [
	 inf inf
	 1 1
 ]
------------------------------ Fine assegna1_m_indxNA_d


Stringhe allocate: 2 (295 interne); stringhe deallocate: 0 (145 interne)


*** Esco da pathlength ***
34: diag_d	<=>	ris <- diag(m)
ris (2 x 2 : 2 x 2): [
	 inf inf
	 1 1
 ]


g_tmp1_d (2 : 2): [ inf 1 ]
------------------------------ Fine diag_d

35: min_v_d	<=>	ris <- min(v)
g_tmp1_d (2 : 2): [ inf 1 ]


min = 1
------------------------------ Fine min_v_d

46: assegna1_s_diag_d	<=>	diag_d(m) <- s
ris (2 x 2 : 2 x 2): [
	 inf inf
	 1 1
 ]
val = 0


ris (2 x 2 : 2 x 2): [
	 0 inf
	 1 0
 ]
------------------------------ Fine assegna1_s_diag_d

48: somma_colonne_d	<=>	ris <- apply(m, 2, sum)
ris (2 x 2 : 2 x 2): [
	 0 inf
	 1 0
 ]


g_tmp1_d (2 : 2): [ 1 inf ]
------------------------------ Fine somma_colonne_d

49: copia_v_indx_d	<=>	ris <- v[indx]
g_tmp1_d (2 : 2): [ 1 inf ]
g_ind (2 : 2): [ 1 2 ]


g_P (2 : 2): [ 1 inf ]
------------------------------ Fine copia_v_indx_d

51: min_v_d	<=>	ris <- min(v)
g_P (2 : 2): [ 1 inf ]


min = 1
------------------------------ Fine min_v_d

52: min_v_d	<=>	ris <- min(v)
g_P (2 : 2): [ 1 inf ]


min = 1
------------------------------ Fine min_v_d

52: which_v_indxeq_d	<=>	ris <- which(v==val)
g_P (2 : 2): [ 1 inf ]
val = 1


g_ind2 (1 : 2): [ 1 ]
------------------------------ Fine which_v_indxeq_d

53: copia_v_indx_i	<=>	ris <- v[indx]
g_ind (2 : 2): [ 1 2 ]
g_ind2 (1 : 2): [ 1 ]


g_H (1 : 1): [ 1 ]
------------------------------ Fine copia_v_indx_i

63: somma_righe_i	<=>	ris <- apply(m, 1, sum)
mod (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_tmp1_i (2 : 2): [ 0 2 ]
------------------------------ Fine somma_righe_i

64: somma1_vv_i	<=>	v1 <- v1 + v2
g_S (2 : 2): [ 1 1 ]
g_tmp1_i (2 : 2): [ 0 2 ]


g_S (2 : 2): [ 1 3 ]
------------------------------ Fine somma1_vv_i

66: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 1 3 ]


max = 3
------------------------------ Fine max_v_i

66: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 1 3 ]
val = 3


g_ind (1 : 2): [ 2 ]
------------------------------ Fine which_v_indxeq_i

68: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (1 : 2): [ 2 ]
st = 1
end = 1


g_Hio (1 : 2): [ 2 ]
------------------------------ Fine copia_v_i


Stringhe allocate: 2 (305 interne); stringhe deallocate: 0 (145 interne)


*** Esco da hubs ***


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
mod (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
mod (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 2
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 2
 ]
val = 0


g_ind (3 : 4): [ 2 3 4 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 2
 ]
g_ind (3 : 4): [ 2 3 4 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
val = 0


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (2 : 2): [ 0 0 ]
val = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 1


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 1
val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 2


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 2
val = 0


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (2 : 2): [ 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 2 (305 interne); stringhe deallocate: 0 (145 interne)


*** Esco da cluster_coeff2 ***
76: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


elem_ris->rete (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
------------------------------ Fine copia_m_i

79: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_H (1 : 1): [ 1 ]
st = 1
end = 1


elem_ris->hubs (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

85: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_Hio (1 : 2): [ 2 ]
st = 1
end = 1


elem_ris->hubsio (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

51: colonna_i	<=>	ris <- m[,c]
ris (4 x 7 : 5 x 7): [
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]
c = 4

tmp1_i (4 : 4): [ 0 1 1 0 ]
------------------------------ Fine colonna_i

56: which_m_indxnsimm_i	<=>	ris <- which((m == t(m)) == 0)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


tmp2_i (0 : 4): [ ]
------------------------------ Fine which_m_indxnsimm_i


***hubs***
28: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_S (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

30: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 1 1 ]


max = 1
------------------------------ Fine max_v_i

30: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 1 1 ]
val = 1


g_ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxeq_i


*** pathlength ***
37: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine copia_m_i

40: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
val = 0


g_tmp1_i (2 : 4): [ 2 3 ]
------------------------------ Fine which_m_indxne_i

41: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
g_tmp1_i (2 : 4): [ 2 3 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_ms_indx_i

44: InitMatr_d
ris (2 x 2 : 2 x 2): [
	 0 inf
	 1 0
 ]
val = nan


ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
------------------------------ Fine InitMatr_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
c = 1, val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (1 : 4): [ 2 ]
val = 1


g_distanza (2 : 2): [ nan 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 4): [ ]
g_neighbours (1 : 4): [ 2 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (1 : 1): [ 2 ]


g_visitati (1 : 4): [ 2 ]
------------------------------ Fine elimina_doppi_i



g_visitati (1 : 4): [ 2 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
c = 2, val = 0


g_tmp1_i (1 : 4): [ 1 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 2): [ ]
g_tmp1_i (1 : 4): [ 1 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (1 : 1): [ 1 ]


ris (1 : 1): [ 1 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 1 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 1 ]
ris (1 : 1): [ 1 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 1 1 ]


ris (1 : 2): [ 1 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 2): [ 1 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (1 : 2): [ 1 ]
g_visitati (1 : 4): [ 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (1 : 2): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i



ris (1 : 2): [ 1 ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (1 : 2): [ 1 ]
st = 1
end = 1


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine copia_v_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan 1 ]
g_neighbours (1 : 4): [ 1 ]
val = 2


g_distanza (2 : 2): [ 2 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (1 : 4): [ 2 ]
g_neighbours (1 : 4): [ 1 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (2 : 2): [ 2 1 ]


g_visitati (2 : 4): [ 2 1 ]
------------------------------ Fine elimina_doppi_i



g_visitati (2 : 4): [ 2 1 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
c = 1, val = 0


g_tmp1_i (1 : 4): [ 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 2): [ ]
g_tmp1_i (1 : 4): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (1 : 1): [ 2 ]


ris (1 : 1): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 2 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 2 ]
ris (1 : 1): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 2 2 ]


ris (1 : 2): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 2): [ 2 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (1 : 2): [ 2 ]
g_visitati (2 : 4): [ 2 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 2): [ 2 ]
indx = 1


ris (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i

2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i



ris (0 : 2): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 2): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
colonna = 1
g_distanza (2 : 2): [ 2 1 ]


ris (2 x 2 : 2 x 2): [
	 2 nan
	 1 nan
 ]
------------------------------ Fine assegna1_mv_colonna_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
c = 2, val = 0


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (1 : 4): [ 1 ]
val = 1


g_distanza (2 : 2): [ 1 nan ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 4): [ ]
g_neighbours (1 : 4): [ 1 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (1 : 1): [ 1 ]


g_visitati (1 : 4): [ 1 ]
------------------------------ Fine elimina_doppi_i



g_visitati (1 : 4): [ 1 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
c = 1, val = 0


g_tmp1_i (1 : 4): [ 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 2): [ ]
g_tmp1_i (1 : 4): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (1 : 1): [ 2 ]


ris (1 : 1): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 2 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 2 ]
ris (1 : 1): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 2 2 ]


ris (1 : 2): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 2): [ 2 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (1 : 2): [ 2 ]
g_visitati (1 : 4): [ 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (1 : 2): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i



ris (1 : 2): [ 2 ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (1 : 2): [ 2 ]
st = 1
end = 1


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine copia_v_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ 1 nan ]
g_neighbours (1 : 4): [ 2 ]
val = 2


g_distanza (2 : 2): [ 1 2 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (1 : 4): [ 1 ]
g_neighbours (1 : 4): [ 2 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (2 : 2): [ 1 2 ]


g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
c = 2, val = 0


g_tmp1_i (1 : 4): [ 1 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 2): [ ]
g_tmp1_i (1 : 4): [ 1 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (1 : 1): [ 1 ]


ris (1 : 1): [ 1 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 1 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 1 ]
ris (1 : 1): [ 1 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 1 1 ]


ris (1 : 2): [ 1 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 2): [ 1 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (1 : 2): [ 1 ]
g_visitati (2 : 4): [ 1 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (1 : 2): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 2): [ 1 ]
indx = 1


ris (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i

2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i



ris (0 : 2): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 2): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 2 nan
	 1 nan
 ]
colonna = 2
g_distanza (2 : 2): [ 1 2 ]


ris (2 x 2 : 2 x 2): [
	 2 1
	 1 2
 ]
------------------------------ Fine assegna1_mv_colonna_d

101: assegna1_m_indxNA_d	<=>	m1[which(is.na(m2))] # o suo complemento
ris (2 x 2 : 2 x 2): [
	 2 1
	 1 2
 ]
ris (2 x 2 : 2 x 2): [
	 2 1
	 1 2
 ]
val = inf
complemento = 0


ris (2 x 2 : 2 x 2): [
	 2 1
	 1 2
 ]
------------------------------ Fine assegna1_m_indxNA_d


Stringhe allocate: 2 (420 interne); stringhe deallocate: 0 (245 interne)


*** Esco da pathlength ***
34: diag_d	<=>	ris <- diag(m)
ris (2 x 2 : 2 x 2): [
	 2 1
	 1 2
 ]


g_tmp1_d (2 : 2): [ 2 2 ]
------------------------------ Fine diag_d

35: min_v_d	<=>	ris <- min(v)
g_tmp1_d (2 : 2): [ 2 2 ]


min = 2
------------------------------ Fine min_v_d

46: assegna1_s_diag_d	<=>	diag_d(m) <- s
ris (2 x 2 : 2 x 2): [
	 2 1
	 1 2
 ]
val = 0


ris (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_s_diag_d

48: somma_colonne_d	<=>	ris <- apply(m, 2, sum)
ris (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_tmp1_d (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_d

49: copia_v_indx_d	<=>	ris <- v[indx]
g_tmp1_d (2 : 2): [ 1 1 ]
g_ind (2 : 2): [ 1 2 ]


g_P (2 : 2): [ 1 1 ]
------------------------------ Fine copia_v_indx_d

51: min_v_d	<=>	ris <- min(v)
g_P (2 : 2): [ 1 1 ]


min = 1
------------------------------ Fine min_v_d

52: min_v_d	<=>	ris <- min(v)
g_P (2 : 2): [ 1 1 ]


min = 1
------------------------------ Fine min_v_d

52: which_v_indxeq_d	<=>	ris <- which(v==val)
g_P (2 : 2): [ 1 1 ]
val = 1


g_ind2 (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxeq_d

53: copia_v_indx_i	<=>	ris <- v[indx]
g_ind (2 : 2): [ 1 2 ]
g_ind2 (2 : 2): [ 1 2 ]


g_H (2 : 4): [ 1 2 ]
------------------------------ Fine copia_v_indx_i

63: somma_righe_i	<=>	ris <- apply(m, 1, sum)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_tmp1_i (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

64: somma1_vv_i	<=>	v1 <- v1 + v2
g_S (2 : 2): [ 1 1 ]
g_tmp1_i (2 : 2): [ 1 1 ]


g_S (2 : 2): [ 2 2 ]
------------------------------ Fine somma1_vv_i

66: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 2 2 ]


max = 2
------------------------------ Fine max_v_i

66: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 2 2 ]
val = 2


g_ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxeq_i

68: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (2 : 2): [ 1 2 ]
st = 1
end = 2


g_Hio (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i


Stringhe allocate: 2 (420 interne); stringhe deallocate: 0 (245 interne)


*** Esco da hubs ***


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 2
	 2 0
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 2
	 2 0
 ]
val = 0


g_ind (2 : 4): [ 2 3 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 2
	 2 0
 ]
g_ind (2 : 4): [ 2 3 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
val = 0


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (2 : 2): [ 0 0 ]
val = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 1


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 1
val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 2


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 2
val = 0


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (2 : 2): [ 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 2 (420 interne); stringhe deallocate: 0 (245 interne)


*** Esco da cluster_coeff2 ***
76: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


elem_ris->rete (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine copia_m_i

79: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_H (2 : 4): [ 1 2 ]
st = 1
end = 2


elem_ris->hubs (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

85: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_Hio (2 : 2): [ 1 2 ]
st = 1
end = 2


elem_ris->hubsio (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

51: colonna_i	<=>	ris <- m[,c]
ris (4 x 7 : 5 x 7): [
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]
c = 5

tmp1_i (4 : 4): [ 0 1 1 1 ]
------------------------------ Fine colonna_i

56: which_m_indxnsimm_i	<=>	ris <- which((m == t(m)) == 0)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


tmp2_i (0 : 4): [ ]
------------------------------ Fine which_m_indxnsimm_i


***hubs***
28: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_S (2 : 2): [ 1 2 ]
------------------------------ Fine somma_colonne_i

30: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 1 2 ]


max = 2
------------------------------ Fine max_v_i

30: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 1 2 ]
val = 2


g_ind (1 : 2): [ 2 ]
------------------------------ Fine which_v_indxeq_i


*** pathlength ***
37: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine copia_m_i

40: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
val = 0


g_tmp1_i (3 : 4): [ 2 3 4 ]
------------------------------ Fine which_m_indxne_i

41: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
g_tmp1_i (3 : 4): [ 2 3 4 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

44: InitMatr_d
ris (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
val = nan


ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
------------------------------ Fine InitMatr_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
c = 1, val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (1 : 4): [ 2 ]
val = 1


g_distanza (2 : 2): [ nan 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 4): [ ]
g_neighbours (1 : 4): [ 2 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (1 : 1): [ 2 ]


g_visitati (1 : 4): [ 2 ]
------------------------------ Fine elimina_doppi_i



g_visitati (1 : 4): [ 2 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
c = 2, val = 0


g_tmp1_i (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 2): [ ]
g_tmp1_i (2 : 4): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 2 ]
ris (2 : 2): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (2 : 4): [ 1 2 ]
g_visitati (1 : 4): [ 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (2 : 4): [ 1 2 ]


indx = 2
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (2 : 4): [ 1 2 ]
indx = 2


ris (1 : 4): [ 1 ]
------------------------------ Fine elimina1_indx_i



ris (1 : 4): [ 1 ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (1 : 4): [ 1 ]
st = 1
end = 1


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine copia_v_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan 1 ]
g_neighbours (1 : 4): [ 1 ]
val = 2


g_distanza (2 : 2): [ 2 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (1 : 4): [ 2 ]
g_neighbours (1 : 4): [ 1 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (2 : 2): [ 2 1 ]


g_visitati (2 : 4): [ 2 1 ]
------------------------------ Fine elimina_doppi_i



g_visitati (2 : 4): [ 2 1 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
c = 1, val = 0


g_tmp1_i (1 : 4): [ 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 4): [ ]
g_tmp1_i (1 : 4): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (1 : 1): [ 2 ]


ris (1 : 1): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 2 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 2 ]
ris (1 : 1): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 2 2 ]


ris (1 : 2): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 2): [ 2 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (1 : 2): [ 2 ]
g_visitati (2 : 4): [ 2 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 2): [ 2 ]
indx = 1


ris (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i

2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i



ris (0 : 2): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 2): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
colonna = 1
g_distanza (2 : 2): [ 2 1 ]


ris (2 x 2 : 2 x 2): [
	 2 nan
	 1 nan
 ]
------------------------------ Fine assegna1_mv_colonna_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
c = 2, val = 0


g_neighbours (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (2 : 4): [ 1 2 ]
val = 1


g_distanza (2 : 2): [ 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 4): [ ]
g_neighbours (2 : 4): [ 1 2 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (2 : 2): [ 1 2 ]


g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
c = 1, val = 0


g_tmp1_i (1 : 4): [ 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 2): [ ]
g_tmp1_i (1 : 4): [ 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (1 : 1): [ 2 ]


ris (1 : 1): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 2 ]
------------------------------ Fine unione1_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
c = 2, val = 0


g_tmp1_i (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 2 ]
g_tmp1_i (2 : 4): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (3 : 3): [ 2 1 2 ]


ris (2 : 3): [ 2 1 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 3): [ 2 1 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 3): [ 2 1 ]
ris (2 : 3): [ 2 1 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (4 : 4): [ 2 1 2 1 ]


ris (2 : 4): [ 2 1 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 2 1 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (2 : 4): [ 2 1 ]
g_visitati (2 : 4): [ 1 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (2 : 4): [ 2 1 ]


indx = 2
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (2 : 4): [ 2 1 ]
indx = 2


ris (1 : 4): [ 2 ]
------------------------------ Fine elimina1_indx_i

2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (1 : 4): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 4): [ 2 ]
indx = 1


ris (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



ris (0 : 4): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 4): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 2 nan
	 1 nan
 ]
colonna = 2
g_distanza (2 : 2): [ 1 1 ]


ris (2 x 2 : 2 x 2): [
	 2 1
	 1 1
 ]
------------------------------ Fine assegna1_mv_colonna_d

101: assegna1_m_indxNA_d	<=>	m1[which(is.na(m2))] # o suo complemento
ris (2 x 2 : 2 x 2): [
	 2 1
	 1 1
 ]
ris (2 x 2 : 2 x 2): [
	 2 1
	 1 1
 ]
val = inf
complemento = 0


ris (2 x 2 : 2 x 2): [
	 2 1
	 1 1
 ]
------------------------------ Fine assegna1_m_indxNA_d


Stringhe allocate: 2 (520 interne); stringhe deallocate: 0 (330 interne)


*** Esco da pathlength ***
34: diag_d	<=>	ris <- diag(m)
ris (2 x 2 : 2 x 2): [
	 2 1
	 1 1
 ]


g_tmp1_d (2 : 2): [ 2 1 ]
------------------------------ Fine diag_d

35: min_v_d	<=>	ris <- min(v)
g_tmp1_d (2 : 2): [ 2 1 ]


min = 1
------------------------------ Fine min_v_d

42: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (1 : 2): [ 2 ]
st = 1
end = 1


g_H (1 : 4): [ 2 ]
------------------------------ Fine copia_v_i

63: somma_righe_i	<=>	ris <- apply(m, 1, sum)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_tmp1_i (2 : 2): [ 1 2 ]
------------------------------ Fine somma_righe_i

64: somma1_vv_i	<=>	v1 <- v1 + v2
g_S (2 : 2): [ 1 2 ]
g_tmp1_i (2 : 2): [ 1 2 ]


g_S (2 : 2): [ 2 4 ]
------------------------------ Fine somma1_vv_i

66: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 2 4 ]


max = 4
------------------------------ Fine max_v_i

66: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 2 4 ]
val = 4


g_ind (1 : 2): [ 2 ]
------------------------------ Fine which_v_indxeq_i

68: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (1 : 2): [ 2 ]
st = 1
end = 1


g_Hio (1 : 2): [ 2 ]
------------------------------ Fine copia_v_i


Stringhe allocate: 2 (520 interne); stringhe deallocate: 0 (330 interne)


*** Esco da hubs ***


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 2
	 2 2
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 2
	 2 2
 ]
val = 0


g_ind (3 : 4): [ 2 3 4 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 2
	 2 2
 ]
g_ind (3 : 4): [ 2 3 4 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
val = 0


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (2 : 2): [ 0 0 ]
val = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 1


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 1
val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 2


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 2
val = 0


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (2 : 2): [ 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 2 (520 interne); stringhe deallocate: 0 (330 interne)


*** Esco da cluster_coeff2 ***
76: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


elem_ris->rete (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine copia_m_i

79: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_H (1 : 4): [ 2 ]
st = 1
end = 1


elem_ris->hubs (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

85: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_Hio (1 : 2): [ 2 ]
st = 1
end = 1


elem_ris->hubsio (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

51: colonna_i	<=>	ris <- m[,c]
ris (4 x 7 : 5 x 7): [
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]
c = 6

tmp1_i (4 : 4): [ 1 0 1 1 ]
------------------------------ Fine colonna_i

56: which_m_indxnsimm_i	<=>	ris <- which((m == t(m)) == 0)
mod (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


tmp2_i (2 : 4): [ 2 3 ]
------------------------------ Fine which_m_indxnsimm_i


***hubs***
28: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
mod (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_S (2 : 2): [ 1 2 ]
------------------------------ Fine somma_colonne_i

30: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 1 2 ]


max = 2
------------------------------ Fine max_v_i

30: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 1 2 ]
val = 2


g_ind (1 : 2): [ 2 ]
------------------------------ Fine which_v_indxeq_i


*** pathlength ***
37: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
------------------------------ Fine copia_m_i

40: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
val = 0


g_tmp1_i (3 : 4): [ 1 3 4 ]
------------------------------ Fine which_m_indxne_i

41: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
g_tmp1_i (3 : 4): [ 1 3 4 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
------------------------------ Fine assegna1_ms_indx_i

44: InitMatr_d
ris (2 x 2 : 2 x 2): [
	 2 1
	 1 1
 ]
val = nan


ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
------------------------------ Fine InitMatr_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
c = 1, val = 0


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (1 : 4): [ 1 ]
val = 1


g_distanza (2 : 2): [ 1 nan ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 4): [ ]
g_neighbours (1 : 4): [ 1 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (1 : 1): [ 1 ]


g_visitati (1 : 4): [ 1 ]
------------------------------ Fine elimina_doppi_i



g_visitati (1 : 4): [ 1 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
c = 1, val = 0


g_tmp1_i (1 : 4): [ 1 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 4): [ ]
g_tmp1_i (1 : 4): [ 1 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (1 : 1): [ 1 ]


ris (1 : 1): [ 1 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 1 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 1 ]
ris (1 : 1): [ 1 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 1 1 ]


ris (1 : 2): [ 1 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 2): [ 1 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (1 : 2): [ 1 ]
g_visitati (1 : 4): [ 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (1 : 2): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 2): [ 1 ]
indx = 1


ris (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



ris (0 : 2): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 2): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
colonna = 1
g_distanza (2 : 2): [ 1 nan ]


ris (2 x 2 : 2 x 2): [
	 1 nan
	 nan nan
 ]
------------------------------ Fine assegna1_mv_colonna_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
c = 2, val = 0


g_neighbours (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (2 : 4): [ 1 2 ]
val = 1


g_distanza (2 : 2): [ 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 4): [ ]
g_neighbours (2 : 4): [ 1 2 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (2 : 2): [ 1 2 ]


g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
c = 1, val = 0


g_tmp1_i (1 : 4): [ 1 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 2): [ ]
g_tmp1_i (1 : 4): [ 1 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (1 : 1): [ 1 ]


ris (1 : 1): [ 1 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 1 ]
------------------------------ Fine unione1_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
c = 2, val = 0


g_tmp1_i (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 1 ]
g_tmp1_i (2 : 4): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (3 : 3): [ 1 1 2 ]


ris (2 : 3): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 3): [ 1 2 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 3): [ 1 2 ]
ris (2 : 3): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (2 : 4): [ 1 2 ]
g_visitati (2 : 4): [ 1 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (2 : 4): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (2 : 4): [ 1 2 ]
indx = 1


ris (1 : 4): [ 2 ]
------------------------------ Fine elimina1_indx_i

2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (1 : 4): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 4): [ 2 ]
indx = 1


ris (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



ris (0 : 4): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 4): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 1 nan
	 nan nan
 ]
colonna = 2
g_distanza (2 : 2): [ 1 1 ]


ris (2 x 2 : 2 x 2): [
	 1 1
	 nan 1
 ]
------------------------------ Fine assegna1_mv_colonna_d

101: assegna1_m_indxNA_d	<=>	m1[which(is.na(m2))] # o suo complemento
ris (2 x 2 : 2 x 2): [
	 1 1
	 nan 1
 ]
ris (2 x 2 : 2 x 2): [
	 1 1
	 nan 1
 ]
val = inf
complemento = 0


ris (2 x 2 : 2 x 2): [
	 1 1
	 inf 1
 ]
------------------------------ Fine assegna1_m_indxNA_d


Stringhe allocate: 2 (595 interne); stringhe deallocate: 0 (390 interne)


*** Esco da pathlength ***
34: diag_d	<=>	ris <- diag(m)
ris (2 x 2 : 2 x 2): [
	 1 1
	 inf 1
 ]


g_tmp1_d (2 : 2): [ 1 1 ]
------------------------------ Fine diag_d

35: min_v_d	<=>	ris <- min(v)
g_tmp1_d (2 : 2): [ 1 1 ]


min = 1
------------------------------ Fine min_v_d

42: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (1 : 2): [ 2 ]
st = 1
end = 1


g_H (1 : 4): [ 2 ]
------------------------------ Fine copia_v_i

63: somma_righe_i	<=>	ris <- apply(m, 1, sum)
mod (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_tmp1_i (2 : 2): [ 2 1 ]
------------------------------ Fine somma_righe_i

64: somma1_vv_i	<=>	v1 <- v1 + v2
g_S (2 : 2): [ 1 2 ]
g_tmp1_i (2 : 2): [ 2 1 ]


g_S (2 : 2): [ 3 3 ]
------------------------------ Fine somma1_vv_i

66: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 3 3 ]


max = 3
------------------------------ Fine max_v_i

66: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 3 3 ]
val = 3


g_ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxeq_i

68: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (2 : 2): [ 1 2 ]
st = 1
end = 2


g_Hio (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i


Stringhe allocate: 2 (595 interne); stringhe deallocate: 0 (390 interne)


*** Esco da hubs ***


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
mod (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 1 0
	 1 1
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 0
	 1 1
 ]
mod (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 2 1
	 1 2
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 2 1
	 1 2
 ]
val = 0


g_ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 2 1
	 1 2
 ]
g_ind (4 : 4): [ 1 2 3 4 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
val = 0


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (2 : 2): [ 0 0 ]
val = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 1


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 1
val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 2


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 2
val = 0


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (2 : 2): [ 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 2 (595 interne); stringhe deallocate: 0 (390 interne)


*** Esco da cluster_coeff2 ***
76: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


elem_ris->rete (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
------------------------------ Fine copia_m_i

79: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_H (1 : 4): [ 2 ]
st = 1
end = 1


elem_ris->hubs (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

85: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_Hio (2 : 2): [ 1 2 ]
st = 1
end = 2


elem_ris->hubsio (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

51: colonna_i	<=>	ris <- m[,c]
ris (4 x 7 : 5 x 7): [
	 0 0 0 0 0 1 1
	 0 0 1 1 1 0 1
	 1 1 0 1 1 1 1
	 0 1 1 0 1 1 1
 ]
c = 7

tmp1_i (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine colonna_i

56: which_m_indxnsimm_i	<=>	ris <- which((m == t(m)) == 0)
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


tmp2_i (0 : 4): [ ]
------------------------------ Fine which_m_indxnsimm_i


***hubs***
28: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_S (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

30: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 2 2 ]


max = 2
------------------------------ Fine max_v_i

30: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 2 2 ]
val = 2


g_ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxeq_i


*** pathlength ***
37: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine copia_m_i

40: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
val = 0


g_tmp1_i (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_m_indxne_i

41: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
g_tmp1_i (4 : 4): [ 1 2 3 4 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

44: InitMatr_d
ris (2 x 2 : 2 x 2): [
	 1 1
	 inf 1
 ]
val = nan


ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
------------------------------ Fine InitMatr_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
c = 1, val = 0


g_neighbours (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (2 : 4): [ 1 2 ]
val = 1


g_distanza (2 : 2): [ 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 4): [ ]
g_neighbours (2 : 4): [ 1 2 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (2 : 2): [ 1 2 ]


g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
c = 1, val = 0


g_tmp1_i (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 4): [ ]
g_tmp1_i (2 : 4): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
c = 2, val = 0


g_tmp1_i (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 2 ]
g_tmp1_i (2 : 4): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 4): [ 1 2 ]
ris (2 : 4): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (2 : 4): [ 1 2 ]
g_visitati (2 : 4): [ 1 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (2 : 4): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (2 : 4): [ 1 2 ]
indx = 1


ris (1 : 4): [ 2 ]
------------------------------ Fine elimina1_indx_i

2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (1 : 4): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 4): [ 2 ]
indx = 1


ris (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



ris (0 : 4): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 4): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 nan nan
	 nan nan
 ]
colonna = 1
g_distanza (2 : 2): [ 1 1 ]


ris (2 x 2 : 2 x 2): [
	 1 nan
	 1 nan
 ]
------------------------------ Fine assegna1_mv_colonna_d

50: rep_s_d	<=>	ris <- rep(num, rip)
num = nan
rip = 2


g_distanza (2 : 2): [ nan nan ]
------------------------------ Fine rep_s_d

58: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
c = 2, val = 0


g_neighbours (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

65: assegna1_vs_indx_d	<=>	v[indx] <- val
g_distanza (2 : 2): [ nan nan ]
g_neighbours (2 : 4): [ 1 2 ]
val = 1


g_distanza (2 : 2): [ 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

69: unione_i	<=>	ris <- union(v1, v2)
g_visitati (0 : 4): [ ]
g_neighbours (2 : 4): [ 1 2 ]
4911: elimina_doppi_i	<=>	ris <- union(v, v)
g_visitati (2 : 2): [ 1 2 ]


g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



g_visitati (2 : 4): [ 1 2 ]
------------------------------ Fine unione_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
c = 1, val = 0


g_tmp1_i (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 4): [ ]
g_tmp1_i (2 : 4): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

79: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
c = 2, val = 0


g_tmp1_i (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

80: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 2 ]
g_tmp1_i (2 : 4): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i

84: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 4): [ 1 2 ]
ris (2 : 4): [ 1 2 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_new_neighbours (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i

86: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
ris (2 : 4): [ 1 2 ]
g_visitati (2 : 4): [ 1 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (2 : 4): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (2 : 4): [ 1 2 ]
indx = 1


ris (1 : 4): [ 2 ]
------------------------------ Fine elimina1_indx_i

2063: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (1 : 4): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
ris (1 : 4): [ 2 ]
indx = 1


ris (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



ris (0 : 4): [ ]
------------------------------ Fine setdiff1_i

88: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (0 : 4): [ ]
st = 1
end = 0


g_neighbours (0 : 4): [ ]
------------------------------ Fine copia_v_i

94: assegna1_mv_colonna_d	<=>	m[,colonna] <- v
ris (2 x 2 : 2 x 2): [
	 1 nan
	 1 nan
 ]
colonna = 2
g_distanza (2 : 2): [ 1 1 ]


ris (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine assegna1_mv_colonna_d

101: assegna1_m_indxNA_d	<=>	m1[which(is.na(m2))] # o suo complemento
ris (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
ris (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
val = inf
complemento = 0


ris (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine assegna1_m_indxNA_d


Stringhe allocate: 2 (680 interne); stringhe deallocate: 0 (460 interne)


*** Esco da pathlength ***
34: diag_d	<=>	ris <- diag(m)
ris (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_tmp1_d (2 : 2): [ 1 1 ]
------------------------------ Fine diag_d

35: min_v_d	<=>	ris <- min(v)
g_tmp1_d (2 : 2): [ 1 1 ]


min = 1
------------------------------ Fine min_v_d

46: assegna1_s_diag_d	<=>	diag_d(m) <- s
ris (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
val = 0


ris (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_s_diag_d

48: somma_colonne_d	<=>	ris <- apply(m, 2, sum)
ris (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_tmp1_d (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_d

49: copia_v_indx_d	<=>	ris <- v[indx]
g_tmp1_d (2 : 2): [ 1 1 ]
g_ind (2 : 2): [ 1 2 ]


g_P (2 : 2): [ 1 1 ]
------------------------------ Fine copia_v_indx_d

51: min_v_d	<=>	ris <- min(v)
g_P (2 : 2): [ 1 1 ]


min = 1
------------------------------ Fine min_v_d

52: min_v_d	<=>	ris <- min(v)
g_P (2 : 2): [ 1 1 ]


min = 1
------------------------------ Fine min_v_d

52: which_v_indxeq_d	<=>	ris <- which(v==val)
g_P (2 : 2): [ 1 1 ]
val = 1


g_ind2 (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxeq_d

53: copia_v_indx_i	<=>	ris <- v[indx]
g_ind (2 : 2): [ 1 2 ]
g_ind2 (2 : 2): [ 1 2 ]


g_H (2 : 4): [ 1 2 ]
------------------------------ Fine copia_v_indx_i

63: somma_righe_i	<=>	ris <- apply(m, 1, sum)
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_tmp1_i (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

64: somma1_vv_i	<=>	v1 <- v1 + v2
g_S (2 : 2): [ 2 2 ]
g_tmp1_i (2 : 2): [ 2 2 ]


g_S (2 : 2): [ 4 4 ]
------------------------------ Fine somma1_vv_i

66: max_v_i		<=>	ris <- max(v)
g_S (2 : 2): [ 4 4 ]


max = 4
------------------------------ Fine max_v_i

66: which_v_indxeq_i	<=>	ris <- which(v==val)
g_S (2 : 2): [ 4 4 ]
val = 4


g_ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxeq_i

68: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_ind (2 : 2): [ 1 2 ]
st = 1
end = 2


g_Hio (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i


Stringhe allocate: 2 (680 interne); stringhe deallocate: 0 (460 interne)


*** Esco da hubs ***


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_tmpm_i (2 x 2 : 2 x 2): [
	 2 2
	 2 2
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 2 2
	 2 2
 ]
val = 0


g_ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (2 x 2 : 2 x 2): [
	 2 2
	 2 2
 ]
g_ind (4 : 4): [ 1 2 3 4 ]
val = 1


g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
val = 0


g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (2 : 2): [ 0 0 ]
val = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 1


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 1
val = 0


g_neighbours (1 : 4): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 2


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
r = 2
val = 0


g_neighbours (1 : 4): [ 1 ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (2 : 2): [ 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 2 (680 interne); stringhe deallocate: 0 (460 interne)


*** Esco da cluster_coeff2 ***
76: copia_m_i	<=>	ris <- da
mod (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


elem_ris->rete (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine copia_m_i

79: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_H (2 : 4): [ 1 2 ]
st = 1
end = 2


elem_ris->hubs (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

85: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_Hio (2 : 2): [ 1 2 ]
st = 1
end = 2


elem_ris->hubsio (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i


Stringhe allocate: 2 (695 interne); stringhe deallocate: 2 (495 interne)


*** Esco da createMOD1 ***
Trasformo la matrice
elem_ris->rete (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
Trasformo il vettore elem_ris->hubs (1 : 1): [ 2 ]
Trasformo il vettore elem_ris->hubsio (2 : 2): [ 1 2 ]
Trasformo la matrice
elem_ris->rete (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
Trasformo il vettore elem_ris->hubs (1 : 1): [ 2 ]
Trasformo il vettore elem_ris->hubsio (1 : 1): [ 2 ]
Trasformo la matrice
elem_ris->rete (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
Trasformo il vettore elem_ris->hubs (1 : 1): [ 1 ]
Trasformo il vettore elem_ris->hubsio (1 : 1): [ 2 ]
Trasformo la matrice
elem_ris->rete (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
Trasformo il vettore elem_ris->hubs (2 : 2): [ 1 2 ]
Trasformo il vettore elem_ris->hubsio (2 : 2): [ 1 2 ]
Trasformo la matrice
elem_ris->rete (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
Trasformo il vettore elem_ris->hubs (1 : 1): [ 2 ]
Trasformo il vettore elem_ris->hubsio (1 : 1): [ 2 ]
Trasformo la matrice
elem_ris->rete (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
Trasformo il vettore elem_ris->hubs (1 : 1): [ 2 ]
Trasformo il vettore elem_ris->hubsio (2 : 2): [ 1 2 ]
Trasformo la matrice
elem_ris->rete (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
Trasformo il vettore elem_ris->hubs (2 : 2): [ 1 2 ]
Trasformo il vettore elem_ris->hubsio (2 : 2): [ 1 2 ]

Stringhe allocate: 2 (695 interne); stringhe deallocate: 2 (695 interne)


*** HMMund ***
Ho trasformato il vettore degree (6 : 6): [ 0.6759626 0.8962194 0.2949845 0.1538275 1.143179 1.835827 ]
Ho trasformato il vettore prior_p_subnet (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (1 : 1): [ 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (1 : 1): [ 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (1 : 1): [ 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (1 : 1): [ 1 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (1 : 1): [ 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (2 : 2): [ 1 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (1 : 1): [ 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (1 : 1): [ 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (1 : 1): [ 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]
Ho trasformato la matrice VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
Ho trasformato il vettore VECTOR_ELT(elem, 2) (2 : 2): [ 1 2 ]
Ho trasformato il vettore VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]

***HMM1_und***
81: copia_v_d	<=>	ris[st:end] <- v[st:end]
prior_p_subnet (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
st = 1
end = 7


g_prior_p_subnet (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
------------------------------ Fine copia_v_d

91: rep_s_i	<=>	ris <- rep(num, rip)
num = 0
rip = 7


g_MC (7 : 7): [ 0 0 0 0 0 0 0 ]
------------------------------ Fine rep_s_i

97: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


g_tmp1_i (2 : 2): [ 1 0 ]
------------------------------ Fine somma_righe_i

101: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 1 0 ]


max = 1
------------------------------ Fine max_v_i

97: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 0 1
 ]


g_tmp1_i (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

101: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 1 1 ]


max = 1
------------------------------ Fine max_v_i

97: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 0
	 1 1
 ]


g_tmp1_i (2 : 2): [ 0 2 ]
------------------------------ Fine somma_righe_i

101: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 0 2 ]


max = 2
------------------------------ Fine max_v_i

97: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_tmp1_i (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

101: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 1 1 ]


max = 1
------------------------------ Fine max_v_i

97: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_tmp1_i (2 : 2): [ 1 2 ]
------------------------------ Fine somma_righe_i

101: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 1 2 ]


max = 2
------------------------------ Fine max_v_i

97: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


g_tmp1_i (2 : 2): [ 2 1 ]
------------------------------ Fine somma_righe_i

101: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 2 1 ]


max = 2
------------------------------ Fine max_v_i

97: somma_righe_i	<=>	ris <- apply(m, 1, sum)
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_tmp1_i (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

101: max_v_i		<=>	ris <- max(v)
g_tmp1_i (2 : 2): [ 2 2 ]


max = 2
------------------------------ Fine max_v_i

107: which_v_indxeq_i	<=>	ris <- which(v==val)
g_SIMM (7 : 7): [ 0 0 0 1 1 0 1 ]
val = 0


g_tmp1_i (4 : 11): [ 1 2 3 6 ]
------------------------------ Fine which_v_indxeq_i

108: assegna1_v_indx_d	<=>	v[indx] <- val
g_prior_p_subnet (7 : 7): [ 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 ]
g_tmp1_i (4 : 11): [ 1 2 3 6 ]
val = 0


g_prior_p_subnet (7 : 7): [ 0 0 0 0.1428571 0.1428571 0 0.1428571 ]
------------------------------ Fine assegna1_v_indx_d

110: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_prior_p_subnet (7 : 7): [ 0 0 0 0.1428571 0.1428571 0 0.1428571 ]
canc_NA = 0



ris: 0.4285714
------------------------------ Fine somma_v_d

110: dividi1_vs_d	<=>	v <- v / div
g_prior_p_subnet (7 : 7): [ 0 0 0 0.1428571 0.1428571 0 0.1428571 ]
div = 0.429


g_prior_p_subnet (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
------------------------------ Fine dividi1_vs_d

113: rep_s_i	<=>	ris <- rep(num, rip)
num = -1
rip = 5


g_LG (5 : 5): [ -1 -1 -1 -1 -1 ]
------------------------------ Fine rep_s_i

116: InitMatr_i
ris (5 x 5 : 5 x 5): [
	 -1278451832 0 209 32655 765724917
	 32655 -1273153040 0 1634038371 1728516151
	 42163488 32655 38954576 1834968436 161
	 0 201 0 1663984751 0
	 42164128 0 -1278452072 2083857152 44965856
 ]
val = 0


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

123: rep_s_d	<=>	ris <- rep(num, rip)
num = 0
rip = 6


g_tmp1_d (6 : 6): [ 0 0 0 0 0 0 ]
------------------------------ Fine rep_s_d

124: vettore2v_d		<=>	ris <- c(v1, v2)
g_scalare_d (1 : 1): [ 5 ]
g_tmp1_d (6 : 6): [ 0 0 0 0 0 0 ]


g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
------------------------------ Fine vettore2v_d

125: copia_v_d	<=>	ris[st:end] <- v[st:end]
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
st = 1
end = 7


g_Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
------------------------------ Fine copia_v_d

140: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
degree (6 : 6): [ 0.6759626 0.8962194 0.2949845 0.1538275 1.143179 1.835827 ]
canc_NA = 1



ris: 5
------------------------------ Fine somma_v_d

140: dividi_vs_d	ris <- v / div
degree (6 : 6): [ 0.6759626 0.8962194 0.2949845 0.1538275 1.143179 1.835827 ]
div = 5.000


g_tmp1_d (6 : 6): [ 0.1351925 0.1792439 0.0589969 0.0307655 0.2286358 0.3671654 ]
------------------------------ Fine dividi_vs_d

143: copia_v_d	<=>	ris[st:end] <- v[st:end]
g_tmp1_d (6 : 6): [ 0.1351925 0.1792439 0.0589969 0.0307655 0.2286358 0.3671654 ]
st = 1
end = 6


g_Prob (6 : 7): [ 0.1351925 0.1792439 0.0589969 0.0307655 0.2286358 0.3671654 ]
------------------------------ Fine copia_v_d

144: accoda1_vs_d	<=>	v <- c(v, s)
g_Prob (6 : 7): [ 0.1351925 0.1792439 0.0589969 0.0307655 0.2286358 0.3671654 ]
s: 0


g_Prob (7 : 7): [ 0.1351925 0.1792439 0.0589969 0.0307655 0.2286358 0.3671654 0 ]
------------------------------ Fine accoda1_vs_d

147: rep_s_d	<=>	ris <- rep(num, rip)
num = 0
rip = 7


g_STout (7 : 7): [ 0 0 0 0 0 0 0 ]
------------------------------ Fine rep_s_d

149: assegna_v_segm_d	<=>	v[st:end] <- val
g_STout (7 : 7): [ 0 0 0 0 0 0 0 ]
start = 7
end = 7
val = 0


g_STout (7 : 7): [ 0 0 0 0 0 0 0 ]
------------------------------ Fine assegna_v_segm_d

151: segmento_v_d	<=>	ris <- v[st:end]
g_Prob (7 : 7): [ 0.1351925 0.1792439 0.0589969 0.0307655 0.2286358 0.3671654 0 ]
start = 2
end = 6


g_tmp1_d (5 : 6): [ 0.1792439 0.0589969 0.0307655 0.2286358 0.3671654 ]
------------------------------ Fine segmento_v_d

152: moltiplica_vs_d	<=>	ris <- v1 * v2
g_tmp1_d (5 : 6): [ 0.1792439 0.0589969 0.0307655 0.2286358 0.3671654 ]
val = 5


g_tmp2_d (5 : 5): [ 0.8962194 0.2949845 0.1538275 1.143179 1.835827 ]
------------------------------ Fine moltiplica_vs_d

154: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp1_d (5 : 6): [ 0.1792439 0.0589969 0.0307655 0.2286358 0.3671654 ]
canc_NA = 1



ris: 0.8648075
------------------------------ Fine somma_v_d

154: dividi1_vs_d	<=>	v <- v / div
g_tmp2_d (5 : 5): [ 0.8962194 0.2949845 0.1538275 1.143179 1.835827 ]
div = 0.865


g_tmp2_d (5 : 5): [ 1.036322 0.3410985 0.1778748 1.321888 2.122816 ]
------------------------------ Fine dividi1_vs_d

155: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
g_STout (7 : 7): [ 0 0 0 0 0 0 0 ]
start = 2
end = 6
g_tmp2_d (5 : 5): [ 1.036322 0.3410985 0.1778748 1.321888 2.122816 ]


g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
------------------------------ Fine assegna1_v_segmv_d

157: moltiplica_vs_d	<=>	ris <- v1 * v2
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
val = 0.1


g_tmp1_d (7 : 19): [ 0 0.1036322 0.03410985 0.01778748 0.1321888 0.2122816 0 ]
------------------------------ Fine moltiplica_vs_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = 1
rip = 7


g_tmp2_d (7 : 17): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine rep_s_d

159: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_tmp1_d (7 : 19): [ 0 0.1036322 0.03410985 0.01778748 0.1321888 0.2122816 0 ]
g_tmp2_d (7 : 17): [ 1 1 1 1 1 1 1 ]


g_aus (7 x 2 : 7 x 2): [
	 0 1
	 0.1036322 1
	 0.03410985 1
	 0.01778748 1
	 0.1321888 1
	 0.2122816 1
	 0 1
 ]
------------------------------ Fine cbind2v_d

161: max_righe_d	<=>	ris <- apply(m, 1, max)
g_aus (7 x 2 : 7 x 2): [
	 0 1
	 0.1036322 1
	 0.03410985 1
	 0.01778748 1
	 0.1321888 1
	 0.2122816 1
	 0 1
 ]


g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine max_righe_d

163: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_h (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

171: rep_s_d	<=>	ris <- rep(num, rip)
num = 1
rip = 7


g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine rep_s_d

175: elimina_doppi_i	<=>	ris <- union(v, v)
g_CC (7 : 7): [ 0 0 0 0 0 0 0 ]


g_tmp1_i (1 : 11): [ 0 ]
------------------------------ Fine elimina_doppi_i

176: ordina_i	<=>	ris <- sort(v, decreasing=decr)
g_tmp1_i (1 : 11): [ 0 ]
decr = 0
1774: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp1_i (1 : 11): [ 0 ]
st = 1
end = 1


g_CCs (1 : 1): [ 0 ]
------------------------------ Fine copia_v_i



g_CCs (1 : 1): [ 0 ]
------------------------------ Fine ordina_i

193: rep_s_d	<=>	ris <- rep(num, rip)
num = 1
rip = 1


g_p (1 : 1): [ 1 ]
------------------------------ Fine rep_s_d

196: which_v_indxeq_i	<=>	ris <- which(v==val)
g_CC (7 : 7): [ 0 0 0 0 0 0 0 ]
val = 0


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine which_v_indxeq_i

198: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
st = 1
end = 7


g_CCind[i - 1] (7 : 7): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine copia_v_i

208: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_Sout (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_colonne_i


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


g_ind (0 : 25): [ ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
g_ind (0 : 25): [ ]
val = 1


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (5 : 5): [ 6.929526e-310 6.929526e-310 0 0 0 ]
val = 0


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 1
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 2


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 2
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 3


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 3
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 4


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 4
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 5


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 5
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (5 : 5): [ 0 0 0 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 2 (270 interne); stringhe deallocate: 0 (0 interne)


*** Esco da cluster_coeff2 ***
220: somma_vs_i	<=>	ris <- v + s
g_CCs (1 : 1): [ 0 ]
s = 0


g_tmp1_i (1 : 11): [ 0 ]
------------------------------ Fine somma_vs_i

221: segno_v_i	<=>	ris <- sign(v)
g_tmp1_i (1 : 11): [ 0 ]


g_segno (1 : 1): [ 0 ]
------------------------------ Fine segno_v_i

223: which_v_indxgt_i	<=>	ris <- which(v > val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indp (0 : 1): [ ]
------------------------------ Fine which_v_indxgt_i

225: which_v_indxle_i	<=>	ris <- which(v<=val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indm (1 : 1): [ 1 ]
------------------------------ Fine which_v_indxle_i

229: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indp (0 : 1): [ ]
val2 = 0.3


g_p (1 : 1): [ 1 ]
------------------------------ Fine f_aux9_d

231: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indm (1 : 1): [ 1 ]
val2 = 0.3


g_p (1 : 1): [ 1.7 ]
------------------------------ Fine f_aux9_d

243: min_v_d	<=>	ris <- min(v)
g_p (1 : 1): [ 1.7 ]


min = 1.7
------------------------------ Fine min_v_d

246: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_p (1 : 1): [ 1.7 ]
canc_NA = 0



ris: 1.7
------------------------------ Fine somma_v_d

246: dividi1_vs_d	<=>	v <- v / div
g_p (1 : 1): [ 1.7 ]
div = 1.700


g_p (1 : 1): [ 1 ]
------------------------------ Fine dividi1_vs_d

249: assegna1_v_indx_d	<=>	v[indx] <- val
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
g_CCind[i - 1] (7 : 7): [ 1 2 3 4 5 6 7 ]
val = 1


g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine assegna1_v_indx_d

267: moltiplica_vv_d	<=>	ris <- v1 * v2
g_prior_p_subnet (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]


g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
------------------------------ Fine moltiplica_vv_d

269: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]


max = 0.3333333
------------------------------ Fine max_v_d

273: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
canc_NA = 1



ris: 1
------------------------------ Fine somma_v_d

273: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
div = 1.000


g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
------------------------------ Fine dividi1_vs_d

280: max_v_i		<=>	ris <- max(v)
g_dim (7 : 7): [ 2 2 2 2 2 2 2 ]


max = 2
------------------------------ Fine max_v_i

286: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]


max = 0.3333333
------------------------------ Fine max_v_d

294: which_v_indxgt_d	<=>	ris <- which(v > val)
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
val = 0


g_tmp1_i (3 : 11): [ 4 5 7 ]
------------------------------ Fine which_v_indxgt_d

297: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 7
incr = 1


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine seq_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
k = 3, replace = 0
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]


ris (3 : 3): [ 5 7 4 ]
*****************************************


Stringhe allocate: 2 (295 interne); stringhe deallocate: 0 (0 interne)

300: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_mod1 (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine copia_m_i


***probmod_und***
56: InitMatr_i
g_checkOUT (2 x 5 : 2 x 5): [
	 -1278452072 -1278452072 37437864 37437864 37437864
	 32655 32655 0 0 0
 ]
val = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

58: InitMatr_d
ris (2 x 5 : 2 x 5): [
	 6.929526e-310 1.853726e-316 1.853726e-316 1.853726e-316 1.853726e-316
	 6.929526e-310 1.853726e-316 1.853726e-316 1.853726e-316 1.853726e-316
 ]
val = 0


ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_d

60: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod1 (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_M_out (2 : 2): [ 1 2 ]
------------------------------ Fine somma_colonne_i

63: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -1278451688 50412848 0
	 32655 0 0
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_S_new (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_T2 (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ 5 5 5 5 5 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 4 4 4 4 4 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ 0 0 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 5 5 5 5 5 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 4 4 4 4 4 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]


g_m (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 4 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 5 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 5 5 5 5 5 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 4 4 4 4 4 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (5 : 5): [ inf inf inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (5 : 5): [ inf inf inf inf inf ]
val = inf


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (5 : 5): [ 1 2 3 4 5 ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]


g_S1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]


g_a (5 : 5): [ -1.036322 -1.036322 -1.036322 -1.036322 -1.036322 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -1.036322 -1.036322 -1.036322 -1.036322 -1.036322 ]


g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]


g_b (5 : 5): [ -0.03632244 -0.03632244 -0.03632244 -0.03632244 -0.03632244 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ -0.03632244 -0.03632244 -0.03632244 -0.03632244 -0.03632244 ]


g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 1.036322 0.03632244
	 1.036322 0.03632244
	 1.036322 0.03632244
	 1.036322 0.03632244
	 1.036322 0.03632244
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 1.036322 0.03632244
	 1.036322 0.03632244
	 1.036322 0.03632244
	 1.036322 0.03632244
	 1.036322 0.03632244
 ]


g_m (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
g_m (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
g_T2 (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.9636776 -0.9636776 -0.9636776 -0.9636776 -0.9636776 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ -0.9636776 -0.9636776 -0.9636776 -0.9636776 -0.9636776 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (0 : 5): [ ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
g_m (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 5 5 5 5 5 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 6 6 6 6 6 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 6 6 6 6 6 ]
div = 2.000


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (460 interne); stringhe deallocate: 0 (5 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 3 3 3 3 3 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]


min = 3
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
Sc (5 : 5): [ 3 3 3 3 3 ]


ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 2


g_S_new (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_T2 (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ 5 5 5 5 5 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 4 4 4 4 4 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ 0 0 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 5 5 5 5 5 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 4 4 4 4 4 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]


g_m (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 4 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 5 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 5 5 5 5 5 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 4 4 4 4 4 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (5 : 5): [ inf inf inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (5 : 5): [ inf inf inf inf inf ]
val = inf


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (5 : 5): [ 1 2 3 4 5 ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]


g_S1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]


g_a (5 : 5): [ -0.3410985 -0.3410985 -0.3410985 -0.3410985 -0.3410985 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -0.3410985 -0.3410985 -0.3410985 -0.3410985 -0.3410985 ]


g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]


g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]


g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
 ]


g_m (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
g_m (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
g_T2 (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]


g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.6589015 -0.6589015 -0.6589015 -0.6589015 -0.6589015 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ -0.6589015 -0.6589015 -0.6589015 -0.6589015 -0.6589015 ]
val = 0

g_ind1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.3410985 -0.3410985 -0.3410985 -0.3410985 -0.3410985 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ -0.3410985 -0.3410985 -0.3410985 -0.3410985 -0.3410985 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (5 : 5): [ 1 2 3 4 5 ]
g_ind2 (0 : 5): [ ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 4
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 5
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
g_m (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]


g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 5 5 5 5 5 ]
g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]


Sc (5 : 5): [ 3.068295 3.068295 3.068295 3.068295 3.068295 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 3.068295 3.068295 3.068295 3.068295 3.068295 ]
div = 2.000


Sc (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (480 interne); stringhe deallocate: 0 (10 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]


min = 1.534148
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 0 0 0 0 0
 ]
riga = 2
Sc (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]


ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 1.534148 1.534148 1.534148 1.534148 1.534148
 ]
------------------------------ Fine aggiungi_mv_riga_d

134: somma_m_d	<=>	ris <- sum(m)
ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 1.534148 1.534148 1.534148 1.534148 1.534148
 ]


ris: 22.67074
------------------------------ Fine somma_m_d

137: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

139: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

141: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_aus (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_colonne_i

143: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (5 : 5): [ 2 2 2 2 2 ]
val = 0


g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

153: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_rs (2 : 2): [ 5 5 ]
------------------------------ Fine somma_righe_i

155: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 5 5 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
g_I (0 : 0): [ ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i


Stringhe allocate: 2 (525 interne); stringhe deallocate: 0 (30 interne)


*** Esco da probmod_und ***

310: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_mod2 (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine copia_m_i


***probmod_und***
56: InitMatr_i
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

58: InitMatr_d
ris (2 x 5 : 2 x 5): [
	 6.929526e-310 3.811873e+180 1.366222e+161 3.946605e+180 1.516934e-152
	 6.929526e-310 1.695933e+161 2.025709e+174 1.145675e+243 7.724946e+228
 ]
val = 0


ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_d

60: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod2 (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_M_out (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

63: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 2


g_S_new (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_T2 (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ 5 5 5 5 5 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 4 4 4 4 4 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ 0 0 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 5 5 5 5 5 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 4 4 4 4 4 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]


g_m (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 4 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 5 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 5 5 5 5 5 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 4 4 4 4 4 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (5 : 5): [ inf inf inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (5 : 5): [ inf inf inf inf inf ]
val = inf


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (5 : 5): [ 1 2 3 4 5 ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]


g_S1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]


g_a (5 : 5): [ -0.3410985 -0.3410985 -0.3410985 -0.3410985 -0.3410985 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -0.3410985 -0.3410985 -0.3410985 -0.3410985 -0.3410985 ]


g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]


g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]


g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
 ]


g_m (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
g_m (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
g_T2 (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]


g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.6589015 -0.6589015 -0.6589015 -0.6589015 -0.6589015 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ -0.6589015 -0.6589015 -0.6589015 -0.6589015 -0.6589015 ]
val = 0

g_ind1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.3410985 -0.3410985 -0.3410985 -0.3410985 -0.3410985 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ -0.3410985 -0.3410985 -0.3410985 -0.3410985 -0.3410985 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (5 : 5): [ 1 2 3 4 5 ]
g_ind2 (0 : 5): [ ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 4
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 5
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
g_m (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]


g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 5 5 5 5 5 ]
g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]


Sc (5 : 5): [ 3.068295 3.068295 3.068295 3.068295 3.068295 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 3.068295 3.068295 3.068295 3.068295 3.068295 ]
div = 2.000


Sc (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (540 interne); stringhe deallocate: 0 (35 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]


min = 1.534148
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
Sc (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]


ris (2 x 5 : 2 x 5): [
	 1.534148 1.534148 1.534148 1.534148 1.534148
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 2


g_S_new (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_T2 (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1


g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ 5 5 5 5 5 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 4 4 4 4 4 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ 0 0 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 5 5 5 5 5 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 4 4 4 4 4 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]


g_m (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 4 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 5 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 5 5 5 5 5 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 4 4 4 4 4 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (5 : 5): [ inf inf inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (5 : 5): [ inf inf inf inf inf ]
val = inf


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (5 : 5): [ 1 2 3 4 5 ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]


g_S1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]


g_a (5 : 5): [ -0.3410985 -0.3410985 -0.3410985 -0.3410985 -0.3410985 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -0.3410985 -0.3410985 -0.3410985 -0.3410985 -0.3410985 ]


g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]


g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]


g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
 ]


g_m (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
g_m (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
g_T2 (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]


g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.6589015 -0.6589015 -0.6589015 -0.6589015 -0.6589015 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ -0.6589015 -0.6589015 -0.6589015 -0.6589015 -0.6589015 ]
val = 0

g_ind1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.3410985 -0.3410985 -0.3410985 -0.3410985 -0.3410985 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ -0.3410985 -0.3410985 -0.3410985 -0.3410985 -0.3410985 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (5 : 5): [ 1 2 3 4 5 ]
g_ind2 (0 : 5): [ ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 4
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 5
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 0.3410985 0.3410985 0.3410985 0.3410985 0.3410985 ]
g_b (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]
g_m (5 : 5): [ 0.6589015 0.6589015 0.6589015 0.6589015 0.6589015 ]


g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 5 5 5 5 5 ]
g_S2 (5 : 5): [ -1.931705 -1.931705 -1.931705 -1.931705 -1.931705 ]


Sc (5 : 5): [ 3.068295 3.068295 3.068295 3.068295 3.068295 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 3.068295 3.068295 3.068295 3.068295 3.068295 ]
div = 2.000


Sc (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (545 interne); stringhe deallocate: 0 (40 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]


min = 1.534148
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 1.534148 1.534148 1.534148 1.534148 1.534148
	 0 0 0 0 0
 ]
riga = 2
Sc (5 : 5): [ 1.534148 1.534148 1.534148 1.534148 1.534148 ]


ris (2 x 5 : 2 x 5): [
	 1.534148 1.534148 1.534148 1.534148 1.534148
	 1.534148 1.534148 1.534148 1.534148 1.534148
 ]
------------------------------ Fine aggiungi_mv_riga_d

134: somma_m_d	<=>	ris <- sum(m)
ris (2 x 5 : 2 x 5): [
	 1.534148 1.534148 1.534148 1.534148 1.534148
	 1.534148 1.534148 1.534148 1.534148 1.534148
 ]


ris: 15.34148
------------------------------ Fine somma_m_d

137: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

139: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

141: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_aus (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_colonne_i

143: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (5 : 5): [ 2 2 2 2 2 ]
val = 0


g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

153: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_rs (2 : 2): [ 5 5 ]
------------------------------ Fine somma_righe_i

155: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 5 5 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 10): [ ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i


Stringhe allocate: 2 (565 interne); stringhe deallocate: 0 (60 interne)


*** Esco da probmod_und ***

326: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_mod3 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine copia_m_i


***probmod_und***
56: InitMatr_i
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

58: InitMatr_d
ris (2 x 5 : 2 x 5): [
	 0 3.34463e+151 0 0 0
	 3.102292e-80 5.661229e+169 0 0 1.429215e+166
 ]
val = 0


ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_d

60: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod3 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_M_out (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

63: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_S_new (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_T2 (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ 5 5 5 5 5 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 4 4 4 4 4 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ 0 0 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 5 5 5 5 5 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 4 4 4 4 4 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]


g_m (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 4 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 5 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 5 5 5 5 5 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 4 4 4 4 4 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (5 : 5): [ inf inf inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (5 : 5): [ inf inf inf inf inf ]
val = inf


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (5 : 5): [ 1 2 3 4 5 ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]


g_S1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]


g_a (5 : 5): [ -1.036322 -1.036322 -1.036322 -1.036322 -1.036322 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -1.036322 -1.036322 -1.036322 -1.036322 -1.036322 ]


g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]


g_b (5 : 5): [ -0.03632244 -0.03632244 -0.03632244 -0.03632244 -0.03632244 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ -0.03632244 -0.03632244 -0.03632244 -0.03632244 -0.03632244 ]


g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 1.036322 0.03632244
	 1.036322 0.03632244
	 1.036322 0.03632244
	 1.036322 0.03632244
	 1.036322 0.03632244
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 1.036322 0.03632244
	 1.036322 0.03632244
	 1.036322 0.03632244
	 1.036322 0.03632244
	 1.036322 0.03632244
 ]


g_m (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
g_m (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
g_T2 (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.9636776 -0.9636776 -0.9636776 -0.9636776 -0.9636776 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ -0.9636776 -0.9636776 -0.9636776 -0.9636776 -0.9636776 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (0 : 5): [ ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
g_m (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 5 5 5 5 5 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 6 6 6 6 6 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 6 6 6 6 6 ]
div = 2.000


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (580 interne); stringhe deallocate: 0 (65 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 3 3 3 3 3 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]


min = 3
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
Sc (5 : 5): [ 3 3 3 3 3 ]


ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_S_new (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_T1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_T2 (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


g_new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (5 : 5): [ 0 0 0 0 0 ]
s = 1


g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


g_toll1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1


g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


g_toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ 5 5 5 5 5 ]


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (5 : 5): [ 4 4 4 4 4 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ 4 4 4 4 4 ]


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (5 : 5): [ 0 0 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 5 5 5 5 5 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 4 4 4 4 4 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 5 4
	 5 4
	 5 4
	 5 4
	 5 4
 ]


g_m (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]
g_T1 (5 : 5): [ 0 0 0 0 0 ]
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 4 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 5 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 5 5 5 5 5 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 4 4 4 4 4 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 4 4 4 4 4 ]
g_toll1 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ 3 3 3 3 3 ]
val = 0


g_ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (5 : 5): [ 1 2 3 4 5 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (5 : 5): [ inf inf inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S1 (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (5 : 5): [ inf inf inf inf inf ]
val = inf


g_ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (5 : 5): [ inf inf inf inf inf ]
g_ind (5 : 5): [ 1 2 3 4 5 ]
g_a (5 : 5): [ 5 5 5 5 5 ]
g_b (5 : 5): [ 4 4 4 4 4 ]
g_m (5 : 5): [ 5 5 5 5 5 ]


g_S1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (5 : 5): [ 0 0 0 0 0 ]
g_T2 (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]


g_a (5 : 5): [ -1.036322 -1.036322 -1.036322 -1.036322 -1.036322 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (5 : 5): [ -1.036322 -1.036322 -1.036322 -1.036322 -1.036322 ]


g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (5 : 5): [ 1 1 1 1 1 ]
g_T2 (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]


g_b (5 : 5): [ -0.03632244 -0.03632244 -0.03632244 -0.03632244 -0.03632244 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (5 : 5): [ -0.03632244 -0.03632244 -0.03632244 -0.03632244 -0.03632244 ]


g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
g_ind (0 : 5): [ ]
val = 0


g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
g_ind (0 : 5): [ ]
val = 0


g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]


g_tmpm_d (5 x 2 : 5 x 2): [
	 1.036322 0.03632244
	 1.036322 0.03632244
	 1.036322 0.03632244
	 1.036322 0.03632244
	 1.036322 0.03632244
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (5 x 2 : 5 x 2): [
	 1.036322 0.03632244
	 1.036322 0.03632244
	 1.036322 0.03632244
	 1.036322 0.03632244
	 1.036322 0.03632244
 ]


g_m (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
g_m (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
g_T2 (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
g_toll2 (5 : 5): [ 1 1 1 1 1 ]


g_tmp1_d (5 : 5): [ -0.9636776 -0.9636776 -0.9636776 -0.9636776 -0.9636776 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (5 : 5): [ -0.9636776 -0.9636776 -0.9636776 -0.9636776 -0.9636776 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (0 : 5): [ ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (5 : 5): [ 1 1 1 1 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
g_tmp1_d (5 : 5): [ inf inf inf inf inf ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (5 : 5): [ 1 1 1 1 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 5


g_tmp1_d (5 : 5): [ inf inf inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (5 : 5): [ 1 1 1 1 1 ]
g_ind (0 : 5): [ ]
g_a (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]
g_b (5 : 5): [ 0.03632244 0.03632244 0.03632244 0.03632244 0.03632244 ]
g_m (5 : 5): [ 1.036322 1.036322 1.036322 1.036322 1.036322 ]


g_S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (5 : 5): [ 5 5 5 5 5 ]
g_S2 (5 : 5): [ 1 1 1 1 1 ]


Sc (5 : 5): [ 6 6 6 6 6 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (5 : 5): [ 6 6 6 6 6 ]
div = 2.000


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (585 interne); stringhe deallocate: 0 (70 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (5 : 5): [ 3 3 3 3 3 ]
val = -inf


g_indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2
g_indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


g_indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 3 4 5 ]
indx = 1


g_indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 4
g_indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 4 5 ]
indx = 1


g_indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 5
g_indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 5 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indok (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (5 : 5): [ 3 3 3 3 3 ]


min = 3
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (5 : 5): [ 3 3 3 3 3 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 0 0 0 0 0
 ]
riga = 2
Sc (5 : 5): [ 3 3 3 3 3 ]


ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 3 3 3 3 3
 ]
------------------------------ Fine aggiungi_mv_riga_d

134: somma_m_d	<=>	ris <- sum(m)
ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 3 3 3 3 3
 ]


ris: 30
------------------------------ Fine somma_m_d

137: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

139: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

141: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_aus (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_colonne_i

143: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (5 : 5): [ 2 2 2 2 2 ]
val = 0


g_tmp_i1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

153: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


g_rs (2 : 2): [ 5 5 ]
------------------------------ Fine somma_righe_i

155: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 5 5 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 10): [ ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


g_I_add (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
g_I_add (5 : 10): [ 1 2 3 4 5 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i


Stringhe allocate: 2 (605 interne); stringhe deallocate: 0 (90 interne)


*** Esco da probmod_und ***

339: vettore3s_d		<=>	ris <- c(el1, el2, el3)
el1 = 11.33537, el2 = 7.670738, el3 = 15


g_pm (3 : 3): [ 11.33537 7.670738 15 ]
------------------------------ Fine vettore3s_d

340: copia_v_d	<=>	ris[st:end] <- v[st:end]
g_pm (3 : 3): [ 11.33537 7.670738 15 ]
st = 1
end = 3


g_prob_mod (3 : 3): [ 11.33537 7.670738 15 ]
------------------------------ Fine copia_v_d

342: assegna1_v_indxNA_d	<=>	v1[which(is.na(v2))] <- val oppure v1[which(!is.na(v2))] <- val
g_prob_mod (3 : 3): [ 11.33537 7.670738 15 ]
g_prob_mod (3 : 3): [ 11.33537 7.670738 15 ]
val = 0
complemento = 0


g_prob_mod (3 : 3): [ 11.33537 7.670738 15 ]
------------------------------ Fine assegna1_v_indxNA_d

344: min_v_d	<=>	ris <- min(v)
g_prob_mod (3 : 3): [ 11.33537 7.670738 15 ]


min = 7.670738
------------------------------ Fine min_v_d

349: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_pm (3 : 3): [ 11.33537 7.670738 15 ]
complemento = 0


g_tmp1_i (0 : 11): [ ]
------------------------------ Fine which_v_indxNA_d

350: assegna1_v_indx_d	<=>	v[indx] <- val
g_prob_mod (3 : 3): [ 11.33537 7.670738 15 ]
g_tmp1_i (0 : 11): [ ]
val = 0


g_prob_mod (3 : 3): [ 11.33537 7.670738 15 ]
------------------------------ Fine assegna1_v_indx_d

352: which_v_indxne_d	<=>	ris <- which(v != val)
g_prob_mod (3 : 3): [ 11.33537 7.670738 15 ]
val = 0


g_ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

356: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_prob_mod (3 : 3): [ 11.33537 7.670738 15 ]
canc_NA = 0



ris: 34.00611
------------------------------ Fine somma_v_d

356: dividi1_vs_d	<=>	v <- v / div
g_prob_mod (3 : 3): [ 11.33537 7.670738 15 ]
div = 34.006


g_prob_mod (3 : 3): [ 0.3333333 0.2255694 0.4410972 ]
------------------------------ Fine dividi1_vs_d

358: vettore3s_i		<=>	ris <- c(el1, el2, el3)
el1 = 1, el2 = 2, el3 = 3


g_tmp1_i (3 : 11): [ 1 2 3 ]
------------------------------ Fine vettore3s_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (3 : 11): [ 1 2 3 ]
k = 1, replace = 0
g_prob_mod (3 : 3): [ 0.3333333 0.2255694 0.4410972 ]


ris (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 2 (625 interne); stringhe deallocate: 0 (90 interne)

377: copia_m_i	<=>	ris <- da
g_mod3 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_M (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine copia_m_i

378: copia_m_d	<=>	ris <- da
ris (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 3 3 3 3 3
 ]


g_Sc (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 3 3 3 3 3
 ]
------------------------------ Fine copia_m_d

379: copia_v_i	<=>	ris[st:end] <- v[st:end]
VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]
st = 1
end = 2


g_hubs (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

393: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
canc_NA = 0



ris: 1
------------------------------ Fine somma_v_d

393: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
div = 1.000


g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
------------------------------ Fine dividi1_vs_d


***sampleB***

***sample***
g_hubs (2 : 2): [ 1 2 ]
k = 1, replace = 0


g_hubs (1 : 2): [ 2 ]
*****************************************


Stringhe allocate: 2 (640 interne); stringhe deallocate: 0 (90 interne)


Stringhe allocate: 2 (640 interne); stringhe deallocate: 0 (90 interne)

671: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_h1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i


***assign_nodes_und***
44: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_or_h (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

46: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_aus_h (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

52: InitVett_i
g_index (2 : 2): [ -1278452072 32655 ]
val = 0


g_index (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_i

54: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_M (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_M_out (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

56: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_M_out (2 : 2): [ 1 1 ]
decr = 1


g_Ord (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

61: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 3 3 3 3 3
 ]
r = 1

g_p (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine riga_d

63: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (5 : 5): [ 3 3 3 3 3 ]
val = 0


g_tmp_i (0 : 5): [ ]
------------------------------ Fine which_v_indxle_d

70: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h1 (5 : 5): [ 1 2 3 4 5 ]


g_Sout_h (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i

75: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sout_h (5 : 5): [ 0 0 0 0 0 ]
val = 4


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

81: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (5 : 5): [ 3 3 3 3 3 ]
g_aus_h (5 : 5): [ 1 2 3 4 5 ]


g_tmp_d (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

82: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (5 : 5): [ 3 3 3 3 3 ]
canc_NA = 0



ris: 15
------------------------------ Fine somma_v_d

83: dividi_vs_d	ris <- v / div
g_tmp_d (5 : 5): [ 3 3 3 3 3 ]
div = 15.000


g_p (5 : 5): [ 0.2 0.2 0.2 0.2 0.2 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (5 : 5): [ 1 2 3 4 5 ]
k = 1, replace = 0
g_p (5 : 5): [ 0.2 0.2 0.2 0.2 0.2 ]


ris (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 2 (705 interne); stringhe deallocate: 0 (90 interne)

90: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (5 : 5): [ 1 2 3 4 5 ]
ris (1 : 1): [ 3 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 3
g_h1 (5 : 5): [ 1 2 3 4 5 ]


indx = 3
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (5 : 5): [ 1 2 3 4 5 ]
indx = 3


g_h1 (4 : 5): [ 1 2 4 5 ]
------------------------------ Fine elimina1_indx_i



g_h1 (4 : 5): [ 1 2 4 5 ]
------------------------------ Fine setdiff1_i

92: which_indx_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (5 : 5): [ 1 2 3 4 5 ]
ris (1 : 1): [ 3 ]
2032: esiste_v_i	<=>	elem %IN% v
elem = 3
g_or_h (5 : 5): [ 1 2 3 4 5 ]


indx = 3
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 1 ]
------------------------------ Fine which_indx_vv_eq_i

93: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (5 : 5): [ 1 2 3 4 5 ]
g_tmp_i (1 : 5): [ 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
g_aus_h (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
g_aus_h (5 : 5): [ 1 2 3 4 5 ]
indx = 1


g_aus_h (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i



g_aus_h (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine setdiff1_i

61: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 5 : 2 x 5): [
	 3 3 3 3 3
	 3 3 3 3 3
 ]
r = 2

g_p (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine riga_d

63: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (5 : 5): [ 3 3 3 3 3 ]
val = 0


g_tmp_i (0 : 5): [ ]
------------------------------ Fine which_v_indxle_d

70: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 0 0 0 0 0 ]
g_h1 (4 : 5): [ 1 2 4 5 ]


g_Sout_h (4 : 5): [ 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i

75: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sout_h (4 : 5): [ 0 0 0 0 ]
val = 4


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

81: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (5 : 5): [ 3 3 3 3 3 ]
g_aus_h (4 : 5): [ 2 3 4 5 ]


g_tmp_d (4 : 5): [ 3 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

82: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (4 : 5): [ 3 3 3 3 ]
canc_NA = 0



ris: 12
------------------------------ Fine somma_v_d

83: dividi_vs_d	ris <- v / div
g_tmp_d (4 : 5): [ 3 3 3 3 ]
div = 12.000


g_p (4 : 5): [ 0.25 0.25 0.25 0.25 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (4 : 5): [ 1 2 4 5 ]
k = 1, replace = 0
g_p (4 : 5): [ 0.25 0.25 0.25 0.25 ]


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 2 (705 interne); stringhe deallocate: 0 (90 interne)

90: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (4 : 5): [ 1 2 4 5 ]
ris (1 : 1): [ 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
g_h1 (4 : 5): [ 1 2 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (4 : 5): [ 1 2 4 5 ]
indx = 1


g_h1 (3 : 5): [ 2 4 5 ]
------------------------------ Fine elimina1_indx_i



g_h1 (3 : 5): [ 2 4 5 ]
------------------------------ Fine setdiff1_i

92: which_indx_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (5 : 5): [ 1 2 3 4 5 ]
ris (1 : 1): [ 1 ]
2032: esiste_v_i	<=>	elem %IN% v
elem = 1
g_or_h (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 1 ]
------------------------------ Fine which_indx_vv_eq_i

93: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (4 : 5): [ 2 3 4 5 ]
g_tmp_i (1 : 5): [ 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
g_aus_h (4 : 5): [ 2 3 4 5 ]


indx = 0
------------------------------ Fine esiste_v_i



g_aus_h (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine setdiff1_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 1
val = 1


g_ind (1 : 5): [ 2 ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 3 1 ]
g_ind (1 : 5): [ 2 ]


g_co (1 : 1): [ 1 ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
g_ri (1 : 1): [ 3 ]
g_co (1 : 1): [ 1 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
g_co (1 : 1): [ 1 ]
g_ri (1 : 1): [ 3 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 1
g_hubs (1 : 2): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 2
val = 1


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 3 1 ]
g_ind (1 : 5): [ 1 ]


g_co (1 : 1): [ 3 ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
g_ri (1 : 1): [ 1 ]
g_co (1 : 1): [ 3 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
g_co (1 : 1): [ 3 ]
g_ri (1 : 1): [ 1 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 2
g_hubs (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

111: accoda1_vv_i	<=>	v1 <- c(v1, v2)
ris (0 : 1): [ ]
g_ri (1 : 1): [ 1 ]


ris (1 : 1): [ 1 ]
------------------------------ Fine accoda_vv_i


Stringhe allocate: 2 (715 interne); stringhe deallocate: 0 (90 interne)

679: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_h (5 : 5): [ 1 2 3 4 5 ]
g_h1 (3 : 5): [ 2 4 5 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


g_tmp1_i (5 : 11): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_tmp1_i (5 : 11): [ 1 2 3 4 5 ]


indx = 2
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_tmp1_i (5 : 11): [ 1 2 3 4 5 ]
indx = 2


g_tmp1_i (4 : 11): [ 1 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 4
g_tmp1_i (4 : 11): [ 1 3 4 5 ]


indx = 3
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_tmp1_i (4 : 11): [ 1 3 4 5 ]
indx = 3


g_tmp1_i (3 : 11): [ 1 3 5 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 5
g_tmp1_i (3 : 11): [ 1 3 5 ]


indx = 3
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_tmp1_i (3 : 11): [ 1 3 5 ]
indx = 3


g_tmp1_i (2 : 11): [ 1 3 ]
------------------------------ Fine elimina1_indx_i



g_tmp1_i (2 : 11): [ 1 3 ]
------------------------------ Fine setdiff_i

680: incr1_v_indx_i	<=>	v[indx] <- v[indx] + s
g_LG (5 : 5): [ -1 -1 -1 -1 -1 ]
g_tmp1_i (2 : 11): [ 1 3 ]
val = 1


g_LG (5 : 5): [ 0 -1 0 -1 -1 ]
------------------------------ Fine incr1_v_indx_i

684: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (3 : 5): [ 2 4 5 ]
st = 1
end = 3


g_h (3 : 5): [ 2 4 5 ]
------------------------------ Fine copia_v_i

686: accoda1_vv_i	<=>	v1 <- c(v1, v2)
g_h_new (0 : 0): [ ]
ris (1 : 1): [ 1 ]
ATTENZIONE (accoda_vv_i, linea /home/marco/hmm/HMM_und.c # 686): ingrandito il vettore da 0 a 1!


g_h_new (1 : 2): [ 1 ]
------------------------------ Fine accoda_vv_i

688: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_Sout (5 : 5): [ 1 0 1 0 0 ]
------------------------------ Fine somma_colonne_i

690: max_v_i		<=>	ris <- max(v)
g_Sout (5 : 5): [ 1 0 1 0 0 ]


max = 1
------------------------------ Fine max_v_i

692: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 2
incr = 1


g_tmp2_i (3 : 3): [ 0 1 2 ]
------------------------------ Fine seq_i


*** hist1 ***
g_Sout (5 : 5): [ 1 0 1 0 0 ]
g_tmp2_i (3 : 3): [ 0 1 2 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
g_tmp1_i (2 : 11): [ 1 3 ]
val = 0


g_tmp1_i (2 : 11): [ 0 0 ]
------------------------------ Fine InitVett_i



g_tmp1_i (2 : 11): [ 3 2 ]

Stringhe allocate: 2 (726 interne); stringhe deallocate: 0 (96 interne)

694: promuovi_i	(implicita)
g_tmp1_i (2 : 11): [ 3 2 ]
ATTENZIONE (promuovi_i, linea /home/marco/hmm/HMM_und.c # 694): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

g_tmp1_d (2 : 19): [ 3 2 ]
------------------------------ Fine promuovi_i

695: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
g_Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
start = 1
end = 2
g_tmp1_d (2 : 19): [ 3 2 ]


g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

208: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_Sout (5 : 5): [ 1 0 1 0 0 ]
------------------------------ Fine somma_colonne_i


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 2 0 0
	 0 0 0 0 0
	 2 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 2 0 0
	 0 0 0 0 0
	 2 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


g_ind (2 : 25): [ 3 11 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 2 0 0
	 0 0 0 0 0
	 2 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
g_ind (2 : 25): [ 3 11 ]
val = 1


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (5 : 5): [ 0 0 0 0 0 ]
val = 0


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 1
val = 0


g_neighbours (1 : 25): [ 3 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 2


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 2
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 3


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 3
val = 0


g_neighbours (1 : 25): [ 1 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 4


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 4
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 5


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 5
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (5 : 5): [ 0 0 0 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 2 (727 interne); stringhe deallocate: 0 (97 interne)


*** Esco da cluster_coeff2 ***
220: somma_vs_i	<=>	ris <- v + s
g_CCs (1 : 1): [ 0 ]
s = 0


g_tmp1_i (1 : 11): [ 0 ]
------------------------------ Fine somma_vs_i

221: segno_v_i	<=>	ris <- sign(v)
g_tmp1_i (1 : 11): [ 0 ]


g_segno (1 : 1): [ 0 ]
------------------------------ Fine segno_v_i

223: which_v_indxgt_i	<=>	ris <- which(v > val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indp (0 : 1): [ ]
------------------------------ Fine which_v_indxgt_i

225: which_v_indxle_i	<=>	ris <- which(v<=val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indm (1 : 1): [ 1 ]
------------------------------ Fine which_v_indxle_i

229: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indp (0 : 1): [ ]
val2 = 0.3


g_p (1 : 1): [ 1 ]
------------------------------ Fine f_aux9_d

231: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indm (1 : 1): [ 1 ]
val2 = 0.3


g_p (1 : 1): [ 1.7 ]
------------------------------ Fine f_aux9_d

243: min_v_d	<=>	ris <- min(v)
g_p (1 : 1): [ 1.7 ]


min = 1.7
------------------------------ Fine min_v_d

246: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_p (1 : 1): [ 1.7 ]
canc_NA = 0



ris: 1.7
------------------------------ Fine somma_v_d

246: dividi1_vs_d	<=>	v <- v / div
g_p (1 : 1): [ 1.7 ]
div = 1.700


g_p (1 : 1): [ 1 ]
------------------------------ Fine dividi1_vs_d

249: assegna1_v_indx_d	<=>	v[indx] <- val
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
g_CCind[i - 1] (7 : 7): [ 1 2 3 4 5 6 7 ]
val = 1


g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine assegna1_v_indx_d

267: moltiplica_vv_d	<=>	ris <- v1 * v2
g_prior_p_subnet (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]


g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
------------------------------ Fine moltiplica_vv_d

269: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]


max = 0.3333333
------------------------------ Fine max_v_d

273: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
canc_NA = 1



ris: 1
------------------------------ Fine somma_v_d

273: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
div = 1.000


g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
------------------------------ Fine dividi1_vs_d

280: max_v_i		<=>	ris <- max(v)
g_dim (7 : 7): [ 2 2 2 2 2 2 2 ]


max = 2
------------------------------ Fine max_v_i

286: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]


max = 0.3333333
------------------------------ Fine max_v_d

294: which_v_indxgt_d	<=>	ris <- which(v > val)
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
val = 0


g_tmp1_i (3 : 11): [ 4 5 7 ]
------------------------------ Fine which_v_indxgt_d

297: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 7
incr = 1


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine seq_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
k = 3, replace = 0
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]


ris (3 : 3): [ 7 5 4 ]
*****************************************


Stringhe allocate: 2 (727 interne); stringhe deallocate: 0 (97 interne)

300: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_mod1 (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine copia_m_i


***probmod_und***
56: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

58: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 3 3 3
	 1.534148 1.534148 1.534148
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

60: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod1 (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_M_out (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

63: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 1 0 1 0 0 ]
g_h (3 : 5): [ 2 4 5 ]


g_tmp_i1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 2


g_S_new (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_T2 (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_old2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 0 0 0 ]
s = 1


g_new2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 3 3 3 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 2 2 2 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 3 3 3 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2 2 2 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]


g_m (3 : 5): [ 3 3 3 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 3 3 3 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 2 2 2 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2 2 2 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1 1 1 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 1 1 1 ]
val = 0


g_ind2 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (3 : 5): [ 1 2 3 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf inf inf ]
val = inf


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (3 : 5): [ 1 2 3 ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]


g_S1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 0 0 0 ]
g_T2 (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]


g_a (3 : 5): [ -0.3410985 -0.3410985 -0.3410985 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -0.3410985 -0.3410985 -0.3410985 ]


g_a (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]


g_b (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]


g_b (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]
g_b (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
 ]


g_m (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]
g_b (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]
g_m (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]
g_T2 (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]


g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.6589015 -0.6589015 -0.6589015 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.6589015 -0.6589015 -0.6589015 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.3410985 -0.3410985 -0.3410985 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.3410985 -0.3410985 -0.3410985 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (0 : 5): [ ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]
g_b (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]
g_b (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]
g_m (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]


g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 3 3 3 ]
g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]


Sc (3 : 5): [ 1.068295 1.068295 1.068295 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 1.068295 1.068295 1.068295 ]
div = 2.000


Sc (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (730 interne); stringhe deallocate: 0 (100 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]
val = -inf


g_indok (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_indok (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 5): [ 1 2 3 ]
g_indok (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]
g_indok (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]


min = 0.5341476
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
Sc (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]


ris (2 x 3 : 2 x 5): [
	 0.5341476 0.5341476 0.5341476
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 1 0 1 0 0 ]
g_h (3 : 5): [ 2 4 5 ]


g_tmp_i1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 2


g_S_new (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_T2 (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_old2 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 0 0 0 ]
s = 1


g_new2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 2 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 3 3 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 3 3 3 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 2 2 2 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 3 3 3 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2 2 2 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]


g_m (3 : 5): [ 3 3 3 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 3 3 3 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 2 2 2 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2 2 2 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1 1 1 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 1 1 1 ]
val = 0


g_ind2 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (3 : 5): [ 1 2 3 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf inf inf ]
val = inf


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (3 : 5): [ 1 2 3 ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]


g_S1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 0 0 0 ]
g_T2 (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]


g_a (3 : 5): [ -0.3410985 -0.3410985 -0.3410985 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ -0.3410985 -0.3410985 -0.3410985 ]


g_a (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 1 1 1 ]
g_T2 (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]


g_b (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]


g_b (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]
g_b (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.3410985 0.6589015
	 0.3410985 0.6589015
	 0.3410985 0.6589015
 ]


g_m (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]
g_b (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]
g_m (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]
g_T2 (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]


g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.6589015 -0.6589015 -0.6589015 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.6589015 -0.6589015 -0.6589015 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.3410985 -0.3410985 -0.3410985 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -0.3410985 -0.3410985 -0.3410985 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (0 : 5): [ ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (0 : 0): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
g_indinf (0 : 0): [ ]
val = -inf


g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]
g_b (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.3410985 0.3410985 0.3410985 ]
g_b (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]
g_m (3 : 5): [ 0.6589015 0.6589015 0.6589015 ]


g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 3 3 3 ]
g_S2 (3 : 5): [ -1.931705 -1.931705 -1.931705 ]


Sc (3 : 5): [ 1.068295 1.068295 1.068295 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ 1.068295 1.068295 1.068295 ]
div = 2.000


Sc (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (733 interne); stringhe deallocate: 0 (103 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]
val = -inf


g_indok (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_indok (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 5): [ 1 2 3 ]
g_indok (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]
g_indok (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]


min = 0.5341476
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]
g_indInf (0 : 5): [ ]
val = -1


Sc (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0.5341476 0.5341476 0.5341476
	 0 0 0
 ]
riga = 2
Sc (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]


ris (2 x 3 : 2 x 5): [
	 0.5341476 0.5341476 0.5341476
	 0.5341476 0.5341476 0.5341476
 ]
------------------------------ Fine aggiungi_mv_riga_d

134: somma_m_d	<=>	ris <- sum(m)
ris (2 x 3 : 2 x 5): [
	 0.5341476 0.5341476 0.5341476
	 0.5341476 0.5341476 0.5341476
 ]


ris: 3.204886
------------------------------ Fine somma_m_d

137: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

139: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

141: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_aus (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_colonne_i

143: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (3 : 5): [ 2 2 2 ]
val = 0


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

153: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 3 3 ]
------------------------------ Fine somma_righe_i

155: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 10): [ ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i


Stringhe allocate: 2 (753 interne); stringhe deallocate: 0 (123 interne)


*** Esco da probmod_und ***

310: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine copia_m_i


***probmod_und***
56: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

58: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 1.534148 1.534148 1.534148
	 1.534148 1.534148 1.534148
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

60: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_M_out (2 : 2): [ 1 2 ]
------------------------------ Fine somma_colonne_i

63: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 1 0 1 0 0 ]
g_h (3 : 5): [ 2 4 5 ]


g_tmp_i1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_S_new (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_T2 (3 : 5): [ 1.036322 1.036322 1.036322 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_old2 (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 2 2 2 ]
s = 1


g_new2 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 3 3 3 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 2 2 2 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 3 3 3 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2 2 2 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]


g_m (3 : 5): [ 3 3 3 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 3 3 3 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 2 2 2 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2 2 2 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1 1 1 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 1 1 1 ]
val = 0


g_ind2 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (3 : 5): [ 1 2 3 ]


g_indinf (0 : 0): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_indinf (0 : 0): [ ]
val = -inf


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf inf inf ]
val = inf


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (3 : 5): [ 1 2 3 ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]


g_S1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 2 2 2 ]
g_T2 (3 : 5): [ 1.036322 1.036322 1.036322 ]


g_a (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]


g_a (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 3 3 3 ]
g_T2 (3 : 5): [ 1.036322 1.036322 1.036322 ]


g_b (3 : 5): [ 1.963678 1.963678 1.963678 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 1.963678 1.963678 1.963678 ]


g_b (3 : 5): [ 1.963678 1.963678 1.963678 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 1.036322 1.036322 1.036322 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 1.963678 1.963678 1.963678 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 1.963678 1.963678 1.963678 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
g_b (3 : 5): [ 1.963678 1.963678 1.963678 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.9636776 1.963678
	 0.9636776 1.963678
	 0.9636776 1.963678
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.9636776 1.963678
	 0.9636776 1.963678
	 0.9636776 1.963678
 ]


g_m (3 : 5): [ 1.963678 1.963678 1.963678 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
g_b (3 : 5): [ 1.963678 1.963678 1.963678 ]
g_m (3 : 5): [ 1.963678 1.963678 1.963678 ]
g_T2 (3 : 5): [ 1.036322 1.036322 1.036322 ]


g_S2 (3 : 5): [ -1.894852 -1.894852 -1.894852 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.03632244 -0.03632244 -0.03632244 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.03632244 -0.03632244 -0.03632244 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 1.963678 1.963678 1.963678 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
val = 0


g_ind2 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (3 : 5): [ 1 2 3 ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (3 : 5): [ 1 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (1 : 3): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (3 : 5): [ 1 2 3 ]


indx = 3
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (2 : 3): [ 1 2 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (3 : 3): [ 1 2 3 ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -1.894852 -1.894852 -1.894852 ]
g_indinf (3 : 3): [ 1 2 3 ]
val = -inf


g_S2 (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -inf -inf -inf ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ -inf -inf -inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
g_b (3 : 5): [ 1.963678 1.963678 1.963678 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ -inf -inf -inf ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
g_b (3 : 5): [ 1.963678 1.963678 1.963678 ]
g_m (3 : 5): [ 1.963678 1.963678 1.963678 ]


g_S2 (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 3 3 3 ]
g_S2 (3 : 5): [ -inf -inf -inf ]


Sc (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ -inf -inf -inf ]
div = 2.000


Sc (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (756 interne); stringhe deallocate: 0 (126 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ -inf -inf -inf ]
val = -inf


g_indok (0 : 5): [ ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_indok (0 : 5): [ ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 5): [ 1 2 3 ]
g_indok (0 : 5): [ ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i



g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ -inf -inf -inf ]
g_indok (0 : 5): [ ]


g_tmp_d1 (0 : 5): [ ]
------------------------------ Fine copia_v_indx_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ -inf -inf -inf ]
g_indInf (3 : 5): [ 1 2 3 ]
val = -1


Sc (3 : 5): [ -1 -1 -1 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 2
Sc (3 : 5): [ -1 -1 -1 ]


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 -1 -1 -1
 ]
------------------------------ Fine aggiungi_mv_riga_d


Stringhe allocate: 2 (756 interne); stringhe deallocate: 0 (126 interne)


*** Esco da probmod_und ***

326: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_mod3 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine copia_m_i


***probmod_und***
56: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

58: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 3 3 3
	 3 3 3
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

60: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod3 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_M_out (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

63: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 1 0 1 0 0 ]
g_h (3 : 5): [ 2 4 5 ]


g_tmp_i1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_S_new (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_T1 (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_T2 (3 : 5): [ 1.036322 1.036322 1.036322 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_old1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_old2 (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 3 3 3 ]
s = -1


g_new1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 2 2 2 ]
s = 1


g_new2 (3 : 5): [ 3 3 3 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 0 0 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 1 1 ]


g_toll1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 1 1 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 2 2 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 3 3 3 ]


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 2 2 2 ]
g_T1 (3 : 5): [ 0 0 0 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 2 2 2 ]


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ 0 0 0 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 3 3 3 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 3 3 3 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2 2 2 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2 2 2 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 3 2
	 3 2
	 3 2
 ]


g_m (3 : 5): [ 3 3 3 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]
g_T1 (3 : 5): [ 0 0 0 ]
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 2 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 3 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 3 3 3 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 2 2 2 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 2 2 2 ]
val = 0

g_ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2 2 2 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1 1 1 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 1 1 1 ]
val = 0


g_ind2 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (0 : 5): [ ]
g_ind2 (3 : 5): [ 1 2 3 ]


g_indinf (0 : 3): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_indinf (0 : 3): [ ]
val = -inf


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ inf inf inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf inf inf ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf inf inf ]
val = inf


g_ind (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf inf inf ]
g_ind (3 : 5): [ 1 2 3 ]
g_a (3 : 5): [ 3 3 3 ]
g_b (3 : 5): [ 2 2 2 ]
g_m (3 : 5): [ 3 3 3 ]


g_S1 (3 : 5): [ 3 3 3 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 2 2 2 ]
g_T2 (3 : 5): [ 1.036322 1.036322 1.036322 ]


g_a (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]


g_a (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 3 3 3 ]
g_T2 (3 : 5): [ 1.036322 1.036322 1.036322 ]


g_b (3 : 5): [ 1.963678 1.963678 1.963678 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 1.963678 1.963678 1.963678 ]


g_b (3 : 5): [ 1.963678 1.963678 1.963678 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 1.036322 1.036322 1.036322 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 1.963678 1.963678 1.963678 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 1.963678 1.963678 1.963678 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
g_b (3 : 5): [ 1.963678 1.963678 1.963678 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.9636776 1.963678
	 0.9636776 1.963678
	 0.9636776 1.963678
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.9636776 1.963678
	 0.9636776 1.963678
	 0.9636776 1.963678
 ]


g_m (3 : 5): [ 1.963678 1.963678 1.963678 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
g_b (3 : 5): [ 1.963678 1.963678 1.963678 ]
g_m (3 : 5): [ 1.963678 1.963678 1.963678 ]
g_T2 (3 : 5): [ 1.036322 1.036322 1.036322 ]


g_S2 (3 : 5): [ -1.894852 -1.894852 -1.894852 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.03632244 -0.03632244 -0.03632244 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.03632244 -0.03632244 -0.03632244 ]
val = 0

g_ind1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 1.963678 1.963678 1.963678 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
val = 0


g_ind2 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (3 : 5): [ 1 2 3 ]
g_ind2 (3 : 5): [ 1 2 3 ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (3 : 5): [ 1 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (1 : 3): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (3 : 5): [ 1 2 3 ]


indx = 3
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (2 : 3): [ 1 2 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (3 : 3): [ 1 2 3 ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -1.894852 -1.894852 -1.894852 ]
g_indinf (3 : 3): [ 1 2 3 ]
val = -inf


g_S2 (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -inf -inf -inf ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ -inf -inf -inf ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
g_b (3 : 5): [ 1.963678 1.963678 1.963678 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ -inf -inf -inf ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -inf -inf ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.9636776 0.9636776 0.9636776 ]
g_b (3 : 5): [ 1.963678 1.963678 1.963678 ]
g_m (3 : 5): [ 1.963678 1.963678 1.963678 ]


g_S2 (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 3 3 3 ]
g_S2 (3 : 5): [ -inf -inf -inf ]


Sc (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ -inf -inf -inf ]
div = 2.000


Sc (3 : 5): [ -inf -inf -inf ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (759 interne); stringhe deallocate: 0 (129 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ -inf -inf -inf ]
val = -inf


g_indok (0 : 5): [ ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_indok (0 : 5): [ ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 5): [ 1 2 3 ]
g_indok (0 : 5): [ ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i



g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ -inf -inf -inf ]
g_indok (0 : 5): [ ]


g_tmp_d1 (0 : 5): [ ]
------------------------------ Fine copia_v_indx_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ -inf -inf -inf ]
g_indInf (3 : 5): [ 1 2 3 ]
val = -1


Sc (3 : 5): [ -1 -1 -1 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 2
Sc (3 : 5): [ -1 -1 -1 ]


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 -1 -1 -1
 ]
------------------------------ Fine aggiungi_mv_riga_d


Stringhe allocate: 2 (759 interne); stringhe deallocate: 0 (129 interne)


*** Esco da probmod_und ***

339: vettore3s_d		<=>	ris <- c(el1, el2, el3)
el1 = 1.602443, el2 = nan, el3 = nan


g_pm (3 : 3): [ 1.602443 nan nan ]
------------------------------ Fine vettore3s_d

340: copia_v_d	<=>	ris[st:end] <- v[st:end]
g_pm (3 : 3): [ 1.602443 nan nan ]
st = 1
end = 3


g_prob_mod (3 : 3): [ 1.602443 nan nan ]
------------------------------ Fine copia_v_d

342: assegna1_v_indxNA_d	<=>	v1[which(is.na(v2))] <- val oppure v1[which(!is.na(v2))] <- val
g_prob_mod (3 : 3): [ 1.602443 nan nan ]
g_prob_mod (3 : 3): [ 1.602443 nan nan ]
val = 0
complemento = 0


g_prob_mod (3 : 3): [ 1.602443 0 0 ]
------------------------------ Fine assegna1_v_indxNA_d

344: min_v_d	<=>	ris <- min(v)
g_prob_mod (3 : 3): [ 1.602443 0 0 ]


min = 0
------------------------------ Fine min_v_d

347: somma1_vs_d	<=>	v <- v + s
g_prob_mod (3 : 3): [ 1.602443 0 0 ]
s = 0.1111111


g_prob_mod (3 : 3): [ 1.713554 0.1111111 0.1111111 ]
------------------------------ Fine somma1_vs_d

349: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_pm (3 : 3): [ 1.602443 nan nan ]
complemento = 0


g_tmp1_i (2 : 11): [ 2 3 ]
------------------------------ Fine which_v_indxNA_d

350: assegna1_v_indx_d	<=>	v[indx] <- val
g_prob_mod (3 : 3): [ 1.713554 0.1111111 0.1111111 ]
g_tmp1_i (2 : 11): [ 2 3 ]
val = 0


g_prob_mod (3 : 3): [ 1.713554 0 0 ]
------------------------------ Fine assegna1_v_indx_d

352: which_v_indxne_d	<=>	ris <- which(v != val)
g_prob_mod (3 : 3): [ 1.713554 0 0 ]
val = 0


g_ind (1 : 3): [ 1 ]
------------------------------ Fine which_v_indxne_d

356: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_prob_mod (3 : 3): [ 1.713554 0 0 ]
canc_NA = 0



ris: 1.713554
------------------------------ Fine somma_v_d

356: dividi1_vs_d	<=>	v <- v / div
g_prob_mod (3 : 3): [ 1.713554 0 0 ]
div = 1.714


g_prob_mod (3 : 3): [ 1 0 0 ]
------------------------------ Fine dividi1_vs_d

358: vettore3s_i		<=>	ris <- c(el1, el2, el3)
el1 = 1, el2 = 2, el3 = 3


g_tmp1_i (3 : 11): [ 1 2 3 ]
------------------------------ Fine vettore3s_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (3 : 11): [ 1 2 3 ]
k = 1, replace = 0
g_prob_mod (3 : 3): [ 1 0 0 ]


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 2 (759 interne); stringhe deallocate: 0 (129 interne)

363: copia_m_i	<=>	ris <- da
g_mod1 (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_M (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine copia_m_i

364: copia_m_d	<=>	ris <- da
ris (2 x 3 : 2 x 5): [
	 0.5341476 0.5341476 0.5341476
	 0.5341476 0.5341476 0.5341476
 ]


g_Sc (2 x 3 : 2 x 5): [
	 0.5341476 0.5341476 0.5341476
	 0.5341476 0.5341476 0.5341476
 ]
------------------------------ Fine copia_m_d

365: copia_v_i	<=>	ris[st:end] <- v[st:end]
VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]
st = 1
end = 2


g_hubs (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

393: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0 0 0 0 0 0 0.3333333 ]
canc_NA = 0



ris: 0.3333333
------------------------------ Fine somma_v_d

393: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0 0 0 0 0 0 0.3333333 ]
div = 0.333


g_ppp (7 : 7): [ 0 0 0 0 0 0 1 ]
------------------------------ Fine dividi1_vs_d


***sampleB***

***sample***
g_hubs (2 : 2): [ 1 2 ]
k = 1, replace = 0


g_hubs (1 : 2): [ 2 ]
*****************************************


Stringhe allocate: 2 (759 interne); stringhe deallocate: 0 (129 interne)


Stringhe allocate: 2 (759 interne); stringhe deallocate: 0 (129 interne)

671: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (3 : 5): [ 2 4 5 ]
st = 1
end = 3


g_h1 (3 : 5): [ 2 4 5 ]
------------------------------ Fine copia_v_i


***assign_nodes_und***
44: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (3 : 5): [ 2 4 5 ]
st = 1
end = 3


g_or_h (3 : 5): [ 2 4 5 ]
------------------------------ Fine copia_v_i

46: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_aus_h (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

52: InitVett_i
g_index (2 : 2): [ 3 1 ]
val = 0


g_index (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_i

54: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_M (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_M_out (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

56: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_M_out (2 : 2): [ 2 2 ]
decr = 1


g_Ord (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

61: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 3 : 2 x 5): [
	 0.5341476 0.5341476 0.5341476
	 0.5341476 0.5341476 0.5341476
 ]
r = 1

g_p (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]
------------------------------ Fine riga_d

63: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]
val = 0


g_tmp_i (0 : 5): [ ]
------------------------------ Fine which_v_indxle_d

70: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 1 0 1 0 0 ]
g_h1 (3 : 5): [ 2 4 5 ]


g_Sout_h (3 : 5): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i

75: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sout_h (3 : 5): [ 0 0 0 ]
val = 3


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

81: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]
g_aus_h (3 : 5): [ 1 2 3 ]


g_tmp_d (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]
------------------------------ Fine assegna_v_indxNA_d

82: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]
canc_NA = 0



ris: 1.602443
------------------------------ Fine somma_v_d

83: dividi_vs_d	ris <- v / div
g_tmp_d (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]
div = 1.602


g_p (3 : 5): [ 0.3333333 0.3333333 0.3333333 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (3 : 5): [ 2 4 5 ]
k = 1, replace = 0
g_p (3 : 5): [ 0.3333333 0.3333333 0.3333333 ]


ris (1 : 1): [ 4 ]
*****************************************


Stringhe allocate: 2 (759 interne); stringhe deallocate: 0 (129 interne)

90: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (3 : 5): [ 2 4 5 ]
ris (1 : 1): [ 4 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 4
g_h1 (3 : 5): [ 2 4 5 ]


indx = 2
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (3 : 5): [ 2 4 5 ]
indx = 2


g_h1 (2 : 5): [ 2 5 ]
------------------------------ Fine elimina1_indx_i



g_h1 (2 : 5): [ 2 5 ]
------------------------------ Fine setdiff1_i

92: which_indx_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (3 : 5): [ 2 4 5 ]
ris (1 : 1): [ 4 ]
2032: esiste_v_i	<=>	elem %IN% v
elem = 4
g_or_h (3 : 5): [ 2 4 5 ]


indx = 2
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 1 ]
------------------------------ Fine which_indx_vv_eq_i

93: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (3 : 5): [ 1 2 3 ]
g_tmp_i (1 : 5): [ 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
g_aus_h (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
g_aus_h (3 : 5): [ 1 2 3 ]
indx = 1


g_aus_h (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i



g_aus_h (2 : 5): [ 2 3 ]
------------------------------ Fine setdiff1_i

61: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 3 : 2 x 5): [
	 0.5341476 0.5341476 0.5341476
	 0.5341476 0.5341476 0.5341476
 ]
r = 2

g_p (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]
------------------------------ Fine riga_d

63: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]
val = 0


g_tmp_i (0 : 5): [ ]
------------------------------ Fine which_v_indxle_d

70: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 1 0 1 0 0 ]
g_h1 (2 : 5): [ 2 5 ]


g_Sout_h (2 : 5): [ 0 0 ]
------------------------------ Fine assegna_v_indxNA_i

75: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sout_h (2 : 5): [ 0 0 ]
val = 3


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

81: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (3 : 5): [ 0.5341476 0.5341476 0.5341476 ]
g_aus_h (2 : 5): [ 2 3 ]


g_tmp_d (2 : 5): [ 0.5341476 0.5341476 ]
------------------------------ Fine assegna_v_indxNA_d

82: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (2 : 5): [ 0.5341476 0.5341476 ]
canc_NA = 0



ris: 1.068295
------------------------------ Fine somma_v_d

83: dividi_vs_d	ris <- v / div
g_tmp_d (2 : 5): [ 0.5341476 0.5341476 ]
div = 1.068


g_p (2 : 5): [ 0.5 0.5 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (2 : 5): [ 2 5 ]
k = 1, replace = 0
g_p (2 : 5): [ 0.5 0.5 ]


ris (1 : 1): [ 5 ]
*****************************************


Stringhe allocate: 2 (759 interne); stringhe deallocate: 0 (129 interne)

90: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (2 : 5): [ 2 5 ]
ris (1 : 1): [ 5 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 5
g_h1 (2 : 5): [ 2 5 ]


indx = 2
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (2 : 5): [ 2 5 ]
indx = 2


g_h1 (1 : 5): [ 2 ]
------------------------------ Fine elimina1_indx_i



g_h1 (1 : 5): [ 2 ]
------------------------------ Fine setdiff1_i

92: which_indx_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (3 : 5): [ 2 4 5 ]
ris (1 : 1): [ 5 ]
2032: esiste_v_i	<=>	elem %IN% v
elem = 5
g_or_h (3 : 5): [ 2 4 5 ]


indx = 3
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 1 ]
------------------------------ Fine which_indx_vv_eq_i

93: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (2 : 5): [ 2 3 ]
g_tmp_i (1 : 5): [ 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
g_aus_h (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i



g_aus_h (2 : 5): [ 2 3 ]
------------------------------ Fine setdiff1_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
riga = 1
val = 1


g_ind (2 : 5): [ 1 2 ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 4 5 ]
g_ind (2 : 5): [ 1 2 ]


g_co (2 : 4): [ 4 5 ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
g_ri (1 : 1): [ 4 ]
g_co (2 : 4): [ 4 5 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 0 0
 ]
g_co (2 : 4): [ 4 5 ]
g_ri (1 : 1): [ 4 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 1
g_hubs (1 : 2): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
riga = 2
val = 1


g_ind (2 : 5): [ 1 2 ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 4 5 ]
g_ind (2 : 5): [ 1 2 ]


g_co (2 : 4): [ 4 5 ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
 ]
g_ri (1 : 1): [ 5 ]
g_co (2 : 4): [ 4 5 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 1
 ]
------------------------------ Fine assegna1_m_vv_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 1
 ]
g_co (2 : 4): [ 4 5 ]
g_ri (1 : 1): [ 5 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 1
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 2
g_hubs (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

111: accoda1_vv_i	<=>	v1 <- c(v1, v2)
ris (0 : 1): [ ]
g_ri (1 : 1): [ 5 ]


ris (1 : 1): [ 5 ]
------------------------------ Fine accoda_vv_i


Stringhe allocate: 2 (759 interne); stringhe deallocate: 0 (129 interne)

679: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_h (3 : 5): [ 2 4 5 ]
g_h1 (1 : 5): [ 2 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (3 : 5): [ 2 4 5 ]
st = 1
end = 3


g_tmp1_i (3 : 11): [ 2 4 5 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_tmp1_i (3 : 11): [ 2 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_tmp1_i (3 : 11): [ 2 4 5 ]
indx = 1


g_tmp1_i (2 : 11): [ 4 5 ]
------------------------------ Fine elimina1_indx_i



g_tmp1_i (2 : 11): [ 4 5 ]
------------------------------ Fine setdiff_i

680: incr1_v_indx_i	<=>	v[indx] <- v[indx] + s
g_LG (5 : 5): [ 0 -1 0 -1 -1 ]
g_tmp1_i (2 : 11): [ 4 5 ]
val = 1


g_LG (5 : 5): [ 0 -1 0 0 0 ]
------------------------------ Fine incr1_v_indx_i

684: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (1 : 5): [ 2 ]
st = 1
end = 1


g_h (1 : 5): [ 2 ]
------------------------------ Fine copia_v_i

686: accoda1_vv_i	<=>	v1 <- c(v1, v2)
g_h_new (1 : 2): [ 1 ]
ris (1 : 1): [ 5 ]


g_h_new (2 : 2): [ 1 5 ]
------------------------------ Fine accoda_vv_i

688: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 1
 ]


g_Sout (5 : 5): [ 1 0 1 2 2 ]
------------------------------ Fine somma_colonne_i

690: max_v_i		<=>	ris <- max(v)
g_Sout (5 : 5): [ 1 0 1 2 2 ]


max = 2
------------------------------ Fine max_v_i

692: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 3
incr = 1


g_tmp2_i (4 : 10): [ 0 1 2 3 ]
------------------------------ Fine seq_i


*** hist1 ***
g_Sout (5 : 5): [ 1 0 1 2 2 ]
g_tmp2_i (4 : 10): [ 0 1 2 3 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
g_tmp1_i (3 : 11): [ 4 5 5 ]
val = 0


g_tmp1_i (3 : 11): [ 0 0 0 ]
------------------------------ Fine InitVett_i



g_tmp1_i (3 : 11): [ 1 2 2 ]

Stringhe allocate: 2 (759 interne); stringhe deallocate: 0 (129 interne)

694: promuovi_i	(implicita)
g_tmp1_i (3 : 11): [ 1 2 2 ]
ATTENZIONE (promuovi_i, linea /home/marco/hmm/HMM_und.c # 694): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

g_tmp1_d (3 : 19): [ 1 2 2 ]
------------------------------ Fine promuovi_i

695: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
g_Freq_out (7 : 7): [ 3 2 0 0 0 0 0 ]
start = 1
end = 3
g_tmp1_d (3 : 19): [ 1 2 2 ]


g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

705: accoda1_vv_i	<=>	v1 <- c(v1, v2)
g_h (1 : 5): [ 2 ]
g_h_new (2 : 2): [ 1 5 ]


g_h (3 : 5): [ 2 1 5 ]
------------------------------ Fine accoda_vv_i

713: copia_v_indx_i	<=>	ris <- v[indx]
g_Sout (5 : 5): [ 1 0 1 2 2 ]
g_h (3 : 5): [ 2 1 5 ]


g_tmp2_i (3 : 10): [ 0 1 2 ]
------------------------------ Fine copia_v_indx_i

714: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp2_i (3 : 10): [ 0 1 2 ]
val = 5


g_tmp1_i (3 : 11): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

715: copia_v_indx_i	<=>	ris <- v[indx]
g_h (3 : 5): [ 2 1 5 ]
g_tmp1_i (3 : 11): [ 1 2 3 ]


g_h (3 : 5): [ 2 1 5 ]
------------------------------ Fine copia_v_indx_i

208: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 1
 ]


g_Sout (5 : 5): [ 1 0 1 2 2 ]
------------------------------ Fine somma_colonne_i


***cluster_coeff***
20: trasponi_i	<=>	ris <- t(m)
ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 1
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 1
 ]
------------------------------ Fine trasponi_i

21: somma1_m_i	<=>	m1 <- m1 + m2
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 1
 ]
ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 1
 ]


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 2 0 0
	 0 0 0 0 0
	 2 0 0 0 0
	 0 0 0 2 2
	 0 0 0 2 2
 ]
------------------------------ Fine somma1_m_i

23: which_m_indxne_i	<=>	ris <- which(m!=val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 2 0 0
	 0 0 0 0 0
	 2 0 0 0 0
	 0 0 0 2 2
	 0 0 0 2 2
 ]
val = 0


g_ind (6 : 25): [ 3 11 19 20 24 25 ]
------------------------------ Fine which_m_indxne_i

25: assegna1_ms_indx_i	<=>	m[indx] = val
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 2 0 0
	 0 0 0 0 0
	 2 0 0 0 0
	 0 0 0 2 2
	 0 0 0 2 2
 ]
g_ind (6 : 25): [ 3 11 19 20 24 25 ]
val = 1


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 1
 ]
------------------------------ Fine assegna1_ms_indx_i

27: assegna1_s_diag_i	<=>	diag_i(m) <- s
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 1
 ]
val = 0


g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
------------------------------ Fine assegna1_s_diag_i

32: InitVett_d
ris (5 : 5): [ 0 0 0 0 0 ]
val = 0


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
riga = 1


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
r = 1
val = 0


g_neighbours (1 : 25): [ 3 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
riga = 2


ris: 0
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
r = 2
val = 0


g_neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
riga = 3


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
r = 3
val = 0


g_neighbours (1 : 25): [ 1 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
riga = 4


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
r = 4
val = 0


g_neighbours (1 : 25): [ 5 ]
------------------------------ Fine which_m_rowindxne_i

36: somma_riga_i	<=>	ris <- sum(m[riga, ])
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
riga = 5


ris: 1
------------------------------ Fine somma_riga_i

38: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_tmpm_i (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
 ]
r = 5
val = 0


g_neighbours (1 : 25): [ 4 ]
------------------------------ Fine which_m_rowindxne_i

65: media_v_d	<=>	ris <- mean(v)
ris (5 : 5): [ 0 0 0 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 2 (760 interne); stringhe deallocate: 0 (130 interne)


*** Esco da cluster_coeff2 ***
220: somma_vs_i	<=>	ris <- v + s
g_CCs (1 : 1): [ 0 ]
s = 0


g_tmp1_i (1 : 11): [ 0 ]
------------------------------ Fine somma_vs_i

221: segno_v_i	<=>	ris <- sign(v)
g_tmp1_i (1 : 11): [ 0 ]


g_segno (1 : 1): [ 0 ]
------------------------------ Fine segno_v_i

223: which_v_indxgt_i	<=>	ris <- which(v > val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indp (0 : 1): [ ]
------------------------------ Fine which_v_indxgt_i

225: which_v_indxle_i	<=>	ris <- which(v<=val)
g_segno (1 : 1): [ 0 ]
val = 0


g_indm (1 : 1): [ 1 ]
------------------------------ Fine which_v_indxle_i

229: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indp (0 : 1): [ ]
val2 = 0.3


g_p (1 : 1): [ 1 ]
------------------------------ Fine f_aux9_d

231: f_aux9_d	<=>	v1[indx] <- (val1 - abs(val2 - v2[indx])) + v1[indx]
g_p (1 : 1): [ 1 ]
val1 = 1
g_CCs (1 : 1): [ 0 ]
g_indm (1 : 1): [ 1 ]
val2 = 0.3


g_p (1 : 1): [ 1.7 ]
------------------------------ Fine f_aux9_d

243: min_v_d	<=>	ris <- min(v)
g_p (1 : 1): [ 1.7 ]


min = 1.7
------------------------------ Fine min_v_d

246: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_p (1 : 1): [ 1.7 ]
canc_NA = 0



ris: 1.7
------------------------------ Fine somma_v_d

246: dividi1_vs_d	<=>	v <- v / div
g_p (1 : 1): [ 1.7 ]
div = 1.700


g_p (1 : 1): [ 1 ]
------------------------------ Fine dividi1_vs_d

249: assegna1_v_indx_d	<=>	v[indx] <- val
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
g_CCind[i - 1] (7 : 7): [ 1 2 3 4 5 6 7 ]
val = 1


g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine assegna1_v_indx_d

267: moltiplica_vv_d	<=>	ris <- v1 * v2
g_prior_p_subnet (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
g_CCp (7 : 7): [ 1 1 1 1 1 1 1 ]


g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
------------------------------ Fine moltiplica_vv_d

269: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]


max = 0.3333333
------------------------------ Fine max_v_d

273: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
canc_NA = 1



ris: 1
------------------------------ Fine somma_v_d

273: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
div = 1.000


g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
------------------------------ Fine dividi1_vs_d

280: max_v_i		<=>	ris <- max(v)
g_dim (7 : 7): [ 2 2 2 2 2 2 2 ]


max = 2
------------------------------ Fine max_v_i

286: max_v_d		<=>	ris <- max(v)
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]


max = 0.3333333
------------------------------ Fine max_v_d

294: which_v_indxgt_d	<=>	ris <- which(v > val)
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
val = 0


g_tmp1_i (3 : 11): [ 4 5 7 ]
------------------------------ Fine which_v_indxgt_d

297: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 7
incr = 1


g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
------------------------------ Fine seq_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (7 : 11): [ 1 2 3 4 5 6 7 ]
k = 3, replace = 0
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]


ris (3 : 3): [ 7 5 4 ]
*****************************************


Stringhe allocate: 2 (760 interne); stringhe deallocate: 0 (130 interne)

300: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_mod1 (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine copia_m_i


***probmod_und***
56: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

58: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 0.5341476 0.5341476 0.5341476
	 0.5341476 0.5341476 0.5341476
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

60: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod1 (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_M_out (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

63: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 1 0 1 2 2 ]
g_h (3 : 5): [ 2 1 5 ]


g_tmp_i1 (3 : 5): [ 0 1 2 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 2


g_S_new (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 3 4 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 4 5 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (3 : 5): [ 3 4 5 ]


g_T2 (3 : 5): [ 0.3410985 0.1778748 1.321888 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_old1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 3 4 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 4 5 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 4 5 ]


g_old2 (3 : 5): [ 2 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 2 2 ]
s = -1


g_new1 (3 : 5): [ 0 1 1 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 2 0 0 ]
s = 1


g_new2 (3 : 5): [ 3 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_toll1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 3 4 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 4 5 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 4 5 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 2 2 ]
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]


g_a (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1 0.9636776 1.658902 ]


g_a (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 1 1 ]
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]


g_b (3 : 5): [ 0 -0.03632244 0.6589015 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0 -0.03632244 0.6589015 ]


g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.9636776 0.03632244
	 1.658902 0.6589015
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.9636776 0.03632244
	 1.658902 0.6589015
 ]


g_m (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_m (3 : 5): [ 1 0.9636776 1.658902 ]
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0 -0.03632244 0.6589015 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0 -0.03632244 0.6589015 ]
val = 0

g_ind1 (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -1 -0.9636776 -0.3410985 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -1 -0.9636776 -0.3410985 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (1 : 5): [ 2 ]
g_ind2 (0 : 5): [ ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 3): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_indinf (0 : 3): [ ]
val = -inf


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
val = inf


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_ind (1 : 5): [ 1 ]
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_m (3 : 5): [ 1 0.9636776 1.658902 ]


g_S1 (3 : 5): [ 1 0.9299013 4.86341 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 2 0 0 ]
g_T2 (3 : 5): [ 0.3410985 0.1778748 1.321888 ]


g_a (3 : 5): [ 1.658902 -0.1778748 -1.321888 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1.658902 -0.1778748 -1.321888 ]


g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 3 1 1 ]
g_T2 (3 : 5): [ 0.3410985 0.1778748 1.321888 ]


g_b (3 : 5): [ 2.658902 0.8221252 -0.3218882 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 2.658902 0.8221252 -0.3218882 ]


g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 0.3410985 0.1778748 1.321888 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1.658902 2.658902
	 0.1778748 0.8221252
	 1.321888 0.3218882
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1.658902 2.658902
	 0.1778748 0.8221252
	 1.321888 0.3218882
 ]


g_m (3 : 5): [ 2.658902 0.8221252 1.321888 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]
g_m (3 : 5): [ 2.658902 0.8221252 1.321888 ]
g_T2 (3 : 5): [ 0.3410985 0.1778748 1.321888 ]


g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.6589015 -0.8221252 0.3218882 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0.6589015 -0.8221252 0.3218882 ]
val = 0

g_ind1 (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1.658902 -0.1778748 -0.6781118 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 1.658902 -0.1778748 -0.6781118 ]
val = 0


g_ind2 (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (1 : 5): [ 2 ]
g_ind2 (1 : 5): [ 1 ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 3): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
g_indinf (0 : 3): [ ]
val = -inf


g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]
g_m (3 : 5): [ 2.658902 0.8221252 1.321888 ]


g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 1 0.9299013 4.86341 ]
g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]


Sc (3 : 5): [ -6.795114 -3.692029 5.86341 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ -6.795114 -3.692029 5.86341 ]
div = 2.000


Sc (3 : 5): [ -3.397557 -1.846015 2.931705 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (761 interne); stringhe deallocate: 0 (131 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ -3.397557 -1.846015 2.931705 ]
val = -inf


g_indok (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_indok (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 5): [ 1 2 3 ]
g_indok (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ -3.397557 -1.846015 2.931705 ]
g_indok (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ -3.397557 -1.846015 2.931705 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ -3.397557 -1.846015 2.931705 ]


min = -3.397557
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ -3.397557 -1.846015 2.931705 ]
g_indInf (0 : 5): [ ]
val = -4.397557


Sc (3 : 5): [ -3.397557 -1.846015 2.931705 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
Sc (3 : 5): [ -3.397557 -1.846015 2.931705 ]


ris (2 x 3 : 2 x 5): [
	 -3.397557 -1.846015 2.931705
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 1 0 1 2 2 ]
g_h (3 : 5): [ 2 1 5 ]


g_tmp_i1 (3 : 5): [ 0 1 2 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 2


g_S_new (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 3 4 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 4 5 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (3 : 5): [ 3 4 5 ]


g_T2 (3 : 5): [ 0.3410985 0.1778748 1.321888 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_old1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 3 4 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 4 5 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 4 5 ]


g_old2 (3 : 5): [ 2 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 2 2 ]
s = -1


g_new1 (3 : 5): [ 0 1 1 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 2 0 0 ]
s = 1


g_new2 (3 : 5): [ 3 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_toll1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 3 4 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 4 5 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 4 5 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 2 2 ]
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]


g_a (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1 0.9636776 1.658902 ]


g_a (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 1 1 ]
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]


g_b (3 : 5): [ 0 -0.03632244 0.6589015 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0 -0.03632244 0.6589015 ]


g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.9636776 0.03632244
	 1.658902 0.6589015
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.9636776 0.03632244
	 1.658902 0.6589015
 ]


g_m (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_m (3 : 5): [ 1 0.9636776 1.658902 ]
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0 -0.03632244 0.6589015 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0 -0.03632244 0.6589015 ]
val = 0

g_ind1 (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -1 -0.9636776 -0.3410985 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -1 -0.9636776 -0.3410985 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (1 : 5): [ 2 ]
g_ind2 (0 : 5): [ ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 3): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_indinf (0 : 3): [ ]
val = -inf


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
val = inf


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_ind (1 : 5): [ 1 ]
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_m (3 : 5): [ 1 0.9636776 1.658902 ]


g_S1 (3 : 5): [ 1 0.9299013 4.86341 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 2 0 0 ]
g_T2 (3 : 5): [ 0.3410985 0.1778748 1.321888 ]


g_a (3 : 5): [ 1.658902 -0.1778748 -1.321888 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1.658902 -0.1778748 -1.321888 ]


g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 3 1 1 ]
g_T2 (3 : 5): [ 0.3410985 0.1778748 1.321888 ]


g_b (3 : 5): [ 2.658902 0.8221252 -0.3218882 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 2.658902 0.8221252 -0.3218882 ]


g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 0.3410985 0.1778748 1.321888 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1.658902 2.658902
	 0.1778748 0.8221252
	 1.321888 0.3218882
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1.658902 2.658902
	 0.1778748 0.8221252
	 1.321888 0.3218882
 ]


g_m (3 : 5): [ 2.658902 0.8221252 1.321888 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]
g_m (3 : 5): [ 2.658902 0.8221252 1.321888 ]
g_T2 (3 : 5): [ 0.3410985 0.1778748 1.321888 ]


g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.6589015 -0.8221252 0.3218882 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0.6589015 -0.8221252 0.3218882 ]
val = 0

g_ind1 (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1.658902 -0.1778748 -0.6781118 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 1.658902 -0.1778748 -0.6781118 ]
val = 0


g_ind2 (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (1 : 5): [ 2 ]
g_ind2 (1 : 5): [ 1 ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 3): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
g_indinf (0 : 3): [ ]
val = -inf


g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]
g_m (3 : 5): [ 2.658902 0.8221252 1.321888 ]


g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 1 0.9299013 4.86341 ]
g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]


Sc (3 : 5): [ -6.795114 -3.692029 5.86341 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ -6.795114 -3.692029 5.86341 ]
div = 2.000


Sc (3 : 5): [ -3.397557 -1.846015 2.931705 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (762 interne); stringhe deallocate: 0 (132 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ -3.397557 -1.846015 2.931705 ]
val = -inf


g_indok (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 0 0 0
 ]
riga = 2
g_indok (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 5): [ 1 2 3 ]
g_indok (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ -3.397557 -1.846015 2.931705 ]
g_indok (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ -3.397557 -1.846015 2.931705 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ -3.397557 -1.846015 2.931705 ]


min = -3.397557
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ -3.397557 -1.846015 2.931705 ]
g_indInf (0 : 5): [ ]
val = -4.397557


Sc (3 : 5): [ -3.397557 -1.846015 2.931705 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 -3.397557 -1.846015 2.931705
	 0 0 0
 ]
riga = 2
Sc (3 : 5): [ -3.397557 -1.846015 2.931705 ]


ris (2 x 3 : 2 x 5): [
	 -3.397557 -1.846015 2.931705
	 -3.397557 -1.846015 2.931705
 ]
------------------------------ Fine aggiungi_mv_riga_d

134: somma_m_d	<=>	ris <- sum(m)
ris (2 x 3 : 2 x 5): [
	 -3.397557 -1.846015 2.931705
	 -3.397557 -1.846015 2.931705
 ]


ris: -4.623734
------------------------------ Fine somma_m_d

137: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

139: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

141: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_aus (3 : 5): [ 2 2 2 ]
------------------------------ Fine somma_colonne_i

143: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (3 : 5): [ 2 2 2 ]
val = 0


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

153: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 3 3 ]
------------------------------ Fine somma_righe_i

155: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 3 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i


Stringhe allocate: 2 (782 interne); stringhe deallocate: 0 (152 interne)


*** Esco da probmod_und ***

310: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine copia_m_i


***probmod_und***
56: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 1 1 1
	 1 1 1
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

58: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 -1 -1 -1
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

60: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod2 (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


g_M_out (2 : 2): [ 1 2 ]
------------------------------ Fine somma_colonne_i

63: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 1 0 1 2 2 ]
g_h (3 : 5): [ 2 1 5 ]


g_tmp_i1 (3 : 5): [ 0 1 2 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 1


g_S_new (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (3 : 5): [ 2 3 4 ]


g_T2 (3 : 5): [ 1.036322 0.3410985 0.1778748 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_old1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 3 4 ]


g_old2 (3 : 5): [ 2 2 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 2 2 ]
s = -1


g_new1 (3 : 5): [ 0 1 1 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 2 2 0 ]
s = 1


g_new2 (3 : 5): [ 3 3 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_toll1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 3 4 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 2 2 ]
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]


g_a (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1 0.9636776 1.658902 ]


g_a (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 1 1 ]
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]


g_b (3 : 5): [ 0 -0.03632244 0.6589015 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0 -0.03632244 0.6589015 ]


g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.9636776 0.03632244
	 1.658902 0.6589015
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.9636776 0.03632244
	 1.658902 0.6589015
 ]


g_m (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_m (3 : 5): [ 1 0.9636776 1.658902 ]
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0 -0.03632244 0.6589015 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0 -0.03632244 0.6589015 ]
val = 0

g_ind1 (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -1 -0.9636776 -0.3410985 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -1 -0.9636776 -0.3410985 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (1 : 5): [ 2 ]
g_ind2 (0 : 5): [ ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 3): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_indinf (0 : 3): [ ]
val = -inf


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
val = inf


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_ind (1 : 5): [ 1 ]
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_m (3 : 5): [ 1 0.9636776 1.658902 ]


g_S1 (3 : 5): [ 1 0.9299013 4.86341 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 2 2 0 ]
g_T2 (3 : 5): [ 1.036322 0.3410985 0.1778748 ]


g_a (3 : 5): [ 0.9636776 1.658902 -0.1778748 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 0.9636776 1.658902 -0.1778748 ]


g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 3 3 1 ]
g_T2 (3 : 5): [ 1.036322 0.3410985 0.1778748 ]


g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]


g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 1.036322 0.3410985 0.1778748 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.9636776 1.963678
	 1.658902 2.658902
	 0.1778748 0.8221252
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.9636776 1.963678
	 1.658902 2.658902
	 0.1778748 0.8221252
 ]


g_m (3 : 5): [ 1.963678 2.658902 0.8221252 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
g_m (3 : 5): [ 1.963678 2.658902 0.8221252 ]
g_T2 (3 : 5): [ 1.036322 0.3410985 0.1778748 ]


g_S2 (3 : 5): [ -1.894852 -7.795114 -4.62193 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.03632244 0.6589015 -0.8221252 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.03632244 0.6589015 -0.8221252 ]
val = 0

g_ind1 (2 : 5): [ 1 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.9636776 1.658902 -0.1778748 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 0.9636776 1.658902 -0.1778748 ]
val = 0


g_ind2 (2 : 5): [ 1 2 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (2 : 5): [ 1 3 ]
g_ind2 (2 : 5): [ 1 2 ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (2 : 5): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (2 : 5): [ 1 2 ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 3): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 3): [ 1 ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -1.894852 -7.795114 -4.62193 ]
g_indinf (1 : 3): [ 1 ]
val = -inf


g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
g_m (3 : 5): [ 1.963678 2.658902 0.8221252 ]


g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 1 0.9299013 4.86341 ]
g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]


Sc (3 : 5): [ -inf -6.865213 0.2414794 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ -inf -6.865213 0.2414794 ]
div = 2.000


Sc (3 : 5): [ -inf -3.432607 0.1207397 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (783 interne); stringhe deallocate: 0 (153 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ -inf -3.432607 0.1207397 ]
val = -inf


g_indok (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_indok (2 : 5): [ 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 5): [ 1 2 3 ]
g_indok (2 : 5): [ 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (3 : 5): [ 1 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 2


g_indInf (2 : 5): [ 1 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (2 : 5): [ 1 3 ]


indx = 2
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 1 3 ]
indx = 2


g_indInf (1 : 5): [ 1 ]
------------------------------ Fine elimina1_indx_i



g_indInf (1 : 5): [ 1 ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ -inf -3.432607 0.1207397 ]
g_indok (2 : 5): [ 2 3 ]


g_tmp_d1 (2 : 5): [ -3.432607 0.1207397 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (2 : 5): [ -3.432607 0.1207397 ]


min = -3.432607
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ -inf -3.432607 0.1207397 ]
g_indInf (1 : 5): [ 1 ]
val = -4.432607


Sc (3 : 5): [ -4.432607 -3.432607 0.1207397 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
Sc (3 : 5): [ -4.432607 -3.432607 0.1207397 ]


ris (2 x 3 : 2 x 5): [
	 -4.432607 -3.432607 0.1207397
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 1 0 1 2 2 ]
g_h (3 : 5): [ 2 1 5 ]


g_tmp_i1 (3 : 5): [ 0 1 2 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 2


g_S_new (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 3 4 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 4 5 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (3 : 5): [ 3 4 5 ]


g_T2 (3 : 5): [ 0.3410985 0.1778748 1.321888 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_old1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 3 4 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 4 5 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 3 4 5 ]


g_old2 (3 : 5): [ 2 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 2 2 ]
s = -1


g_new1 (3 : 5): [ 0 1 1 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 2 0 0 ]
s = 1


g_new2 (3 : 5): [ 3 1 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_toll1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 2 3 4 ]
s = 1


g_tmp_i1 (3 : 5): [ 3 4 5 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 3 4 5 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 2 2 ]
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]


g_a (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1 0.9636776 1.658902 ]


g_a (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 1 1 ]
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]


g_b (3 : 5): [ 0 -0.03632244 0.6589015 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0 -0.03632244 0.6589015 ]


g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.9636776 0.03632244
	 1.658902 0.6589015
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.9636776 0.03632244
	 1.658902 0.6589015
 ]


g_m (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_m (3 : 5): [ 1 0.9636776 1.658902 ]
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0 -0.03632244 0.6589015 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0 -0.03632244 0.6589015 ]
val = 0

g_ind1 (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -1 -0.9636776 -0.3410985 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -1 -0.9636776 -0.3410985 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (1 : 5): [ 2 ]
g_ind2 (0 : 5): [ ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 3): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_indinf (0 : 3): [ ]
val = -inf


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
val = inf


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_ind (1 : 5): [ 1 ]
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_m (3 : 5): [ 1 0.9636776 1.658902 ]


g_S1 (3 : 5): [ 1 0.9299013 4.86341 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 2 0 0 ]
g_T2 (3 : 5): [ 0.3410985 0.1778748 1.321888 ]


g_a (3 : 5): [ 1.658902 -0.1778748 -1.321888 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1.658902 -0.1778748 -1.321888 ]


g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 3 1 1 ]
g_T2 (3 : 5): [ 0.3410985 0.1778748 1.321888 ]


g_b (3 : 5): [ 2.658902 0.8221252 -0.3218882 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 2.658902 0.8221252 -0.3218882 ]


g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 0.3410985 0.1778748 1.321888 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1.658902 2.658902
	 0.1778748 0.8221252
	 1.321888 0.3218882
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1.658902 2.658902
	 0.1778748 0.8221252
	 1.321888 0.3218882
 ]


g_m (3 : 5): [ 2.658902 0.8221252 1.321888 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]
g_m (3 : 5): [ 2.658902 0.8221252 1.321888 ]
g_T2 (3 : 5): [ 0.3410985 0.1778748 1.321888 ]


g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.6589015 -0.8221252 0.3218882 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0.6589015 -0.8221252 0.3218882 ]
val = 0

g_ind1 (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 1.658902 -0.1778748 -0.6781118 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 1.658902 -0.1778748 -0.6781118 ]
val = 0


g_ind2 (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (1 : 5): [ 2 ]
g_ind2 (1 : 5): [ 1 ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (1 : 5): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 3): [ ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
g_indinf (0 : 3): [ ]
val = -inf


g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1.658902 0.1778748 1.321888 ]
g_b (3 : 5): [ 2.658902 0.8221252 0.3218882 ]
g_m (3 : 5): [ 2.658902 0.8221252 1.321888 ]


g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 1 0.9299013 4.86341 ]
g_S2 (3 : 5): [ -7.795114 -4.62193 1 ]


Sc (3 : 5): [ -6.795114 -3.692029 5.86341 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ -6.795114 -3.692029 5.86341 ]
div = 2.000


Sc (3 : 5): [ -3.397557 -1.846015 2.931705 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (784 interne); stringhe deallocate: 0 (154 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ -3.397557 -1.846015 2.931705 ]
val = -inf


g_indok (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 0 0 0
 ]
riga = 2
g_indok (3 : 5): [ 1 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 5): [ 1 2 3 ]
g_indok (3 : 5): [ 1 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indInf (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 1


g_indInf (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 2 3 ]
indx = 1


g_indInf (1 : 5): [ 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (1 : 5): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (1 : 5): [ 3 ]
indx = 1


g_indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



g_indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ -3.397557 -1.846015 2.931705 ]
g_indok (3 : 5): [ 1 2 3 ]


g_tmp_d1 (3 : 5): [ -3.397557 -1.846015 2.931705 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (3 : 5): [ -3.397557 -1.846015 2.931705 ]


min = -3.397557
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ -3.397557 -1.846015 2.931705 ]
g_indInf (0 : 5): [ ]
val = -4.397557


Sc (3 : 5): [ -3.397557 -1.846015 2.931705 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 -4.432607 -3.432607 0.1207397
	 0 0 0
 ]
riga = 2
Sc (3 : 5): [ -3.397557 -1.846015 2.931705 ]


ris (2 x 3 : 2 x 5): [
	 -4.432607 -3.432607 0.1207397
	 -3.397557 -1.846015 2.931705
 ]
------------------------------ Fine aggiungi_mv_riga_d

134: somma_m_d	<=>	ris <- sum(m)
ris (2 x 3 : 2 x 5): [
	 -4.432607 -3.432607 0.1207397
	 -3.397557 -1.846015 2.931705
 ]


ris: -10.05634
------------------------------ Fine somma_m_d

137: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 1 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

139: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 1 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 1 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

141: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 1 1 1
 ]


g_aus (3 : 5): [ 1 2 2 ]
------------------------------ Fine somma_colonne_i

143: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (3 : 5): [ 1 2 2 ]
val = 0


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

153: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 1 1 1
 ]


g_rs (2 : 2): [ 2 3 ]
------------------------------ Fine somma_righe_i

155: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 2 3 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 1 1 1
 ]
r = 1
val = 0


g_I_add (2 : 10): [ 2 3 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
g_I_add (2 : 10): [ 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (2 : 2): [ 2 3 ]


ris (2 : 2): [ 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 2 3 ]
------------------------------ Fine unione1_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 1 1 1
 ]
r = 2
val = 0


g_I_add (3 : 10): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 2 3 ]
g_I_add (3 : 10): [ 1 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (5 : 5): [ 2 3 1 2 3 ]


ris (3 : 5): [ 2 3 1 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 5): [ 2 3 1 ]
------------------------------ Fine unione1_i


Stringhe allocate: 2 (804 interne); stringhe deallocate: 0 (174 interne)


*** Esco da probmod_und ***

326: copia_m_i	<=>	ris <- da
VECTOR_ELT(elem, 1) (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_mod3 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
------------------------------ Fine copia_m_i


***probmod_und***
56: InitMatr_i
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 1 1 1
 ]
val = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

58: InitMatr_d
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 -1 -1 -1
 ]
val = 0


ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

60: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_mod3 (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


g_M_out (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

63: InitMatr_i
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = -2147483648


g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 1 0 1 2 2 ]
g_h (3 : 5): [ 2 1 5 ]


g_tmp_i1 (3 : 5): [ 0 1 2 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 1


g_S_new (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (3 : 5): [ 2 3 4 ]


g_T2 (3 : 5): [ 1.036322 0.3410985 0.1778748 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_old1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 3 4 ]


g_old2 (3 : 5): [ 2 2 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 2 2 ]
s = -1


g_new1 (3 : 5): [ 0 1 1 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 2 2 0 ]
s = 1


g_new2 (3 : 5): [ 3 3 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_toll1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 3 4 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 2 2 ]
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]


g_a (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1 0.9636776 1.658902 ]


g_a (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 1 1 ]
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]


g_b (3 : 5): [ 0 -0.03632244 0.6589015 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0 -0.03632244 0.6589015 ]


g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.9636776 0.03632244
	 1.658902 0.6589015
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.9636776 0.03632244
	 1.658902 0.6589015
 ]


g_m (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_m (3 : 5): [ 1 0.9636776 1.658902 ]
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0 -0.03632244 0.6589015 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0 -0.03632244 0.6589015 ]
val = 0

g_ind1 (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -1 -0.9636776 -0.3410985 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -1 -0.9636776 -0.3410985 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (1 : 5): [ 2 ]
g_ind2 (0 : 5): [ ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 3): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_indinf (0 : 3): [ ]
val = -inf


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
val = inf


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_ind (1 : 5): [ 1 ]
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_m (3 : 5): [ 1 0.9636776 1.658902 ]


g_S1 (3 : 5): [ 1 0.9299013 4.86341 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 2 2 0 ]
g_T2 (3 : 5): [ 1.036322 0.3410985 0.1778748 ]


g_a (3 : 5): [ 0.9636776 1.658902 -0.1778748 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 0.9636776 1.658902 -0.1778748 ]


g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 3 3 1 ]
g_T2 (3 : 5): [ 1.036322 0.3410985 0.1778748 ]


g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]


g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 1.036322 0.3410985 0.1778748 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.9636776 1.963678
	 1.658902 2.658902
	 0.1778748 0.8221252
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.9636776 1.963678
	 1.658902 2.658902
	 0.1778748 0.8221252
 ]


g_m (3 : 5): [ 1.963678 2.658902 0.8221252 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
g_m (3 : 5): [ 1.963678 2.658902 0.8221252 ]
g_T2 (3 : 5): [ 1.036322 0.3410985 0.1778748 ]


g_S2 (3 : 5): [ -1.894852 -7.795114 -4.62193 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.03632244 0.6589015 -0.8221252 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.03632244 0.6589015 -0.8221252 ]
val = 0

g_ind1 (2 : 5): [ 1 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.9636776 1.658902 -0.1778748 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 0.9636776 1.658902 -0.1778748 ]
val = 0


g_ind2 (2 : 5): [ 1 2 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (2 : 5): [ 1 3 ]
g_ind2 (2 : 5): [ 1 2 ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (2 : 5): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (2 : 5): [ 1 2 ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 3): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 3): [ 1 ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -1.894852 -7.795114 -4.62193 ]
g_indinf (1 : 3): [ 1 ]
val = -inf


g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
g_m (3 : 5): [ 1.963678 2.658902 0.8221252 ]


g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 1 0.9299013 4.86341 ]
g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]


Sc (3 : 5): [ -inf -6.865213 0.2414794 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ -inf -6.865213 0.2414794 ]
div = 2.000


Sc (3 : 5): [ -inf -3.432607 0.1207397 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (805 interne); stringhe deallocate: 0 (175 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ -inf -3.432607 0.1207397 ]
val = -inf


g_indok (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
g_indok (2 : 5): [ 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 5): [ 1 2 3 ]
g_indok (2 : 5): [ 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (3 : 5): [ 1 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 2


g_indInf (2 : 5): [ 1 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (2 : 5): [ 1 3 ]


indx = 2
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 1 3 ]
indx = 2


g_indInf (1 : 5): [ 1 ]
------------------------------ Fine elimina1_indx_i



g_indInf (1 : 5): [ 1 ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ -inf -3.432607 0.1207397 ]
g_indok (2 : 5): [ 2 3 ]


g_tmp_d1 (2 : 5): [ -3.432607 0.1207397 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (2 : 5): [ -3.432607 0.1207397 ]


min = -3.432607
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ -inf -3.432607 0.1207397 ]
g_indInf (1 : 5): [ 1 ]
val = -4.432607


Sc (3 : 5): [ -4.432607 -3.432607 0.1207397 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 0 0 0
	 0 0 0
 ]
riga = 1
Sc (3 : 5): [ -4.432607 -3.432607 0.1207397 ]


ris (2 x 3 : 2 x 5): [
	 -4.432607 -3.432607 0.1207397
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

77: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
g_memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


g_ind1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 1 0 1 2 2 ]
g_h (3 : 5): [ 2 1 5 ]


g_tmp_i1 (3 : 5): [ 0 1 2 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
45: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 1


g_S_new (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

47: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

49: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]
------------------------------ Fine assegna_v_indxNA_d

51: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_STout (7 : 7): [ 0 1.036322 0.3410985 0.1778748 1.321888 2.122816 0 ]
g_tmp_i1 (3 : 5): [ 2 3 4 ]


g_T2 (3 : 5): [ 1.036322 0.3410985 0.1778748 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

55: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_old1 (3 : 5): [ 1 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

57: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

58: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
g_tmp_i1 (3 : 5): [ 2 3 4 ]


g_old2 (3 : 5): [ 2 2 0 ]
------------------------------ Fine assegna_v_indxNA_d

60: somma_vs_d	<=>	ris <- v + s
g_old1 (3 : 5): [ 1 2 2 ]
s = -1


g_new1 (3 : 5): [ 0 1 1 ]
------------------------------ Fine somma_vs_d

62: somma_vs_d	<=>	ris <- v + s
g_old2 (3 : 5): [ 2 2 0 ]
s = 1


g_new2 (3 : 5): [ 3 3 1 ]
------------------------------ Fine somma_vs_d

64: somma_vs_i	<=>	ris <- v + s
g_tmp_i1 (3 : 5): [ 0 1 2 ]
s = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine somma_vs_i

66: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 1 2 3 ]


g_toll1 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

68: somma_vs_i	<=>	ris <- v + s
g_S_new (3 : 5): [ 1 2 3 ]
s = 1


g_tmp_i1 (3 : 5): [ 2 3 4 ]
------------------------------ Fine somma_vs_i

70: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_toll (7 : 7): [ 1 1 1 1 1 1 1 ]
g_tmp_i1 (3 : 5): [ 2 3 4 ]


g_toll2 (3 : 5): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

72: diff_vv_d	<=>	ris <- v1 - v2
g_old1 (3 : 5): [ 1 2 2 ]
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]


g_a (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine diff_vv_d

73: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 1 0.9636776 1.658902 ]


g_a (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine abs1_v_d

75: diff_vv_d	<=>	ris <- v1 - v2
g_new1 (3 : 5): [ 0 1 1 ]
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]


g_b (3 : 5): [ 0 -0.03632244 0.6589015 ]
------------------------------ Fine diff_vv_d

76: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 0 -0.03632244 0.6589015 ]


g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
------------------------------ Fine abs1_v_d

78: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

82: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine assegna1_vs_indx_d

84: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
------------------------------ Fine assegna1_vs_indx_d

92: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.9636776 0.03632244
	 1.658902 0.6589015
 ]
------------------------------ Fine cbind2v_d

93: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 1 0
	 0.9636776 0.03632244
	 1.658902 0.6589015
 ]


g_m (3 : 5): [ 1 0.9636776 1.658902 ]
------------------------------ Fine max_righe_d

95: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_m (3 : 5): [ 1 0.9636776 1.658902 ]
g_T1 (3 : 5): [ 0 1.036322 0.3410985 ]
ATTENZIONE (f_aux_d, linea /home/marco/hmm/scoremodular.c # 95): l'elemento 1 ha provocato una divisione per zero e gli e` stato assegnato un valore al di fuori del dominio!


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine f_aux_d

97: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0 -0.03632244 0.6589015 ]
------------------------------ Fine diff_vv_d

98: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ 0 -0.03632244 0.6589015 ]
val = 0

g_ind1 (1 : 5): [ 2 ]
------------------------------ Fine which_v_indxlt_d

100: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_toll1 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -1 -0.9636776 -0.3410985 ]
------------------------------ Fine diff_vv_d

101: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ -1 -0.9636776 -0.3410985 ]
val = 0


g_ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

103: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (1 : 5): [ 2 ]
g_ind2 (0 : 5): [ ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 2
g_ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (0 : 3): [ ]
------------------------------ Fine interseca_i

105: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_indinf (0 : 3): [ ]
val = -inf


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine assegna1_vs_indx_d

107: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_ind (0 : 5): [ ]
val = 0


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine assegna1_vs_indx_d

109: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

111: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

112: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
------------------------------ Fine f_aux10_d

114: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
val = inf


g_ind (1 : 5): [ 1 ]
------------------------------ Fine which_v_indxeq_d

116: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S1 (3 : 5): [ inf 0.9299013 4.86341 ]
g_ind (1 : 5): [ 1 ]
g_a (3 : 5): [ 1 0.9636776 1.658902 ]
g_b (3 : 5): [ 0 0.03632244 0.6589015 ]
g_m (3 : 5): [ 1 0.9636776 1.658902 ]


g_S1 (3 : 5): [ 1 0.9299013 4.86341 ]
------------------------------ Fine f_aux10_d

125: diff_vv_d	<=>	ris <- v1 - v2
g_old2 (3 : 5): [ 2 2 0 ]
g_T2 (3 : 5): [ 1.036322 0.3410985 0.1778748 ]


g_a (3 : 5): [ 0.9636776 1.658902 -0.1778748 ]
------------------------------ Fine diff_vv_d

126: abs1_v_d	<=>	v <- abs(v)
g_a (3 : 5): [ 0.9636776 1.658902 -0.1778748 ]


g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
------------------------------ Fine abs1_v_d

128: diff_vv_d	<=>	ris <- v1 - v2
g_new2 (3 : 5): [ 3 3 1 ]
g_T2 (3 : 5): [ 1.036322 0.3410985 0.1778748 ]


g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
------------------------------ Fine diff_vv_d

129: abs1_v_d	<=>	v <- abs(v)
g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]


g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
------------------------------ Fine abs1_v_d

131: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_T2 (3 : 5): [ 1.036322 0.3410985 0.1778748 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

135: assegna1_vs_indx_d	<=>	v[indx] <- val
g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
g_ind (0 : 5): [ ]
val = 0


g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
------------------------------ Fine assegna1_vs_indx_d

137: assegna1_vs_indx_d	<=>	v[indx] <- val
g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
g_ind (0 : 5): [ ]
val = 0


g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
------------------------------ Fine assegna1_vs_indx_d

139: cbind2v_d	<=>	ris <- cbind(v1, v2)
g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]


g_tmpm_d (3 x 2 : 5 x 2): [
	 0.9636776 1.963678
	 1.658902 2.658902
	 0.1778748 0.8221252
 ]
------------------------------ Fine cbind2v_d

140: max_righe_d	<=>	ris <- apply(m, 1, max)
g_tmpm_d (3 x 2 : 5 x 2): [
	 0.9636776 1.963678
	 1.658902 2.658902
	 0.1778748 0.8221252
 ]


g_m (3 : 5): [ 1.963678 2.658902 0.8221252 ]
------------------------------ Fine max_righe_d

142: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
g_m (3 : 5): [ 1.963678 2.658902 0.8221252 ]
g_T2 (3 : 5): [ 1.036322 0.3410985 0.1778748 ]


g_S2 (3 : 5): [ -1.894852 -7.795114 -4.62193 ]
------------------------------ Fine f_aux_d

144: diff_vv_d	<=>	ris <- v1 - v2
g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ -0.03632244 0.6589015 -0.8221252 ]
------------------------------ Fine diff_vv_d

145: which_v_indxlt_d	<=>	ris <- which(v<val)
g_tmp1_d (3 : 5): [ -0.03632244 0.6589015 -0.8221252 ]
val = 0

g_ind1 (2 : 5): [ 1 3 ]
------------------------------ Fine which_v_indxlt_d

147: diff_vv_d	<=>	ris <- v1 - v2
g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
g_toll2 (3 : 5): [ 1 1 1 ]


g_tmp1_d (3 : 5): [ 0.9636776 1.658902 -0.1778748 ]
------------------------------ Fine diff_vv_d

148: which_v_indxgt_d	<=>	ris <- which(v > val)
g_tmp1_d (3 : 5): [ 0.9636776 1.658902 -0.1778748 ]
val = 0


g_ind2 (2 : 5): [ 1 2 ]
------------------------------ Fine which_v_indxgt_d

150: interseca_i	<=>	ris <- intersect(v1, v2)
g_ind1 (2 : 5): [ 1 3 ]
g_ind2 (2 : 5): [ 1 2 ]
2485: esiste_v_i	<=>	elem %IN% v
elem = 1
g_ind2 (2 : 5): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 1
g_indinf (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2485: esiste_v_i	<=>	elem %IN% v
elem = 3
g_ind2 (2 : 5): [ 1 2 ]


indx = 0
------------------------------ Fine esiste_v_i

2486: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indinf (1 : 3): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i



g_indinf (1 : 3): [ 1 ]
------------------------------ Fine interseca_i

152: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -1.894852 -7.795114 -4.62193 ]
g_indinf (1 : 3): [ 1 ]
val = -inf


g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
------------------------------ Fine assegna1_vs_indx_d

154: assegna1_vs_indx_d	<=>	v[indx] <- val
g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
g_ind (0 : 5): [ ]
val = 0


g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
------------------------------ Fine assegna1_vs_indx_d

156: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
complemento = 0


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

158: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

159: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
g_tmp1_d (3 : 5): [ inf inf inf ]


g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
------------------------------ Fine f_aux10_d

161: which_v_indxeq_d	<=>	ris <- which(v==val)
g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
val = inf


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

163: rep_s_d	<=>	ris <- rep(num, rip)
num = inf
rip = 3


g_tmp1_d (3 : 5): [ inf inf inf ]
------------------------------ Fine rep_s_d

164: f_aux10_d	<=>	ris[indx] <- (sign(a[indx]-b[indx]))*m[indx]/1
g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
g_ind (0 : 5): [ ]
g_a (3 : 5): [ 0.9636776 1.658902 0.1778748 ]
g_b (3 : 5): [ 1.963678 2.658902 0.8221252 ]
g_m (3 : 5): [ 1.963678 2.658902 0.8221252 ]


g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]
------------------------------ Fine f_aux10_d

173: somma_vv_d	<=>	ris <- v1 + v2
g_S1 (3 : 5): [ 1 0.9299013 4.86341 ]
g_S2 (3 : 5): [ -inf -7.795114 -4.62193 ]


Sc (3 : 5): [ -inf -6.865213 0.2414794 ]
------------------------------ Fine somma_vv_d

174: dividi1_vs_d	<=>	v <- v / div
Sc (3 : 5): [ -inf -6.865213 0.2414794 ]
div = 2.000


Sc (3 : 5): [ -inf -3.432607 0.1207397 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 2 (806 interne); stringhe deallocate: 0 (176 interne)


*** Esco da scoremodular ***

95: which_v_indxne_d	<=>	ris <- which(v != val)
Sc (3 : 5): [ -inf -3.432607 0.1207397 ]
val = -inf


g_indok (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 0 0 0
 ]
riga = 2
g_indok (2 : 5): [ 2 3 ]
val = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 0 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_tmp_i1 (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_tmp_i1 (3 : 5): [ 1 2 3 ]
g_indok (2 : 5): [ 2 3 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_tmp_i1 (3 : 5): [ 1 2 3 ]
st = 1
end = 3


g_indInf (3 : 5): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 2
g_indInf (3 : 5): [ 1 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (3 : 5): [ 1 2 3 ]
indx = 2


g_indInf (2 : 5): [ 1 3 ]
------------------------------ Fine elimina1_indx_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 3
g_indInf (2 : 5): [ 1 3 ]


indx = 2
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_indInf (2 : 5): [ 1 3 ]
indx = 2


g_indInf (1 : 5): [ 1 ]
------------------------------ Fine elimina1_indx_i



g_indInf (1 : 5): [ 1 ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
Sc (3 : 5): [ -inf -3.432607 0.1207397 ]
g_indok (2 : 5): [ 2 3 ]


g_tmp_d1 (2 : 5): [ -3.432607 0.1207397 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
g_tmp_d1 (2 : 5): [ -3.432607 0.1207397 ]


min = -3.432607
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
Sc (3 : 5): [ -inf -3.432607 0.1207397 ]
g_indInf (1 : 5): [ 1 ]
val = -4.432607


Sc (3 : 5): [ -4.432607 -3.432607 0.1207397 ]
------------------------------ Fine assegna1_vs_indx_d

126: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 3 : 2 x 5): [
	 -4.432607 -3.432607 0.1207397
	 0 0 0
 ]
riga = 2
Sc (3 : 5): [ -4.432607 -3.432607 0.1207397 ]


ris (2 x 3 : 2 x 5): [
	 -4.432607 -3.432607 0.1207397
	 -4.432607 -3.432607 0.1207397
 ]
------------------------------ Fine aggiungi_mv_riga_d

134: somma_m_d	<=>	ris <- sum(m)
ris (2 x 3 : 2 x 5): [
	 -4.432607 -3.432607 0.1207397
	 -4.432607 -3.432607 0.1207397
 ]


ris: -15.48895
------------------------------ Fine somma_m_d

137: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 0 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 0 1 1
 ]
val1 = 0
val2 = 0


g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 0 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

139: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 0 1 1
 ]
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 0 1 1
 ]
val1 = 0
val2 = 1


g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 0 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

141: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 0 1 1
 ]


g_aus (3 : 5): [ 0 2 2 ]
------------------------------ Fine somma_colonne_i

143: which_v_indxne_i	<=>	ris <- which(v != val)
g_aus (3 : 5): [ 0 2 2 ]
val = 0


g_tmp_i1 (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_i

153: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 0 1 1
 ]


g_rs (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

155: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_rs (2 : 2): [ 2 2 ]
decr = 0


g_ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 0 1 1
 ]
r = 1
val = 0


g_I_add (2 : 10): [ 2 3 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 5): [ ]
g_I_add (2 : 10): [ 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (2 : 2): [ 2 3 ]


ris (2 : 2): [ 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 2 3 ]
------------------------------ Fine unione1_i

167: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
g_checkOUT (2 x 3 : 2 x 5): [
	 0 1 1
	 0 1 1
 ]
r = 2
val = 0


g_I_add (2 : 10): [ 2 3 ]
------------------------------ Fine which_m_rowindxne_i

169: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 2 3 ]
g_I_add (2 : 10): [ 2 3 ]
3029: elimina_doppi_i	<=>	ris <- union(v, v)
g_I (4 : 4): [ 2 3 2 3 ]


ris (2 : 4): [ 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 2 3 ]
------------------------------ Fine unione1_i


Stringhe allocate: 2 (826 interne); stringhe deallocate: 0 (196 interne)


*** Esco da probmod_und ***

339: vettore3s_d		<=>	ris <- c(el1, el2, el3)
el1 = -2.311867, el2 = -5.02817, el3 = -7.744474


g_pm (3 : 3): [ -2.311867 -5.02817 -7.744474 ]
------------------------------ Fine vettore3s_d

340: copia_v_d	<=>	ris[st:end] <- v[st:end]
g_pm (3 : 3): [ -2.311867 -5.02817 -7.744474 ]
st = 1
end = 3


g_prob_mod (3 : 3): [ -2.311867 -5.02817 -7.744474 ]
------------------------------ Fine copia_v_d

342: assegna1_v_indxNA_d	<=>	v1[which(is.na(v2))] <- val oppure v1[which(!is.na(v2))] <- val
g_prob_mod (3 : 3): [ -2.311867 -5.02817 -7.744474 ]
g_prob_mod (3 : 3): [ -2.311867 -5.02817 -7.744474 ]
val = 0
complemento = 0


g_prob_mod (3 : 3): [ -2.311867 -5.02817 -7.744474 ]
------------------------------ Fine assegna1_v_indxNA_d

344: min_v_d	<=>	ris <- min(v)
g_prob_mod (3 : 3): [ -2.311867 -5.02817 -7.744474 ]


min = -7.744474
------------------------------ Fine min_v_d

347: somma1_vs_d	<=>	v <- v + s
g_prob_mod (3 : 3): [ -2.311867 -5.02817 -7.744474 ]
s = 7.855585


g_prob_mod (3 : 3): [ 5.543718 2.827414 0.1111111 ]
------------------------------ Fine somma1_vs_d

349: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
g_pm (3 : 3): [ -2.311867 -5.02817 -7.744474 ]
complemento = 0


g_tmp1_i (0 : 11): [ ]
------------------------------ Fine which_v_indxNA_d

350: assegna1_v_indx_d	<=>	v[indx] <- val
g_prob_mod (3 : 3): [ 5.543718 2.827414 0.1111111 ]
g_tmp1_i (0 : 11): [ ]
val = 0


g_prob_mod (3 : 3): [ 5.543718 2.827414 0.1111111 ]
------------------------------ Fine assegna1_v_indx_d

352: which_v_indxne_d	<=>	ris <- which(v != val)
g_prob_mod (3 : 3): [ 5.543718 2.827414 0.1111111 ]
val = 0


g_ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

356: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_prob_mod (3 : 3): [ 5.543718 2.827414 0.1111111 ]
canc_NA = 0



ris: 8.482243
------------------------------ Fine somma_v_d

356: dividi1_vs_d	<=>	v <- v / div
g_prob_mod (3 : 3): [ 5.543718 2.827414 0.1111111 ]
div = 8.482


g_prob_mod (3 : 3): [ 0.6535674 0.3333333 0.01309926 ]
------------------------------ Fine dividi1_vs_d

358: vettore3s_i		<=>	ris <- c(el1, el2, el3)
el1 = 1, el2 = 2, el3 = 3


g_tmp1_i (3 : 11): [ 1 2 3 ]
------------------------------ Fine vettore3s_i


***sampleB_p***

*** sample_p ***
g_tmp1_i (3 : 11): [ 1 2 3 ]
k = 1, replace = 0
g_prob_mod (3 : 3): [ 0.6535674 0.3333333 0.01309926 ]


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 2 (826 interne); stringhe deallocate: 0 (196 interne)

363: copia_m_i	<=>	ris <- da
g_mod1 (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_M (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine copia_m_i

364: copia_m_d	<=>	ris <- da
ris (2 x 3 : 2 x 5): [
	 -3.397557 -1.846015 2.931705
	 -3.397557 -1.846015 2.931705
 ]


g_Sc (2 x 3 : 2 x 5): [
	 -3.397557 -1.846015 2.931705
	 -3.397557 -1.846015 2.931705
 ]
------------------------------ Fine copia_m_d

365: copia_v_i	<=>	ris[st:end] <- v[st:end]
VECTOR_ELT(elem, 6) (2 : 2): [ 1 2 ]
st = 1
end = 2


g_hubs (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

393: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
canc_NA = 0



ris: 1
------------------------------ Fine somma_v_d

393: dividi1_vs_d	<=>	v <- v / div
g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
div = 1.000


g_ppp (7 : 7): [ 0 0 0 0.3333333 0.3333333 0 0.3333333 ]
------------------------------ Fine dividi1_vs_d


***sampleB***

***sample***
g_hubs (2 : 2): [ 1 2 ]
k = 1, replace = 0


g_hubs (1 : 2): [ 1 ]
*****************************************


Stringhe allocate: 2 (826 interne); stringhe deallocate: 0 (196 interne)


Stringhe allocate: 2 (826 interne); stringhe deallocate: 0 (196 interne)

671: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (3 : 5): [ 2 1 5 ]
st = 1
end = 3


g_h1 (3 : 5): [ 2 1 5 ]
------------------------------ Fine copia_v_i


***assign_nodes_und***
44: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (3 : 5): [ 2 1 5 ]
st = 1
end = 3


g_or_h (3 : 5): [ 2 1 5 ]
------------------------------ Fine copia_v_i

46: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


g_aus_h (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

52: InitVett_i
g_index (2 : 2): [ 4 5 ]
val = 0


g_index (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_i

54: somma_righe_i	<=>	ris <- apply(m, 1, sum)
g_M (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


g_M_out (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

56: ordine_i	<=>	ris <- order(v, decreasing=decr)
g_M_out (2 : 2): [ 2 2 ]
decr = 1


g_Ord (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

61: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 3 : 2 x 5): [
	 -3.397557 -1.846015 2.931705
	 -3.397557 -1.846015 2.931705
 ]
r = 1

g_p (3 : 5): [ -3.397557 -1.846015 2.931705 ]
------------------------------ Fine riga_d

63: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (3 : 5): [ -3.397557 -1.846015 2.931705 ]
val = 0


g_tmp_i (2 : 5): [ 1 2 ]
------------------------------ Fine which_v_indxle_d

66: min_v_d	<=>	ris <- min(v)
g_p (3 : 5): [ -3.397557 -1.846015 2.931705 ]


min = -3.397557
------------------------------ Fine min_v_d

67: somma1_vs_d	<=>	v <- v + s
g_p (3 : 5): [ -3.397557 -1.846015 2.931705 ]
s = 3.508668


g_p (3 : 5): [ 0.1111111 1.662654 6.440373 ]
------------------------------ Fine somma1_vs_d

70: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 1 0 1 2 2 ]
g_h1 (3 : 5): [ 2 1 5 ]


g_Sout_h (3 : 5): [ 0 1 2 ]
------------------------------ Fine assegna_v_indxNA_i

75: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sout_h (3 : 5): [ 0 1 2 ]
val = 3


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

81: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (3 : 5): [ 0.1111111 1.662654 6.440373 ]
g_aus_h (3 : 5): [ 1 2 3 ]


g_tmp_d (3 : 5): [ 0.1111111 1.662654 6.440373 ]
------------------------------ Fine assegna_v_indxNA_d

82: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (3 : 5): [ 0.1111111 1.662654 6.440373 ]
canc_NA = 0



ris: 8.214138
------------------------------ Fine somma_v_d

83: dividi_vs_d	ris <- v / div
g_tmp_d (3 : 5): [ 0.1111111 1.662654 6.440373 ]
div = 8.214


g_p (3 : 5): [ 0.01352681 0.2024137 0.7840595 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (3 : 5): [ 2 1 5 ]
k = 1, replace = 0
g_p (3 : 5): [ 0.01352681 0.2024137 0.7840595 ]


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 2 (826 interne); stringhe deallocate: 0 (196 interne)

90: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (3 : 5): [ 2 1 5 ]
ris (1 : 1): [ 2 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 2
g_h1 (3 : 5): [ 2 1 5 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (3 : 5): [ 2 1 5 ]
indx = 1


g_h1 (2 : 5): [ 1 5 ]
------------------------------ Fine elimina1_indx_i



g_h1 (2 : 5): [ 1 5 ]
------------------------------ Fine setdiff1_i

92: which_indx_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (3 : 5): [ 2 1 5 ]
ris (1 : 1): [ 2 ]
2032: esiste_v_i	<=>	elem %IN% v
elem = 2
g_or_h (3 : 5): [ 2 1 5 ]


indx = 1
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 1 ]
------------------------------ Fine which_indx_vv_eq_i

93: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (3 : 5): [ 1 2 3 ]
g_tmp_i (1 : 5): [ 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
g_aus_h (3 : 5): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
g_aus_h (3 : 5): [ 1 2 3 ]
indx = 1


g_aus_h (2 : 5): [ 2 3 ]
------------------------------ Fine elimina1_indx_i



g_aus_h (2 : 5): [ 2 3 ]
------------------------------ Fine setdiff1_i

61: riga_d	<=>	ris <- m[r,]
g_Sc (2 x 3 : 2 x 5): [
	 -3.397557 -1.846015 2.931705
	 -3.397557 -1.846015 2.931705
 ]
r = 2

g_p (3 : 5): [ -3.397557 -1.846015 2.931705 ]
------------------------------ Fine riga_d

63: which_v_indxle_d	<=>	ris <- which(v<=val)
g_p (3 : 5): [ -3.397557 -1.846015 2.931705 ]
val = 0


g_tmp_i (2 : 5): [ 1 2 ]
------------------------------ Fine which_v_indxle_d

66: min_v_d	<=>	ris <- min(v)
g_p (3 : 5): [ -3.397557 -1.846015 2.931705 ]


min = -3.397557
------------------------------ Fine min_v_d

67: somma1_vs_d	<=>	v <- v + s
g_p (3 : 5): [ -3.397557 -1.846015 2.931705 ]
s = 3.508668


g_p (3 : 5): [ 0.1111111 1.662654 6.440373 ]
------------------------------ Fine somma1_vs_d

70: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
g_Sout (5 : 5): [ 1 0 1 2 2 ]
g_h1 (2 : 5): [ 1 5 ]


g_Sout_h (2 : 5): [ 1 2 ]
------------------------------ Fine assegna_v_indxNA_i

75: which_v_indxgt_i	<=>	ris <- which(v > val)
g_Sout_h (2 : 5): [ 1 2 ]
val = 3


g_ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

81: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
g_p (3 : 5): [ 0.1111111 1.662654 6.440373 ]
g_aus_h (2 : 5): [ 2 3 ]


g_tmp_d (2 : 5): [ 1.662654 6.440373 ]
------------------------------ Fine assegna_v_indxNA_d

82: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
g_tmp_d (2 : 5): [ 1.662654 6.440373 ]
canc_NA = 0



ris: 8.103027
------------------------------ Fine somma_v_d

83: dividi_vs_d	ris <- v / div
g_tmp_d (2 : 5): [ 1.662654 6.440373 ]
div = 8.103


g_p (2 : 5): [ 0.2051892 0.7948108 ]
------------------------------ Fine dividi_vs_d


***sampleB_p***

*** sample_p ***
g_h1 (2 : 5): [ 1 5 ]
k = 1, replace = 0
g_p (2 : 5): [ 0.2051892 0.7948108 ]


ris (1 : 1): [ 5 ]
*****************************************


Stringhe allocate: 2 (826 interne); stringhe deallocate: 0 (196 interne)

90: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_h1 (2 : 5): [ 1 5 ]
ris (1 : 1): [ 5 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 5
g_h1 (2 : 5): [ 1 5 ]


indx = 2
------------------------------ Fine esiste_v_i

2065: elimina1_indx_i	<=>	v <- v[-indx]
g_h1 (2 : 5): [ 1 5 ]
indx = 2


g_h1 (1 : 5): [ 1 ]
------------------------------ Fine elimina1_indx_i



g_h1 (1 : 5): [ 1 ]
------------------------------ Fine setdiff1_i

92: which_indx_vv_eq_i	<=>	ris <- which(v1 == v2)
g_or_h (3 : 5): [ 2 1 5 ]
ris (1 : 1): [ 5 ]
2032: esiste_v_i	<=>	elem %IN% v
elem = 5
g_or_h (3 : 5): [ 2 1 5 ]


indx = 3
------------------------------ Fine esiste_v_i



g_tmp_i (1 : 5): [ 1 ]
------------------------------ Fine which_indx_vv_eq_i

93: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
g_aus_h (2 : 5): [ 2 3 ]
g_tmp_i (1 : 5): [ 1 ]
2063: esiste_v_i	<=>	elem %IN% v
elem = 1
g_aus_h (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i



g_aus_h (2 : 5): [ 2 3 ]
------------------------------ Fine setdiff1_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
riga = 1
val = 1


g_ind (2 : 5): [ 1 2 ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 2 5 ]
g_ind (2 : 5): [ 1 2 ]


g_co (2 : 4): [ 2 5 ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 1
 ]
g_ri (1 : 1): [ 2 ]
g_co (2 : 4): [ 2 5 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 1 0 0 1
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 1
 ]
------------------------------ Fine assegna1_m_vv_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 1 0 0 1
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 1
 ]
g_co (2 : 4): [ 2 5 ]
g_ri (1 : 1): [ 2 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 1 0 0 1
	 1 0 0 0 0
	 0 0 0 1 1
	 0 1 0 1 1
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 1
g_hubs (1 : 2): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

111: accoda1_vv_i	<=>	v1 <- c(v1, v2)
ris (0 : 1): [ ]
g_ri (1 : 1): [ 2 ]


ris (1 : 1): [ 2 ]
------------------------------ Fine accoda_vv_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
g_M (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
riga = 2
val = 1


g_ind (2 : 5): [ 1 2 ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
g_index (2 : 2): [ 2 5 ]
g_ind (2 : 5): [ 1 2 ]


g_co (2 : 4): [ 2 5 ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 1 0 0 1
	 1 0 0 0 0
	 0 0 0 1 1
	 0 1 0 1 1
 ]
g_ri (1 : 1): [ 5 ]
g_co (2 : 4): [ 2 5 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 1 0 0 1
	 1 0 0 0 0
	 0 0 0 1 1
	 0 1 0 1 1
 ]
------------------------------ Fine assegna1_m_vv_i

107: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 1 0 0 1
	 1 0 0 0 0
	 0 0 0 1 1
	 0 1 0 1 1
 ]
g_co (2 : 4): [ 2 5 ]
g_ri (1 : 1): [ 5 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 1 0 0 1
	 1 0 0 0 0
	 0 0 0 1 1
	 0 1 0 1 1
 ]
------------------------------ Fine assegna1_m_vv_i

109: esiste_v_i	<=>	elem %IN% v
elem = 2
g_hubs (1 : 2): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 2 (826 interne); stringhe deallocate: 0 (196 interne)

679: setdiff_i	<=>	ris <- setdiff(v1, v2)
g_h (3 : 5): [ 2 1 5 ]
g_h1 (1 : 5): [ 1 ]
3115: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h (3 : 5): [ 2 1 5 ]
st = 1
end = 3


g_tmp1_i (3 : 11): [ 2 1 5 ]
------------------------------ Fine copia_v_i

3117: esiste_v_i	<=>	elem %IN% v
elem = 1
g_tmp1_i (3 : 11): [ 2 1 5 ]


indx = 2
------------------------------ Fine esiste_v_i

3119: elimina1_indx_i	<=>	v <- v[-indx]
g_tmp1_i (3 : 11): [ 2 1 5 ]
indx = 2


g_tmp1_i (2 : 11): [ 2 5 ]
------------------------------ Fine elimina1_indx_i



g_tmp1_i (2 : 11): [ 2 5 ]
------------------------------ Fine setdiff_i

680: incr1_v_indx_i	<=>	v[indx] <- v[indx] + s
g_LG (5 : 5): [ 0 -1 0 0 0 ]
g_tmp1_i (2 : 11): [ 2 5 ]
val = 1


g_LG (5 : 5): [ 0 0 0 0 1 ]
------------------------------ Fine incr1_v_indx_i

684: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h1 (1 : 5): [ 1 ]
st = 1
end = 1


g_h (1 : 5): [ 1 ]
------------------------------ Fine copia_v_i

686: accoda1_vv_i	<=>	v1 <- c(v1, v2)
g_h_new (0 : 2): [ ]
ris (1 : 1): [ 2 ]


g_h_new (1 : 2): [ 2 ]
------------------------------ Fine accoda_vv_i

688: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 1 0 0 1
	 1 0 0 0 0
	 0 0 0 1 1
	 0 1 0 1 1
 ]


g_Sout (5 : 5): [ 1 2 1 2 3 ]
------------------------------ Fine somma_colonne_i

690: max_v_i		<=>	ris <- max(v)
g_Sout (5 : 5): [ 1 2 1 2 3 ]


max = 3
------------------------------ Fine max_v_i

692: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 4
incr = 1


g_tmp2_i (5 : 10): [ 0 1 2 3 4 ]
------------------------------ Fine seq_i


*** hist1 ***
g_Sout (5 : 5): [ 1 2 1 2 3 ]
g_tmp2_i (5 : 10): [ 0 1 2 3 4 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
g_tmp1_i (4 : 11): [ 2 5 5 4 ]
val = 0


g_tmp1_i (4 : 11): [ 0 0 0 0 ]
------------------------------ Fine InitVett_i



g_tmp1_i (4 : 11): [ 0 2 2 1 ]

Stringhe allocate: 2 (826 interne); stringhe deallocate: 0 (196 interne)

694: promuovi_i	(implicita)
g_tmp1_i (4 : 11): [ 0 2 2 1 ]
ATTENZIONE (promuovi_i, linea /home/marco/hmm/HMM_und.c # 694): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

g_tmp1_d (4 : 19): [ 0 2 2 1 ]
------------------------------ Fine promuovi_i

695: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
g_Freq_out (7 : 7): [ 1 2 2 0 0 0 0 ]
start = 1
end = 4
g_tmp1_d (4 : 19): [ 0 2 2 1 ]


g_Freq_out (7 : 7): [ 0 2 2 1 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

708: copia_v_i	<=>	ris[st:end] <- v[st:end]
g_h_new (1 : 2): [ 2 ]
st = 1
end = 1


g_h (1 : 5): [ 2 ]
------------------------------ Fine copia_v_i

713: copia_v_indx_i	<=>	ris <- v[indx]
g_Sout (5 : 5): [ 1 2 1 2 3 ]
g_h (1 : 5): [ 2 ]


g_tmp2_i (1 : 10): [ 2 ]
------------------------------ Fine copia_v_indx_i

714: which_v_indxne_i	<=>	ris <- which(v != val)
g_tmp2_i (1 : 10): [ 2 ]
val = 5


g_tmp1_i (1 : 11): [ 1 ]
------------------------------ Fine which_v_indxne_i

715: copia_v_indx_i	<=>	ris <- v[indx]
g_h (1 : 5): [ 2 ]
g_tmp1_i (1 : 11): [ 1 ]


g_h (1 : 5): [ 2 ]
------------------------------ Fine copia_v_indx_i


*** write_m_i ***
ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 1 0 0 1
	 1 0 0 0 0
	 0 0 0 1 1
	 0 1 0 1 1
 ]

Stringhe allocate: 2 (827 interne); stringhe deallocate: 0 (197 interne)

808: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


g_tmp1_i (5 : 11): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

809: cbind2v_i	<=>	ris <- cbind(v1, v2)
g_tmp1_i (5 : 11): [ 1 2 3 4 5 ]
g_LG (5 : 5): [ 0 0 0 0 1 ]


g_tmpm_i (5 x 2 : 5 x 2): [
	 1 0
	 2 0
	 3 0
	 4 0
	 5 1
 ]
------------------------------ Fine cbind2v_i


*** write_m_i ***
g_tmpm_i (5 x 2 : 5 x 2): [
	 1 0
	 2 0
	 3 0
	 4 0
	 5 1
 ]

Stringhe allocate: 2 (832 interne); stringhe deallocate: 0 (197 interne)


Stringhe allocate: 2 (832 interne); stringhe deallocate: 0 (197 interne)


*** Esco da HMM1_und ***
Trasformo la matrice
ris (5 x 5 : 5 x 5): [
	 0 0 1 0 0
	 0 1 0 0 1
	 1 0 0 0 0
	 0 0 0 1 1
	 0 1 0 1 1
 ]

Stringhe allocate: 2 (832 interne); stringhe deallocate: 0 (832 interne)

