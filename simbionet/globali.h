#ifndef GLOBALI_H
#define GLOBALI_H

#include "r_aux.h"

struct Globali {

	int n_tipi; // so che le liste avranno sempre lo stesso numero di elementi in una stessa invocazione: e` per avere una conferma in piu`
	enum TIPO *tipi;

	struct {
		VETTOREi *HL;
		VETTOREd *q;
		VETTOREi *x;
		VETTOREi *y;
	} sample;

	struct {
		MATRICEi *tmpm_i;
		VETTOREi *ind;
		VETTOREi *neighbours;
	} cluster_coeff;

	struct {
		VETTOREi *Sin_h;
		VETTOREi *tmp_i;
		VETTOREd *tmp_d;
		VETTOREi *or_h;
		VETTOREi *aus_h;
		VETTOREi *M_in;
		VETTOREi *Ord;
		VETTOREd *p;
		VETTOREi *ind_h;
		VETTOREi *ri;
		VETTOREi *co;
		VETTOREi *ind;
		VETTOREi *index;
	} assign_nodes;

	struct {
		VETTOREi *dist_tot;
		VETTOREi *new_neighbours;
		VETTOREd *distanza;
		VETTOREi *visitati;
		VETTOREi *neighbours;
		VETTOREi *tmp1_i;
		MATRICEi *tmpm_i;
	} pathlength;

	struct {
		VETTOREi *S;
		VETTOREd *P;
		VETTOREi *ind;
		VETTOREi *ind2;
		VETTOREi *tmp1_i;
		VETTOREd *tmp1_d;
		VETTOREi *Hio;
		VETTOREi *H;
		MATRICEd *pl;
	} hubs;

	struct {
		MATRICEd *tmpm_d;
		VETTOREd *scalare_d;
		VETTOREi *S_new;
		VETTOREi *tmp_i1;
		VETTOREd *tmp1_d;
		VETTOREd *T1;
		VETTOREd *T2;
		VETTOREd *old1;
		VETTOREd *old2;
		VETTOREd *new1;
		VETTOREd *new2;
		VETTOREd *toll1;
		VETTOREd *toll2;
		VETTOREd *a;
		VETTOREd *b;
		VETTOREi *ind;
		VETTOREd *m;
		VETTOREd *S1;
		VETTOREd *S2;
		VETTOREi *ind1;
		VETTOREi *ind2;
		VETTOREi *indinf;
	} scoremodular;

	struct {
		VETTOREi *ind_out;
		VETTOREi *co_out;
		VETTOREd *Sc2_out;
		VETTOREd *Sc2_in;
		VETTOREd *toll;
		VETTOREd *Sc1_out;
		VETTOREi *non_connessi;
		VETTOREd *p_out;
		VETTOREd *Sc1_in;
		VETTOREi *co_in;
		VETTOREd *Freq_in;
		VETTOREi *Freq_in1;
		VETTOREd *Sc_out;
		VETTOREi *ind_in;
		VETTOREd *Freq_out;
		VETTOREi *Freq_out1;
		VETTOREi *Sin;
		VETTOREi *Sout;
		VETTOREi *tmp1_i;
		VETTOREi *tmp2_i;
		VETTOREd *tmp1_d;
		VETTOREi *connessi;
		VETTOREi *nonco_out;
		VETTOREd *p;
		VETTOREd *p_in;
		VETTOREd *Sc_in;
		VETTOREi *nonco_in;
	} connetti_scalefree;

	struct {
		MATRICEi *Mt;
		MATRICEi *Maus;
		VETTOREi *tmp_i;
		VETTOREi *colore;
		VETTOREi *grigi;
		VETTOREi *ind;
		VETTOREi *adj;
		VETTOREd *tmp1_d;
		VETTOREi *scalare_i;
		VETTOREd *scalare_d;
	} check_conn;

	struct {
		VETTOREi *Sr;
		VETTOREi *Sin;
		VETTOREi *Sout;
		VETTOREi *hubs;
		VETTOREi *ind_Sc;
		VETTOREi *LG;
		VETTOREi *ind;
		VETTOREi *ind_s;
		VETTOREi *indm;
		VETTOREi *CCs;
		VETTOREi *non_connessi;
		VETTOREi *h;
		VETTOREi *indp;
		VETTOREi *h_new;
		VETTOREi *m;
		VETTOREi *MC;
		VETTOREi *tmp1_i;
		VETTOREi *scalare_i;
		VETTOREi *CC;
		VETTOREi *FB;
		VETTOREi *segno;
		VETTOREi *h1;
		VETTOREi *h_new1;
		VETTOREi *tmp2_i;
		VETTOREi *dim;
		VETTOREi *mod_type;
		VETTOREi *a1;
		VETTOREi *a2;
		VETTOREd *toll;
		VETTOREd *prior_p_subnet;
		VETTOREd *Freq_in;
		VETTOREd *Freq_out;
		VETTOREd *tmp1_d;
		VETTOREd *tmp2_d;
		VETTOREd *scalare_d;
		VETTOREd *scalare1_d;
		VETTOREd *Prob;
		VETTOREd *STin;
		VETTOREd *STout;
		VETTOREd *p;
		VETTOREd *dist;
		VETTOREd *CCp;
		VETTOREd *ppp;
		VETTOREd *ris_cc;
		VETTOREd *Sc_vett;
		VETTOREd *pm;
		VETTOREd *prob_mod;
		VETTOREd *p_out;
		MATRICEi *M;
		MATRICEi *mod1;
		MATRICEi *mod2;
		MATRICEi *mod3;
		MATRICEi *tmpm_i;
		MATRICEd *aus;
		MATRICEd *Sc1;
		MATRICEd *Sc2;
		MATRICEd *Sc3;
		MATRICEd *Sc;
		int LC;
		VETTOREi **CCind;
	} HMM;

	struct {
		// ottimizzati indok e aus in tmp_i3
		MATRICEd *Sc;
		MATRICEi *checkIN;
		MATRICEi *checkOUT;
		MATRICEi *memory;
		VETTOREi *M_in;
		VETTOREi *M_out;
		VETTOREi *tmp_i1;
		VETTOREi *tmp_i2;
		VETTOREi *tmp_i3;
		VETTOREi *indInf;
		VETTOREi *I;
		VETTOREi *ord_ind;
		VETTOREi *rs;
		VETTOREi *ind1;
		VETTOREi *scalare_i;
		VETTOREi *I_add;
		VETTOREd *S_in;
		VETTOREd *S_out;
		VETTOREd *tmp_d1;
		MATRICEd *score_matr1;
		MATRICEd *score_matr2;
		MATRICEd *score_matr3;
	} probmod;

	struct {
		VETTOREi *Sr;
		VETTOREi *Sin;
		VETTOREi *Sout;
		VETTOREi *hubs;
		VETTOREi *ind_Sc;
		VETTOREi *LG;
		VETTOREi *ind;
		VETTOREi *ind_s;
		VETTOREi *indm;
		VETTOREi *CCs;
		VETTOREi *non_connessi;
		VETTOREi *h;
		VETTOREi *indp;
		VETTOREi *h_new;
		VETTOREi *m;
		VETTOREi *MC;
		VETTOREi *tmp1_i;
		VETTOREi *scalare_i;
		VETTOREi *CC;
		VETTOREi *FB;
		VETTOREi *segno;
		VETTOREi *h1;
		VETTOREi *h_new1;
		VETTOREi *tmp2_i;
		VETTOREi *dim;
		VETTOREi *mod_type;
		VETTOREi *a1;
		VETTOREi *a2;
		VETTOREi *SIMM;
		VETTOREd *toll;
		VETTOREd *prior_p_subnet;
		VETTOREd *Freq_in;
		VETTOREd *Freq_out;
		VETTOREd *tmp1_d;
		VETTOREd *tmp2_d;
		VETTOREd *scalare_d;
		VETTOREd *scalare1_d;
		VETTOREd *Prob;
		VETTOREd *STin;
		VETTOREd *STout;
		VETTOREd *p;
		VETTOREd *dist;
		VETTOREd *CCp;
		VETTOREd *ppp;
		VETTOREd *ris_cc;
		VETTOREd *Sc_vett;
		VETTOREd *pm;
		VETTOREd *prob_mod;
		VETTOREd *p_out;
		MATRICEi *M;
		MATRICEi *mod1;
		MATRICEi *mod2;
		MATRICEi *mod3;
		MATRICEi *tmpm_i;
		MATRICEd *aus;
		MATRICEd *Sc1;
		MATRICEd *Sc2;
		MATRICEd *Sc3;
		MATRICEd *Sc;
		int LC;
		VETTOREi **CCind;
	} HMM_und;

	struct {
		VETTOREi *Sout_h;
		VETTOREi *tmp_i;
		VETTOREd *tmp_d;
		VETTOREi *or_h;
		VETTOREi *aus_h;
		VETTOREi *M_out;
		VETTOREi *Ord;
		VETTOREd *p;
		VETTOREi *ind_h;
		VETTOREi *ri;
		VETTOREi *co;
		VETTOREi *ind;
		VETTOREi *index;
	} assign_nodes_und;

	struct {
		VETTOREd *S_out;
		MATRICEd *Sc;
		VETTOREd *scalare_d;
		MATRICEi *checkIN;
		MATRICEi *checkOUT;
		MATRICEi *memory;
		VETTOREi *M_in;
		VETTOREi *M_out;
		VETTOREi *tmp_i1;
		VETTOREi *tmp_i2;
		VETTOREi *indok;
		VETTOREi *indInf;
		VETTOREi *I;
		VETTOREi *ord_ind;
		VETTOREi *aus;
		VETTOREi *rs;
		VETTOREi *ind1;
		VETTOREi *scalare_i;
		VETTOREi *I_add;
		VETTOREd *tmp_d1;
	} probmod_und;

} globali;

void InitGlobali();
void CancGlobali();

#endif
