n
source("~/.active.document")
pep.data
s
n
pep.set
source("~/.active.document")
source("~/.active.document")
n
pep.list
i
pick
pep.list
pick
nsp.v
pick
p.m
n
p.m[pick, ]
n
source("~/.active.document")
source("~/.active.document")
library(SASPECT)
library(SASPECT)
library(SASPECT)
setwd("D:/Dropbox/GPx4")
labkey.data <- head(read.table("dati2.tsv", sep="\t", header=T, quote='"'))
source("SpectraCountFunctions_v8_1.R")
FormatOutputData <- function(score.df, out.file="${tsvout: myout}")
{
score.df<- score.df[order(score.df$GroupName), ]
colnames(score.df)[1] <- "Protein"
colnames(score.df)[2] <- "ProteinsInGroup"
output.df <- data.frame(cbind(score.df[,-(2) ], score.df[2] ))
write.table(output.df[1:13,], file = out.file, sep = "\t", qmethod = "double", row.names=FALSE, col.names=TRUE )
}
colPepId ="Peptide"
colProteinName = "Protein"
peptideDataCols=list(PeptideCount="Total.Peptide.Count", PeptideConfidence="Max.Peptide.Prophet")
proteinInfoCols=list(GroupName="Type")
runGroupNames=list(name="Type", true="Control", false="Knock-out")
r1 =RunScoringFunction(labkey.data, functionName="SASPECT", colPepId, colProteinName, peptideDataCols, proteinInfoCols, runGroupNames)
r1
FormatOutputData(r1)
debug(SASPECT)
source("~/.active.document")
pep.count
pep.data
n2
n1
run.group.info
labkey.data <- head(n=20, read.table("dati2.tsv", sep="\t", header=T, quote='"'))
source("~/.active.document")
n2
n2
labkey.data <- head(n=100, read.table("dati2.tsv", sep="\t", header=T, quote='"'))
View(labkey.data)
labkey.data <- head(read.table("dati2.tsv", sep="\t", header=T, quote='"'))
View(labkey.data)
labkey.data <- read.table("dati2.tsv", sep="\t", header=T, quote='"')
View(labkey.data)
source("~/.active.document")
n1
n2
run.group.info
View(labkey.data)
View(labkey.data)
c
c
n
c
labkey.data <- read.table("dati2.tsv", sep="\t", header=T, quote='"')
View(labkey.data)
source("~/.active.document")
n2
n2
c
n
c
source("~/.active.document")
qvalue=as.numeric(SASPECT.result[,"Qvalue"])
SASPECT.result<-r1
qvalue=as.numeric(SASPECT.result[,"Qvalue"])
plot(sort(qvalue))
write.table(SASPECT.result, file="SASPECT.result.txt", row.names=FALSE, sep="\t")
View(`r1`)
library(MSstats)
setwd("D:/Marco/Proteomica/Label-free/GPx4")
gpx4.data <- read.table("dati1.tsv", sep="\t", header=T, quote='"')
# le condizioni sono le combinazioni delle 3 condizioni (tipo, cellule, tempo)
gpx4.data$condition <- paste(substr(gpx4.data$Type, 1, 1), gpx4.data$Run, substr(gpx4.data$Date, 2, 2), sep = ".")
# eliminiamo le condizioni doppie
unique(gpx4.data$condition)
# verifichiamo che ci sia una sola condizione per ogni riga
xt <- xtabs(~bio.id + condition, gpx4.data)
for (r in nrow(xt)) {
ind <- which(xt[r,] > 0)
if (length(ind) != 1)
stop(paste("The", r, "row does not have only one element greater than zero!\n"))
}
# ci sono tre tipi di grafici disponibili
cancerFits <- fitModels(protein = "Protein", feature = "Feature", bio.rep = "bio.id", group = c("Type", "Run", "Date"), abundance = "Abundance.log2", model = "fixed", feature.var = FALSE, progress = TRUE, data = gpx4.data)
gpx4.data <- read.table("dati1.tsv", sep="\t", header=T, quote='"')
setwd("D:/Dropbox/GPx4")
gpx4.data <- read.table("dati1.tsv", sep="\t", header=T, quote='"')
# le condizioni sono le combinazioni delle 3 condizioni (tipo, cellule, tempo)
gpx4.data$condition <- paste(substr(gpx4.data$Type, 1, 1), gpx4.data$Run, substr(gpx4.data$Date, 2, 2), sep = ".")
# eliminiamo le condizioni doppie
unique(gpx4.data$condition)
# verifichiamo che ci sia una sola condizione per ogni riga
xt <- xtabs(~bio.id + condition, gpx4.data)
for (r in nrow(xt)) {
ind <- which(xt[r,] > 0)
if (length(ind) != 1)
stop(paste("The", r, "row does not have only one element greater than zero!\n"))
}
cancerFits <- fitModels(protein = "Protein", feature = "Feature", bio.rep = "bio.id", group = c("Type", "Run", "Date"), abundance = "Abundance.log2", model = "fixed", feature.var = FALSE, progress = TRUE, data = gpx4.data)
residualPlots(cancerFits, address = "residualPlots.pdf", pointSize = 0.8, axisSize = 1, labelSize = 1, keySize = 0.6)
View(gpx4.data)
conditions <- unique(paste(cancer.data$Type, cancer.data$Run, cancer.data$Date, sep = "."))
fix(conditions)
conditions <- unique(paste(cancer.data$Type, cancer.data$Run, cancer.data$Date, sep = "."))
gpx4Fits <- cancerFits
conditions <- unique(paste(gpx4.data$Type, gpx4.data$Run, gpx4.data$Date, sep = "."))
fix(conditions)
library(MSstats)
setwd("D:/Dropbox/GPx4")
gpx4.data <- read.table("dati1.tsv", sep="\t", header=T, quote='"')
gpx4.data$condition <- paste(substr(gpx4.data$Type, 1, 1), gpx4.data$Run, sep = ".")
fix(conditions)
unique(gpx4.data$condition)
# verifichiamo che ci sia una sola condizione per ogni riga
xt <- xtabs(~bio.id + condition, gpx4.data)
for (r in nrow(xt)) {
ind <- which(xt[r,] > 0)
if (length(ind) != 1)
stop(paste("The", r, "row does not have only one element greater than zero!\n"))
}
# ci sono tre tipi di grafici disponibili
View(gpx4.data)
gpx4Fits <- fitModels(protein = "Protein", feature = "Feature", bio.rep = "bio.id", group = c("Type", "Run"), abundance = "Abundance.log2", model = "fixed", feature.var = FALSE, progress = TRUE, data = gpx4.data)
residualPlots(gpx4Fits, address = "residualPlots.pdf", pointSize = 0.8, axisSize = 1, labelSize = 1, keySize = 0.6)
conditions <- unique(paste(gpx4.data$Type, gpx4.data$Run, sep = "."))
fix(conditions)
fix(conditions)
conditions <- unique(paste(gpx4.data$Type, sep = "."))
fix(conditions)
comparison <- makeContrasts(Control - Knock.out), levels = conditions)
comparison <- makeContrasts(Control - Knock.out, levels = conditions)
fix(conditions)
library(MSstats)
setwd("D:/Dropbox/GPx4")
gpx4.data <- read.table("dati1.tsv", sep="\t", header=T, quote='"')
# le condizioni sono le combinazioni delle condizioni di interesse (run, tipo)
gpx4.data$condition <- paste(substr(gpx4.data$Type, 1, 1), gpx4.data$Run, sep = ".")
# eliminiamo le condizioni doppie
unique(gpx4.data$condition)
# verifichiamo che ci sia una sola condizione per ogni riga
xt <- xtabs(~bio.id + condition, gpx4.data)
for (r in nrow(xt)) {
ind <- which(xt[r,] > 0)
if (length(ind) != 1)
stop(paste("The", r, "row does not have only one element greater than zero!\n"))
}
# ci sono tre tipi di grafici disponibili
# profilo: per ogni proteina disegna il grafico condizione vs. abbondanza
#profilePlots(protein = "Protein", feature = "Feature", bio.rep = "bio.id", group = c("Type", "Run"), abundance = "Abundance.log2", data = gpx4.data, address = "profilePlots.pdf")
# Trellis: disegna grafici della prima condizione specificata vs. abbondanza per ogni combinazione delle rimanenti variabili
#trellisPlots(protein = "Protein", feature = "Feature", bio.rep = "bio.id", group = c("Type", "Run"), abundance = "Abundance.log2", data = gpx4.data, address = "trellisPlots.pdf")
gpx4Fits <- fitModels(protein = "Protein", feature = "Feature", bio.rep = "bio.id", group = c("Type", "Run"), abundance = "Abundance.log2", model = "fixed", feature.var = FALSE, progress = TRUE, data = gpx4.data)
library(MSstats)
setwd("D:/Dropbox/GPx4")
gpx4.data <- read.table("dati1.tsv", sep="\t", header=T, quote='"')
# le condizioni sono le combinazioni delle condizioni di interesse (run, tipo)
gpx4.data$condition <- paste(substr(gpx4.data$Type, 1, 1), gpx4.data$Run, sep = ".")
# eliminiamo le condizioni doppie
unique(gpx4.data$condition)
# verifichiamo che ci sia una sola condizione per ogni riga
xt <- xtabs(~bio.id + condition, gpx4.data)
for (r in nrow(xt)) {
ind <- which(xt[r,] > 0)
if (length(ind) != 1)
stop(paste("The", r, "row does not have only one element greater than zero!\n"))
}
# ci sono tre tipi di grafici disponibili
gpx4Fits <- fitModels(protein = "Protein", feature = "Feature", bio.rep = "bio.id", group = c("Type", "Run"), abundance = "Abundance.log2", model = "fixed", feature.var = FALSE, progress = TRUE, data = gpx4.data)
comparison <- makeContrasts(Control - Knock.out, levels = conditions)
conditions <- unique(paste(gpx4.data$Type, sep = "."))
comparison <- makeContrasts(Control - Knock.out, levels = conditions)
View(gpx4.data)
fix(conditions)
conditions <- unique(paste(gpx4.data$Type, sep = "."))
fix(conditions)
gpx4.data <- read.table("dati1.tsv", sep="\t", header=T, quote='"')
conditions <- unique(paste(gpx4.data$Type, sep = "."))
comparison <- makeContrasts(Control - Knock.out, levels = conditions)
fix(conditions)
gpx4.data <- read.table("dati1.tsv", sep="\t", header=T, quote='"')
gpx4.data$condition <- paste(substr(gpx4.data$Type, 1, 1), gpx4.data$Run, sep = ".")
# eliminiamo le condizioni doppie
unique(gpx4.data$condition)
conditions <- unique(paste(gpx4.data$Type, sep = "."))
comparison <- makeContrasts(Control - Knock.out, levels = conditions)
fix(conditions)
conditions <- unique(paste(gpx4.data$Type, sep = "."))
# ora si possono effettuare i confronti (mediando sulle variabili che non interessano)
comparison <- makeContrasts(Control - Knock.out, levels = conditions)
fix(conditions)
comparison <- makeContrasts(Control - Knock.out, levels = conditions)
comparison
View(gpx4.data)
library(MSstats)
setwd("D:/Dropbox/GPx4")
gpx4.data <- read.table("dati1.tsv", sep="\t", header=T, quote='"')
# le condizioni sono le combinazioni delle condizioni di interesse (run, tipo)
gpx4.data$condition <- paste(substr(gpx4.data$Type, 1, 1), gpx4.data$Run, sep = ".")
# eliminiamo le condizioni doppie
unique(gpx4.data$condition)
# verifichiamo che ci sia una sola condizione per ogni riga
xt <- xtabs(~bio.id + condition, gpx4.data)
for (r in nrow(xt)) {
ind <- which(xt[r,] > 0)
if (length(ind) != 1)
stop(paste("The", r, "row does not have only one element greater than zero!\n"))
}
gpx4Fits <- fitModels(protein = "Protein", feature = "Feature", bio.rep = "bio.id", group = c("Type", "Run"), abundance = "Abundance.log2", model = "fixed", feature.var = FALSE, progress = FALSE, data = gpx4.data)
conditions <- unique(paste(gpx4.data$Type, sep = "."))
comparison <- makeContrasts(GROUPControl - GROUPKnock.out, levels = conditions)
comparison
gpx4Results <- groupComparison(gpx4Fits, comparison, progress = TRUE)
gpx4Results <- groupComparison(gpx4Fits, comparison, progress = TRUE)
gpx4Results
conditions <- unique(paste(gpx4.data$Type, sep = "."))
fix(conditions)
conditions <- unique(paste(gpx4.data$Type, gpx4.data$Run, sep = "."))
fix(conditions)
comparison <- makeContrasts((GROUPControl.23c1 + GROUPControl.23c2 + GROUPControl.23c3 + GROUPControl.23c4 + GROUPControl.25c1 + GROUPControl.25c2 + GROUPControl.24c1 + GROUPControl.24c2 + GROUPControl.24c3 + GROUPControl.26c1 + GROUPControl.26c2 + GROUPControl.26c3 + GROUPControl.26c4 + GROUPControl.26c5 + GROUPControl.26c6 + GROUPControl.26c7 + GROUPControl.27c1 + GROUPControl.27c3 + GROUPControl.27c3_1 + GROUPControl.27c5 + GROUPControl.27c5_1 + GROUPControl.27c6 + GROUPControl.27c6_1 + GROUPControl.27c7 + GROUPControl.27c7_1 + GROUPControl.27c8 + GROUPControl.28c3 + GROUPControl.28c4 + GROUPControl.27c10 + GROUPControl.27c2 + GROUPControl.27c4 + GROUPControl.27c9 + GROUPControl.28c1) / 33 - (GROUPKnock.out.23k1 + GROUPKnock.out.23k2 + GROUPKnock.out.23k3 + GROUPKnock.out.23k4 + GROUPKnock.out.24k1 + GROUPKnock.out.24k2 + GROUPKnock.out.24k3 + GROUPKnock.out.25k1 + GROUPKnock.out.25k2 + GROUPKnock.out.27k1 + GROUPKnock.out.27k2 + GROUPKnock.out.27k3 + GROUPKnock.out.27k4 + GROUPKno
ck.out.27k5 + GROUPKnock.out.27k6 + GROUPKnock.out.27k7 + GROUPKnock.out.28k1 + GROUPKnock.out.28k3 + GROUPKnock.out.28k5 + GROUPKnock.out.28k6 + GROUPKnock.out.28k7 + GROUPKnock.out.28k8 + GROUPKnock.out.29k3 + GROUPKnock.out.29k4) / 24, levels = conditions)
comparison
gpx4Results <- groupComparison(gpx4Fits, comparison, progress = TRUE)
gpx4ResultsFdr <- topProteins(gpx4Results, comparison, comparison.column = 1, rank.by = 1, number = 2, adjust.method = "BH")
View(gpx4ResultsFdr)
bioRep.quantifications <- subjectQuantification(gpx4Fits, table = TRUE, progress = TRUE)
View(bioRep.quantifications)
gpx4ResultsFdr <- topProteins(gpx4Results, comparison, comparison.column = 1, rank.by = 1, number = 20, adjust.method = "BH")
gpx4ResultsFdr <- topProteins(gpx4Results, comparison, comparison.column = 1, rank.by = 1, number = 20, adjust.method = "BH")
View(gpx4ResultsFdr)
source("~/.active.document")
qvalue=as.numeric(SASPECT.result[,"Qvalue"])
plot(sort(qvalue))
write.table(SASPECT.result, file="SASPECT.result.txt", row.names=FALSE, sep="\t")
dyn.load("lsoda_oscillatore.dll")
oscillatore_dll <- function(args, x0, times, method="rkf45", atol=1e-6, rtol=0.0)
{
    stopifnot(is.list(args))
    stopifnot(is.vector(x0))
    stopifnot(is.vector(times))
    stopifnot(is.character(method))
    stopifnot(is.numeric(atol))
    stopifnot(is.numeric(rtol))
    matr <- .Call("lsoda_oscillatore",
                 as.list(args),
                 as.vector(x0),
                 as.vector(times),
                 as.character(method),
                 as.numeric(atol),
                 as.numeric(rtol)
)
    return(matr)
}
# m, b, k , F, omega
m = 5
b = 1
k = 5
F = 0
omega = 3.1415
p <- list(m, b, k, F, omega)
x0 <- c(-0.05, 0.0)
t <- seq(0, 100, 0.1)
ris <-oscillatore_dll(p, x0, t, method="rkck")
z <- sqrt(b ^ 2 + (omega * m - k / m) ^ 2)
phi <- atan((omega * m - k / m) / b)
x <- function(t) {return (F / z / omega * sin(omega * t - phi))}
plot(ris[,1],ris[,2], type='l')
setwd("D:\\Progetti R\\netsim_hg\\sim")
dyn.load("lsoda_oscillatore.dll")
oscillatore_dll <- function(args, x0, times, method="rkf45", atol=1e-6, rtol=0.0)
{
    stopifnot(is.list(args))
    stopifnot(is.vector(x0))
    stopifnot(is.vector(times))
    stopifnot(is.character(method))
    stopifnot(is.numeric(atol))
    stopifnot(is.numeric(rtol))
    matr <- .Call("lsoda_oscillatore",
                 as.list(args),
                 as.vector(x0),
                 as.vector(times),
                 as.character(method),
                 as.numeric(atol),
                 as.numeric(rtol)
)
    return(matr)
}
# m, b, k , F, omega
m = 5
b = 1
k = 5
F = 0
omega = 3.1415
p <- list(m, b, k, F, omega)
x0 <- c(-0.05, 0.0)
t <- seq(0, 100, 0.1)
ris <-oscillatore_dll(p, x0, t, method="rkck")
z <- sqrt(b ^ 2 + (omega * m - k / m) ^ 2)
phi <- atan((omega * m - k / m) / b)
x <- function(t) {return (F / z / omega * sin(omega * t - phi))}
plot(ris[,1],ris[,2], type='l')
setwd("D:\\Progetti R\\netsim_hg\\sim")
dyn.load("lsoda_oscillatore.dll")
oscillatore_dll <- function(args, x0, times, method="rkf45", atol=1e-6, rtol=0.0)
{
    stopifnot(is.list(args))
    stopifnot(is.vector(x0))
    stopifnot(is.vector(times))
    stopifnot(is.character(method))
    stopifnot(is.numeric(atol))
    stopifnot(is.numeric(rtol))
    matr <- .Call("lsoda_oscillatore",
                 as.list(args),
                 as.vector(x0),
                 as.vector(times),
                 as.character(method),
                 as.numeric(atol),
                 as.numeric(rtol)
)
    return(matr)
}
# m, b, k , F, omega
m = 5
b = 1
k = 5
F = 0
omega = 3.1415
p <- list(m, b, k, F, omega)
x0 <- c(-0.05, 0.0)
t <- seq(0, 100, 0.1)
ris <-oscillatore_dll(p, x0, t, method="rkck")
z <- sqrt(b ^ 2 + (omega * m - k / m) ^ 2)
phi <- atan((omega * m - k / m) / b)
x <- function(t) {return (F / z / omega * sin(omega * t - phi))}
plot(ris[,1],ris[,2], type='l')
