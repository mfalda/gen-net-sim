
*** simulateprofiles ***
Ho trasformato la matrice weights (5 x 5 : 5 x 5): [
	 0 -1 0 -1 0
	 0 0 -1 0 0
	 0 -1 0 0 -1
	 -1 0 0 0 0
	 0 0 -1 0 0
 ]
Ho trasformato il vettore Lista r 1 (1 : 1): [ 5 ]
Ho trasformato il vettore Lista r 2 (1 : 1): [ 5 ]
Ho trasformato il vettore Lista r 3 (1 : 1): [ 5 ]
Ho trasformato il vettore Lista r 4 (1 : 1): [ 5 ]
Ho trasformato il vettore Lista r 5 (1 : 1): [ 1 ]
Ho trasformato la lista
Rules (5 : 5): {
	Lista r 1 (1 : 1): [ 5 ]
	Lista r 2 (1 : 1): [ 5 ]
	Lista r 3 (1 : 1): [ 5 ]
	Lista r 4 (1 : 1): [ 5 ]
	Lista r 5 (1 : 1): [ 1 ]
}

Ho trasformato la stringa 'Lista ext_fun 1' che vale 'sin(x)'
------------------------------ Fine inSTRINGA

Ho trasformato la stringa 'Lista ext_fun 2' che vale 'if(x < 1, 0, x - 1)'
------------------------------ Fine inSTRINGA

Ho trasformato la lista
ext_fun (2 : 2): {
	'sin(x)'
	'if(x < 1, 0, x - 1)'
}

Ho trasformato la stringa 'formula' che vale ''
------------------------------ Fine inSTRINGA

Ho trasformato il vettore X0 (5 : 5): [ 11.39247467 7.769541808 9.180318338999999 6.255656565 8.441444735999999 ]
Ho trasformato il vettore Xmin (5 : 5): [ 8.419340674000001 3.482809808 6.932805339 5.544149565 7.900224736 ]
Ho trasformato il vettore Xmax (5 : 5): [ 12.67431725 9.032985081 12.19219754 9.171903361 10.26385753 ]
Ho trasformato il vettore lambda (5 : 5): [ 1.040829206 0.833709414 1.036836698 0.989892399 1.171423905 ]
Ho trasformato la stringa 'act_fun' che vale 'sigmoidal'
------------------------------ Fine inSTRINGA

Ho trasformato il vettore alpha (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
Ho trasformato il vettore beta (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
Ho trasformato il vettore times (51 : 51): [ 0 0.1 0.2 0.3 0.4 0.5 0.6000000000000001 0.7000000000000001 0.8 0.9 1 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 3 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 4 4.100000000000001 4.2 4.3 4.4 4.5 4.600000000000001 4.7 4.800000000000001 4.9 5 ]
Ho trasformato la stringa 'method' che vale 'rkf45'
------------------------------ Fine inSTRINGA

Ho trasformato la matrice ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
Ho trasformato il vettore param (6 : 6): [ 0 0 0 0 0 0 ]
Il vettore 'ko_experim' e` nullo
253: copia_v_d	<=>	ris[st:end] <- v[st:end]
lambda (5 : 5): [ 1.040829206 0.833709414 1.036836698 0.989892399 1.171423905 ]
st = 1
end = 5


parm0[LAMBDA] (5 : 5): [ 1.040829206 0.833709414 1.036836698 0.989892399 1.171423905 ]
------------------------------ Fine copia_v_d

255: copia_v_d	<=>	ris[st:end] <- v[st:end]
alpha (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
st = 1
end = 5


parm0[ALPHA] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
------------------------------ Fine copia_v_d

257: copia_v_d	<=>	ris[st:end] <- v[st:end]
beta (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
st = 1
end = 5


parm0[BETA] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
------------------------------ Fine copia_v_d

259: copia_v_d	<=>	ris[st:end] <- v[st:end]
Xmin (5 : 5): [ 8.419340674000001 3.482809808 6.932805339 5.544149565 7.900224736 ]
st = 1
end = 5


parm0[XMIN] (5 : 5): [ 8.419340674000001 3.482809808 6.932805339 5.544149565 7.900224736 ]
------------------------------ Fine copia_v_d

261: copia_v_d	<=>	ris[st:end] <- v[st:end]
Xmax (5 : 5): [ 12.67431725 9.032985081 12.19219754 9.171903361 10.26385753 ]
st = 1
end = 5


parm0[XMAX] (5 : 5): [ 12.67431725 9.032985081 12.19219754 9.171903361 10.26385753 ]
------------------------------ Fine copia_v_d

263: copia_v_d	<=>	ris[st:end] <- v[st:end]
X0 (5 : 5): [ 11.39247467 7.769541808 9.180318338999999 6.255656565 8.441444735999999 ]
st = 1
end = 5


parm0[XZERO] (5 : 5): [ 11.39247467 7.769541808 9.180318338999999 6.255656565 8.441444735999999 ]
------------------------------ Fine copia_v_d

359: dividi1_vv_d	<=>	v1 <- v1 / v2
parm0[XMIN] (5 : 5): [ 8.419340674000001 3.482809808 6.932805339 5.544149565 7.900224736 ]
parm0[XMAX] (5 : 5): [ 12.67431725 9.032985081 12.19219754 9.171903361 10.26385753 ]


parm0[XMIN] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]
------------------------------ Fine dividi_vv_d

363: dividi1_vv_d	<=>	v1 <- v1 / v2
parm0[XZERO] (5 : 5): [ 11.39247467 7.769541808 9.180318338999999 6.255656565 8.441444735999999 ]
parm0[XMAX] (5 : 5): [ 12.67431725 9.032985081 12.19219754 9.171903361 10.26385753 ]


parm0[XZERO] (5 : 5): [ 0.8988629876690203 0.86013003877782 0.7529666664997292 0.6820456255132146 0.8224436778595854 ]
------------------------------ Fine dividi_vv_d

373: copia_m_d	<=>	ris <- da
weights (5 x 5 : 5 x 5): [
	 0 -1 0 -1 0
	 0 0 -1 0 0
	 0 -1 0 0 -1
	 -1 0 0 0 0
	 0 0 -1 0 0
 ]


weights1[f] (5 x 5 : 5 x 5): [
	 0 -1 0 -1 0
	 0 0 -1 0 0
	 0 -1 0 0 -1
	 -1 0 0 0 0
	 0 0 -1 0 0
 ]
------------------------------ Fine copia_m_d

436: copia_v_d	<=>	ris[st:end] <- v[st:end]
parm0[LAMBDA] (5 : 5): [ 1.040829206 0.833709414 1.036836698 0.989892399 1.171423905 ]
st = 1
end = 5


parm1[j][f][i1] (5 : 5): [ 1.040829206 0.833709414 1.036836698 0.989892399 1.171423905 ]
------------------------------ Fine copia_v_d

436: copia_v_d	<=>	ris[st:end] <- v[st:end]
parm0[ALPHA] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
st = 1
end = 5


parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
------------------------------ Fine copia_v_d

436: copia_v_d	<=>	ris[st:end] <- v[st:end]
parm0[BETA] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
st = 1
end = 5


parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
------------------------------ Fine copia_v_d

436: copia_v_d	<=>	ris[st:end] <- v[st:end]
parm0[XMIN] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]
st = 1
end = 5


parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]
------------------------------ Fine copia_v_d

436: copia_v_d	<=>	ris[st:end] <- v[st:end]
parm0[XMAX] (5 : 5): [ 12.67431725 9.032985081 12.19219754 9.171903361 10.26385753 ]
st = 1
end = 5


parm1[j][f][i1] (5 : 5): [ 12.67431725 9.032985081 12.19219754 9.171903361 10.26385753 ]
------------------------------ Fine copia_v_d

436: copia_v_d	<=>	ris[st:end] <- v[st:end]
parm0[XZERO] (5 : 5): [ 0.8988629876690203 0.86013003877782 0.7529666664997292 0.6820456255132146 0.8224436778595854 ]
st = 1
end = 5


parm1[j][f][i1] (5 : 5): [ 0.8988629876690203 0.86013003877782 0.7529666664997292 0.6820456255132146 0.8224436778595854 ]
------------------------------ Fine copia_v_d


*** simulateprofiles1 ***
82: which_m_indxne_d	<=>	ris <- which(m!=val)
weights1[f] (5 x 5 : 5 x 5): [
	 0 -1 0 -1 0
	 0 0 -1 0 0
	 0 -1 0 0 -1
	 -1 0 0 0 0
	 0 0 -1 0 0
 ]
val = 0


ind (7 : 25): [ 4 6 8 12 15 16 23 ]
------------------------------ Fine which_m_indxne_d

83: arrotonda_m_d	(implicita)
weights1[f] (5 x 5 : 5 x 5): [
	 0 -1 0 -1 0
	 0 0 -1 0 0
	 0 -1 0 0 -1
	 -1 0 0 0 0
	 0 0 -1 0 0
 ]
ATTENZIONE (arrotonda_m_d, linea simulateprofiles.c # 83): la matrice e` stata arrotondata da double a intero: possibile perdita di precisione nei calcoli!

Mdiscr (5 x 5 : 5 x 5): [
	 0 -1 0 -1 0
	 0 0 -1 0 0
	 0 -1 0 0 -1
	 -1 0 0 0 0
	 0 0 -1 0 0
 ]
------------------------------ Fine arrotonda_m_d

84: assegna1_ms_indx_i	<=>	m[indx] = val
Mdiscr (5 x 5 : 5 x 5): [
	 0 -1 0 -1 0
	 0 0 -1 0 0
	 0 -1 0 0 -1
	 -1 0 0 0 0
	 0 0 -1 0 0
 ]
ind (7 : 25): [ 4 6 8 12 15 16 23 ]
val = 1


Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 0 0 1 0 0
	 0 1 0 0 1
	 1 0 0 0 0
	 0 0 1 0 0
 ]
------------------------------ Fine assegna1_ms_indx_i

85: segno_m_d	<=>	ris <- sign(m)
weights1[f] (5 x 5 : 5 x 5): [
	 0 -1 0 -1 0
	 0 0 -1 0 0
	 0 -1 0 0 -1
	 -1 0 0 0 0
	 0 0 -1 0 0
 ]


tmpm1_i (5 x 5 : 5 x 5): [
	 0 -1 0 -1 0
	 0 0 -1 0 0
	 0 -1 0 0 -1
	 -1 0 0 0 0
	 0 0 -1 0 0
 ]
------------------------------ Fine segno_m_d

86: moltiplica_mm_i	<=>	ris <- m1 * m2
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 0 0 1 0 0
	 0 1 0 0 1
	 1 0 0 0 0
	 0 0 1 0 0
 ]
tmpm1_i (5 x 5 : 5 x 5): [
	 0 -1 0 -1 0
	 0 0 -1 0 0
	 0 -1 0 0 -1
	 -1 0 0 0 0
	 0 0 -1 0 0
 ]


Mneg (5 x 5 : 5 x 5): [
	 0 -1 0 -1 0
	 0 0 -1 0 0
	 0 -1 0 0 -1
	 -1 0 0 0 0
	 0 0 -1 0 0
 ]
------------------------------ Fine moltiplica_mm_i

87: abs_m_d	<=>	ris <- abs(m)
weights1[f] (5 x 5 : 5 x 5): [
	 0 -1 0 -1 0
	 0 0 -1 0 0
	 0 -1 0 0 -1
	 -1 0 0 0 0
	 0 0 -1 0 0
 ]


M (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 0 0 1 0 0
	 0 1 0 0 1
	 1 0 0 0 0
	 0 0 1 0 0
 ]
------------------------------ Fine abs_m_d


*** lsoda ***
116: copia_v_d	<=>	ris[st:end] <- v[st:end]
parm1[j][f][i1] (5 : 5): [ 0.8988629876690203 0.86013003877782 0.7529666664997292 0.6820456255132146 0.8224436778595854 ]
st = 1
end = 5


y (5 : 5): [ 0.8988629876690203 0.86013003877782 0.7529666664997292 0.6820456255132146 0.8224436778595854 ]
------------------------------ Fine copia_v_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842414621812633e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425208 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 12 (236 interne); stringhe deallocate: 2 (26 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.843670919832966e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 38188576 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 13 (256 interne); stringhe deallocate: 3 (46 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 0.00000e+000: 0.00000e+000
Calcolo la funzione ext_fun2 in 0.00000e+000: -1.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945430384055692e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79854384 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224436778595854


ris (2 : 2): [ -1 0.8224436778595854 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 13 (281 interne); stringhe deallocate: 3 (71 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 0.00000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84241469832258e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79856384 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 14 (306 interne); stringhe deallocate: 4 (96 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842414698319726e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79856400 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 15 (326 interne); stringhe deallocate: 5 (116 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 15 (326 interne); stringhe deallocate: 5 (126 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0 0.1775563221404146 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927688473637582 0.753110463575993 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772530351e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79856368 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 16 (376 interne); stringhe deallocate: 6 (166 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842414698324817e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79856352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 17 (396 interne); stringhe deallocate: 7 (186 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.50000e-007: 2.50000e-007
Calcolo la funzione ext_fun2 in 2.50000e-007: -1.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.886850535305804e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79854152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224436640357715


ris (2 : 2): [ -1 0.8224436640357715 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 17 (421 interne); stringhe deallocate: 7 (211 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.50000e-007: 2.50000e-007

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842414698322327e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 38188576 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 18 (446 interne); stringhe deallocate: 8 (236 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842414698319726e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 38190280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 19 (466 interne); stringhe deallocate: 9 (256 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 19 (466 interne); stringhe deallocate: 9 (266 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 5.00000000069889e-007 0.1775565859642285 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927689150623 0.7531110203197819 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302731357071e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79851512 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 20 (516 interne); stringhe deallocate: 10 (306 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772528359e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79853880 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 21 (536 interne); stringhe deallocate: 11 (326 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.75000e-007: 3.75000e-007
Calcolo la funzione ext_fun2 in 3.75000e-007: -1.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842414698322525e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79853880 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224436571238691


ris (2 : 2): [ -1 0.8224436571238691 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 21 (561 interne); stringhe deallocate: 11 (351 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.75000e-007: 3.75000e-007

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945175841434955e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79853880 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 22 (586 interne); stringhe deallocate: 12 (376 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224434941256273 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79853880 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 23 (606 interne); stringhe deallocate: 13 (396 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 23 (606 interne); stringhe deallocate: 13 (406 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 7.500000001048335e-007 0.1775567178761309 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927689489118066 0.753111298691826 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.456054892645606e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 0 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 24 (656 interne); stringhe deallocate: 14 (446 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772525506e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79856384 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 25 (676 interne); stringhe deallocate: 15 (466 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.23077e-007: 9.23077e-007
Calcolo la funzione ext_fun2 in 9.23077e-007: -9.99999e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84241469832277e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79856384 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224436268178388


ris (2 : 2): [ -1 0.8224436268178388 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 25 (701 interne); stringhe deallocate: 15 (491 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.23077e-007: 9.23077e-007

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945330780421491e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79856384 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 26 (726 interne); stringhe deallocate: 16 (516 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224434941253067 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79856384 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 27 (746 interne); stringhe deallocate: 17 (536 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 27 (746 interne); stringhe deallocate: 17 (546 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 1.846153846241094e-006 0.1775572962590843 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927690973307298 0.75311251924742 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841905419330156e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 28 (796 interne); stringhe deallocate: 18 (586 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772528573e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 38187912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 29 (816 interne); stringhe deallocate: 19 (606 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.00000e-006: 1.00000e-006
Calcolo la funzione ext_fun2 in 1.00000e-006: -9.99999e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772527893e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 38187912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224436225643624


ris (2 : 2): [ -1 0.8224436225643624 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 29 (841 interne); stringhe deallocate: 19 (631 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.00000e-006: 1.00000e-006

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945188094262972e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 38187912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 30 (866 interne); stringhe deallocate: 20 (656 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224434941256513 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 38187912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 31 (886 interne); stringhe deallocate: 21 (676 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 31 (886 interne); stringhe deallocate: 21 (686 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 2.000000000057511e-006 0.1775573774356376 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927691181616977 0.7531126905536283 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618409918758e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425208 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 32 (936 interne); stringhe deallocate: 22 (726 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772532818e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79851496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 33 (956 interne); stringhe deallocate: 23 (746 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.00000e-007: 5.00000e-007
Calcolo la funzione ext_fun2 in 5.00000e-007: -1.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842414657151521e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79851496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224436502119658


ris (2 : 2): [ -1 0.8224436502119658 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 33 (981 interne); stringhe deallocate: 23 (771 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.00000e-007: 5.00000e-007

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945341452239441e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79851496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 34 (1006 interne); stringhe deallocate: 24 (796 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224434941261283 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79851496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 35 (1026 interne); stringhe deallocate: 25 (816 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 35 (1026 interne); stringhe deallocate: 25 (826 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 9.999999999177334e-007 0.1775568497880342 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927689827614705 0.7531115770639785 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772532786e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425208 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 36 (1076 interne); stringhe deallocate: 26 (866 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772533229e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 38188344 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 37 (1096 interne); stringhe deallocate: 27 (886 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.00000e-006: 1.00000e-006
Calcolo la funzione ext_fun2 in 1.00000e-006: -9.99999e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.886754093691736e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 38188344 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224436225643624


ris (2 : 2): [ -1 0.8224436225643624 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 37 (1121 interne); stringhe deallocate: 27 (911 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.00000e-006: 1.00000e-006

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945553702840894e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 38188344 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 38 (1146 interne); stringhe deallocate: 28 (936 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224434941261745 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 38188344 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 39 (1166 interne); stringhe deallocate: 29 (956 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 39 (1166 interne); stringhe deallocate: 29 (966 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 2.000000000057511e-006 0.1775573774356376 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927691181616977 0.7531126905536283 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945572674961694e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425208 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 40 (1216 interne); stringhe deallocate: 30 (1006 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772533608e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79851248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 41 (1236 interne); stringhe deallocate: 31 (1026 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.00000e-006: 1.00000e-006
Calcolo la funzione ext_fun2 in 1.00000e-006: -9.99999e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277253032e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79851248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224436225643624


ris (2 : 2): [ -1 0.8224436225643624 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 41 (1261 interne); stringhe deallocate: 31 (1051 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.00000e-006: 1.00000e-006

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945574255971761e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79851248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 42 (1286 interne); stringhe deallocate: 32 (1076 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224434941262171 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79851248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 43 (1306 interne); stringhe deallocate: 33 (1096 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 43 (1306 interne); stringhe deallocate: 33 (1106 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 2.000000000057511e-006 0.1775573774356376 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927691181616977 0.7531126905536283 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945591647082495e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425208 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 44 (1356 interne); stringhe deallocate: 34 (1146 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772533988e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 45 (1376 interne); stringhe deallocate: 35 (1166 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.25000e-006: 2.25000e-006
Calcolo la funzione ext_fun2 in 2.25000e-006: -9.99998e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772528557e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224435534453742


ris (2 : 2): [ -1 0.8224435534453742 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 45 (1401 interne); stringhe deallocate: 35 (1191 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.25000e-006: 2.25000e-006

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945593228092561e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 46 (1426 interne); stringhe deallocate: 36 (1216 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224434941262597 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 47 (1446 interne); stringhe deallocate: 37 (1236 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 47 (1446 interne); stringhe deallocate: 37 (1246 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 4.499999999962867e-006 0.1775586965546258 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927694566732686 0.7531154742851416 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945610619203295e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425208 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 48 (1496 interne); stringhe deallocate: 38 (1286 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772534367e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 38187912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 49 (1516 interne); stringhe deallocate: 39 (1306 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.87500e-006: 2.87500e-006
Calcolo la funzione ext_fun2 in 2.87500e-006: -9.99997e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772532802e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 38187912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224435188859939


ris (2 : 2): [ -1 0.8224435188859939 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 49 (1541 interne); stringhe deallocate: 39 (1331 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.87500e-006: 2.87500e-006

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945612200213362e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 38187912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 50 (1566 interne); stringhe deallocate: 40 (1356 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224434941263024 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 38187912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 51 (1586 interne); stringhe deallocate: 41 (1376 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 51 (1586 interne); stringhe deallocate: 41 (1386 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 5.749999999915545e-006 0.1775593561140061 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927696259349487 0.7531168661546391 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945629591324095e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425208 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 52 (1636 interne); stringhe deallocate: 42 (1426 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772534747e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79854600 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 53 (1656 interne); stringhe deallocate: 43 (1446 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.61538e-006: 5.61538e-006
Calcolo la funzione ext_fun2 in 5.61538e-006: -9.99994e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772533213e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79854600 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224433673564803


ris (2 : 2): [ -1 0.8224433673564803 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 53 (1681 interne); stringhe deallocate: 43 (1471 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.61538e-006: 5.61538e-006

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945631172334162e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79854600 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 54 (1706 interne); stringhe deallocate: 44 (1496 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224430172891868 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79854600 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 55 (1726 interne); stringhe deallocate: 45 (1516 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 55 (1726 interne); stringhe deallocate: 45 (1526 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 1.123076923081889e-005 0.1775622480281351 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927703681287076 0.7531229689982143 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945648563444896e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425208 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 56 (1776 interne); stringhe deallocate: 46 (1566 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772535126e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858896 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 57 (1796 interne); stringhe deallocate: 47 (1586 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.00000e-006: 6.00000e-006
Calcolo la funzione ext_fun2 in 6.00000e-006: -9.99994e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772533593e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858896 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224433460892191


ris (2 : 2): [ -1 0.8224433460892191 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 57 (1821 interne); stringhe deallocate: 47 (1611 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.00000e-006: 6.00000e-006

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945650144454962e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858896 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 58 (1846 interne); stringhe deallocate: 48 (1636 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224430172892294 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858896 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 59 (1866 interne); stringhe deallocate: 49 (1656 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 59 (1866 interne); stringhe deallocate: 49 (1666 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 1.199999999990098e-005 0.1775626539107809 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927704723022992 0.7531238255416634 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945667535565696e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425208 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 60 (1916 interne); stringhe deallocate: 50 (1706 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772535506e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79859312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 61 (1936 interne); stringhe deallocate: 51 (1726 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.50000e-006: 3.50000e-006
Calcolo la funzione ext_fun2 in 3.50000e-006: -9.99996e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772533972e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79859312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224434843265883


ris (2 : 2): [ -1 0.8224434843265883 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 61 (1961 interne); stringhe deallocate: 51 (1751 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.50000e-006: 3.50000e-006

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945669116575763e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79859312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 62 (1986 interne); stringhe deallocate: 52 (1776 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224430172892721 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79859312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 63 (2006 interne); stringhe deallocate: 53 (1796 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 63 (2006 interne); stringhe deallocate: 53 (1806 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 7.000000000090267e-006 0.1775600156734117 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927697952005587 0.7531182580268436 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945686507686496e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425208 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 64 (2056 interne); stringhe deallocate: 54 (1846 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772535885e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79859696 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 65 (2076 interne); stringhe deallocate: 55 (1866 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.00000e-006: 6.00000e-006
Calcolo la funzione ext_fun2 in 6.00000e-006: -9.99994e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772534351e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79859696 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224433460892191


ris (2 : 2): [ -1 0.8224433460892191 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 65 (2101 interne); stringhe deallocate: 55 (1891 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.00000e-006: 6.00000e-006

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945688088696563e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79859696 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 66 (2126 interne); stringhe deallocate: 56 (1916 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224430172893147 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79859696 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 67 (2146 interne); stringhe deallocate: 57 (1936 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 67 (2146 interne); stringhe deallocate: 57 (1946 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 1.199999999990098e-005 0.1775626539107809 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927704723022992 0.7531238255416634 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945705479807297e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425208 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 68 (2196 interne); stringhe deallocate: 58 (1986 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772536264e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79860080 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 69 (2216 interne); stringhe deallocate: 59 (2006 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.00000e-006: 6.00000e-006
Calcolo la funzione ext_fun2 in 6.00000e-006: -9.99994e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772534731e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79860080 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224433460892191


ris (2 : 2): [ -1 0.8224433460892191 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 69 (2241 interne); stringhe deallocate: 59 (2031 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.00000e-006: 6.00000e-006

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945707060817363e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79860080 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 70 (2266 interne); stringhe deallocate: 60 (2056 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224430172893573 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79860080 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 71 (2286 interne); stringhe deallocate: 61 (2076 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 71 (2286 interne); stringhe deallocate: 61 (2086 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 1.199999999990098e-005 0.1775626539107809 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927704723022992 0.7531238255416634 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945724451928097e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425208 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 72 (2336 interne); stringhe deallocate: 62 (2126 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772536644e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79860464 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 73 (2356 interne); stringhe deallocate: 63 (2146 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.22500e-005: 1.22500e-005
Calcolo la funzione ext_fun2 in 1.22500e-005: -9.99988e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277253511e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79860464 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.822443000496302


ris (2 : 2): [ -1 0.822443000496302 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 73 (2381 interne); stringhe deallocate: 63 (2171 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.22500e-005: 1.22500e-005

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945726032938164e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79860464 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 74 (2406 interne); stringhe deallocate: 64 (2196 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224425404522417 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79860464 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 75 (2426 interne); stringhe deallocate: 65 (2216 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 75 (2426 interne); stringhe deallocate: 65 (2226 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 2.449999999976082e-005 0.1775692495036977 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927721653317854 0.753137744513354 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945743424048897e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425872 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 76 (2476 interne); stringhe deallocate: 66 (2266 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772537023e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79860848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 77 (2496 interne); stringhe deallocate: 67 (2286 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.53750e-005: 1.53750e-005
Calcolo la funzione ext_fun2 in 1.53750e-005: -9.99985e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277253549e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79860848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.82244282770269


ris (2 : 2): [ -1 0.82244282770269 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 77 (2521 interne); stringhe deallocate: 67 (2311 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.53750e-005: 1.53750e-005

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945745005058964e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79860848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 78 (2546 interne); stringhe deallocate: 68 (2336 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224425404522844 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79860848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 79 (2566 interne); stringhe deallocate: 69 (2356 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 79 (2566 interne); stringhe deallocate: 69 (2366 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 3.074999999941319e-005 0.1775725472973095 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927730119939434 0.7531447040926522 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945762396169697e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425488 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 80 (2616 interne); stringhe deallocate: 70 (2406 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772537403e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79861232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 81 (2636 interne); stringhe deallocate: 71 (2426 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.90769e-005: 2.90769e-005
Calcolo la funzione ext_fun2 in 2.90769e-005: -9.99971e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772535869e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79861232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224420700710801


ris (2 : 2): [ -1 0.8224420700710801 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 81 (2661 interne); stringhe deallocate: 71 (2451 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.90769e-005: 2.90769e-005

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945763977179764e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79861232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 82 (2686 interne); stringhe deallocate: 72 (2476 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224420636151688 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79861232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 83 (2706 interne); stringhe deallocate: 73 (2496 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 83 (2706 interne); stringhe deallocate: 73 (2506 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 5.815384614982211e-005 0.1775870068519928 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927767254423197 0.7531752199493784 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945781368290498e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425208 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 84 (2756 interne); stringhe deallocate: 74 (2546 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772537782e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79861616 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 85 (2776 interne); stringhe deallocate: 75 (2566 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.10000e-005: 3.10000e-005
Calcolo la funzione ext_fun2 in 3.10000e-005: -9.99969e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772536249e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79861616 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.822441963737792


ris (2 : 2): [ -1 0.822441963737792 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 85 (2801 interne); stringhe deallocate: 75 (2591 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.10000e-005: 3.10000e-005

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945782949300564e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79861616 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 86 (2826 interne); stringhe deallocate: 76 (2616 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224415867780532 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79861616 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 87 (2846 interne); stringhe deallocate: 77 (2636 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 87 (2846 interne); stringhe deallocate: 77 (2646 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 6.199999999501049e-005 0.177589036262203 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927772467793279 0.7531795029764971 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945800340411298e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 88 (2896 interne); stringhe deallocate: 78 (2686 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772532091e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79862000 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 89 (2916 interne); stringhe deallocate: 79 (2706 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.85000e-005: 1.85000e-005
Calcolo la funzione ext_fun2 in 1.85000e-005: -9.99981e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772536628e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79862000 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224426549084454


ris (2 : 2): [ -1 0.8224426549084454 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 89 (2941 interne); stringhe deallocate: 79 (2731 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.85000e-005: 1.85000e-005

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945801921421365e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79862000 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 90 (2966 interne); stringhe deallocate: 80 (2756 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224425404517302 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79862000 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 91 (2986 interne); stringhe deallocate: 81 (2776 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 91 (2986 interne); stringhe deallocate: 81 (2786 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 3.699999999895454e-005 0.1775758450915536 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927738587543929 0.7531516637395727 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945515758599293e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 92 (3036 interne); stringhe deallocate: 82 (2826 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.051311265152081e-297 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79862384 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 93 (3056 interne); stringhe deallocate: 83 (2846 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.10000e-005: 3.10000e-005
Calcolo la funzione ext_fun2 in 3.10000e-005: -9.99969e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772537007e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79862384 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224419637377923


ris (2 : 2): [ -1 0.8224419637377923 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 93 (3081 interne); stringhe deallocate: 83 (2871 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.10000e-005: 3.10000e-005

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.94551733960936e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79862384 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 94 (3106 interne); stringhe deallocate: 84 (2896 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224415821486444 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79862384 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 95 (3126 interne); stringhe deallocate: 85 (2916 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 95 (3126 interne); stringhe deallocate: 85 (2926 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 6.199999999501049e-005 0.1775890362622027 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927772467793279 0.7531795029764964 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.885645015129952e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 96 (3176 interne); stringhe deallocate: 86 (2966 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772538272e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 97 (3196 interne); stringhe deallocate: 87 (2986 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.10000e-005: 3.10000e-005
Calcolo la funzione ext_fun2 in 3.10000e-005: -9.99969e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945782158795531e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224419637377923


ris (2 : 2): [ -1 0.8224419637377923 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 97 (3221 interne); stringhe deallocate: 87 (3011 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.10000e-005: 3.10000e-005

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.885646596140018e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 98 (3246 interne); stringhe deallocate: 88 (3036 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224415867781083 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 99 (3266 interne); stringhe deallocate: 89 (3056 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 99 (3266 interne); stringhe deallocate: 89 (3066 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 6.199999999501049e-005 0.1775890362622027 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927772467793279 0.7531795029764964 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361855144e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 100 (3316 interne); stringhe deallocate: 90 (3106 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277253213e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858216 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 101 (3336 interne); stringhe deallocate: 91 (3126 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.22500e-005: 6.22500e-005
Calcolo la funzione ext_fun2 in 6.22500e-005: -9.99938e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945801130916331e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858216 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224402358238107


ris (2 : 2): [ -1 0.8224402358238107 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 101 (3361 interne); stringhe deallocate: 91 (3151 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.22500e-005: 6.22500e-005

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945826427077398e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858216 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 102 (3386 interne); stringhe deallocate: 92 (3176 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224401562659436 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858216 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 103 (3406 interne); stringhe deallocate: 93 (3196 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 103 (3406 interne); stringhe deallocate: 93 (3206 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.0001244999999598928 0.1776220141761492 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927857237275222 0.7532491056752529 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84265232065773e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 104 (3456 interne); stringhe deallocate: 94 (3246 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772537988e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864144 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 105 (3476 interne); stringhe deallocate: 95 (3266 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.78750e-005: 7.78750e-005
Calcolo la funzione ext_fun2 in 7.78750e-005: -9.99922e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945516549104327e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864144 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224393719379802


ris (2 : 2): [ -1 0.8224393719379802 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 105 (3501 interne); stringhe deallocate: 95 (3291 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.78750e-005: 7.78750e-005

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945519315871944e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864144 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 106 (3526 interne); stringhe deallocate: 96 (3316 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224392025922853 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864144 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 107 (3546 interne); stringhe deallocate: 97 (3336 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 107 (3546 interne); stringhe deallocate: 97 (3346 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.0001557499999212952 0.1776385030619411 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927899658931171 0.7532839093530872 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361861326e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 108 (3596 interne); stringhe deallocate: 98 (3386 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840032328e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79862768 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 109 (3616 interne); stringhe deallocate: 99 (3406 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.46385e-004: 1.46385e-004
Calcolo la funzione ext_fun2 in 1.46385e-004: -9.99854e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618368725058e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79862768 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224355841788449


ris (2 : 2): [ -1 0.8224355841788449 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 109 (3641 interne); stringhe deallocate: 99 (3431 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.46385e-004: 1.46385e-004

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945812197986798e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79862768 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 110 (3666 interne); stringhe deallocate: 100 (3456 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224353878950277 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79862768 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 111 (3686 interne); stringhe deallocate: 101 (3476 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 111 (3686 interne); stringhe deallocate: 101 (3486 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.0002927692302464591 0.177710800436017 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3928085952495921 0.7534365294477963 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945528406679827e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 112 (3736 interne); stringhe deallocate: 102 (3526 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772538399e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858216 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 113 (3756 interne); stringhe deallocate: 103 (3546 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.56000e-004: 1.56000e-004
Calcolo la funzione ext_fun2 in 1.56000e-004: -9.99844e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.45776684003279e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858216 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224350525878337


ris (2 : 2): [ -1 0.8224350525878337 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 113 (3781 interne); stringhe deallocate: 103 (3571 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.56000e-004: 1.56000e-004

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945815755259448e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858216 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 114 (3806 interne); stringhe deallocate: 104 (3596 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224349110579077 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858216 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 115 (3826 interne); stringhe deallocate: 105 (3616 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 115 (3826 interne); stringhe deallocate: 105 (3626 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.0003119999993672629 0.1777209474115336 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3928112136918404 0.7534579522906146 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945831170107599e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 116 (3876 interne); stringhe deallocate: 106 (3666 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772538454e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864200 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 117 (3896 interne); stringhe deallocate: 107 (3686 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.35000e-005: 9.35000e-005
Calcolo la funzione ext_fun2 in 9.35000e-005: -9.99907e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840021188e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864200 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224385080363426


ris (2 : 2): [ -1 0.8224385080363426 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 117 (3921 interne); stringhe deallocate: 107 (3711 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.35000e-005: 9.35000e-005

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945832751117665e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864200 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 118 (3946 interne); stringhe deallocate: 108 (3736 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224382489180213 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864200 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 119 (3966 interne); stringhe deallocate: 109 (3756 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 119 (3966 interne); stringhe deallocate: 109 (3766 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.0001869999998637129 0.1776549919635212 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927942105215686 0.7533187147143409 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840031088e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 120 (4016 interne); stringhe deallocate: 110 (3806 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419469781536825e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858368 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 121 (4036 interne); stringhe deallocate: 111 (3826 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.56000e-004: 1.56000e-004
Calcolo la funzione ext_fun2 in 1.56000e-004: -9.99844e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602197796e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858368 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224350525878708


ris (2 : 2): [ -1 0.8224350525878708 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 121 (4061 interne); stringhe deallocate: 111 (3851 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.56000e-004: 1.56000e-004

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945835517885282e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858368 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 122 (4086 interne); stringhe deallocate: 112 (3876 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224349110578304 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858368 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 123 (4106 interne); stringhe deallocate: 113 (3896 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 123 (4106 interne); stringhe deallocate: 113 (3906 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.0003119999993672629 0.1777209474114965 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3928112136918404 0.7534579522905364 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945796783138648e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 124 (4156 interne); stringhe deallocate: 114 (3946 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840020785e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858200 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 125 (4176 interne); stringhe deallocate: 115 (3966 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.56000e-004: 1.56000e-004
Calcolo la funzione ext_fun2 in 1.56000e-004: -9.99844e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772532328e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858200 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224350525878708


ris (2 : 2): [ -1 0.8224350525878708 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 125 (4201 interne); stringhe deallocate: 115 (3991 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.56000e-004: 1.56000e-004

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945798364148715e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858200 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 126 (4226 interne); stringhe deallocate: 116 (4016 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224349110571829 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858200 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 127 (4246 interne); stringhe deallocate: 117 (4036 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 127 (4246 interne); stringhe deallocate: 117 (4046 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.0003119999993672629 0.1777209474114965 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3928112136918404 0.7534579522905364 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945508644053993e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 128 (4296 interne); stringhe deallocate: 118 (4086 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772537885e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864128 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 129 (4316 interne); stringhe deallocate: 119 (4106 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.12250e-004: 3.12250e-004
Calcolo la funzione ext_fun2 in 3.12250e-004: -9.99688e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772538383e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864128 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224264142829445


ris (2 : 2): [ -1 0.8224264142829445 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 129 (4341 interne); stringhe deallocate: 119 (4131 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.12250e-004: 3.12250e-004

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.94551022506406e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864128 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 130 (4366 interne); stringhe deallocate: 120 (4156 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224263279890023 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864128 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 131 (4386 interne); stringhe deallocate: 121 (4176 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 131 (4386 interne); stringhe deallocate: 121 (4186 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.0006244999949259755 0.1778858357119814 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3928538947020844 0.7538061601930974 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945805478694015e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 132 (4436 interne); stringhe deallocate: 122 (4226 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277253862e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864640 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 133 (4456 interne); stringhe deallocate: 123 (4246 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.90375e-004: 3.90375e-004
Calcolo la funzione ext_fun2 in 3.90375e-004: -9.99610e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772538438e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864640 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224220969092324


ris (2 : 2): [ -1 0.8224220969092324 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 133 (4481 interne); stringhe deallocate: 123 (4271 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.90375e-004: 3.90375e-004

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945807059704081e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864640 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 134 (4506 interne); stringhe deallocate: 124 (4296 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224220364546611 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864640 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 135 (4526 interne); stringhe deallocate: 125 (4316 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 135 (4526 interne); stringhe deallocate: 125 (4326 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.000780749990085039 0.1779682780808526 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3928753282639987 0.7539803213712824 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945809035966665e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 136 (4576 interne); stringhe deallocate: 126 (4366 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772538185e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 137 (4596 interne); stringhe deallocate: 127 (4386 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.32923e-004: 7.32923e-004
Calcolo la funzione ext_fun2 in 7.32923e-004: -9.99267e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772537695e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224031680815759


ris (2 : 2): [ -1 0.8224031680815759 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 137 (4621 interne); stringhe deallocate: 127 (4411 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.32923e-004: 7.32923e-004

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945843818188132e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 138 (4646 interne); stringhe deallocate: 128 (4436 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224029629682841 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 139 (4666 interne); stringhe deallocate: 129 (4456 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 139 (4666 interne); stringhe deallocate: 129 (4466 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.001465846088227973 0.1783297549297291 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3929700436492644 0.7547444220514183 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945820498289648e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 140 (4716 interne); stringhe deallocate: 130 (4506 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772538928e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864768 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 141 (4736 interne); stringhe deallocate: 131 (4526 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.81000e-004: 7.81000e-004
Calcolo la funzione ext_fun2 in 7.81000e-004: -9.99219e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772531932e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864768 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224005120093438


ris (2 : 2): [ -1 0.8224005120093438 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 141 (4761 interne); stringhe deallocate: 131 (4551 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.81000e-004: 7.81000e-004

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945822079299715e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864768 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 142 (4786 interne); stringhe deallocate: 132 (4576 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224001019454184 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864768 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 143 (4806 interne); stringhe deallocate: 133 (4596 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 143 (4806 interne); stringhe deallocate: 133 (4606 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.001561999920603463 0.1783804879112596 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3929834336917522 0.7548517239822993 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772538454e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 144 (4856 interne); stringhe deallocate: 134 (4646 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419469788058492e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79863848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 145 (4876 interne); stringhe deallocate: 135 (4666 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.68500e-004: 4.68500e-004
Calcolo la funzione ext_fun2 in 4.68500e-004: -9.99532e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.794386957779076e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79863848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224177791410139


ris (2 : 2): [ -1 0.8224177791410139 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 145 (4901 interne); stringhe deallocate: 135 (4691 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.68500e-004: 4.68500e-004

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945859233036282e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79863848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 146 (4926 interne); stringhe deallocate: 136 (4716 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224177449202816 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79863848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 147 (4946 interne); stringhe deallocate: 137 (4736 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 147 (4946 interne); stringhe deallocate: 137 (4746 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.0009369999828613418 0.1780507208418474 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3928968240981537 0.7541545237403676 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945861999803899e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425240 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 148 (4996 interne); stringhe deallocate: 138 (4786 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772538857e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858016 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 149 (5016 interne); stringhe deallocate: 139 (4806 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.81000e-004: 7.81000e-004
Calcolo la funzione ext_fun2 in 7.81000e-004: -9.99219e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380385052e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864976 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224005120139755


ris (2 : 2): [ -1 0.8224005120139755 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 149 (5041 interne); stringhe deallocate: 139 (4831 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.81000e-004: 7.81000e-004

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047878618e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864976 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 150 (5066 interne); stringhe deallocate: 140 (4856 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224001019454086 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864976 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 151 (5086 interne); stringhe deallocate: 141 (4876 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 151 (5086 interne); stringhe deallocate: 141 (4886 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.001561999920603463 0.1783804879066279 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3929834336917522 0.7548517239725026 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842686313794638e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 152 (5136 interne); stringhe deallocate: 142 (4926 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.792014022442214e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865168 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 153 (5156 interne); stringhe deallocate: 143 (4946 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.81000e-004: 7.81000e-004
Calcolo la funzione ext_fun2 in 7.81000e-004: -9.99219e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945854885258599e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865168 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8224005120139755


ris (2 : 2): [ -1 0.8224005120139755 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 153 (5181 interne); stringhe deallocate: 143 (4971 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.81000e-004: 7.81000e-004

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.886744212378819e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865168 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 154 (5206 interne); stringhe deallocate: 144 (4996 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8224001019453819 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865168 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 155 (5226 interne); stringhe deallocate: 145 (5016 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 155 (5226 interne); stringhe deallocate: 145 (5026 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.001561999920603463 0.1783804879066279 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3929834336917522 0.7548517239725026 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302693621744e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 156 (5276 interne); stringhe deallocate: 146 (5066 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772539577e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865464 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 157 (5296 interne); stringhe deallocate: 147 (5086 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.56225e-003: 1.56225e-003
Calcolo la funzione ext_fun2 in 1.56225e-003: -9.98438e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618409929311e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865464 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8223573521000113


ris (2 : 2): [ -1 0.8223573521000113 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 157 (5321 interne); stringhe deallocate: 147 (5111 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.56225e-003: 1.56225e-003

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945843027683099e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865464 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 158 (5346 interne); stringhe deallocate: 148 (5136 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8223571866012529 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865464 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 159 (5366 interne); stringhe deallocate: 149 (5156 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 159 (5366 interne); stringhe deallocate: 149 (5166 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.003124499364522304 0.1792048972645111 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.393204403996102 0.7565974228606576 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361861603e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 160 (5416 interne); stringhe deallocate: 150 (5206 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772539276e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865120 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 161 (5436 interne); stringhe deallocate: 151 (5226 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.95288e-003: 1.95287e-003
Calcolo la funzione ext_fun2 in 1.95288e-003: -9.98047e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772539e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865120 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8223358165792591


ris (2 : 2): [ -1 0.8223358165792591 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 161 (5461 interne); stringhe deallocate: 151 (5251 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.95288e-003: 1.95287e-003

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945891643742649e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865120 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 162 (5486 interne); stringhe deallocate: 152 (5276 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8223357289291 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865120 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 163 (5506 interne); stringhe deallocate: 153 (5296 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 163 (5506 interne); stringhe deallocate: 153 (5306 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.003905748758713523 0.1796170571794545 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.39331731410183 0.7574715789135308 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945875043136949e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 164 (5556 interne); stringhe deallocate: 154 (5346 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772539664e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865736 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 165 (5576 interne); stringhe deallocate: 155 (5366 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.66562e-003: 3.66561e-003
Calcolo la funzione ext_fun2 in 3.66562e-003: -9.96334e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419469782406381e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865736 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8222414210381867


ris (2 : 2): [ -1 0.8222414210381867 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 165 (5601 interne); stringhe deallocate: 155 (5391 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.66562e-003: 3.66561e-003

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945876624147016e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865736 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 166 (5626 interne); stringhe deallocate: 156 (5416 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8222413151718193 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865736 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 167 (5646 interne); stringhe deallocate: 157 (5436 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 167 (5646 interne); stringhe deallocate: 157 (5446 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.007331222560251871 0.1814241861374498 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3938321412259394 0.7613145505410057 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840033776e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 168 (5696 interne); stringhe deallocate: 158 (5486 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419469788888522e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 169 (5716 interne); stringhe deallocate: 159 (5506 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.90600e-003: 3.90599e-003
Calcolo la funzione ext_fun2 in 3.90600e-003: -9.96094e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.8424826021991e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8222281873847233


ris (2 : 2): [ -1 0.8222281873847233 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 169 (5741 interne); stringhe deallocate: 159 (5531 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.90600e-003: 3.90599e-003

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945895991520333e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 170 (5766 interne); stringhe deallocate: 160 (5556 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8222279637313354 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 171 (5786 interne); stringhe deallocate: 161 (5576 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 171 (5786 interne); stringhe deallocate: 161 (5586 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.007811990067807306 0.1816778026830841 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3939070463509097 0.7618551239367888 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945870300106749e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 172 (5836 interne); stringhe deallocate: 162 (5626 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840034896e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 38188128 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 173 (5856 interne); stringhe deallocate: 163 (5646 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.34350e-003: 2.34350e-003
Calcolo la funzione ext_fun2 in 2.34350e-003: -9.97656e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772538565e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 38188128 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8223142712801098


ris (2 : 2): [ -1 0.8223142712801098 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 173 (5881 interne); stringhe deallocate: 163 (5671 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.34350e-003: 2.34350e-003

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945871881116816e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 38188128 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 174 (5906 interne); stringhe deallocate: 164 (5696 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8223142712569969 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 38188128 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 175 (5926 interne); stringhe deallocate: 165 (5716 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 175 (5926 interne); stringhe deallocate: 165 (5726 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.004686997854919994 0.1800292265748101 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3934318715024361 0.7583466516930422 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618409930062e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 176 (5976 interne); stringhe deallocate: 166 (5766 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277253911e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 177 (5996 interne); stringhe deallocate: 167 (5786 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.90600e-003: 3.90599e-003
Calcolo la funzione ext_fun2 in 3.90600e-003: -9.96094e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53524438038614e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864752 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8222281879638571


ris (2 : 2): [ -1 0.8222281879638571 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 177 (6021 interne); stringhe deallocate: 167 (5811 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.90600e-003: 3.90599e-003

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047879111e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864752 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 178 (6046 interne); stringhe deallocate: 168 (5836 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8222279637313257 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864752 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 179 (6066 interne); stringhe deallocate: 169 (5856 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 179 (6066 interne); stringhe deallocate: 169 (5866 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.007811990067807306 0.1816778021039502 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3939070463509097 0.76185512270206 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 180 (6116 interne); stringhe deallocate: 170 (5906 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277253979e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858016 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 181 (6136 interne); stringhe deallocate: 171 (5926 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.90600e-003: 3.90599e-003
Calcolo la funzione ext_fun2 in 3.90600e-003: -9.96094e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618409930046e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858016 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8222281879638571


ris (2 : 2): [ -1 0.8222281879638571 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 181 (6161 interne); stringhe deallocate: 171 (5951 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.90600e-003: 3.90599e-003

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945867533339132e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858016 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 182 (6186 interne); stringhe deallocate: 172 (5976 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8222279637314038 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79858016 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 183 (6206 interne); stringhe deallocate: 173 (5996 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 183 (6206 interne); stringhe deallocate: 173 (6006 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.007811990067807306 0.1816778021039502 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3939070463509097 0.76185512270206 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945890062732583e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 184 (6256 interne); stringhe deallocate: 174 (6046 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772539751e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 185 (6276 interne); stringhe deallocate: 175 (6066 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.81225e-003: 7.81217e-003
Calcolo la funzione ext_fun2 in 7.81225e-003: -9.92188e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.456054892659784e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.822013176927285


ris (2 : 2): [ -1 0.822013176927285 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 185 (6301 interne); stringhe deallocate: 175 (6091 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.81225e-003: 7.81217e-003

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.9459023155606e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 186 (6326 interne); stringhe deallocate: 176 (6116 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8220129101730498 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 187 (6346 interne); stringhe deallocate: 177 (6136 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 187 (6346 interne); stringhe deallocate: 177 (6146 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.0156244205350119 0.1857989936077269 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.395222317992399 0.7706744457948457 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.94589875828795e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 188 (6396 interne); stringhe deallocate: 178 (6186 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.45776684003624e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865416 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 189 (6416 interne); stringhe deallocate: 179 (6206 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.76537e-003: 9.76522e-003
Calcolo la funzione ext_fun2 in 9.76537e-003: -9.90235e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772539403e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865416 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8219067782554895


ris (2 : 2): [ -1 0.8219067782554895 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 189 (6441 interne); stringhe deallocate: 179 (6231 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.76537e-003: 9.76522e-003

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945900339298016e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865416 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 190 (6466 interne); stringhe deallocate: 180 (6256 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8219065754868131 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865416 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 191 (6486 interne); stringhe deallocate: 181 (6276 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 191 (6486 interne); stringhe deallocate: 181 (6286 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.01953059479223152 0.1878584415367421 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.395954486764817 0.7751007551484256 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.94591773040875e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 192 (6536 interne); stringhe deallocate: 182 (6326 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772540328e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 193 (6556 interne); stringhe deallocate: 183 (6346 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.83291e-002: 1.83281e-002
Calcolo la funzione ext_fun2 in 1.83291e-002: -9.81671e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766762242804e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8214409403539144


ris (2 : 2): [ -1 0.8214409403539144 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 193 (6581 interne); stringhe deallocate: 183 (6371 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.83291e-002: 1.83281e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945919311418817e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 194 (6606 interne); stringhe deallocate: 184 (6396 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8214407055832709 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 195 (6626 interne); stringhe deallocate: 185 (6416 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 195 (6626 interne); stringhe deallocate: 185 (6426 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.03665712757236761 0.1968871102953763 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3998617363907632 0.7945477998820701 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772539529e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 196 (6676 interne); stringhe deallocate: 186 (6466 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419469798335057e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 197 (6696 interne); stringhe deallocate: 187 (6486 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.95310e-002: 1.95298e-002
Calcolo la funzione ext_fun2 in 1.95310e-002: -9.80469e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945890853237616e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8213758944180987


ris (2 : 2): [ -1 0.8213758944180987 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 197 (6721 interne); stringhe deallocate: 187 (6511 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.95310e-002: 1.95298e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945929192731733e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 198 (6746 interne); stringhe deallocate: 188 (6536 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8213758557298387 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 199 (6766 interne); stringhe deallocate: 189 (6556 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 199 (6766 interne); stringhe deallocate: 189 (6566 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.03906075830793332 0.1981538638898346 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4005142060905175 0.7972702254427675 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361863184e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 200 (6816 interne); stringhe deallocate: 190 (6606 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772541142e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865480 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 201 (6836 interne); stringhe deallocate: 191 (6626 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.17185e-002: 1.17182e-002
Calcolo la funzione ext_fun2 in 1.17185e-002: -9.88282e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618409930133e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865480 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8218001455754773


ris (2 : 2): [ -1 0.8218001455754773 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 201 (6861 interne); stringhe deallocate: 191 (6651 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.17185e-002: 1.17182e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945966346468301e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865480 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 202 (6886 interne); stringhe deallocate: 192 (6676 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8217997639634893 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865480 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 203 (6906 interne); stringhe deallocate: 193 (6696 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 203 (6906 interne); stringhe deallocate: 193 (6706 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.02343673179810579 0.1899180862226285 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3967411356698419 0.7795352758743634 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945925635459083e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 204 (6956 interne); stringhe deallocate: 194 (6746 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772541245e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 205 (6976 interne); stringhe deallocate: 195 (6766 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.95310e-002: 1.95298e-002
Calcolo la funzione ext_fun2 in 1.95310e-002: -9.80469e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772540114e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8213759669231641


ris (2 : 2): [ -1 0.8213759669231641 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 205 (7001 interne); stringhe deallocate: 195 (6791 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.95310e-002: 1.95298e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945969903740951e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 206 (7026 interne); stringhe deallocate: 196 (6816 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8213758557298583 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 207 (7046 interne); stringhe deallocate: 197 (6836 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 207 (7046 interne); stringhe deallocate: 197 (6846 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.03906075830793332 0.1981537913847692 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4005142060905175 0.7972700697296998 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945973461013601e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 208 (7096 interne); stringhe deallocate: 198 (6886 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840036105e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865952 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 209 (7116 interne); stringhe deallocate: 199 (6906 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.95310e-002: 1.95298e-002
Calcolo la funzione ext_fun2 in 1.95310e-002: -9.80469e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840036583e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865952 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8213759669231641


ris (2 : 2): [ -1 0.8213759669231641 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 209 (7141 interne); stringhe deallocate: 199 (6931 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.95310e-002: 1.95298e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945975042023667e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865952 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 210 (7166 interne); stringhe deallocate: 200 (6956 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8213758557297251 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865952 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 211 (7186 interne); stringhe deallocate: 201 (6976 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 211 (7186 interne); stringhe deallocate: 201 (6986 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.03906075830793332 0.1981537913847692 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4005142060905175 0.7972700697296998 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.9459141731361e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 212 (7236 interne); stringhe deallocate: 202 (7026 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772540146e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867424 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 213 (7256 interne); stringhe deallocate: 203 (7046 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.90623e-002: 3.90523e-002
Calcolo la funzione ext_fun2 in 3.90623e-002: -9.60938e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840038076e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867424 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8203204100234952


ris (2 : 2): [ -1 0.8203204100234952 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 213 (7281 interne); stringhe deallocate: 203 (7071 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.90623e-002: 3.90523e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945915754146167e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867424 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 214 (7306 interne); stringhe deallocate: 204 (7096 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8203201382614731 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867424 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 215 (7326 interne); stringhe deallocate: 205 (7116 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 215 (7326 interne); stringhe deallocate: 205 (7126 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.07811456684113149 0.2187319068176363 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.416164453671069 0.8403268486872231 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772540241e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 216 (7376 interne); stringhe deallocate: 206 (7166 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419469801259926e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 217 (7396 interne); stringhe deallocate: 207 (7186 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.88279e-002: 4.88085e-002
Calcolo la funzione ext_fun2 in 4.88279e-002: -9.51172e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84255050606536e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8198198008638665


ris (2 : 2): [ -1 0.8198198008638665 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 217 (7421 interne); stringhe deallocate: 207 (7211 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.88279e-002: 4.88085e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.94592010192385e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 218 (7446 interne); stringhe deallocate: 208 (7236 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8198194592455295 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 219 (7466 interne); stringhe deallocate: 209 (7256 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 219 (7466 interne); stringhe deallocate: 209 (7266 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.09763635005715798 0.2289886741932915 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4289509108868438 0.8603404599229195 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945922868691467e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 220 (7516 interne); stringhe deallocate: 210 (7306 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772540494e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 221 (7536 interne); stringhe deallocate: 211 (7326 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.16464e-002: 9.15181e-002
Calcolo la funzione ext_fun2 in 9.16464e-002: -9.08354e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772541229e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8176348921713059


ris (2 : 2): [ -1 0.8176348921713059 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 221 (7561 interne); stringhe deallocate: 211 (7351 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.16464e-002: 9.15181e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945995595154534e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 222 (7586 interne); stringhe deallocate: 212 (7376 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8176345913865122 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 223 (7606 interne); stringhe deallocate: 213 (7396 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 223 (7606 interne); stringhe deallocate: 213 (7406 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1831645325183355 0.273883255731645 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.5568464348034851 0.9295548163042506 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945935912024517e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 224 (7656 interne); stringhe deallocate: 214 (7446 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772541442e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867840 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 225 (7676 interne); stringhe deallocate: 215 (7466 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.76560e-002: 9.75009e-002
Calcolo la funzione ext_fun2 in 9.76560e-002: -9.02344e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840036076e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867840 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8173320529634677


ris (2 : 2): [ -1 0.8173320529634677 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 225 (7701 interne); stringhe deallocate: 215 (7491 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.76560e-002: 9.75009e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945937493034584e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867840 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 226 (7726 interne); stringhe deallocate: 216 (7516 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8173317997911598 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867840 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 227 (7746 interne); stringhe deallocate: 217 (7536 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 227 (7746 interne); stringhe deallocate: 217 (7546 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1951568547601045 0.2801688017966368 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.5863865507835926 0.9366498738589801 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772541142e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 228 (7796 interne); stringhe deallocate: 218 (7586 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419469800983249e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 229 (7816 interne); stringhe deallocate: 219 (7606 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.85935e-002: 5.85600e-002
Calcolo la funzione ext_fun2 in 5.85935e-002: -9.41407e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602200334e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8193145951038346


ris (2 : 2): [ -1 0.8193145951038346 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 229 (7841 interne); stringhe deallocate: 219 (7631 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.85935e-002: 5.85600e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945984923336584e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 230 (7866 interne); stringhe deallocate: 220 (7656 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8193144886949861 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 231 (7886 interne); stringhe deallocate: 221 (7676 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 231 (7886 interne); stringhe deallocate: 221 (7686 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1171534785712683 0.2392453834674338 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4465177944936923 0.8789629394118854 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945991247376851e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 232 (7936 interne); stringhe deallocate: 222 (7726 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772540889e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 233 (7956 interne); stringhe deallocate: 223 (7746 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.76560e-002: 9.75009e-002
Calcolo la funzione ext_fun2 in 9.76560e-002: -9.02344e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277254164e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8173411817145432


ris (2 : 2): [ -1 0.8173411817145432 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 233 (7981 interne); stringhe deallocate: 223 (7771 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.76560e-002: 9.75009e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945992828386918e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 234 (8006 interne); stringhe deallocate: 224 (7796 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8173408596971035 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 235 (8026 interne); stringhe deallocate: 225 (7816 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 235 (8026 interne); stringhe deallocate: 225 (7826 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1951568547601045 0.2801596730455613 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.5863865507835926 0.9366400123806205 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618409931841e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425240 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 236 (8076 interne); stringhe deallocate: 226 (7866 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772541537e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867688 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 237 (8096 interne); stringhe deallocate: 227 (7886 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.76560e-002: 9.75009e-002
Calcolo la funzione ext_fun2 in 9.76560e-002: -9.02344e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380388985e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8173411817145432


ris (2 : 2): [ -1 0.8173411817145432 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 237 (8121 interne); stringhe deallocate: 227 (7911 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.76560e-002: 9.75009e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047881616e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 238 (8146 interne); stringhe deallocate: 228 (7936 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8173408596971745 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 239 (8166 interne); stringhe deallocate: 229 (7956 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 239 (8166 interne); stringhe deallocate: 229 (7966 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1951568547601045 0.2801596730455613 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.5863865507835926 0.9366400123806205 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 240 (8216 interne); stringhe deallocate: 230 (8006 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840039794e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 241 (8236 interne); stringhe deallocate: 231 (8026 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.82420e-002: 9.80840e-002
Calcolo la funzione ext_fun2 in 9.82420e-002: -9.01758e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84265236186448e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8173122813258642


ris (2 : 2): [ -1 0.8173122813258642 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 241 (8261 interne); stringhe deallocate: 231 (8051 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.82420e-002: 9.80840e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945988875861751e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 242 (8286 interne); stringhe deallocate: 232 (8076 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8173122494677374 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 243 (8306 interne); stringhe deallocate: 233 (8096 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 243 (8306 interne); stringhe deallocate: 233 (8106 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1963260459545385 0.2807717646286744 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.5894042877218624 0.9372984241624914 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772540494e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 244 (8356 interne); stringhe deallocate: 234 (8146 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419469796793573e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866952 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 245 (8376 interne); stringhe deallocate: 235 (8166 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.85350e-002: 9.83756e-002
Calcolo la funzione ext_fun2 in 9.85350e-002: -9.01465e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945992037881884e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866952 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8172978534501738


ris (2 : 2): [ -1 0.8172978534501738 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 245 (8401 interne); stringhe deallocate: 235 (8191 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.85350e-002: 9.83756e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946013381517785e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866952 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 246 (8426 interne); stringhe deallocate: 236 (8216 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8172974675156928 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866952 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 247 (8446 interne); stringhe deallocate: 237 (8236 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 247 (8446 interne); stringhe deallocate: 237 (8246 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1969106289336463 0.2810777754834725 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.5909216541358418 0.9376254580951433 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361864575e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 248 (8496 interne); stringhe deallocate: 238 (8286 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772542225e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867032 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 249 (8516 interne); stringhe deallocate: 239 (8306 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.98197e-002: 9.96540e-002
Calcolo la funzione ext_fun2 in 9.98197e-002: -9.00180e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618409931272e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867032 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8172346076161237


ris (2 : 2): [ -1 0.8172346076161237 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 249 (8541 interne); stringhe deallocate: 239 (8331 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.98197e-002: 9.96540e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.94595093162015e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867032 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 250 (8566 interne); stringhe deallocate: 240 (8356 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8172345250109743 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867032 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 251 (8586 interne); stringhe deallocate: 241 (8376 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 251 (8586 interne); stringhe deallocate: 241 (8386 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1994737004277795 0.2824194005039635 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.5976397576058025 0.9390425515614356 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945978994548834e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 252 (8636 interne); stringhe deallocate: 242 (8426 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772541996e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 253 (8656 interne); stringhe deallocate: 243 (8446 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.00000e-001: 9.98334e-002
Calcolo la funzione ext_fun2 in 1.00000e-001: -9.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840036105e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8172257385069476


ris (2 : 2): [ -1 0.8172257385069476 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 253 (8681 interne); stringhe deallocate: 243 (8471 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.00000e-001: 9.98334e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946024053335735e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 254 (8706 interne); stringhe deallocate: 244 (8496 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8172254651049427 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 255 (8726 interne); stringhe deallocate: 245 (8516 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 255 (8726 interne); stringhe deallocate: 245 (8526 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1998334166468281 0.2826076781398806 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.5985909230129081 0.9392392535743945 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618409931161e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425240 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 256 (8776 interne); stringhe deallocate: 246 (8566 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840038629e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 257 (8796 interne); stringhe deallocate: 247 (8586 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.88280e-002: 9.86672e-002
Calcolo la funzione ext_fun2 in 9.88280e-002: -9.01172e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380387898e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866808 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8172834206510782


ris (2 : 2): [ -1 0.8172834206510782 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 257 (8821 interne); stringhe deallocate: 247 (8611 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.88280e-002: 9.86672e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047882602e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866808 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 258 (8846 interne); stringhe deallocate: 248 (8636 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.817283162401016 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866808 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 259 (8866 interne); stringhe deallocate: 249 (8656 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 259 (8866 interne); stringhe deallocate: 249 (8666 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1974952034673047 0.2813837828162264 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.5924446026246969 0.9379510696493711 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425304 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 260 (8916 interne); stringhe deallocate: 250 (8706 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772540976e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867688 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 261 (8936 interne); stringhe deallocate: 251 (8726 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.00000e-001: 9.98334e-002
Calcolo la funzione ext_fun2 in 1.00000e-001: -9.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380389555e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8172257387250572


ris (2 : 2): [ -1 0.8172257387250572 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 261 (8961 interne); stringhe deallocate: 251 (8751 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.00000e-001: 9.98334e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.5359030478824e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 262 (8986 interne); stringhe deallocate: 252 (8776 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.817225465104924 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79865232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 263 (9006 interne); stringhe deallocate: 253 (8796 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 263 (9006 interne); stringhe deallocate: 253 (8806 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1998334166468281 0.2826076779217709 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.5985909230129081 0.9392392533468332 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.801633881500523e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 264 (9056 interne); stringhe deallocate: 254 (8846 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840037882e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79867560 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 265 (9076 interne); stringhe deallocate: 255 (8866 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.00000e-001: 9.98334e-002
Calcolo la funzione ext_fun2 in 1.00000e-001: -9.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380387784e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868000 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8172257387250572


ris (2 : 2): [ -1 0.8172257387250572 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 265 (9101 interne); stringhe deallocate: 255 (8891 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.00000e-001: 9.98334e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047883121e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868000 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 266 (9126 interne); stringhe deallocate: 256 (8916 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8172254651047997 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868000 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 267 (9146 interne); stringhe deallocate: 257 (8936 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 267 (9146 interne); stringhe deallocate: 257 (8946 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1998334166468281 0.2826076779217709 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.5985909230129081 0.9392392533468332 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652282944798e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 268 (9196 interne); stringhe deallocate: 258 (8986 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772542312e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866880 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 269 (9216 interne); stringhe deallocate: 259 (9006 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.02930e-001: 1.02748e-001
Calcolo la funzione ext_fun2 in 1.02930e-001: -8.97070e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842550506066688e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866880 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8170816330134073


ris (2 : 2): [ -1 0.8170816330134073 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 269 (9241 interne); stringhe deallocate: 259 (9031 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.02930e-001: 1.02748e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945948955357567e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866880 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 270 (9266 interne); stringhe deallocate: 260 (9056 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8170814602832008 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866880 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 271 (9286 interne); stringhe deallocate: 261 (9076 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 271 (9286 interne); stringhe deallocate: 261 (9086 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2056783461501031 0.2856667131366957 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.6143141876756764 0.9423613218370124 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361864109e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 272 (9336 interne); stringhe deallocate: 262 (9126 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772543039e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866968 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 273 (9356 interne); stringhe deallocate: 263 (9146 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.04395e-001: 1.04205e-001
Calcolo la funzione ext_fun2 in 1.04395e-001: -8.95605e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772540889e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866968 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8170101365938381


ris (2 : 2): [ -1 0.8170101365938381 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 273 (9381 interne); stringhe deallocate: 263 (9171 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.04395e-001: 1.04205e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946028401113418e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866968 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 274 (9406 interne); stringhe deallocate: 264 (9196 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8170099347095521 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866968 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 275 (9426 interne); stringhe deallocate: 265 (9216 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 275 (9426 interne); stringhe deallocate: 265 (9226 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2086004816841025 0.2871953450902644 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.6223495975996677 0.9438699859495432 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946063183334886e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425240 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 276 (9476 interne); stringhe deallocate: 266 (9266 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772542407e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 277 (9496 interne); stringhe deallocate: 267 (9286 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.10818e-001: 1.10592e-001
Calcolo la funzione ext_fun2 in 1.10818e-001: -8.89182e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53524438039149e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8166970022706853


ris (2 : 2): [ -1 0.8166970022706853 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 277 (9521 interne); stringhe deallocate: 267 (9311 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.10818e-001: 1.10592e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047885056e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 278 (9546 interne); stringhe deallocate: 268 (9336 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.816696652696538 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 279 (9566 interne); stringhe deallocate: 269 (9356 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 279 (9566 interne); stringhe deallocate: 269 (9366 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2214102403528042 0.2938947765436573 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.6586421500163362 0.9500903421818238 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 280 (9616 interne); stringhe deallocate: 270 (9406 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772542968e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 281 (9636 interne); stringhe deallocate: 271 (9426 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.11720e-001: 1.11488e-001
Calcolo la funzione ext_fun2 in 1.11720e-001: -8.88280e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945945398084917e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8166532274164892


ris (2 : 2): [ -1 0.8166532274164892 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 281 (9661 interne); stringhe deallocate: 271 (9451 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.11720e-001: 1.11488e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946031563133552e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 282 (9686 interne); stringhe deallocate: 272 (9476 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8166527836780499 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 283 (9706 interne); stringhe deallocate: 273 (9496 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 283 (9706 interne); stringhe deallocate: 273 (9506 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.223207742098689 0.2948345146821998 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.663838300024663 0.9509133207012854 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842720265731404e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 284 (9756 interne); stringhe deallocate: 274 (9546 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772543079e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 285 (9776 interne); stringhe deallocate: 275 (9566 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.05860e-001: 1.05662e-001
Calcolo la funzione ext_fun2 in 1.05860e-001: -8.94140e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946027610608385e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.816938521035379


ris (2 : 2): [ -1 0.816938521035379 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 285 (9801 interne); stringhe deallocate: 275 (9591 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.05860e-001: 1.05662e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946061207072302e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 286 (9826 interne); stringhe deallocate: 276 (9616 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8169384091358261 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 287 (9846 interne); stringhe deallocate: 277 (9636 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 287 (9846 interne); stringhe deallocate: 277 (9646 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2115223935697321 0.2887238725343531 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.6304873993052057 0.9453448366338061 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361865429e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 288 (9896 interne); stringhe deallocate: 278 (9686 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277254315e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866896 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 289 (9916 interne); stringhe deallocate: 279 (9706 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.11720e-001: 1.11488e-001
Calcolo la funzione ext_fun2 in 1.11720e-001: -8.88280e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618409933422e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866896 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8166532547123619


ris (2 : 2): [ -1 0.8166532547123619 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 289 (9941 interne); stringhe deallocate: 279 (9731 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.11720e-001: 1.11488e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946066740607536e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866896 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 290 (9966 interne); stringhe deallocate: 280 (9756 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8166532605152286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79866896 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 291 (9986 interne); stringhe deallocate: 281 (9776 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 291 (9986 interne); stringhe deallocate: 281 (9786 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.223207742098689 0.294834487386327 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.663838300024663 0.950913296969531 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772542905e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 292 (10036 interne); stringhe deallocate: 282 (9826 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772543466e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 293 (10056 interne); stringhe deallocate: 283 (9846 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.11720e-001: 1.11488e-001
Calcolo la funzione ext_fun2 in 1.11720e-001: -8.88280e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772541039e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8166532547123619


ris (2 : 2): [ -1 0.8166532547123619 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 293 (10081 interne); stringhe deallocate: 283 (9871 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.11720e-001: 1.11488e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946070297880186e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 294 (10106 interne); stringhe deallocate: 284 (9896 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8166532605152641 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 295 (10126 interne); stringhe deallocate: 285 (9916 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 295 (10126 interne); stringhe deallocate: 285 (9926 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.223207742098689 0.294834487386327 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.663838300024663 0.950913296969531 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946084526970786e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 296 (10176 interne); stringhe deallocate: 286 (9966 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772542494e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 297 (10196 interne); stringhe deallocate: 287 (9986 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.26370e-001: 1.26034e-001
Calcolo la funzione ext_fun2 in 1.26370e-001: -8.73630e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840041571e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8159425507584678


ris (2 : 2): [ -1 0.8159425507584678 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 297 (10221 interne); stringhe deallocate: 287 (10011 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.26370e-001: 1.26034e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946086107980853e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 298 (10246 interne); stringhe deallocate: 288 (10036 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.815942296312274 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 299 (10266 interne); stringhe deallocate: 289 (10056 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 299 (10266 interne); stringhe deallocate: 289 (10066 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2524039267631318 0.310091376004664 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.7484318385423242 0.9626989148504986 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946035910911235e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 300 (10316 interne); stringhe deallocate: 290 (10106 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772543252e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869088 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 301 (10336 interne); stringhe deallocate: 291 (10126 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.33695e-001: 1.33297e-001
Calcolo la funzione ext_fun2 in 1.33695e-001: -8.66305e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277254311e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869088 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8156009200088943


ris (2 : 2): [ -1 0.8156009200088943 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 301 (10361 interne); stringhe deallocate: 291 (10151 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.33695e-001: 1.33297e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946037491921302e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869088 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 302 (10386 interne); stringhe deallocate: 292 (10176 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8156008809070858 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869088 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 303 (10406 interne); stringhe deallocate: 293 (10196 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 303 (10406 interne); stringhe deallocate: 293 (10206 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2669920705318485 0.317696150522954 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.7883942792705199 0.9675630407484661 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946073855152836e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 304 (10456 interne); stringhe deallocate: 294 (10246 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840042676e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869168 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 305 (10476 interne); stringhe deallocate: 295 (10266 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.65812e-001: 1.65054e-001
Calcolo la funzione ext_fun2 in 1.65812e-001: -8.34188e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277254292e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869168 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8141091283603283


ris (2 : 2): [ -1 0.8141091283603283 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 305 (10501 interne); stringhe deallocate: 295 (10291 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.65812e-001: 1.65054e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946075436162902e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869168 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 306 (10526 interne); stringhe deallocate: 296 (10316 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8141088574391002 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869168 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 307 (10546 interne); stringhe deallocate: 297 (10336 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 307 (10546 interne); stringhe deallocate: 297 (10346 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3308658596221142 0.3509444235694779 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9171381852170711 0.9826780352939115 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946088084243436e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425272 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 308 (10596 interne); stringhe deallocate: 298 (10386 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840041287e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 309 (10616 interne); stringhe deallocate: 299 (10406 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.70320e-001: 1.69498e-001
Calcolo la funzione ext_fun2 in 1.70320e-001: -8.29680e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277254345e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8139023862313597


ris (2 : 2): [ -1 0.8139023862313597 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 309 (10641 interne); stringhe deallocate: 299 (10431 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.70320e-001: 1.69498e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946089665253503e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 310 (10666 interne); stringhe deallocate: 300 (10456 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8139023869495157 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 311 (10686 interne); stringhe deallocate: 301 (10476 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 311 (10686 interne); stringhe deallocate: 301 (10486 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.339817727524889 0.355595341293529 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9286034741897976 0.9841591620081942 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946051325759385e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 312 (10736 interne); stringhe deallocate: 302 (10526 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840041153e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 313 (10756 interne); stringhe deallocate: 303 (10546 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.41020e-001: 1.40553e-001
Calcolo la funzione ext_fun2 in 1.41020e-001: -8.58980e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772542478e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8152567893207283


ris (2 : 2): [ -1 0.8152567893207283 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 313 (10781 interne); stringhe deallocate: 303 (10571 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.41020e-001: 1.40553e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946052906769452e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 314 (10806 interne); stringhe deallocate: 304 (10596 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8152566044788046 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 315 (10826 interne); stringhe deallocate: 305 (10616 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 315 (10826 interne); stringhe deallocate: 305 (10626 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2815730621949144 0.3252962728741858 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.8250518665218332 0.9718357572031209 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946047768486735e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425272 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 316 (10876 interne); stringhe deallocate: 306 (10666 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840033612e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 317 (10896 interne); stringhe deallocate: 307 (10686 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.70320e-001: 1.69498e-001
Calcolo la funzione ext_fun2 in 1.70320e-001: -8.29680e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772543237e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8139058172094532


ris (2 : 2): [ -1 0.8139058172094532 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 317 (10921 interne); stringhe deallocate: 307 (10711 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.70320e-001: 1.69498e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946049349496802e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 318 (10946 interne); stringhe deallocate: 308 (10736 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8139057248091666 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 319 (10966 interne); stringhe deallocate: 309 (10756 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 319 (10966 interne); stringhe deallocate: 309 (10766 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.339817727524889 0.3555919103154355 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9286034741897976 0.9841581156151611 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945848165965815e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 320 (11016 interne); stringhe deallocate: 310 (10806 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772542154e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868688 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 321 (11036 interne); stringhe deallocate: 311 (10826 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.70320e-001: 1.69498e-001
Calcolo la funzione ext_fun2 in 1.70320e-001: -8.29680e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772543521e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868688 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8139058172094532


ris (2 : 2): [ -1 0.8139058172094532 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 321 (11061 interne); stringhe deallocate: 311 (10851 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.70320e-001: 1.69498e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945849746975882e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868688 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 322 (11086 interne); stringhe deallocate: 312 (10876 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8139057248095503 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868688 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 323 (11106 interne); stringhe deallocate: 313 (10896 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 323 (11106 interne); stringhe deallocate: 313 (10906 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.339817727524889 0.3555919103154355 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9286034741897976 0.9841581156151611 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946018915053018e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 324 (11156 interne); stringhe deallocate: 314 (10946 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772544059e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869456 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 325 (11176 interne); stringhe deallocate: 315 (10966 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.77740e-001: 1.76806e-001
Calcolo la funzione ext_fun2 in 1.77740e-001: -8.22260e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772542786e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869456 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8135697372036999


ris (2 : 2): [ -1 0.8135697372036999 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 325 (11201 interne); stringhe deallocate: 315 (10991 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.77740e-001: 1.76806e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946020496063085e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869456 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 326 (11226 interne); stringhe deallocate: 316 (11016 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8135695546132311 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869456 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 327 (11246 interne); stringhe deallocate: 317 (11036 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 327 (11246 interne); stringhe deallocate: 317 (11046 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3545456313673732 0.3632358941636731 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9444699708866926 0.9863314349084262 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946114170909536e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 328 (11296 interne); stringhe deallocate: 318 (11086 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.4577668400429e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869744 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 329 (11316 interne); stringhe deallocate: 319 (11106 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.81450e-001: 1.80456e-001
Calcolo la funzione ext_fun2 in 1.81450e-001: -8.18550e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772542715e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869744 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8134049835460681


ris (2 : 2): [ -1 0.8134049835460681 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 329 (11341 interne); stringhe deallocate: 319 (11131 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.81450e-001: 1.80456e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946115751919603e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869744 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 330 (11366 interne); stringhe deallocate: 320 (11156 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8134045689564475 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869744 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 331 (11386 interne); stringhe deallocate: 321 (11176 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 331 (11386 interne); stringhe deallocate: 321 (11186 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3619059580756663 0.367050974529598 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9511474205442815 0.9873053818241738 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946094013031186e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 332 (11436 interne); stringhe deallocate: 322 (11226 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772544818e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869000 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 333 (11456 interne); stringhe deallocate: 323 (11246 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.97717e-001: 1.96431e-001
Calcolo la funzione ext_fun2 in 1.97717e-001: -8.02283e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772538723e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869000 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8126844395062819


ris (2 : 2): [ -1 0.8126844395062819 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 333 (11481 interne); stringhe deallocate: 323 (11271 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.97717e-001: 1.96431e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946095594041253e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869000 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 334 (11506 interne); stringhe deallocate: 324 (11296 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8126840680105332 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869000 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 335 (11526 interne); stringhe deallocate: 325 (11316 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 335 (11526 interne); stringhe deallocate: 325 (11326 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.394148170653118 0.383746808069913 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9725411428578669 0.9908305792227992 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946152115151137e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 336 (11576 interne); stringhe deallocate: 326 (11366 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840039361e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868928 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 337 (11596 interne); stringhe deallocate: 327 (11386 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.00000e-001: 1.98669e-001
Calcolo la funzione ext_fun2 in 2.00000e-001: -8.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772542138e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868928 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.81258418694482


ris (2 : 2): [ -1 0.81258418694482 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 337 (11621 interne); stringhe deallocate: 327 (11411 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.00000e-001: 1.98669e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946153696161204e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868928 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 338 (11646 interne); stringhe deallocate: 328 (11436 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8125839322069695 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868928 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 339 (11666 interne); stringhe deallocate: 329 (11456 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 339 (11666 interne); stringhe deallocate: 329 (11466 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3986693307950612 0.3860851438502412 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9747105951578629 0.9912407492174042 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946000338184735e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 340 (11716 interne); stringhe deallocate: 330 (11506 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277254496e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864888 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 341 (11736 interne); stringhe deallocate: 331 (11526 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.85160e-001: 1.84104e-001
Calcolo la funzione ext_fun2 in 1.85160e-001: -8.14840e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772544043e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864888 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8132395667746925


ris (2 : 2): [ -1 0.8132395667746925 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 341 (11761 interne); stringhe deallocate: 331 (11551 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.85160e-001: 1.84104e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946001919194801e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864888 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 342 (11786 interne); stringhe deallocate: 332 (11576 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8132391064626976 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79864888 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 343 (11806 interne); stringhe deallocate: 333 (11596 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 343 (11806 interne); stringhe deallocate: 333 (11606 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3692638009729559 0.3708642341982632 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9570816819644534 0.9882114718791935 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946159229696437e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 344 (11856 interne); stringhe deallocate: 334 (11646 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772544509e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868344 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 345 (11876 interne); stringhe deallocate: 335 (11666 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.00000e-001: 1.98669e-001
Calcolo la funzione ext_fun2 in 2.00000e-001: -8.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277254364e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868344 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8125845982537782


ris (2 : 2): [ -1 0.8125845982537782 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 345 (11901 interne); stringhe deallocate: 335 (11691 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.00000e-001: 1.98669e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946160810706504e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868344 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 346 (11926 interne); stringhe deallocate: 336 (11716 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8125844090444341 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868344 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 347 (11946 interne); stringhe deallocate: 337 (11736 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 347 (11946 interne); stringhe deallocate: 337 (11746 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3986693307950612 0.3860847325412831 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9747105951578629 0.9912406786732949 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946136700302987e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 348 (11996 interne); stringhe deallocate: 338 (11786 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840044333e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870272 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 349 (12016 interne); stringhe deallocate: 339 (11806 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.00000e-001: 1.98669e-001
Calcolo la funzione ext_fun2 in 2.00000e-001: -8.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772544802e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870272 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8125845982537782


ris (2 : 2): [ -1 0.8125845982537782 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 349 (12041 interne); stringhe deallocate: 339 (11831 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.00000e-001: 1.98669e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946138281313053e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870272 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 350 (12066 interne); stringhe deallocate: 340 (11856 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8125844090444234 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870272 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 351 (12086 interne); stringhe deallocate: 341 (11876 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 351 (12086 interne); stringhe deallocate: 341 (11886 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3986693307950612 0.3860847325412831 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9747105951578629 0.9912406786732949 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946131957272787e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 352 (12136 interne); stringhe deallocate: 342 (11926 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772542067e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870728 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 353 (12156 interne); stringhe deallocate: 343 (11946 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.25000e-001: 2.23106e-001
Calcolo la funzione ext_fun2 in 2.25000e-001: -7.75000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772541766e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870728 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8114909459076267


ris (2 : 2): [ -1 0.8114909459076267 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 353 (12181 interne); stringhe deallocate: 343 (11971 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.25000e-001: 2.23106e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946133538282853e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870728 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 354 (12206 interne); stringhe deallocate: 344 (11996 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8114905446032417 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870728 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 355 (12226 interne); stringhe deallocate: 345 (12016 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 355 (12226 interne); stringhe deallocate: 345 (12026 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.4481063621317456 0.4116154162241188 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9898700194859289 0.9946984348992416 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772543656e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425240 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 356 (12276 interne); stringhe deallocate: 346 (12066 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419469821694481e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871040 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 357 (12296 interne); stringhe deallocate: 347 (12086 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.37500e-001: 2.35274e-001
Calcolo la funzione ext_fun2 in 2.37500e-001: -7.62500e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380392527e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8109801515299209


ris (2 : 2): [ -1 0.8109801515299209 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 357 (12321 interne); stringhe deallocate: 347 (12111 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.37500e-001: 2.35274e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.5359030478835e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 358 (12346 interne); stringhe deallocate: 348 (12136 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8109798520072173 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 359 (12366 interne); stringhe deallocate: 349 (12156 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 359 (12366 interne); stringhe deallocate: 349 (12166 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.4727735411992091 0.4242933896692882 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9936241149372806 0.9958737438762194 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842686313800124e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 360 (12416 interne); stringhe deallocate: 350 (12206 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772544177e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870360 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 361 (12436 interne); stringhe deallocate: 351 (12226 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.92308e-001: 2.88163e-001
Calcolo la funzione ext_fun2 in 2.92308e-001: -7.07692e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.94613749080802e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870360 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8087508031248241


ris (2 : 2): [ -1 0.8087508031248241 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 361 (12461 interne); stringhe deallocate: 351 (12251 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.92308e-001: 2.88163e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946199150200621e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870360 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 362 (12486 interne); stringhe deallocate: 352 (12276 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8087506382924437 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870360 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 363 (12506 interne); stringhe deallocate: 353 (12296 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 363 (12506 interne); stringhe deallocate: 353 (12306 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5804704860593093 0.4794119906267929 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9991703837856315 0.9986198965573585 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.838895528726085e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 364 (12556 interne); stringhe deallocate: 354 (12346 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772545071e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 365 (12576 interne); stringhe deallocate: 355 (12366 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.00000e-001: 2.95520e-001
Calcolo la funzione ext_fun2 in 3.00000e-001: -7.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.94613274777782e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8084408644423242


ris (2 : 2): [ -1 0.8084408644423242 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 365 (12601 interne); stringhe deallocate: 355 (12391 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.00000e-001: 2.95520e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946121680707353e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 366 (12626 interne); stringhe deallocate: 356 (12416 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.808440694139712 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 367 (12646 interne); stringhe deallocate: 357 (12436 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 367 (12646 interne); stringhe deallocate: 357 (12446 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5955202066613397 0.4870793422190154 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9993766838806651 0.9988154406744233 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361868781e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 368 (12696 interne); stringhe deallocate: 358 (12486 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772545774e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 369 (12716 interne); stringhe deallocate: 359 (12506 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.50000e-001: 2.47404e-001
Calcolo la funzione ext_fun2 in 2.50000e-001: -7.50000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618409932449e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8104637784593236


ris (2 : 2): [ -1 0.8104637784593236 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 369 (12741 interne); stringhe deallocate: 359 (12531 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.50000e-001: 2.47404e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946166344241737e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 370 (12766 interne); stringhe deallocate: 360 (12556 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8104634373648887 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 371 (12786 interne); stringhe deallocate: 361 (12576 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 371 (12786 interne); stringhe deallocate: 361 (12586 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.497403959254523 0.4369401807951994 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.995993406016246 0.9967884742439616 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602204104e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 372 (12836 interne); stringhe deallocate: 362 (12626 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772545695e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870360 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 373 (12856 interne); stringhe deallocate: 363 (12646 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.00000e-001: 2.95520e-001
Calcolo la funzione ext_fun2 in 3.00000e-001: -7.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772541782e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870360 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8084564961738815


ris (2 : 2): [ -1 0.8084564961738815 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 373 (12881 interne); stringhe deallocate: 363 (12671 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.00000e-001: 2.95520e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946201521715721e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870360 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 374 (12906 interne); stringhe deallocate: 364 (12696 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8084564297660029 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870360 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 375 (12926 interne); stringhe deallocate: 365 (12716 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 375 (12926 interne); stringhe deallocate: 365 (12726 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5955202066613397 0.4870637104874581 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9993766838806651 0.9988150715520312 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946195988180488e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 376 (12976 interne); stringhe deallocate: 366 (12766 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772545861e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872008 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 377 (12996 interne); stringhe deallocate: 367 (12786 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.00000e-001: 2.95520e-001
Calcolo la funzione ext_fun2 in 3.00000e-001: -7.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840043855e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872008 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8084564961738815


ris (2 : 2): [ -1 0.8084564961738815 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 377 (13021 interne); stringhe deallocate: 367 (12811 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.00000e-001: 2.95520e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946197569190554e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872008 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 378 (13046 interne); stringhe deallocate: 368 (12836 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8084564297660215 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872008 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 379 (13066 interne); stringhe deallocate: 369 (12856 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 379 (13066 interne); stringhe deallocate: 369 (12866 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5955202066613397 0.4870637104874581 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9993766838806651 0.9988150715520312 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840045334e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 380 (13116 interne); stringhe deallocate: 370 (12906 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419469818137208e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870528 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 381 (13136 interne); stringhe deallocate: 371 (12926 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.25000e-001: 3.19309e-001
Calcolo la funzione ext_fun2 in 3.25000e-001: -6.75000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602204879e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870528 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8074837377641968


ris (2 : 2): [ -1 0.8074837377641968 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 381 (13161 interne); stringhe deallocate: 371 (12951 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.25000e-001: 3.19309e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946205869493405e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870528 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 382 (13186 interne); stringhe deallocate: 372 (12976 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8074836819631939 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870528 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 383 (13206 interne); stringhe deallocate: 373 (12996 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 383 (13206 interne); stringhe deallocate: 373 (13006 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6443087858570011 0.5118250480928042 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.99975341443918 0.9992768461130381 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946162786969087e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 384 (13256 interne); stringhe deallocate: 374 (13046 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840045901e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870392 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 385 (13276 interne); stringhe deallocate: 375 (13066 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.37500e-001: 3.31129e-001
Calcolo la funzione ext_fun2 in 3.37500e-001: -6.62500e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772544343e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870392 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8070294073471485


ris (2 : 2): [ -1 0.8070294073471485 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 385 (13301 interne); stringhe deallocate: 375 (13091 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.37500e-001: 3.31129e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946164367979154e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870392 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 386 (13326 interne); stringhe deallocate: 376 (13116 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8070292561514503 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870392 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 387 (13346 interne); stringhe deallocate: 377 (13136 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 387 (13346 interne); stringhe deallocate: 377 (13146 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6686291657854629 0.5240997584383145 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9998447115640811 0.9994339625183384 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946173458787037e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 388 (13396 interne); stringhe deallocate: 378 (13186 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.45776684004402e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 389 (13416 interne); stringhe deallocate: 379 (13206 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.92308e-001: 3.82322e-001
Calcolo la funzione ext_fun2 in 3.92308e-001: -6.07692e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772545679e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8050464943887422


ris (2 : 2): [ -1 0.8050464943887422 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 389 (13441 interne); stringhe deallocate: 379 (13231 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.92308e-001: 3.82322e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946175039797104e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 390 (13466 interne); stringhe deallocate: 380 (13256 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8050460904103716 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 391 (13486 interne); stringhe deallocate: 381 (13276 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 391 (13486 interne); stringhe deallocate: 381 (13286 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7746294987235919 0.5772753120271573 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999793156373477 0.9998042702492586 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946123656969937e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 392 (13536 interne); stringhe deallocate: 382 (13326 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.45776684004723e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 393 (13556 interne); stringhe deallocate: 383 (13346 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.00000e-001: 3.89418e-001
Calcolo la funzione ext_fun2 in 4.00000e-001: -6.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772545845e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8047708167833776


ris (2 : 2): [ -1 0.8047708167833776 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 393 (13581 interne); stringhe deallocate: 383 (13371 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.00000e-001: 3.89418e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946125237980003e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 394 (13606 interne); stringhe deallocate: 384 (13396 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8047704785331211 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 395 (13626 interne); stringhe deallocate: 385 (13416 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 395 (13626 interne); stringhe deallocate: 385 (13426 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7894183423086505 0.584647525525273 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999843870207824 0.9998310752252489 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946208636261021e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 396 (13676 interne); stringhe deallocate: 386 (13466 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840048305e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871928 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 397 (13696 interne); stringhe deallocate: 387 (13486 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.50000e-001: 3.42898e-001
Calcolo la funzione ext_fun2 in 3.50000e-001: -6.50000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772545015e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871928 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8065701149141135


ris (2 : 2): [ -1 0.8065701149141135 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 397 (13721 interne); stringhe deallocate: 387 (13511 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.50000e-001: 3.42898e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946210217271088e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871928 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 398 (13746 interne); stringhe deallocate: 388 (13536 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8065700619682437 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871928 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 399 (13766 interne); stringhe deallocate: 389 (13556 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 399 (13766 interne); stringhe deallocate: 389 (13566 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6928978074554515 0.5363276925413379 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999021154852086 0.9995565641201234 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946237094442222e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 400 (13816 interne); stringhe deallocate: 390 (13606 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840045005e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872096 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 401 (13836 interne); stringhe deallocate: 391 (13626 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.00000e-001: 3.89418e-001
Calcolo la funzione ext_fun2 in 4.00000e-001: -6.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772545229e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872096 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8047847205603721


ris (2 : 2): [ -1 0.8047847205603721 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 401 (13861 interne); stringhe deallocate: 391 (13651 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.00000e-001: 3.89418e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946238675452288e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872096 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 402 (13886 interne); stringhe deallocate: 392 (13676 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8047843068105767 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872096 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 403 (13906 interne); stringhe deallocate: 393 (13696 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 403 (13906 interne); stringhe deallocate: 393 (13706 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7894183423086505 0.5846336217482784 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999843870207824 0.9998310282953549 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946149743636037e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 404 (13956 interne); stringhe deallocate: 394 (13746 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772611481e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872760 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 405 (13976 interne); stringhe deallocate: 395 (13766 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.00000e-001: 3.89418e-001
Calcolo la funzione ext_fun2 in 4.00000e-001: -6.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772544233e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872760 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8047847205603721


ris (2 : 2): [ -1 0.8047847205603721 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 405 (14001 interne); stringhe deallocate: 395 (13791 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.00000e-001: 3.89418e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946151324646104e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872760 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 406 (14026 interne); stringhe deallocate: 396 (13816 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.804784306818072 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872760 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 407 (14046 interne); stringhe deallocate: 397 (13836 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 407 (14046 interne); stringhe deallocate: 397 (13846 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7894183423086505 0.5846336217482784 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999843870207824 0.9998310282953549 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772545031e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425272 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 408 (14096 interne); stringhe deallocate: 398 (13886 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419469811615542e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871472 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 409 (14116 interne); stringhe deallocate: 399 (13906 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.25000e-001: 4.12321e-001
Calcolo la funzione ext_fun2 in 4.25000e-001: -5.75000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602205709e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871472 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8039194922938739


ris (2 : 2): [ -1 0.8039194922938739 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 409 (14141 interne); stringhe deallocate: 399 (13931 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.25000e-001: 4.12321e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949486860634307e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871472 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 410 (14166 interne); stringhe deallocate: 400 (13956 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.803919324205479 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871472 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 411 (14186 interne); stringhe deallocate: 401 (13976 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 411 (14186 interne); stringhe deallocate: 401 (13986 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8373207817434248 0.6084012894495509 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999937222364402 0.9998949064663492 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946097570303836e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 412 (14236 interne); stringhe deallocate: 402 (14026 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772611639e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870464 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 413 (14256 interne); stringhe deallocate: 403 (14046 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.37500e-001: 4.23676e-001
Calcolo la funzione ext_fun2 in 4.37500e-001: -5.62500e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772546501e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870464 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8035153842283497


ris (2 : 2): [ -1 0.8035153842283497 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 413 (14281 interne); stringhe deallocate: 403 (14071 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.37500e-001: 4.23676e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946099151313903e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870464 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 414 (14306 interne); stringhe deallocate: 404 (14096 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8035149663029531 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870464 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 415 (14326 interne); stringhe deallocate: 405 (14116 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 415 (14326 interne); stringhe deallocate: 405 (14126 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8611762572039381 0.6201608729755883 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999960120129928 0.9999169144530058 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949493184674574e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425272 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 416 (14376 interne); stringhe deallocate: 406 (14166 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772545434e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872184 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 417 (14396 interne); stringhe deallocate: 407 (14186 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.92308e-001: 4.72661e-001
Calcolo la funzione ext_fun2 in 4.92308e-001: -5.07692e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772544754e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872184 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8017516653804451


ris (2 : 2): [ -1 0.8017516653804451 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 417 (14421 interne); stringhe deallocate: 407 (14211 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.92308e-001: 4.72661e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949494765684641e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872184 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 418 (14446 interne); stringhe deallocate: 408 (14236 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8017516224844794 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872184 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 419 (14466 interne); stringhe deallocate: 409 (14256 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 419 (14466 interne); stringhe deallocate: 409 (14266 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9649684782769534 0.670909120588816 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999994461353452 0.9999698639576844 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946182944847437e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 420 (14516 interne); stringhe deallocate: 410 (14306 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772545173e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 421 (14536 interne); stringhe deallocate: 411 (14326 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.00000e-001: 4.79426e-001
Calcolo la funzione ext_fun2 in 5.00000e-001: -5.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772611465e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.801506461582434


ris (2 : 2): [ -1 0.801506461582434 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 421 (14561 interne); stringhe deallocate: 411 (14351 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.00000e-001: 4.79426e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946184525857504e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 422 (14586 interne); stringhe deallocate: 412 (14376 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8015060513479755 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 423 (14606 interne); stringhe deallocate: 413 (14396 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 423 (14606 interne); stringhe deallocate: 413 (14406 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.979425538604203 0.677919077021769 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999995792884641 0.9999738034520113 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946169901514387e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 424 (14656 interne); stringhe deallocate: 414 (14446 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840046125e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870992 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 425 (14676 interne); stringhe deallocate: 415 (14466 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.50000e-001: 4.34966e-001
Calcolo la funzione ext_fun2 in 4.50000e-001: -5.50000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772543711e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870992 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8031068626553731


ris (2 : 2): [ -1 0.8031068626553731 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 425 (14701 interne); stringhe deallocate: 415 (14491 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.50000e-001: 4.34966e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946171482524454e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870992 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 426 (14726 interne); stringhe deallocate: 416 (14516 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8031067936880847 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79870992 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 427 (14746 interne); stringhe deallocate: 417 (14536 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 427 (14746 interne); stringhe deallocate: 417 (14546 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8849655341112301 0.6318586714558572 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999974634189687 0.9999342332258112 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946179387574787e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 428 (14796 interne); stringhe deallocate: 418 (14586 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772546043e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 429 (14816 interne); stringhe deallocate: 419 (14606 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.00000e-001: 4.79426e-001
Calcolo la funzione ext_fun2 in 5.00000e-001: -5.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772611623e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8015188284155005


ris (2 : 2): [ -1 0.8015188284155005 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 429 (14841 interne); stringhe deallocate: 419 (14631 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.00000e-001: 4.79426e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946180968584854e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 430 (14866 interne); stringhe deallocate: 420 (14656 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8015184491141865 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 431 (14886 interne); stringhe deallocate: 421 (14676 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 431 (14886 interne); stringhe deallocate: 421 (14686 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.979425538604203 0.6779067101887025 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999995792884641 0.9999737969766636 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946213379291221e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 432 (14936 interne); stringhe deallocate: 422 (14726 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550737419e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869936 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 433 (14956 interne); stringhe deallocate: 423 (14746 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.00000e-001: 4.79426e-001
Calcolo la funzione ext_fun2 in 5.00000e-001: -5.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772545418e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869936 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8015188284155005


ris (2 : 2): [ -1 0.8015188284155005 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 433 (14981 interne); stringhe deallocate: 423 (14771 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.00000e-001: 4.79426e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946214960301288e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869936 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 434 (15006 interne); stringhe deallocate: 424 (14796 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8015184491215512 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79869936 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 435 (15026 interne); stringhe deallocate: 425 (14816 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 435 (15026 interne); stringhe deallocate: 425 (14826 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.979425538604203 0.6779067101887025 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999995792884641 0.9999737969766636 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949490813159474e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 436 (15076 interne); stringhe deallocate: 426 (14866 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772612279e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 437 (15096 interne); stringhe deallocate: 427 (14886 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.25000e-001: 5.01213e-001
Calcolo la funzione ext_fun2 in 5.25000e-001: -4.75000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772545158e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8007492437522438


ris (2 : 2): [ -1 0.8007492437522438 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 437 (15121 interne); stringhe deallocate: 427 (14911 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.25000e-001: 5.01213e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.94949239416954e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 438 (15146 interne); stringhe deallocate: 428 (14936 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8007488339482887 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 439 (15166 interne); stringhe deallocate: 429 (14956 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 439 (15166 interne); stringhe deallocate: 429 (14966 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.02621300467379795 0.7004637609215542 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3973354982039481 0.9999833057559421 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949525200128424e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 440 (15216 interne); stringhe deallocate: 430 (15006 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.98314755073715e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 441 (15236 interne); stringhe deallocate: 431 (15026 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.37500e-001: 5.11990e-001
Calcolo la funzione ext_fun2 in 5.37500e-001: -4.62500e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772545347e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8003898063857502


ris (2 : 2): [ -1 0.8003898063857502 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 441 (15261 interne); stringhe deallocate: 431 (15051 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.37500e-001: 5.11990e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949526781138491e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 442 (15286 interne); stringhe deallocate: 432 (15076 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8003897755680685 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 443 (15306 interne); stringhe deallocate: 433 (15096 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 443 (15306 interne); stringhe deallocate: 433 (15106 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.04949011550918225 0.711600309123432 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4036972428474791 0.9999866369572343 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949483698614174e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 444 (15356 interne); stringhe deallocate: 434 (15146 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772611766e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 445 (15376 interne); stringhe deallocate: 435 (15166 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.92308e-001: 5.58277e-001
Calcolo la funzione ext_fun2 in 5.92308e-001: -4.07692e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772546027e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7988210516094668


ris (2 : 2): [ -1 0.7988210516094668 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 445 (15401 interne); stringhe deallocate: 435 (15191 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.92308e-001: 5.58277e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.94948527962424e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 446 (15426 interne); stringhe deallocate: 436 (15216 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7988209813176157 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 447 (15446 interne); stringhe deallocate: 437 (15236 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 447 (15446 interne); stringhe deallocate: 437 (15246 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1505847874977936 0.7594560435806343 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4913569532105873 0.9999948651477788 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772545173e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 448 (15496 interne); stringhe deallocate: 438 (15286 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470151532706e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871592 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 449 (15516 interne); stringhe deallocate: 439 (15306 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.00000e-001: 5.64642e-001
Calcolo la funzione ext_fun2 in 6.00000e-001: -4.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602271353e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871592 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.798602952999391


ris (2 : 2): [ -1 0.798602952999391 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 449 (15541 interne); stringhe deallocate: 439 (15331 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.00000e-001: 5.64642e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949501089724907e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871592 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 450 (15566 interne); stringhe deallocate: 440 (15356 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7986025898991525 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79871592 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 451 (15586 interne); stringhe deallocate: 441 (15376 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 451 (15586 interne); stringhe deallocate: 441 (15386 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1646424733950356 0.7660395203956445 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.5168562207946529 0.9999954982197208 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949496741947224e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 452 (15636 interne); stringhe deallocate: 442 (15426 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550609674e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 453 (15656 interne); stringhe deallocate: 443 (15446 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.50000e-001: 5.22687e-001
Calcolo la funzione ext_fun2 in 5.50000e-001: -4.50000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772612264e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8000264433873997


ris (2 : 2): [ -1 0.8000264433873997 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 453 (15681 interne); stringhe deallocate: 443 (15471 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.50000e-001: 5.22687e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949498322957291e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 454 (15706 interne); stringhe deallocate: 444 (15496 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8000264256459353 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 455 (15726 interne); stringhe deallocate: 445 (15516 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 455 (15726 interne); stringhe deallocate: 445 (15526 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.07268722893065926 0.7226607855432595 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4132988331750743 0.9999892871858072 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946109427879336e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 456 (15776 interne); stringhe deallocate: 446 (15566 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772543845e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938616 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 457 (15796 interne); stringhe deallocate: 447 (15586 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.00000e-001: 5.64642e-001
Calcolo la funzione ext_fun2 in 6.00000e-001: -4.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772611434e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938616 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7986139527845685


ris (2 : 2): [ -1 0.7986139527845685 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 457 (15821 interne); stringhe deallocate: 447 (15611 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.00000e-001: 5.64642e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946111008889403e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938616 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 458 (15846 interne); stringhe deallocate: 448 (15636 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7986135571461661 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938616 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 459 (15866 interne); stringhe deallocate: 449 (15656 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 459 (15866 interne); stringhe deallocate: 449 (15666 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1646424733950356 0.766028520610467 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.5168562207946529 0.9999954972299265 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946103499091586e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 460 (15916 interne); stringhe deallocate: 450 (15706 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277261273e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938832 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 461 (15936 interne); stringhe deallocate: 451 (15726 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.00000e-001: 5.64642e-001
Calcolo la funzione ext_fun2 in 6.00000e-001: -4.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277261175e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938832 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7986139527845685


ris (2 : 2): [ -1 0.7986139527845685 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 461 (15961 interne); stringhe deallocate: 451 (15751 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.00000e-001: 5.64642e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946105080101653e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938832 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 462 (15986 interne); stringhe deallocate: 452 (15776 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7986135571539057 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938832 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 463 (16006 interne); stringhe deallocate: 453 (15796 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 463 (16006 interne); stringhe deallocate: 453 (15806 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1646424733950356 0.766028520610467 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.5168562207946529 0.9999954972299265 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618409934362e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 464 (16056 interne); stringhe deallocate: 454 (15846 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772613062e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940072 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 465 (16076 interne); stringhe deallocate: 455 (15866 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.25000e-001: 5.85097e-001
Calcolo la funzione ext_fun2 in 6.25000e-001: -3.75000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53524438039302e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938472 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7979294391401899


ris (2 : 2): [ -1 0.7979294391401899 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 465 (16101 interne); stringhe deallocate: 455 (15891 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.25000e-001: 5.85097e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047994487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938472 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 466 (16126 interne); stringhe deallocate: 456 (15916 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7979292958319197 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938472 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 467 (16146 interne); stringhe deallocate: 457 (15936 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 467 (16146 interne); stringhe deallocate: 457 (15946 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2100972729404623 0.7871678338002723 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.6265061026789864 0.9999970488382434 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425328 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 468 (16196 interne); stringhe deallocate: 458 (15986 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772546367e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79938456 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 469 (16216 interne); stringhe deallocate: 459 (16006 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.37500e-001: 5.95188e-001
Calcolo la funzione ext_fun2 in 6.37500e-001: -3.62500e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53524438050216e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7976097345080534


ris (2 : 2): [ -1 0.7976097345080534 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 469 (16241 interne); stringhe deallocate: 459 (16031 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.37500e-001: 5.95188e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997067e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 470 (16266 interne); stringhe deallocate: 460 (16056 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7976093380986713 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 471 (16286 interne); stringhe deallocate: 461 (16076 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 471 (16286 interne); stringhe deallocate: 461 (16086 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2326883378216895 0.7975786033136361 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.691451031875703 0.9999976032179361 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.840818878581404e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 472 (16336 interne); stringhe deallocate: 462 (16126 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772546328e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872536 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 473 (16356 interne); stringhe deallocate: 463 (16146 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.92308e-001: 6.38315e-001
Calcolo la funzione ext_fun2 in 6.92308e-001: -3.07692e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380503463e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940088 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7962143921885927


ris (2 : 2): [ -1 0.7962143921885927 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 473 (16381 interne); stringhe deallocate: 463 (16171 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.92308e-001: 6.38315e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047995727e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940088 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 474 (16406 interne); stringhe deallocate: 464 (16196 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7962141125663651 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940088 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 475 (16426 interne); stringhe deallocate: 465 (16216 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 475 (16426 interne); stringhe deallocate: 465 (16226 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3306229765253662 0.8421008920290811 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9168064577024681 0.9999990155845098 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302693621744e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 476 (16476 interne); stringhe deallocate: 466 (16266 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550740271e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939240 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 477 (16496 interne); stringhe deallocate: 467 (16286 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.00000e-001: 6.44218e-001
Calcolo la funzione ext_fun2 in 7.00000e-001: -3.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361935768e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939240 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7960204025191714


ris (2 : 2): [ -1 0.7960204025191714 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 477 (16521 interne); stringhe deallocate: 467 (16311 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.00000e-001: 6.44218e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946228398886855e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939240 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 478 (16546 interne); stringhe deallocate: 468 (16336 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7960200398504806 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939240 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 479 (16566 interne); stringhe deallocate: 469 (16356 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 479 (16566 interne); stringhe deallocate: 469 (16366 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3442176872376912 0.8481972847185197 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9337169394799345 0.9999991285105596 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772543948e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 480 (16616 interne); stringhe deallocate: 470 (16406 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470153508969e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 481 (16636 interne); stringhe deallocate: 471 (16426 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.50000e-001: 6.05186e-001
Calcolo la funzione ext_fun2 in 6.50000e-001: -3.50000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949503065987491e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7972865381891707


ris (2 : 2): [ -1 0.7972865381891707 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 481 (16661 interne); stringhe deallocate: 471 (16451 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 6.50000e-001: 6.05186e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949567887400225e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 482 (16686 interne); stringhe deallocate: 472 (16476 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7972865193425562 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 483 (16706 interne); stringhe deallocate: 473 (16496 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 483 (16706 interne); stringhe deallocate: 473 (16506 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2551864057360398 0.8078998675468689 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.7562551620514491 0.9999980499718923 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361869366e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 484 (16756 interne); stringhe deallocate: 474 (16546 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772612896e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939952 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 485 (16776 interne); stringhe deallocate: 475 (16566 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.00000e-001: 6.44218e-001
Calcolo la funzione ext_fun2 in 7.00000e-001: -3.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949547729521875e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939952 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7960301863719412


ris (2 : 2): [ -1 0.7960301863719412 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 485 (16801 interne); stringhe deallocate: 475 (16591 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.00000e-001: 6.44218e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949518085583124e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939952 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 486 (16826 interne); stringhe deallocate: 476 (16616 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7960300534307798 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939952 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 487 (16846 interne); stringhe deallocate: 477 (16636 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 487 (16846 interne); stringhe deallocate: 477 (16646 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3442176872376912 0.8481875008657499 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9337169394799345 0.9999991283401293 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361936155e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 488 (16896 interne); stringhe deallocate: 478 (16686 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550738255e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 489 (16916 interne); stringhe deallocate: 479 (16706 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.00000e-001: 6.44218e-001
Calcolo la funzione ext_fun2 in 7.00000e-001: -3.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410002591e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7960301863719412


ris (2 : 2): [ -1 0.7960301863719412 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 489 (16941 interne); stringhe deallocate: 479 (16731 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.00000e-001: 6.44218e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949557610834792e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 490 (16966 interne); stringhe deallocate: 480 (16756 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.796030053430683 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79868504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 491 (16986 interne); stringhe deallocate: 481 (16776 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 491 (16986 interne); stringhe deallocate: 481 (16786 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3442176872376912 0.8481875008657499 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9337169394799345 0.9999991283401293 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946235513432155e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 492 (17036 interne); stringhe deallocate: 482 (16826 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277261288e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 493 (17056 interne); stringhe deallocate: 483 (16846 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.25000e-001: 6.63135e-001
Calcolo la funzione ext_fun2 in 7.25000e-001: -2.75000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772611995e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7954213398710798


ris (2 : 2): [ -1 0.7954213398710798 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 493 (17081 interne); stringhe deallocate: 483 (16871 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.25000e-001: 6.63135e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949514528310474e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 494 (17106 interne); stringhe deallocate: 484 (16896 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7954211323797527 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 495 (17126 interne); stringhe deallocate: 485 (16916 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 495 (17126 interne); stringhe deallocate: 485 (16926 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3881354426633499 0.86771410279227 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9693800759139645 0.9999994099928415 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949555239319692e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 496 (17176 interne); stringhe deallocate: 486 (16966 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772612769e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 497 (17196 interne); stringhe deallocate: 487 (16986 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.37500e-001: 6.72440e-001
Calcolo la funzione ext_fun2 in 7.37500e-001: -2.62500e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840172257e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7951369758584936


ris (2 : 2): [ -1 0.7951369758584936 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 497 (17221 interne); stringhe deallocate: 487 (17011 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.37500e-001: 6.72440e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949556820329758e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 498 (17246 interne); stringhe deallocate: 488 (17036 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7951369374334512 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 499 (17266 interne); stringhe deallocate: 489 (17056 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 499 (17266 interne); stringhe deallocate: 489 (17066 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.4099396350057895 0.8773026591472958 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9794266313074869 0.9999995128876591 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772611979e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 500 (17316 interne); stringhe deallocate: 490 (17106 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470159200605e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 501 (17336 interne); stringhe deallocate: 491 (17126 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.92308e-001: 7.11976e-001
Calcolo la funzione ext_fun2 in 7.92308e-001: -2.07692e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602272704e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7938958767282072


ris (2 : 2): [ -1 0.7938958767282072 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 501 (17361 interne); stringhe deallocate: 491 (17151 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.92308e-001: 7.11976e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949551286794525e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 502 (17386 interne); stringhe deallocate: 492 (17176 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7938957303107017 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 503 (17406 interne); stringhe deallocate: 493 (17196 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 503 (17406 interne); stringhe deallocate: 493 (17206 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5042833302320159 0.9180797611961163 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9964819882057553 0.9999997843815429 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949573420935458e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 504 (17456 interne); stringhe deallocate: 494 (17246 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550741406e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 505 (17476 interne); stringhe deallocate: 495 (17266 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 8.00000e-001: 7.17356e-001
Calcolo la funzione ext_fun2 in 8.00000e-001: -2.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277254647e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7937233309617343


ris (2 : 2): [ -1 0.7937233309617343 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 505 (17501 interne); stringhe deallocate: 495 (17291 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 8.00000e-001: 7.17356e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949575001945525e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 506 (17526 interne); stringhe deallocate: 496 (17316 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7937231152594837 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 507 (17546 interne); stringhe deallocate: 497 (17336 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 507 (17546 interne); stringhe deallocate: 497 (17346 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5173560908995228 0.9236327599377885 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9972529888863094 0.9999998070316116 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949596345581425e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 508 (17596 interne); stringhe deallocate: 498 (17386 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772613386e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939936 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 509 (17616 interne); stringhe deallocate: 499 (17406 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.50000e-001: 6.81639e-001
Calcolo la funzione ext_fun2 in 7.50000e-001: -2.50000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772612864e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939936 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.794849506135342


ris (2 : 2): [ -1 0.794849506135342 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 509 (17641 interne); stringhe deallocate: 499 (17431 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 7.50000e-001: 6.81639e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949597926591492e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939936 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 510 (17666 interne); stringhe deallocate: 500 (17456 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.794849404627124 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939936 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 511 (17686 interne); stringhe deallocate: 501 (17476 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 511 (17686 interne); stringhe deallocate: 501 (17486 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.4316387600233341 0.8867892538879921 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9862275898887764 0.9999995970176848 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949580535480759e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 512 (17736 interne); stringhe deallocate: 502 (17526 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772613481e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 513 (17756 interne); stringhe deallocate: 503 (17546 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 8.00000e-001: 7.17356e-001
Calcolo la funzione ext_fun2 in 8.00000e-001: -2.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772612754e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7937320332930505


ris (2 : 2): [ -1 0.7937320332930505 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 513 (17781 interne); stringhe deallocate: 503 (17571 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 8.00000e-001: 7.17356e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949582116490825e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 514 (17806 interne); stringhe deallocate: 504 (17596 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7937316983283065 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 515 (17826 interne); stringhe deallocate: 505 (17616 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 515 (17826 interne); stringhe deallocate: 505 (17626 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5173560908995228 0.9236240576064723 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9972529888863094 0.9999998069980463 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949585278510959e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 516 (17876 interne); stringhe deallocate: 506 (17666 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772613702e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 517 (17896 interne); stringhe deallocate: 507 (17686 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 8.00000e-001: 7.17356e-001
Calcolo la funzione ext_fun2 in 8.00000e-001: -2.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949574211440492e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7937320332930505


ris (2 : 2): [ -1 0.7937320332930505 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 517 (17921 interne); stringhe deallocate: 507 (17711 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 8.00000e-001: 7.17356e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949586859521025e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 518 (17946 interne); stringhe deallocate: 508 (17736 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7937316983283314 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 519 (17966 interne); stringhe deallocate: 509 (17756 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 519 (17966 interne); stringhe deallocate: 509 (17766 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5173560908995228 0.9236240576064723 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9972529888863094 0.9999998069980463 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84265236193644e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 520 (18016 interne); stringhe deallocate: 510 (17806 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277261352e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 521 (18036 interne); stringhe deallocate: 511 (17826 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 8.25000e-001: 7.34548e-001
Calcolo la funzione ext_fun2 in 8.25000e-001: -1.75000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949597136086459e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7931904895785381


ris (2 : 2): [ -1 0.7931904895785381 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 521 (18061 interne); stringhe deallocate: 511 (17851 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 8.25000e-001: 7.34548e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949597926591492e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 522 (18086 interne); stringhe deallocate: 512 (17876 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7931904881537504 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 523 (18106 interne); stringhe deallocate: 513 (17896 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 523 (18106 interne); stringhe deallocate: 513 (17906 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5595477822465786 0.9413572926680405 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9987657076168076 0.9999998645939545 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361936535e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 524 (18156 interne); stringhe deallocate: 514 (17946 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772614453e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941528 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 525 (18176 interne); stringhe deallocate: 515 (17966 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 8.37500e-001: 7.42972e-001
Calcolo la funzione ext_fun2 in 8.37500e-001: -1.62500e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949581325985792e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941528 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7929375595815165


ris (2 : 2): [ -1 0.7929375595815165 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 525 (18201 interne); stringhe deallocate: 515 (17991 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 8.37500e-001: 7.42972e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949588835783609e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941528 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 526 (18226 interne); stringhe deallocate: 516 (18016 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7929372876228493 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941528 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 527 (18246 interne); stringhe deallocate: 517 (18036 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 527 (18246 interne); stringhe deallocate: 517 (18046 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5804721376359021 0.9500345780543856 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9991704098107471 0.9999998861535175 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361936756e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 528 (18296 interne); stringhe deallocate: 518 (18086 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277261405e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939920 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 529 (18316 interne); stringhe deallocate: 519 (18106 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 8.92308e-001: 7.78522e-001
Calcolo la funzione ext_fun2 in 8.92308e-001: -1.07692e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410003864e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939920 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7918336533717535


ris (2 : 2): [ -1 0.7918336533717535 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 529 (18341 interne); stringhe deallocate: 519 (18131 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 8.92308e-001: 7.78522e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949635475580576e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939920 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 530 (18366 interne); stringhe deallocate: 520 (18156 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7918334096015638 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939920 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 531 (18386 interne); stringhe deallocate: 521 (18176 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 531 (18386 interne); stringhe deallocate: 521 (18186 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6708298587123813 0.9866885130329355 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.999851075797969 0.9999999452776027 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949603064874209e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 532 (18436 interne); stringhe deallocate: 522 (18226 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772614153e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 533 (18456 interne); stringhe deallocate: 523 (18246 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.00000e-001: 7.83327e-001
Calcolo la funzione ext_fun2 in 9.00000e-001: -1.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550741272e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7916801810677048


ris (2 : 2): [ -1 0.7916801810677048 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 533 (18481 interne); stringhe deallocate: 523 (18271 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.00000e-001: 7.83327e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949615317702226e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 534 (18506 interne); stringhe deallocate: 524 (18296 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7916798680366339 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 535 (18526 interne); stringhe deallocate: 525 (18316 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 535 (18526 interne); stringhe deallocate: 525 (18326 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6833269096274834 0.9916467285597787 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9998825755736334 0.9999999504403734 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949618874974876e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 536 (18576 interne); stringhe deallocate: 526 (18366 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550739122e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940288 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 537 (18596 interne); stringhe deallocate: 527 (18386 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 8.50000e-001: 7.51280e-001
Calcolo la funzione ext_fun2 in 8.50000e-001: -1.50000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550741122e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940288 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7926818671837362


ris (2 : 2): [ -1 0.7926818671837362 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 537 (18621 interne); stringhe deallocate: 527 (18411 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 8.50000e-001: 7.51280e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949620455984943e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940288 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 538 (18646 interne); stringhe deallocate: 528 (18436 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7926817029058322 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940288 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 539 (18666 interne); stringhe deallocate: 529 (18456 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 539 (18666 interne); stringhe deallocate: 529 (18466 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6012804051402928 0.9585985379565565 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9994413069829811 0.9999999040632869 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410004449e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 540 (18716 interne); stringhe deallocate: 530 (18506 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772614983e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942016 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 541 (18736 interne); stringhe deallocate: 531 (18526 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.00000e-001: 7.83327e-001
Calcolo la funzione ext_fun2 in 9.00000e-001: -1.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380505158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940840 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7916879214305373


ris (2 : 2): [ -1 0.7916879214305373 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 541 (18761 interne); stringhe deallocate: 531 (18551 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.00000e-001: 7.83327e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047998003e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940840 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 542 (18786 interne); stringhe deallocate: 532 (18576 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7916874974312567 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940840 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 543 (18806 interne); stringhe deallocate: 533 (18596 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 543 (18806 interne); stringhe deallocate: 533 (18606 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6833269096274834 0.9916389881969461 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9998825755736334 0.999999950432706 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 544 (18856 interne); stringhe deallocate: 534 (18646 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550742959e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 545 (18876 interne); stringhe deallocate: 535 (18666 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.00000e-001: 7.83327e-001
Calcolo la funzione ext_fun2 in 9.00000e-001: -1.00000e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361936875e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7916879214305373


ris (2 : 2): [ -1 0.7916879214305373 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 545 (18901 interne); stringhe deallocate: 535 (18691 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.00000e-001: 7.83327e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.94966116699416e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 546 (18926 interne); stringhe deallocate: 536 (18716 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7916874974312069 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 547 (18946 interne); stringhe deallocate: 537 (18736 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 547 (18946 interne); stringhe deallocate: 537 (18746 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6833269096274834 0.9916389881969461 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9998825755736334 0.999999950432706 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.456054892775413e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 548 (18996 interne); stringhe deallocate: 538 (18786 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.456054892781408e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 549 (19016 interne); stringhe deallocate: 539 (18806 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.25000e-001: 7.98621e-001
Calcolo la funzione ext_fun2 in 9.25000e-001: -7.50000e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842550506139225e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.791206240753531


ris (2 : 2): [ -1 0.791206240753531 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 549 (19041 interne); stringhe deallocate: 539 (18831 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.25000e-001: 7.98621e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949639032853226e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 550 (19066 interne); stringhe deallocate: 540 (18856 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7912058919014955 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 551 (19086 interne); stringhe deallocate: 541 (18876 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 551 (19086 interne); stringhe deallocate: 541 (18886 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7236207631988143 0.007414522445283289 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999454286771029 0.579116849850664 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949641799620843e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425256 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 552 (19136 interne); stringhe deallocate: 542 (18926 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772612627e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 553 (19156 interne); stringhe deallocate: 543 (18946 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.37500e-001: 8.06081e-001
Calcolo la funzione ext_fun2 in 9.37500e-001: -6.25000e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772612477e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7909812700098297


ris (2 : 2): [ -1 0.7909812700098297 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 553 (19181 interne); stringhe deallocate: 543 (18971 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.37500e-001: 8.06081e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.94967183881211e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 554 (19206 interne); stringhe deallocate: 544 (18996 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7909808247625367 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 555 (19226 interne); stringhe deallocate: 545 (19016 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 555 (19226 interne); stringhe deallocate: 545 (19026 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.743581108260693 0.01509983825086336 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999626665018793 0.5808093481295302 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949673815074693e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 556 (19276 interne); stringhe deallocate: 546 (19066 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772614011e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942104 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 557 (19296 interne); stringhe deallocate: 547 (19086 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.92308e-001: 8.37290e-001
Calcolo la funzione ext_fun2 in 9.92308e-001: -7.69231e-003

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772613244e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942104 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7899993912136758


ris (2 : 2): [ -1 0.7899993912136758 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 557 (19321 interne); stringhe deallocate: 547 (19111 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.92308e-001: 8.37290e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949544172249225e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942104 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 558 (19346 interne); stringhe deallocate: 548 (19136 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7899990170539519 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942104 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 559 (19366 interne); stringhe deallocate: 549 (19156 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 559 (19366 interne); stringhe deallocate: 549 (19166 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8295976510512445 0.04729056752987637 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999927289111339 0.5912327824351918 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949611760429576e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 560 (19416 interne); stringhe deallocate: 550 (19206 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772613876e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 561 (19436 interne); stringhe deallocate: 551 (19226 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.00000e+000: 8.41471e-001
Calcolo la funzione ext_fun2 in 1.00000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772615054e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7898628839635041


ris (2 : 2): [ -1 0.7898628839635041 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 561 (19461 interne); stringhe deallocate: 551 (19251 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.00000e+000: 8.41471e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949613341439642e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 562 (19486 interne); stringhe deallocate: 552 (19276 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7898626416266907 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 563 (19506 interne); stringhe deallocate: 553 (19296 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 563 (19506 interne); stringhe deallocate: 553 (19306 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8414709848078965 0.05160810084439238 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999941987248516 0.5931543204074328 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772614564e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 564 (19556 interne); stringhe deallocate: 554 (19346 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470166591827e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942032 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 565 (19576 interne); stringhe deallocate: 555 (19366 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.50000e-001: 8.13416e-001
Calcolo la funzione ext_fun2 in 9.50000e-001: -5.00000e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602274941e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942032 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7907538422252065


ris (2 : 2): [ -1 0.7907538422252065 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 565 (19601 interne); stringhe deallocate: 555 (19391 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 9.50000e-001: 8.13416e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949606622146859e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942032 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 566 (19626 interne); stringhe deallocate: 556 (19416 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7907538502754674 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942032 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 567 (19646 interne); stringhe deallocate: 557 (19436 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 567 (19646 interne); stringhe deallocate: 557 (19446 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7634155047893737 0.02266166256416724 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999743982669187 0.5827320204390112 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949647333156076e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 568 (19696 interne); stringhe deallocate: 558 (19486 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772614651e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 569 (19716 interne); stringhe deallocate: 559 (19506 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.00000e+000: 8.41471e-001
Calcolo la funzione ext_fun2 in 1.00000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772612611e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7898697686952617


ris (2 : 2): [ -1 0.7898697686952617 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 569 (19741 interne); stringhe deallocate: 559 (19531 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.00000e+000: 8.41471e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949648914166143e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 570 (19766 interne); stringhe deallocate: 560 (19556 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7898693173469926 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 571 (19786 interne); stringhe deallocate: 561 (19576 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 571 (19786 interne); stringhe deallocate: 561 (19586 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8414709848078965 0.0516012161126348 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999941987248516 0.5931511374507344 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949643775883426e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 572 (19836 interne); stringhe deallocate: 562 (19626 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550744676e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 573 (19856 interne); stringhe deallocate: 563 (19646 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.00000e+000: 8.41471e-001
Calcolo la funzione ext_fun2 in 1.00000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772613995e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7898697686952617


ris (2 : 2): [ -1 0.7898697686952617 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 573 (19881 interne); stringhe deallocate: 563 (19671 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.00000e+000: 8.41471e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949645356893493e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 574 (19906 interne); stringhe deallocate: 564 (19696 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7898693173470806 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 575 (19926 interne); stringhe deallocate: 565 (19716 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 575 (19926 interne); stringhe deallocate: 565 (19726 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8414709848078965 0.0516012161126348 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999941987248516 0.5931511374507344 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949682905882577e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 576 (19976 interne); stringhe deallocate: 566 (19766 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772614793e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940968 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 577 (19996 interne); stringhe deallocate: 567 (19786 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.02500e+000: 8.54714e-001
Calcolo la funzione ext_fun2 in 1.02500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277261386e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940968 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7894413337076814


ris (2 : 2): [ -1 0.7894413337076814 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 577 (20021 interne); stringhe deallocate: 567 (19811 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.02500e+000: 8.54714e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949684486892644e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940968 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 578 (20046 interne); stringhe deallocate: 568 (19836 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7894411175789422 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940968 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 579 (20066 interne); stringhe deallocate: 569 (19856 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 579 (20066 interne); stringhe deallocate: 569 (19866 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8547141894740934 0.06527285576641195 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999954904642273 0.6002917051359293 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949650890428726e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 580 (20116 interne); stringhe deallocate: 570 (19906 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550744766e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 581 (20136 interne); stringhe deallocate: 571 (19926 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.03750e+000: 8.61136e-001
Calcolo la funzione ext_fun2 in 1.03750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772614706e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.789241231560378


ris (2 : 2): [ -1 0.789241231560378 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 581 (20161 interne); stringhe deallocate: 571 (19951 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.03750e+000: 8.61136e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949652471438793e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 582 (20186 interne); stringhe deallocate: 572 (19976 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7892408459725742 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 583 (20206 interne); stringhe deallocate: 573 (19996 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 583 (20206 interne); stringhe deallocate: 573 (20006 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8611359829067316 0.07189475134635359 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999960089569774 0.604400900870625 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949685277397677e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 584 (20256 interne); stringhe deallocate: 574 (20046 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.9831475507449e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940928 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 585 (20276 interne); stringhe deallocate: 575 (20066 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.09231e+000: 8.87692e-001
Calcolo la funzione ext_fun2 in 1.09231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772614635e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940928 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7883678910883248


ris (2 : 2): [ -1 0.7883678910883248 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 585 (20301 interne); stringhe deallocate: 575 (20091 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.09231e+000: 8.87692e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949686858407744e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940928 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 586 (20326 interne); stringhe deallocate: 576 (20116 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7883677571359122 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79940928 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 587 (20346 interne); stringhe deallocate: 577 (20136 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 587 (20346 interne); stringhe deallocate: 577 (20146 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8876918265859126 0.09932393549758778 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999975915984409 0.6269877733859193 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949688834670327e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 588 (20396 interne); stringhe deallocate: 578 (20186 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550744094e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941784 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 589 (20416 interne); stringhe deallocate: 579 (20206 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.10000e+000: 8.91207e-001
Calcolo la funzione ext_fun2 in 1.10000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772615418e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941784 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7882464735500598


ris (2 : 2): [ -1 0.7882464735500598 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 589 (20441 interne); stringhe deallocate: 579 (20231 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.10000e+000: 8.91207e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949690415680394e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941784 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 590 (20466 interne); stringhe deallocate: 580 (20256 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7882461636605225 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941784 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 591 (20486 interne); stringhe deallocate: 581 (20276 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 591 (20486 interne); stringhe deallocate: 581 (20286 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8912073600614354 0.1029608865113756 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999977473706986 0.6307542739132248 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949667491034427e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 592 (20536 interne); stringhe deallocate: 582 (20326 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772616264e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941712 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 593 (20556 interne); stringhe deallocate: 583 (20346 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.05000e+000: 8.67423e-001
Calcolo la funzione ext_fun2 in 1.05000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772614777e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941712 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7890389439770644


ris (2 : 2): [ -1 0.7890389439770644 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 593 (20581 interne); stringhe deallocate: 583 (20371 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.05000e+000: 8.67423e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949669072044493e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941712 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 594 (20606 interne); stringhe deallocate: 584 (20396 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.789038667017584 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941712 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 595 (20626 interne); stringhe deallocate: 585 (20416 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 595 (20626 interne); stringhe deallocate: 585 (20426 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.867423225594017 0.07838428161695255 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999964587844685 0.6088928120644088 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949724407396828e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 596 (20676 interne); stringhe deallocate: 586 (20466 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550744542e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 597 (20696 interne); stringhe deallocate: 587 (20486 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.10000e+000: 8.91207e-001
Calcolo la funzione ext_fun2 in 1.10000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772615465e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7882525972334582


ris (2 : 2): [ -1 0.7882525972334582 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 597 (20721 interne); stringhe deallocate: 587 (20511 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.10000e+000: 8.91207e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949725988406894e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 598 (20746 interne); stringhe deallocate: 588 (20536 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7882523625436058 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 599 (20766 interne); stringhe deallocate: 589 (20556 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 599 (20766 interne); stringhe deallocate: 589 (20566 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8912073600614354 0.1029547628279772 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999977473706986 0.6307477654946112 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949679348609927e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425288 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 600 (20816 interne); stringhe deallocate: 590 (20606 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772614872e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79943344 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 601 (20836 interne); stringhe deallocate: 591 (20626 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.10000e+000: 8.91207e-001
Calcolo la funzione ext_fun2 in 1.10000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772615536e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79943344 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7882525972334582


ris (2 : 2): [ -1 0.7882525972334582 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 601 (20861 interne); stringhe deallocate: 591 (20651 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.10000e+000: 8.91207e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949680929619994e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79943344 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 602 (20886 interne); stringhe deallocate: 592 (20676 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7882523625435507 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79943344 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 603 (20906 interne); stringhe deallocate: 593 (20696 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 603 (20906 interne); stringhe deallocate: 593 (20706 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8912073600614354 0.1029547628279772 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999977473706986 0.6307477654946112 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772614793e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 604 (20956 interne); stringhe deallocate: 594 (20746 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470174931655e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 605 (20976 interne); stringhe deallocate: 595 (20766 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.12500e+000: 9.02268e-001
Calcolo la funzione ext_fun2 in 1.12500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842584458072852e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7878715220785989


ris (2 : 2): [ -1 0.7878715220785989 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 605 (21001 interne); stringhe deallocate: 595 (20791 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.12500e+000: 9.02268e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.94965642396396e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 606 (21026 interne); stringhe deallocate: 596 (20816 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7878713696543169 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 607 (21046 interne); stringhe deallocate: 597 (20836 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 607 (21046 interne); stringhe deallocate: 597 (20846 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9022675940990952 0.1143960720204963 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999981747202626 0.6439224975443815 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772615481e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 608 (21096 interne); stringhe deallocate: 598 (20886 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470175366433e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942624 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 609 (21116 interne); stringhe deallocate: 599 (20906 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.13750e+000: 9.07587e-001
Calcolo la funzione ext_fun2 in 1.13750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842788169669923e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942624 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7876935395165257


ris (2 : 2): [ -1 0.7876935395165257 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 609 (21141 interne); stringhe deallocate: 599 (20931 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.13750e+000: 9.07587e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949732312447161e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942624 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 610 (21166 interne); stringhe deallocate: 600 (20956 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7876935093943169 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942624 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 611 (21186 interne); stringhe deallocate: 601 (20976 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 611 (21186 interne); stringhe deallocate: 601 (20986 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9075866714652763 0.1198931319487506 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999983503473704 0.6509968629654889 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949735079214778e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 612 (21236 interne); stringhe deallocate: 602 (21026 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772616548e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942192 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 613 (21256 interne); stringhe deallocate: 603 (21046 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.19231e+000: 9.29224e-001
Calcolo la funzione ext_fun2 in 1.19231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772615347e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942192 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7869167393828296


ris (2 : 2): [ -1 0.7869167393828296 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 613 (21281 interne); stringhe deallocate: 603 (21071 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.19231e+000: 9.29224e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949736660224844e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942192 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 614 (21306 interne); stringhe deallocate: 604 (21096 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.786916741663612 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942192 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 615 (21326 interne); stringhe deallocate: 605 (21116 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 615 (21326 interne); stringhe deallocate: 605 (21126 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9292241711289317 0.1423074317461022 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999989068968312 0.6849908848590528 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949738636487428e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 616 (21376 interne); stringhe deallocate: 606 (21166 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772616192e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941976 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 617 (21396 interne); stringhe deallocate: 607 (21186 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.20000e+000: 9.32039e-001
Calcolo la funzione ext_fun2 in 1.20000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772614856e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941976 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7868087435175565


ris (2 : 2): [ -1 0.7868087435175565 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 617 (21421 interne); stringhe deallocate: 607 (21211 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.20000e+000: 9.32039e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949740217497494e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941976 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 618 (21446 interne); stringhe deallocate: 608 (21236 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.78680849962866 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941976 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 619 (21466 interne); stringhe deallocate: 609 (21256 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 619 (21466 interne); stringhe deallocate: 609 (21266 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9320390859672264 0.1452303424496699 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.999998963882004 0.6900211955156368 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949720850124177e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 620 (21516 interne); stringhe deallocate: 610 (21306 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772616074e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79943512 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 621 (21536 interne); stringhe deallocate: 611 (21326 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.15000e+000: 9.12764e-001
Calcolo la funzione ext_fun2 in 1.15000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772616374e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79943512 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7875136130997484


ris (2 : 2): [ -1 0.7875136130997484 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 621 (21561 interne); stringhe deallocate: 611 (21351 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.15000e+000: 9.12764e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949722431134244e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79943512 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 622 (21586 interne); stringhe deallocate: 612 (21376 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7875132649484709 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79943512 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 623 (21606 interne); stringhe deallocate: 613 (21396 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 623 (21606 interne); stringhe deallocate: 613 (21406 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9127639402605211 0.1252503271607727 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999985050490691 0.6583691676133986 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949714921336427e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 624 (21656 interne); stringhe deallocate: 614 (21446 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550739271e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941936 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 625 (21676 interne); stringhe deallocate: 615 (21466 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.20000e+000: 9.32039e-001
Calcolo la funzione ext_fun2 in 1.20000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772616461e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941936 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7868141902799988


ris (2 : 2): [ -1 0.7868141902799988 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 625 (21701 interne); stringhe deallocate: 615 (21491 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.20000e+000: 9.32039e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949716502346494e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941936 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 626 (21726 interne); stringhe deallocate: 616 (21516 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7868137448369934 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941936 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 627 (21746 interne); stringhe deallocate: 617 (21536 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 627 (21746 interne); stringhe deallocate: 617 (21546 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9320390859672264 0.1452248956872276 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.999998963882004 0.6900116995342951 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949539824471541e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425288 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 628 (21796 interne); stringhe deallocate: 618 (21586 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772615726e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79943152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 629 (21816 interne); stringhe deallocate: 619 (21606 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.20000e+000: 9.32039e-001
Calcolo la funzione ext_fun2 in 1.20000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772616532e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79943152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7868141902799988


ris (2 : 2): [ -1 0.7868141902799988 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 629 (21841 interne); stringhe deallocate: 619 (21631 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.20000e+000: 9.32039e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949541405481608e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79943152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 630 (21866 interne); stringhe deallocate: 620 (21656 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7868137448373478 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79943152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 631 (21886 interne); stringhe deallocate: 621 (21676 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 631 (21886 interne); stringhe deallocate: 621 (21686 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9320390859672264 0.1452248956872276 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.999998963882004 0.6900116995342951 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277261639e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 632 (21936 interne); stringhe deallocate: 622 (21726 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.41947016473414e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939608 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 633 (21956 interne); stringhe deallocate: 623 (21746 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.22500e+000: 9.40806e-001
Calcolo la funzione ext_fun2 in 1.22500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84258445807392e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939608 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7864752397323995


ris (2 : 2): [ -1 0.7864752397323995 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 633 (21981 interne); stringhe deallocate: 623 (21771 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.22500e+000: 9.40806e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.94969911123576e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939608 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 634 (22006 interne); stringhe deallocate: 624 (21796 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.786475190454869 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79939608 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 635 (22026 interne); stringhe deallocate: 625 (21816 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 635 (22026 interne); stringhe deallocate: 625 (21826 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9408058391738722 0.1543305994414727 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999991230122678 0.7064967375131842 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772616477e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 636 (22076 interne); stringhe deallocate: 626 (21866 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470165168918e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79943632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 637 (22096 interne); stringhe deallocate: 627 (21886 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.23750e+000: 9.44969e-001
Calcolo la funzione ext_fun2 in 1.23750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842686313871767e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79943632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7863169316241206


ris (2 : 2): [ -1 0.7863169316241206 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 637 (22121 interne); stringhe deallocate: 627 (21911 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.23750e+000: 9.44969e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949630337297859e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79943632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 638 (22146 interne); stringhe deallocate: 628 (21936 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7863168805183554 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79943632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 639 (22166 interne); stringhe deallocate: 629 (21956 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 639 (22166 interne); stringhe deallocate: 629 (21966 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9449690540108066 0.1586521223866859 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999991897775791 0.7147219293461631 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949633104065476e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 640 (22216 interne); stringhe deallocate: 630 (22006 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772615631e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941408 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 641 (22236 interne); stringhe deallocate: 631 (22026 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.29231e+000: 9.61472e-001
Calcolo la funzione ext_fun2 in 1.29231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772612556e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941408 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7856260001180015


ris (2 : 2): [ -1 0.7856260001180015 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 641 (22261 interne); stringhe deallocate: 631 (22051 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.29231e+000: 9.61472e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949634685075543e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941408 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 642 (22286 interne); stringhe deallocate: 632 (22076 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7856259434762531 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941408 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 643 (22306 interne); stringhe deallocate: 633 (22096 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 643 (22306 interne); stringhe deallocate: 633 (22106 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9614720149147036 0.175846014796702 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999994080495149 0.7495104784408724 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772616192e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 644 (22356 interne); stringhe deallocate: 634 (22146 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470164457464e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942840 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 645 (22376 interne); stringhe deallocate: 635 (22166 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.30000e+000: 9.63558e-001
Calcolo la funzione ext_fun2 in 1.30000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602275487e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942840 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7855299422742771


ris (2 : 2): [ -1 0.7855299422742771 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 645 (22401 interne); stringhe deallocate: 635 (22191 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.30000e+000: 9.63558e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.94969436820556e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942840 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 646 (22426 interne); stringhe deallocate: 636 (22216 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.785529622370146 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942840 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 647 (22446 interne); stringhe deallocate: 637 (22236 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 647 (22446 interne); stringhe deallocate: 637 (22246 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.963558185417193 0.1780282431429159 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999994310775777 0.7541070241508308 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949625989520176e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 648 (22496 interne); stringhe deallocate: 638 (22286 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550747364e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941448 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 649 (22516 interne); stringhe deallocate: 639 (22306 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.25000e+000: 9.48985e-001
Calcolo la funzione ext_fun2 in 1.25000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772614335e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941448 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7861568945376916


ris (2 : 2): [ -1 0.7861568945376916 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 649 (22541 interne); stringhe deallocate: 639 (22331 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.25000e+000: 9.48985e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949627570530243e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941448 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 650 (22566 interne); stringhe deallocate: 640 (22356 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7861566632334709 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941448 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 651 (22586 interne); stringhe deallocate: 641 (22376 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 651 (22586 interne); stringhe deallocate: 641 (22386 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9489846193555862 0.1628277248178947 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999992493549645 0.7228903016582418 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949754051335578e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 652 (22636 interne); stringhe deallocate: 642 (22426 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277261703e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 653 (22656 interne); stringhe deallocate: 643 (22446 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.30000e+000: 9.63558e-001
Calcolo la funzione ext_fun2 in 1.30000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772614422e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7855347869436


ris (2 : 2): [ -1 0.7855347869436 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 653 (22681 interne); stringhe deallocate: 643 (22471 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.30000e+000: 9.63558e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949755632345645e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 654 (22706 interne); stringhe deallocate: 644 (22496 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7855343907420354 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 655 (22726 interne); stringhe deallocate: 645 (22516 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 655 (22726 interne); stringhe deallocate: 645 (22526 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.963558185417193 0.1780233984735929 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999994310775777 0.7540967868480961 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772615726e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 656 (22776 interne); stringhe deallocate: 646 (22566 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470176789342e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942744 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 657 (22796 interne); stringhe deallocate: 647 (22586 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.30000e+000: 9.63558e-001
Calcolo la funzione ext_fun2 in 1.30000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602275392e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942744 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7855347869436


ris (2 : 2): [ -1 0.7855347869436 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 657 (22821 interne); stringhe deallocate: 647 (22611 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.30000e+000: 9.63558e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949764327901012e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942744 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 658 (22846 interne); stringhe deallocate: 648 (22636 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7855343907420052 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942744 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 659 (22866 interne); stringhe deallocate: 649 (22656 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 659 (22866 interne); stringhe deallocate: 649 (22666 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.963558185417193 0.1780233984735929 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999994310775777 0.7540967868480961 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949749308305378e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 660 (22916 interne); stringhe deallocate: 650 (22706 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550748126e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 661 (22936 interne); stringhe deallocate: 651 (22726 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.32500e+000: 9.69944e-001
Calcolo la funzione ext_fun2 in 1.32500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772614279e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7852333044873107


ris (2 : 2): [ -1 0.7852333044873107 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 661 (22961 interne); stringhe deallocate: 651 (22751 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.32500e+000: 9.69944e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949750889315445e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 662 (22986 interne); stringhe deallocate: 652 (22776 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7852330296580767 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 663 (23006 interne); stringhe deallocate: 653 (22796 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 663 (23006 interne); stringhe deallocate: 653 (22806 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9699438632926872 0.1847105588053766 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999994961449363 0.7683395178145025 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842720265805395e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 664 (23056 interne); stringhe deallocate: 654 (22846 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772617141e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 665 (23076 interne); stringhe deallocate: 655 (22866 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.33750e+000: 9.72910e-001
Calcolo la funzione ext_fun2 in 1.33750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84268631387255e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.78509249598981


ris (2 : 2): [ -1 0.78509249598981 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 665 (23101 interne); stringhe deallocate: 655 (22891 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.33750e+000: 9.72910e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949775790223995e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 666 (23126 interne); stringhe deallocate: 656 (22916 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7850923626963935 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79941496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 667 (23146 interne); stringhe deallocate: 657 (22936 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 667 (23146 interne); stringhe deallocate: 657 (22946 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9729096181339002 0.1878171221440902 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999995237799348 0.7750118595945499 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949768280426178e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 668 (23196 interne); stringhe deallocate: 658 (22986 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772616999e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79943848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 669 (23216 interne); stringhe deallocate: 659 (23006 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.39231e+000: 9.84113e-001
Calcolo la funzione ext_fun2 in 1.39231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949763537395978e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79943848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7844779410670701


ris (2 : 2): [ -1 0.7844779410670701 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 669 (23241 interne); stringhe deallocate: 659 (23031 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.39231e+000: 9.84113e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949769861436245e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79943848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 670 (23266 interne); stringhe deallocate: 660 (23056 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7844777195994537 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79943848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 671 (23286 interne); stringhe deallocate: 661 (23076 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 671 (23286 interne); stringhe deallocate: 661 (23086 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9841131481478406 0.1996352070807704 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999996151748105 0.8004485236698329 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772616967e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 672 (23336 interne); stringhe deallocate: 662 (23126 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772617173e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 673 (23356 interne); stringhe deallocate: 663 (23146 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.40000e+000: 9.85450e-001
Calcolo la funzione ext_fun2 in 1.40000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772616746e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7843925015984603


ris (2 : 2): [ -1 0.7843925015984603 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 673 (23381 interne); stringhe deallocate: 663 (23171 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.40000e+000: 9.85450e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949762746890945e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 674 (23406 interne); stringhe deallocate: 664 (23196 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7843923657481549 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 675 (23426 interne); stringhe deallocate: 665 (23216 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 675 (23426 interne); stringhe deallocate: 665 (23226 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9854497299884603 0.20105722839 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999996248344411 0.8034929464623755 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772616856e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 676 (23476 interne); stringhe deallocate: 666 (23266 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470180109463e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944184 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 677 (23496 interne); stringhe deallocate: 667 (23286 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.35000e+000: 9.75723e-001
Calcolo la funzione ext_fun2 in 1.35000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84248260227702e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944184 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7849501496379431


ris (2 : 2): [ -1 0.7849501496379431 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 677 (23521 interne); stringhe deallocate: 667 (23311 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.35000e+000: 9.75723e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949771442446312e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944184 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 678 (23546 interne); stringhe deallocate: 668 (23336 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7849497883861227 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944184 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 679 (23566 interne); stringhe deallocate: 669 (23356 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 679 (23566 interne); stringhe deallocate: 669 (23366 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9757233578266591 0.190773208188716 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999995485959636 0.7813778007242395 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949782509516778e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 680 (23616 interne); stringhe deallocate: 670 (23406 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550748574e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942704 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 681 (23636 interne); stringhe deallocate: 671 (23426 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.40000e+000: 9.85450e-001
Calcolo la funzione ext_fun2 in 1.40000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772617125e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942704 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7843968107309214


ris (2 : 2): [ -1 0.7843968107309214 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 681 (23661 interne); stringhe deallocate: 671 (23451 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.40000e+000: 9.85450e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949784090526845e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942704 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 682 (23686 interne); stringhe deallocate: 672 (23476 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7843966572826151 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79942704 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 683 (23706 interne); stringhe deallocate: 673 (23496 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 683 (23706 interne); stringhe deallocate: 673 (23506 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9854497299884603 0.2010529192575389 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999996248344411 0.8034837319896073 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949786066789429e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 684 (23756 interne); stringhe deallocate: 674 (23546 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550749514e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 685 (23776 interne); stringhe deallocate: 675 (23566 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.40000e+000: 9.85450e-001
Calcolo la funzione ext_fun2 in 1.40000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772616983e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7843968107309214


ris (2 : 2): [ -1 0.7843968107309214 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 685 (23801 interne); stringhe deallocate: 675 (23591 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.40000e+000: 9.85450e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949787647799495e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 686 (23826 interne); stringhe deallocate: 676 (23616 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7843966572826711 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 687 (23846 interne); stringhe deallocate: 677 (23636 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 687 (23846 interne); stringhe deallocate: 677 (23646 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9854497299884603 0.2010529192575389 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999996248344411 0.8034837319896073 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949810967697979e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 688 (23896 interne); stringhe deallocate: 678 (23686 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772615979e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944304 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 689 (23916 interne); stringhe deallocate: 679 (23706 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.42500e+000: 9.89391e-001
Calcolo la funzione ext_fun2 in 1.42500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772617157e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944304 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7841286545881033


ris (2 : 2): [ -1 0.7841286545881033 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 689 (23941 interne); stringhe deallocate: 679 (23731 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.42500e+000: 9.89391e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949812548708046e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944304 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 690 (23966 interne); stringhe deallocate: 680 (23756 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7841281979623762 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944304 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 691 (23986 interne); stringhe deallocate: 681 (23776 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 691 (23986 interne); stringhe deallocate: 681 (23786 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9893905289502953 0.205261874362192 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999996519265564 0.812445238155118 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949710178306227e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 692 (24036 interne); stringhe deallocate: 682 (23826 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772618469e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944088 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 693 (24056 interne); stringhe deallocate: 683 (23846 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.43750e+000: 9.91129e-001
Calcolo la funzione ext_fun2 in 1.43750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277261741e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944088 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.784003411268706


ris (2 : 2): [ -1 0.784003411268706 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 693 (24081 interne); stringhe deallocate: 683 (23871 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.43750e+000: 9.91129e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949711759316294e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944088 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 694 (24106 interne); stringhe deallocate: 684 (23896 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7840032666272068 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944088 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 695 (24126 interne); stringhe deallocate: 685 (23916 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 695 (24126 interne); stringhe deallocate: 685 (23926 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9911291909537616 0.2071257796850556 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999996632488652 0.8163843196916845 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949834682848979e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 696 (24176 interne); stringhe deallocate: 686 (23966 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550749828e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 697 (24196 interne); stringhe deallocate: 687 (23986 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.49231e+000: 9.96921e-001
Calcolo la funzione ext_fun2 in 1.49231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772617481e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7834567901496529


ris (2 : 2): [ -1 0.7834567901496529 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 697 (24221 interne); stringhe deallocate: 687 (24011 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.49231e+000: 9.96921e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949836263859046e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 698 (24246 interne); stringhe deallocate: 688 (24036 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7834563344067131 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 699 (24266 interne); stringhe deallocate: 689 (24056 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 699 (24266 interne); stringhe deallocate: 689 (24066 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9969213481092408 0.213464557959588 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999996983771291 0.8296026380709418 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410006377e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425240 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 700 (24316 interne); stringhe deallocate: 690 (24106 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772618216e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945288 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 701 (24336 interne); stringhe deallocate: 691 (24126 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.50000e+000: 9.97495e-001
Calcolo la funzione ext_fun2 in 1.50000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380508244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944520 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7833807952853783


ris (2 : 2): [ -1 0.7833807952853783 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 701 (24361 interne); stringhe deallocate: 691 (24151 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.50000e+000: 9.97495e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903048004049e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944520 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 702 (24386 interne); stringhe deallocate: 692 (24176 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7833805172985633 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944520 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 703 (24406 interne); stringhe deallocate: 693 (24196 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 703 (24406 interne); stringhe deallocate: 693 (24206 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9974949866040545 0.2141141913186762 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.999999701650126 0.8309392770715717 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425304 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 704 (24456 interne); stringhe deallocate: 694 (24246 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772546177e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 705 (24476 interne); stringhe deallocate: 695 (24266 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.45000e+000: 9.92713e-001
Calcolo la funzione ext_fun2 in 1.45000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361939017e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7838768000916223


ris (2 : 2): [ -1 0.7838768000916223 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 705 (24501 interne); stringhe deallocate: 695 (24291 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.45000e+000: 9.92713e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949822825273479e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 706 (24526 interne); stringhe deallocate: 696 (24316 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7838764279350023 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 707 (24546 interne); stringhe deallocate: 697 (24336 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 707 (24546 interne); stringhe deallocate: 697 (24346 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9927129910375885 0.2088361909459662 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999996732418359 0.8199799330366532 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.456054892779713e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425328 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 708 (24596 interne); stringhe deallocate: 698 (24386 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.41947018113712e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945304 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 709 (24616 interne); stringhe deallocate: 699 (24406 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.50000e+000: 9.97495e-001
Calcolo la funzione ext_fun2 in 1.50000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380505272e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7833846280800089


ris (2 : 2): [ -1 0.7833846280800089 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 709 (24641 interne); stringhe deallocate: 699 (24431 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.50000e+000: 9.97495e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047890077e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 710 (24666 interne); stringhe deallocate: 700 (24456 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7833843319877429 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 711 (24686 interne); stringhe deallocate: 701 (24476 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 711 (24686 interne); stringhe deallocate: 701 (24486 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9974949866040545 0.2141103585240456 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.999999701650126 0.8309314018794964 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 712 (24736 interne); stringhe deallocate: 702 (24526 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772618809e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872456 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 713 (24756 interne); stringhe deallocate: 703 (24546 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.50000e+000: 9.97495e-001
Calcolo la funzione ext_fun2 in 1.50000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842550506143233e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872456 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7833846280800089


ris (2 : 2): [ -1 0.7833846280800089 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 713 (24781 interne); stringhe deallocate: 703 (24571 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.50000e+000: 9.97495e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.946224446361688e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872456 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 714 (24806 interne); stringhe deallocate: 704 (24596 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7833843319958973 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872456 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 715 (24826 interne); stringhe deallocate: 705 (24616 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 715 (24826 interne); stringhe deallocate: 705 (24626 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9974949866040545 0.2141103585240456 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.999999701650126 0.8309314018794964 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361941974e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 716 (24876 interne); stringhe deallocate: 706 (24666 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772618951e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 717 (24896 interne); stringhe deallocate: 707 (24686 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.52500e+000: 9.98952e-001
Calcolo la funzione ext_fun2 in 1.52500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772617173e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7831461143110284


ris (2 : 2): [ -1 0.7831461143110284 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 717 (24921 interne); stringhe deallocate: 707 (24711 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.52500e+000: 9.98952e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949853259717263e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 718 (24946 interne); stringhe deallocate: 708 (24736 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7831459134168117 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 719 (24966 interne); stringhe deallocate: 709 (24756 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 719 (24966 interne); stringhe deallocate: 709 (24766 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9989515314916588 0.2158054171806304 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999997098020099 0.8344012097419834 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949855235979846e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 720 (25016 interne); stringhe deallocate: 710 (24806 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772618706e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945560 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 721 (25036 interne); stringhe deallocate: 711 (24826 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.53750e+000: 9.99446e-001
Calcolo la funzione ext_fun2 in 1.53750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772618066e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945560 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7830347155720879


ris (2 : 2): [ -1 0.7830347155720879 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 721 (25061 interne); stringhe deallocate: 711 (24851 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.53750e+000: 9.99446e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949860374262563e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945560 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 722 (25086 interne); stringhe deallocate: 712 (24876 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7830343335217647 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945560 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 723 (25106 interne); stringhe deallocate: 713 (24896 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 723 (25106 interne); stringhe deallocate: 713 (24906 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9994457285213652 0.2164110129492772 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999997125169805 0.8356343664413215 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.94984654042448e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 724 (25156 interne); stringhe deallocate: 714 (24946 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772618596e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 725 (25176 interne); stringhe deallocate: 715 (24966 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.59231e+000: 9.99769e-001
Calcolo la funzione ext_fun2 in 1.59231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772617979e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7825485187542954


ris (2 : 2): [ -1 0.7825485187542954 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 725 (25201 interne); stringhe deallocate: 715 (24991 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.59231e+000: 9.99769e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949848121434546e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 726 (25226 interne); stringhe deallocate: 716 (25016 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7825484364575432 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 727 (25246 interne); stringhe deallocate: 717 (25036 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 727 (25246 interne); stringhe deallocate: 717 (25046 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9997686394987182 0.2172201207444228 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999997142772216 0.837276381430162 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772618904e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 728 (25296 interne); stringhe deallocate: 718 (25086 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470186749705e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872416 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 729 (25316 interne); stringhe deallocate: 719 (25106 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.60000e+000: 9.99574e-001
Calcolo la funzione ext_fun2 in 1.60000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84248260227857e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872416 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7824809244739228


ris (2 : 2): [ -1 0.7824809244739228 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 729 (25341 interne); stringhe deallocate: 719 (25131 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.60000e+000: 9.99574e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949842587899313e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872416 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 730 (25366 interne); stringhe deallocate: 720 (25156 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7824807255810962 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872416 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 731 (25386 interne); stringhe deallocate: 721 (25176 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 731 (25386 interne); stringhe deallocate: 721 (25186 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9995736030415051 0.2170926785675823 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999997132153388 0.8370181757042949 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.94984891193958e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 732 (25436 interne); stringhe deallocate: 722 (25226 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550751933e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872472 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 733 (25456 interne); stringhe deallocate: 723 (25246 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.55000e+000: 9.99784e-001
Calcolo la funzione ext_fun2 in 1.55000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772618935e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872472 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7829221001804586


ris (2 : 2): [ -1 0.7829221001804586 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 733 (25481 interne); stringhe deallocate: 723 (25271 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.55000e+000: 9.99784e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949850492949646e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872472 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 734 (25506 interne); stringhe deallocate: 724 (25296 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7829217999524927 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79872472 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 735 (25526 interne); stringhe deallocate: 725 (25316 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 735 (25526 interne); stringhe deallocate: 725 (25326 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.999783764189357 0.2168616640088984 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999997143594041 0.8365497165861029 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.94987499860568e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 736 (25576 interne); stringhe deallocate: 726 (25366 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772618524e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945864 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 737 (25596 interne); stringhe deallocate: 727 (25386 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.60000e+000: 9.99574e-001
Calcolo la funzione ext_fun2 in 1.60000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277261869e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945864 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7824843335858061


ris (2 : 2): [ -1 0.7824843335858061 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 737 (25621 interne); stringhe deallocate: 727 (25411 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.60000e+000: 9.99574e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949876579615747e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945864 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 738 (25646 interne); stringhe deallocate: 728 (25436 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7824840634411778 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945864 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 739 (25666 interne); stringhe deallocate: 729 (25456 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 739 (25666 interne); stringhe deallocate: 729 (25466 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9995736030415051 0.2170892694556991 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999997132153388 0.8370112664221907 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772618809e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 740 (25716 interne); stringhe deallocate: 730 (25506 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470191729887e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945744 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 741 (25736 interne); stringhe deallocate: 731 (25526 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.60000e+000: 9.99574e-001
Calcolo la funzione ext_fun2 in 1.60000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602278356e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945744 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7824843335858061


ris (2 : 2): [ -1 0.7824843335858061 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 741 (25761 interne); stringhe deallocate: 731 (25551 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.60000e+000: 9.99574e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949839030626663e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945744 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 742 (25786 interne); stringhe deallocate: 732 (25576 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7824840634413155 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945744 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 743 (25806 interne); stringhe deallocate: 733 (25596 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 743 (25806 interne); stringhe deallocate: 733 (25606 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9995736030415051 0.2170892694556991 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999997132153388 0.8370112664221907 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.94989871375668e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 744 (25856 interne); stringhe deallocate: 734 (25646 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550748798e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945816 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 745 (25876 interne); stringhe deallocate: 735 (25666 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.62500e+000: 9.98531e-001
Calcolo la funzione ext_fun2 in 1.62500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772618738e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945816 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7822721854791268


ris (2 : 2): [ -1 0.7822721854791268 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 745 (25901 interne); stringhe deallocate: 735 (25691 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.62500e+000: 9.98531e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949900294766747e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945816 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 746 (25926 interne); stringhe deallocate: 736 (25716 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7822718709056753 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945816 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 747 (25946 interne); stringhe deallocate: 737 (25736 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 747 (25946 interne); stringhe deallocate: 737 (25746 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9985313405398316 0.2162591550607048 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999997074734479 0.8353254729303333 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949791995577179e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 748 (25996 interne); stringhe deallocate: 738 (25786 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772616603e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946872 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 749 (26016 interne); stringhe deallocate: 739 (25806 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.63750e+000: 9.97776e-001
Calcolo la funzione ext_fun2 in 1.63750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277261926e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946872 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7821731009203875


ris (2 : 2): [ -1 0.7821731009203875 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 749 (26041 interne); stringhe deallocate: 739 (25831 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.63750e+000: 9.97776e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949793576587245e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946872 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 750 (26066 interne); stringhe deallocate: 740 (25856 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7821726887766554 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946872 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 751 (26086 interne); stringhe deallocate: 741 (25876 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 751 (26086 interne); stringhe deallocate: 741 (25886 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9977761347424169 0.2156030338220294 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999997032412737 0.833988324956035 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 752 (26136 interne); stringhe deallocate: 742 (25926 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772619347e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946872 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 753 (26156 interne); stringhe deallocate: 743 (25946 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.69231e+000: 9.92627e-001
Calcolo la funzione ext_fun2 in 1.69231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842686313874218e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946872 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7817406490128559


ris (2 : 2): [ -1 0.7817406490128559 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 753 (26181 interne); stringhe deallocate: 743 (25971 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.69231e+000: 9.92627e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949742984265111e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946872 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 754 (26206 interne); stringhe deallocate: 744 (25996 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7817401974744733 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946872 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 755 (26226 interne); stringhe deallocate: 745 (26016 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 755 (26226 interne); stringhe deallocate: 745 (26026 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9926265731218982 0.2108859241090423 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999996727043127 0.8242620037592849 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772619315e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 756 (26276 interne); stringhe deallocate: 746 (26066 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277261956e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944712 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 757 (26296 interne); stringhe deallocate: 747 (26086 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.70000e+000: 9.91665e-001
Calcolo la funzione ext_fun2 in 1.70000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949899504261714e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944712 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7816805267035037


ris (2 : 2): [ -1 0.7816805267035037 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 757 (26321 interne); stringhe deallocate: 747 (26111 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.70000e+000: 9.91665e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949880136888397e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944712 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 758 (26346 interne); stringhe deallocate: 748 (26136 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7816801159925637 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944712 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 759 (26366 interne); stringhe deallocate: 749 (26156 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 759 (26366 interne); stringhe deallocate: 749 (26166 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9916648104524686 0.2099842837489648 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999996666620925 0.8223821951397887 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772619528e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 760 (26416 interne); stringhe deallocate: 750 (26206 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772620018e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946464 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 761 (26436 interne); stringhe deallocate: 751 (26226 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.65000e+000: 9.96865e-001
Calcolo la funzione ext_fun2 in 1.65000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772617599e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946464 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7820729341995344


ris (2 : 2): [ -1 0.7820729341995344 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 761 (26461 interne); stringhe deallocate: 751 (26251 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.65000e+000: 9.96865e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949890808706347e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946464 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 762 (26486 interne); stringhe deallocate: 752 (26276 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7820725529738164 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946464 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 763 (26506 interne); stringhe deallocate: 753 (26296 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 763 (26506 interne); stringhe deallocate: 753 (26306 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9968650284539189 0.2147920942543845 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999996980538578 0.8323300856192379 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772618524e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 764 (26556 interne); stringhe deallocate: 754 (26346 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470190306978e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946416 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 765 (26576 interne); stringhe deallocate: 755 (26366 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.70000e+000: 9.91665e-001
Calcolo la funzione ext_fun2 in 1.70000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602276364e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946416 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7816835589671529


ris (2 : 2): [ -1 0.7816835589671529 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 765 (26601 interne); stringhe deallocate: 755 (26391 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.70000e+000: 9.91665e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949913733352314e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946416 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 766 (26626 interne); stringhe deallocate: 756 (26416 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7816834538526605 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946416 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 767 (26646 interne); stringhe deallocate: 757 (26436 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 767 (26646 interne); stringhe deallocate: 757 (26446 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9916648104524686 0.2099812514853157 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999996666620925 0.8223758629863882 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.94988448466608e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 768 (26696 interne); stringhe deallocate: 758 (26486 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.98314755075274e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 769 (26716 interne); stringhe deallocate: 759 (26506 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.70000e+000: 9.91665e-001
Calcolo la funzione ext_fun2 in 1.70000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772619331e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7816835589671529


ris (2 : 2): [ -1 0.7816835589671529 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 769 (26741 interne); stringhe deallocate: 759 (26531 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.70000e+000: 9.91665e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949886065676147e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 770 (26766 interne); stringhe deallocate: 760 (26556 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7816834538526871 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 771 (26786 interne); stringhe deallocate: 761 (26576 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 771 (26786 interne); stringhe deallocate: 761 (26586 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9916648104524686 0.2099812514853157 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999996666620925 0.8223758629863882 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302693621744e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 772 (26836 interne); stringhe deallocate: 762 (26626 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84248260227936e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946720 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 773 (26856 interne); stringhe deallocate: 763 (26646 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.72500e+000: 9.88134e-001
Calcolo la funzione ext_fun2 in 1.72500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.840818957579204e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946720 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7814948620237439


ris (2 : 2): [ -1 0.7814948620237439 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 773 (26881 interne); stringhe deallocate: 763 (26671 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.72500e+000: 9.88134e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949897923251647e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946720 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 774 (26906 interne); stringhe deallocate: 764 (26696 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7814946263380254 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946720 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 775 (26926 interne); stringhe deallocate: 765 (26716 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 775 (26926 interne); stringhe deallocate: 765 (26726 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9881341545039076 0.2066392924801638 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999996435087415 0.8153581975861102 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410008962e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 776 (26976 interne); stringhe deallocate: 766 (26766 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470193627099e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946792 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 777 (26996 interne); stringhe deallocate: 767 (26786 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.73750e+000: 9.86137e-001
Calcolo la funzione ext_fun2 in 1.73750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842686313875712e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946792 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7814067304176419


ris (2 : 2): [ -1 0.7814067304176419 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 777 (27021 interne); stringhe deallocate: 767 (26811 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.73750e+000: 9.86137e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949891994463897e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946792 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 778 (27046 interne); stringhe deallocate: 768 (26836 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7814064114638191 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946792 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 779 (27066 interne); stringhe deallocate: 769 (26856 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 779 (27066 interne); stringhe deallocate: 769 (26866 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9861370916460618 0.2047303612284199 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.999999629707285 0.8113183367554977 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410010101e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 780 (27116 interne); stringhe deallocate: 770 (26906 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.8413027726202e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946792 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 781 (27136 interne); stringhe deallocate: 771 (26926 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.79231e+000: 9.75567e-001
Calcolo la funzione ext_fun2 in 1.79231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842686313875159e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946792 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7810220823790619


ris (2 : 2): [ -1 0.7810220823790619 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 781 (27161 interne); stringhe deallocate: 771 (26951 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.79231e+000: 9.75567e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949890018201314e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946792 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 782 (27186 interne); stringhe deallocate: 772 (26976 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7810220807143153 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946792 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 783 (27206 interne); stringhe deallocate: 773 (26996 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 783 (27206 interne); stringhe deallocate: 773 (27006 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9755665101451648 0.1945444277661029 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999995472473068 0.7895050830799163 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410010567e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 784 (27256 interne); stringhe deallocate: 774 (27046 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772620343e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947208 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 785 (27276 interne); stringhe deallocate: 775 (27066 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.80000e+000: 9.73848e-001
Calcolo la funzione ext_fun2 in 1.80000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949897132746614e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947208 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7809686060780804


ris (2 : 2): [ -1 0.7809686060780804 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 785 (27301 interne); stringhe deallocate: 775 (27091 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.80000e+000: 9.73848e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949922824160197e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947208 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 786 (27326 interne); stringhe deallocate: 776 (27116 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7809681981154544 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947208 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 787 (27346 interne); stringhe deallocate: 777 (27136 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 787 (27346 interne); stringhe deallocate: 777 (27146 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9738476308781952 0.1928790248001148 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999995322008257 0.7859164559342644 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949928357695431e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 788 (27396 interne); stringhe deallocate: 778 (27186 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772618991e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947328 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 789 (27416 interne); stringhe deallocate: 779 (27206 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.75000e+000: 9.83986e-001
Calcolo la funzione ext_fun2 in 1.75000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.456054892788504e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947328 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7813176362732154


ris (2 : 2): [ -1 0.7813176362732154 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 789 (27441 interne); stringhe deallocate: 779 (27231 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.75000e+000: 9.83986e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949929938705498e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947328 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 790 (27466 interne); stringhe deallocate: 780 (27256 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7813172429151072 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947328 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 791 (27486 interne); stringhe deallocate: 781 (27276 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 791 (27486 interne); stringhe deallocate: 781 (27286 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9839859468739369 0.2026683106007216 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999996142426505 0.8069327837538587 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772618184e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 792 (27536 interne); stringhe deallocate: 782 (27326 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772620398e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 793 (27556 interne); stringhe deallocate: 783 (27346 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.80000e+000: 9.73848e-001
Calcolo la funzione ext_fun2 in 1.80000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842550506145201e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7809713031508526


ris (2 : 2): [ -1 0.7809713031508526 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 793 (27581 interne); stringhe deallocate: 783 (27371 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.80000e+000: 9.73848e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949862350525146e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 794 (27606 interne); stringhe deallocate: 784 (27396 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7809710591384098 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 795 (27626 interne); stringhe deallocate: 785 (27416 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 795 (27626 interne); stringhe deallocate: 785 (27426 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9738476308781952 0.1928763277273425 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999995322008257 0.7859106429979105 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949865117292763e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 796 (27676 interne); stringhe deallocate: 786 (27466 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772620469e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947144 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 797 (27696 interne); stringhe deallocate: 787 (27486 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.80000e+000: 9.73848e-001
Calcolo la funzione ext_fun2 in 1.80000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772620184e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947144 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7809713031508526


ris (2 : 2): [ -1 0.7809713031508526 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 797 (27721 interne); stringhe deallocate: 787 (27511 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.80000e+000: 9.73848e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949932705473114e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947144 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 798 (27746 interne); stringhe deallocate: 788 (27536 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7809710591384178 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947144 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 799 (27766 interne); stringhe deallocate: 789 (27556 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 799 (27766 interne); stringhe deallocate: 789 (27566 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9738476308781952 0.1928763277273425 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999995322008257 0.7859106429979105 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949934681735698e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 800 (27816 interne); stringhe deallocate: 790 (27606 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772617694e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 801 (27836 interne); stringhe deallocate: 791 (27626 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.82500e+000: 9.67864e-001
Calcolo la funzione ext_fun2 in 1.82500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550753919e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7808034650446859


ris (2 : 2): [ -1 0.7808034650446859 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 801 (27861 interne); stringhe deallocate: 791 (27651 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.82500e+000: 9.67864e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949936262745764e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 802 (27886 interne); stringhe deallocate: 792 (27676 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7808032124584186 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 803 (27906 interne); stringhe deallocate: 793 (27696 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 803 (27906 interne); stringhe deallocate: 793 (27706 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9678638586299051 0.1870603935852192 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999994758120562 0.7733844058792483 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949938239008348e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 804 (27956 interne); stringhe deallocate: 794 (27746 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772620754e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946144 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 805 (27976 interne); stringhe deallocate: 795 (27766 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.83750e+000: 9.64645e-001
Calcolo la funzione ext_fun2 in 1.83750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772619109e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946144 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7807250756357512


ris (2 : 2): [ -1 0.7807250756357512 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 805 (28001 interne); stringhe deallocate: 795 (27791 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.83750e+000: 9.64645e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949797529112412e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946144 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 806 (28026 interne); stringhe deallocate: 796 (27816 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.780725011164817 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946144 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 807 (28046 interne); stringhe deallocate: 797 (27836 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 807 (28046 interne); stringhe deallocate: 797 (27846 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9646448927035626 0.1839198170678114 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999994427160244 0.7666455319873554 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949799505374995e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 808 (28096 interne); stringhe deallocate: 798 (27886 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772620935e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947472 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 809 (28116 interne); stringhe deallocate: 799 (27906 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.89231e+000: 9.48759e-001
Calcolo la funzione ext_fun2 in 1.89231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772620382e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947472 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7803829471562449


ris (2 : 2): [ -1 0.7803829471562449 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 809 (28141 interne); stringhe deallocate: 799 (27931 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.89231e+000: 9.48759e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949950491836364e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947472 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 810 (28166 interne); stringhe deallocate: 800 (27956 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7803826420852476 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947472 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 811 (28186 interne); stringhe deallocate: 801 (27976 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 811 (28186 interne); stringhe deallocate: 801 (27986 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9487589090784746 0.1683759619222297 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999992461255167 0.7340437934435856 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949958001634181e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 812 (28236 interne); stringhe deallocate: 802 (28026 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772621528e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946104 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 813 (28256 interne); stringhe deallocate: 803 (28046 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.90000e+000: 9.46300e-001
Calcolo la funzione ext_fun2 in 1.90000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772620453e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946104 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7803353822041085


ris (2 : 2): [ -1 0.7803353822041085 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 813 (28281 interne); stringhe deallocate: 803 (28071 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.90000e+000: 9.46300e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949959582644248e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946104 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 814 (28306 interne); stringhe deallocate: 804 (28096 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7803349583694939 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79946104 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 815 (28326 interne); stringhe deallocate: 805 (28116 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 815 (28326 interne); stringhe deallocate: 805 (28126 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9463000876874145 0.165964705483306 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999992100318815 0.7291572851620911 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949987645572932e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 816 (28376 interne); stringhe deallocate: 806 (28166 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550753277e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947528 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 817 (28396 interne); stringhe deallocate: 807 (28186 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.85000e+000: 9.61275e-001
Calcolo la funzione ext_fun2 in 1.85000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772617679e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947528 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.780645830088892


ris (2 : 2): [ -1 0.780645830088892 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 817 (28421 interne); stringhe deallocate: 807 (28211 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.85000e+000: 9.61275e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949989226582998e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947528 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 818 (28446 interne); stringhe deallocate: 808 (28236 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7806453793593109 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947528 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 819 (28466 interne); stringhe deallocate: 809 (28256 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 819 (28466 interne); stringhe deallocate: 809 (28266 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9612752029752999 0.1806293728864079 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.99999940582948 0.7596223612346829 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949910571332181e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 820 (28516 interne); stringhe deallocate: 810 (28306 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772620809e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 821 (28536 interne); stringhe deallocate: 811 (28326 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.90000e+000: 9.46300e-001
Calcolo la funzione ext_fun2 in 1.90000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772620738e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7803377811384955


ris (2 : 2): [ -1 0.7803377811384955 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 821 (28561 interne); stringhe deallocate: 811 (28351 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.90000e+000: 9.46300e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949912152342247e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 822 (28586 interne); stringhe deallocate: 812 (28376 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.780337342555204 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 823 (28606 interne); stringhe deallocate: 813 (28396 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 823 (28606 interne); stringhe deallocate: 813 (28406 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9463000876874145 0.165962306548919 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999992100318815 0.7291524526700419 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772620469e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 824 (28656 interne); stringhe deallocate: 814 (28446 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470199358261e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944792 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 825 (28676 interne); stringhe deallocate: 815 (28466 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.90000e+000: 9.46300e-001
Calcolo la funzione ext_fun2 in 1.90000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842550506146007e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944792 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7803377811384955


ris (2 : 2): [ -1 0.7803377811384955 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 825 (28701 interne); stringhe deallocate: 815 (28491 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.90000e+000: 9.46300e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949953258603981e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944792 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 826 (28726 interne); stringhe deallocate: 816 (28516 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7803373425552564 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79944792 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 827 (28746 interne); stringhe deallocate: 817 (28536 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 827 (28746 interne); stringhe deallocate: 817 (28546 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9463000876874145 0.165962306548919 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999992100318815 0.7291524526700419 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949956025371598e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 828 (28796 interne); stringhe deallocate: 818 (28586 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772621655e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947888 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 829 (28816 interne); stringhe deallocate: 819 (28606 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.92500e+000: 9.37923e-001
Calcolo la funzione ext_fun2 in 1.92500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772621512e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947888 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7801884961030692


ris (2 : 2): [ -1 0.7801884961030692 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 829 (28841 interne); stringhe deallocate: 819 (28631 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.92500e+000: 9.37923e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949976578502465e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947888 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 830 (28866 interne); stringhe deallocate: 820 (28656 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7801880925247815 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947888 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 831 (28886 interne); stringhe deallocate: 821 (28676 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 831 (28886 interne); stringhe deallocate: 821 (28686 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9379229870137281 0.1577344909106589 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999990735827328 0.7129552484694215 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949978554765048e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425240 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 832 (28936 interne); stringhe deallocate: 822 (28726 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772621014e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948072 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 833 (28956 interne); stringhe deallocate: 823 (28746 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.93750e+000: 9.33514e-001
Calcolo la funzione ext_fun2 in 1.93750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380516782e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948840 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7801187719745198


ris (2 : 2): [ -1 0.7801187719745198 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 833 (28981 interne); stringhe deallocate: 823 (28771 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.93750e+000: 9.33514e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903048010841e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948840 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 834 (29006 interne); stringhe deallocate: 824 (28796 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7801184742996101 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948840 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 835 (29026 interne); stringhe deallocate: 825 (28816 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 835 (29026 interne); stringhe deallocate: 825 (28826 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9335142808623762 0.1533955088878564 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.999998992549496 0.7047495366797398 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602281052e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 836 (29076 interne); stringhe deallocate: 826 (28866 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772622169e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949288 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 837 (29096 interne); stringhe deallocate: 827 (28886 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.99231e+000: 9.12472e-001
Calcolo la funzione ext_fun2 in 1.99231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949952468098948e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949288 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7798144628795835


ris (2 : 2): [ -1 0.7798144628795835 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 837 (29121 interne); stringhe deallocate: 827 (28911 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.99231e+000: 9.12472e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949962744664381e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949288 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 838 (29146 interne); stringhe deallocate: 828 (28936 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.779814252192808 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949288 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 839 (29166 interne); stringhe deallocate: 829 (28956 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 839 (29166 interne); stringhe deallocate: 829 (28966 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9124716226102712 0.1326571597306877 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999984967141942 0.669344786759165 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.046182312186097e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 840 (29216 interne); stringhe deallocate: 830 (29006 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277262107e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 841 (29236 interne); stringhe deallocate: 831 (29026 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.00000e+000: 9.09297e-001
Calcolo la funzione ext_fun2 in 2.00000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949975787997432e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7797721558271094


ris (2 : 2): [ -1 0.7797721558271094 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 841 (29261 interne); stringhe deallocate: 831 (29051 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.00000e+000: 9.09297e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950021242036849e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 842 (29286 interne); stringhe deallocate: 832 (29076 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7797718136856044 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 843 (29306 interne); stringhe deallocate: 833 (29096 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 843 (29306 interne); stringhe deallocate: 833 (29106 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9092974268256817 0.1295252709985724 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999984031606447 0.6645931273713877 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361944053e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 844 (29356 interne); stringhe deallocate: 834 (29146 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772622208e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949376 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 845 (29376 interne); stringhe deallocate: 835 (29166 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.95000e+000: 9.28960e-001
Calcolo la funzione ext_fun2 in 1.95000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949994760118232e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949376 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7800482863467895


ris (2 : 2): [ -1 0.7800482863467895 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 845 (29401 interne); stringhe deallocate: 835 (29191 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 1.95000e+000: 9.28960e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949966301937031e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949376 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 846 (29426 interne); stringhe deallocate: 836 (29216 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.780047902400332 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949376 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 847 (29446 interne); stringhe deallocate: 837 (29236 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 847 (29446 interne); stringhe deallocate: 837 (29246 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9289597150038692 0.1489114286570797 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999989013847322 0.6965409260627615 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361945223e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 848 (29496 interne); stringhe deallocate: 838 (29286 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772621781e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 849 (29516 interne); stringhe deallocate: 839 (29306 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.00000e+000: 9.09297e-001
Calcolo la funzione ext_fun2 in 2.00000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949955234866565e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7797742895797662


ris (2 : 2): [ -1 0.7797742895797662 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 849 (29541 interne); stringhe deallocate: 839 (29331 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.00000e+000: 9.09297e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950023218299432e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 850 (29566 interne); stringhe deallocate: 840 (29356 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7797741978714754 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 851 (29586 interne); stringhe deallocate: 841 (29376 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 851 (29586 interne); stringhe deallocate: 841 (29386 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9092974268256817 0.1295231372459155 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999984031606447 0.6645899452901174 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361944124e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 852 (29636 interne); stringhe deallocate: 842 (29426 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772621852e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 853 (29656 interne); stringhe deallocate: 843 (29446 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.00000e+000: 9.09297e-001
Calcolo la funzione ext_fun2 in 2.00000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410012551e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7797742895797662


ris (2 : 2): [ -1 0.7797742895797662 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 853 (29681 interne); stringhe deallocate: 843 (29471 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.00000e+000: 9.09297e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950001874663532e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 854 (29706 interne); stringhe deallocate: 844 (29496 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7797741978714834 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 855 (29726 interne); stringhe deallocate: 845 (29516 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 855 (29726 interne); stringhe deallocate: 845 (29526 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9092974268256817 0.1295231372459155 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999984031606447 0.6645899452901174 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772621963e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 856 (29776 interne); stringhe deallocate: 846 (29566 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602281985e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948592 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 857 (29796 interne); stringhe deallocate: 847 (29586 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.02500e+000: 8.98611e-001
Calcolo la funzione ext_fun2 in 2.02500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950005431936182e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948592 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.779641506731394


ris (2 : 2): [ -1 0.779641506731394 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 857 (29821 interne); stringhe deallocate: 847 (29611 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.02500e+000: 8.98611e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949841006889246e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948592 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 858 (29846 interne); stringhe deallocate: 848 (29636 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7796411603043847 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948592 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 859 (29866 interne); stringhe deallocate: 849 (29656 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 859 (29866 interne); stringhe deallocate: 849 (29666 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8986106989474292 0.1189691922160352 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999980432456536 0.6497732602329023 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84261841001218e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 860 (29916 interne); stringhe deallocate: 850 (29706 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550758041e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 861 (29936 interne); stringhe deallocate: 851 (29726 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.03750e+000: 8.93056e-001
Calcolo la funzione ext_fun2 in 2.03750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842584458079983e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7795794900104104


ris (2 : 2): [ -1 0.7795794900104104 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 861 (29961 interne); stringhe deallocate: 851 (29751 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.03750e+000: 8.93056e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950023218299432e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 862 (29986 interne); stringhe deallocate: 852 (29776 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.779579171473852 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 863 (30006 interne); stringhe deallocate: 853 (29796 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 863 (30006 interne); stringhe deallocate: 853 (29806 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8930563029056077 0.1134768128951973 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.999997825211621 0.6427873993630647 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470204101291e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 864 (30056 interne); stringhe deallocate: 854 (29846 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470199634937e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948488 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 865 (30076 interne); stringhe deallocate: 855 (29866 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.09231e+000: 8.67067e-001
Calcolo la funzione ext_fun2 in 2.09231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950003455673599e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948488 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7793088196897325


ris (2 : 2): [ -1 0.7793088196897325 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 865 (30101 interne); stringhe deallocate: 855 (29891 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.09231e+000: 8.67067e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950038237895066e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948488 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 866 (30126 interne); stringhe deallocate: 856 (29916 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7793088048050185 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948488 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 867 (30146 interne); stringhe deallocate: 857 (29936 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 867 (30146 interne); stringhe deallocate: 857 (29946 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8670672213119625 0.08775840162222992 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999964347249714 0.6162734431052342 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361945262e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 868 (30196 interne); stringhe deallocate: 858 (29986 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.98314755075825e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 869 (30216 interne); stringhe deallocate: 859 (30006 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.10000e+000: 8.63209e-001
Calcolo la funzione ext_fun2 in 2.10000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842686313877688e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7792711893209705


ris (2 : 2): [ -1 0.7792711893209705 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 869 (30241 interne); stringhe deallocate: 859 (30031 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.10000e+000: 8.63209e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949979345270082e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 870 (30266 interne); stringhe deallocate: 860 (30056 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7792711346696652 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 871 (30286 interne); stringhe deallocate: 861 (30076 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 871 (30286 interne); stringhe deallocate: 861 (30086 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8632093666488737 0.08393817732790321 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999961632827545 0.6131322630081455 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950042190420233e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 872 (30336 interne); stringhe deallocate: 862 (30126 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772622295e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948472 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 873 (30356 interne); stringhe deallocate: 863 (30146 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.05000e+000: 8.87362e-001
Calcolo la funzione ext_fun2 in 2.05000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772621465e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948472 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7795167959674836


ris (2 : 2): [ -1 0.7795167959674836 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 873 (30381 interne); stringhe deallocate: 863 (30171 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.05000e+000: 8.87362e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950043771430299e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948472 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 874 (30406 interne); stringhe deallocate: 864 (30196 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7795167058061034 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948472 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 875 (30426 interne); stringhe deallocate: 865 (30216 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 875 (30426 interne); stringhe deallocate: 865 (30226 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8873623686333755 0.1078455726658919 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.999997576459381 0.6361285835926547 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772618564e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 876 (30476 interne); stringhe deallocate: 866 (30266 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.41947020702616e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948888 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 877 (30496 interne); stringhe deallocate: 867 (30286 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.10000e+000: 8.63209e-001
Calcolo la funzione ext_fun2 in 2.10000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602282269e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948888 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7792730872054751


ris (2 : 2): [ -1 0.7792730872054751 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 877 (30521 interne); stringhe deallocate: 867 (30311 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.10000e+000: 8.63209e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950027566077116e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948888 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 878 (30546 interne); stringhe deallocate: 868 (30336 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7792730420183194 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948888 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 879 (30566 interne); stringhe deallocate: 869 (30356 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 879 (30566 interne); stringhe deallocate: 869 (30366 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8632093666488737 0.08393627944339865 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999961632827545 0.6131307490192239 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950051676480633e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 880 (30616 interne); stringhe deallocate: 870 (30406 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277262288e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949728 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 881 (30636 interne); stringhe deallocate: 871 (30426 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.10000e+000: 8.63209e-001
Calcolo la funzione ext_fun2 in 2.10000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772621362e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949728 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7792730872054751


ris (2 : 2): [ -1 0.7792730872054751 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 881 (30661 interne); stringhe deallocate: 871 (30451 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.10000e+000: 8.63209e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950053257490699e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949728 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 882 (30686 interne); stringhe deallocate: 872 (30476 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7792730420183274 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949728 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 883 (30706 interne); stringhe deallocate: 873 (30496 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 883 (30706 interne); stringhe deallocate: 873 (30506 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8632093666488737 0.08393627944339865 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999961632827545 0.6131307490192239 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950055233753283e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 884 (30756 interne); stringhe deallocate: 874 (30546 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550757981e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 885 (30776 interne); stringhe deallocate: 875 (30566 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.12500e+000: 8.50320e-001
Calcolo la funzione ext_fun2 in 2.12500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772622603e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7791549823681649


ris (2 : 2): [ -1 0.7791549823681649 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 885 (30801 interne); stringhe deallocate: 875 (30591 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.12500e+000: 8.50320e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95005681476335e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 886 (30826 interne); stringhe deallocate: 876 (30616 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7791547864030477 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 887 (30846 interne); stringhe deallocate: 877 (30636 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 887 (30846 interne); stringhe deallocate: 877 (30646 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.850319789818452 0.07116480745028708 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999950973542054 0.6039251759100477 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950035075874933e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 888 (30896 interne); stringhe deallocate: 878 (30686 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772623378e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949488 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 889 (30916 interne); stringhe deallocate: 879 (30706 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.13750e+000: 8.43675e-001
Calcolo la funzione ext_fun2 in 2.13750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772622279e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949488 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7790998210665958


ris (2 : 2): [ -1 0.7790998210665958 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 889 (30941 interne); stringhe deallocate: 879 (30731 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.13750e+000: 8.43675e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950036656884999e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949488 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 890 (30966 interne); stringhe deallocate: 880 (30756 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7790994732927974 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949488 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 891 (30986 interne); stringhe deallocate: 881 (30776 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 891 (30986 interne); stringhe deallocate: 881 (30786 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8436752015753716 0.06457538050877576 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999944369086545 0.5998851182096094 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950080134661833e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 892 (31036 interne); stringhe deallocate: 882 (30826 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550758518e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949776 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 893 (31056 interne); stringhe deallocate: 883 (30846 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.19231e+000: 8.12999e-001
Calcolo la funzione ext_fun2 in 2.19231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772622793e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949776 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7788590710406685


ris (2 : 2): [ -1 0.7788590710406685 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 893 (31081 interne); stringhe deallocate: 883 (30871 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.19231e+000: 8.12999e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.9500817156719e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949776 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 894 (31106 interne); stringhe deallocate: 884 (30896 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7788586705278355 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949776 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 895 (31126 interne); stringhe deallocate: 885 (30916 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 895 (31126 interne); stringhe deallocate: 885 (30926 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8129993709526218 0.03414029991195322 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999900297984364 0.5862210110058874 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950049304965533e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 896 (31176 interne); stringhe deallocate: 886 (30966 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772622935e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 897 (31196 interne); stringhe deallocate: 887 (30986 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.20000e+000: 8.08496e-001
Calcolo la funzione ext_fun2 in 2.20000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772622864e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7788256003881329


ris (2 : 2): [ -1 0.7788256003881329 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 897 (31221 interne); stringhe deallocate: 887 (31011 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.20000e+000: 8.08496e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950050885975599e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 898 (31246 interne); stringhe deallocate: 888 (31036 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7788252919267809 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 899 (31266 interne); stringhe deallocate: 889 (31056 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 899 (31266 interne); stringhe deallocate: 889 (31066 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8084964038195901 0.02967080343145723 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999891382684564 0.5847737404277607 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772622295e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 900 (31316 interne); stringhe deallocate: 890 (31106 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470208330493e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949968 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 901 (31336 interne); stringhe deallocate: 891 (31126 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.15000e+000: 8.36899e-001
Calcolo la funzione ext_fun2 in 2.15000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602282238e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949968 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7790440573152457


ris (2 : 2): [ -1 0.7790440573152457 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 901 (31361 interne); stringhe deallocate: 891 (31151 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.15000e+000: 8.36899e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950059581530966e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949968 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 902 (31386 interne); stringhe deallocate: 892 (31176 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.779043683345253 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949968 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 903 (31406 interne); stringhe deallocate: 893 (31196 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 903 (31406 interne); stringhe deallocate: 893 (31206 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8368987907984975 0.05785473348325176 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999936716472221 0.5962073926153932 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950064719813683e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 904 (31456 interne); stringhe deallocate: 894 (31246 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772623307e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950040 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 905 (31476 interne); stringhe deallocate: 895 (31266 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.20000e+000: 8.08496e-001
Calcolo la funzione ext_fun2 in 2.20000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772623362e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950040 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7788272884776971


ris (2 : 2): [ -1 0.7788272884776971 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 905 (31501 interne); stringhe deallocate: 895 (31291 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.20000e+000: 8.08496e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95006630082375e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950040 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 906 (31526 interne); stringhe deallocate: 896 (31316 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7788271992754554 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950040 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 907 (31546 interne); stringhe deallocate: 897 (31336 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 907 (31546 interne); stringhe deallocate: 897 (31346 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8084964038195901 0.02966911534189298 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999891382684564 0.5847732160378665 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950076577389183e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 908 (31596 interne); stringhe deallocate: 898 (31386 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772617924e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 909 (31616 interne); stringhe deallocate: 899 (31406 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.20000e+000: 8.08496e-001
Calcolo la funzione ext_fun2 in 2.20000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772622746e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7788272884776971


ris (2 : 2): [ -1 0.7788272884776971 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 909 (31641 interne); stringhe deallocate: 899 (31431 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.20000e+000: 8.08496e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95007815839925e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 910 (31666 interne); stringhe deallocate: 900 (31456 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7788271992748506 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 911 (31686 interne); stringhe deallocate: 901 (31476 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 911 (31686 interne); stringhe deallocate: 901 (31486 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8084964038195901 0.02966911534189298 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999891382684564 0.5847732160378665 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949807410425329e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 912 (31736 interne); stringhe deallocate: 902 (31526 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602282846e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950368 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 913 (31756 interne); stringhe deallocate: 903 (31546 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.22500e+000: 7.93533e-001
Calcolo la funzione ext_fun2 in 2.22500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949808991435396e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950368 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7787222391225505


ris (2 : 2): [ -1 0.7787222391225505 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 913 (31781 interne); stringhe deallocate: 903 (31571 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.22500e+000: 7.93533e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949959582644248e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950368 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 914 (31806 interne); stringhe deallocate: 904 (31596 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7787218182634659 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950368 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 915 (31826 interne); stringhe deallocate: 905 (31616 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 915 (31826 interne); stringhe deallocate: 905 (31626 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7935327664279611 0.01481052730541066 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999855622230259 0.5807410789933148 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410013705e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 916 (31876 interne); stringhe deallocate: 906 (31666 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772623125e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948072 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 917 (31896 interne); stringhe deallocate: 907 (31686 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.23750e+000: 7.85864e-001
Calcolo la funzione ext_fun2 in 2.23750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842584458080797e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948072 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7786731754322659


ris (2 : 2): [ -1 0.7786731754322659 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 917 (31921 interne); stringhe deallocate: 907 (31711 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.23750e+000: 7.85864e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95006630082375e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948072 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 918 (31946 interne); stringhe deallocate: 908 (31736 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7786731808733354 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79948072 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 919 (31966 interne); stringhe deallocate: 909 (31756 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 919 (31966 interne); stringhe deallocate: 909 (31766 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7858643765129377 0.007191201080671839 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999832951818484 0.5790712625399652 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.41947020785619e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 920 (32016 interne); stringhe deallocate: 910 (31806 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470213784978e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 921 (32036 interne); stringhe deallocate: 911 (31826 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.29231e+000: 7.50808e-001
Calcolo la funzione ext_fun2 in 2.29231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602283068e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7784590382677669


ris (2 : 2): [ -1 0.7784590382677669 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 921 (32061 interne); stringhe deallocate: 911 (31851 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.29231e+000: 7.50808e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950069067591366e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 922 (32086 interne); stringhe deallocate: 912 (31876 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7784586041522603 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79949632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 923 (32106 interne); stringhe deallocate: 913 (31896 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 923 (32106 interne); stringhe deallocate: 913 (31906 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7508082996205844 0.9723492613528175 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999674610548062 0.9999999271165072 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950119264660984e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 924 (32156 interne); stringhe deallocate: 914 (31946 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.9831475507604e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950096 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 925 (32176 interne); stringhe deallocate: 915 (31966 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.30000e+000: 7.45705e-001
Calcolo la funzione ext_fun2 in 2.30000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772617908e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950096 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7784292675103172


ris (2 : 2): [ -1 0.7784292675103172 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 925 (32201 interne); stringhe deallocate: 915 (31991 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.30000e+000: 7.45705e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950120845671051e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950096 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 926 (32226 interne); stringhe deallocate: 916 (32016 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7784290402484064 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950096 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 927 (32246 interne); stringhe deallocate: 917 (32036 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 927 (32246 interne); stringhe deallocate: 917 (32046 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.74570521217672 0.9672759446664029 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999641446436819 0.9999999193386776 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410013524e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 928 (32296 interne); stringhe deallocate: 918 (32086 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772623829e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950096 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 929 (32316 interne); stringhe deallocate: 919 (32106 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.25000e+000: 7.78073e-001
Calcolo la funzione ext_fun2 in 2.25000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842686313878929e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950096 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.778623575887884


ris (2 : 2): [ -1 0.778623575887884 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 929 (32341 interne); stringhe deallocate: 919 (32131 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.25000e+000: 7.78073e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950077367894217e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950096 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 930 (32366 interne); stringhe deallocate: 920 (32156 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7786231129718031 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950096 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 931 (32386 interne); stringhe deallocate: 921 (32176 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 931 (32386 interne); stringhe deallocate: 921 (32186 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7780731968879212 0.9994496210000372 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999806269870303 0.9999999575967382 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410013065e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 932 (32436 interne); stringhe deallocate: 922 (32226 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470212480644e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950096 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 933 (32456 interne); stringhe deallocate: 923 (32246 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.30000e+000: 7.45705e-001
Calcolo la funzione ext_fun2 in 2.30000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842686313878819e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950096 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7784307689959819


ris (2 : 2): [ -1 0.7784307689959819 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 933 (32481 interne); stringhe deallocate: 923 (32271 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.30000e+000: 7.45705e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949808200930362e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950096 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 934 (32506 interne); stringhe deallocate: 924 (32296 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.778430470759897 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950096 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 935 (32526 interne); stringhe deallocate: 925 (32316 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 935 (32526 interne); stringhe deallocate: 925 (32326 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.74570521217672 0.9672744431807382 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999641446436819 0.999999919336257 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950106221327934e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 936 (32576 interne); stringhe deallocate: 926 (32366 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772623544e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950952 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 937 (32596 interne); stringhe deallocate: 927 (32386 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.22114e+000: 7.95876e-001
Calcolo la funzione ext_fun2 in 2.22114e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950120055166017e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950952 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7787384620981759


ris (2 : 2): [ -1 0.7787384620981759 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 937 (32621 interne); stringhe deallocate: 927 (32411 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.22114e+000: 7.95876e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950107802338e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950952 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 938 (32646 interne); stringhe deallocate: 928 (32436 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7787380307268981 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950952 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 939 (32666 interne); stringhe deallocate: 929 (32456 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 939 (32666 interne); stringhe deallocate: 929 (32466 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.795876248635365 0.01713778653718912 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999861916126528 0.5813009370085904 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950088434964683e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 940 (32716 interne); stringhe deallocate: 930 (32506 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772623433e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951336 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 941 (32736 interne); stringhe deallocate: 931 (32526 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.23171e+000: 7.89432e-001
Calcolo la funzione ext_fun2 in 2.23171e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.456054892795106e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951336 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7786965234636076


ris (2 : 2): [ -1 0.7786965234636076 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 941 (32761 interne); stringhe deallocate: 931 (32551 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.23171e+000: 7.89432e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95009001597475e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951336 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 942 (32786 interne); stringhe deallocate: 932 (32576 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7786960690569638 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951336 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 943 (32806 interne); stringhe deallocate: 933 (32596 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 943 (32806 interne); stringhe deallocate: 933 (32606 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7894324485994404 0.01073592513583277 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999843912091001 0.5798181877517096 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.840818878581404e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 944 (32856 interne); stringhe deallocate: 934 (32646 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772623631e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951024 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 945 (32876 interne); stringhe deallocate: 935 (32666 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.27805e+000: 7.60148e-001
Calcolo la funzione ext_fun2 in 2.27805e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410014211e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951024 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7785134939262908


ris (2 : 2): [ -1 0.7785134939262908 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 945 (32901 interne); stringhe deallocate: 935 (32691 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.27805e+000: 7.60148e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950084482439517e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951024 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 946 (32926 interne); stringhe deallocate: 936 (32716 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7785134404253942 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951024 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 947 (32946 interne); stringhe deallocate: 937 (32736 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 947 (32946 interne); stringhe deallocate: 937 (32746 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7601475793540139 0.9816340854277231 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999727565455655 0.9999999394607104 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950117683650917e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 948 (32996 interne); stringhe deallocate: 938 (32786 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772623955e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 949 (33016 interne); stringhe deallocate: 939 (32806 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.28456e+000: 7.55905e-001
Calcolo la funzione ext_fun2 in 2.28456e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772623884e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7784881106962479


ris (2 : 2): [ -1 0.7784881106962479 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 949 (33041 interne); stringhe deallocate: 939 (32831 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.28456e+000: 7.55905e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950094363752433e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 950 (33066 interne); stringhe deallocate: 940 (32856 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7784876912188876 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 951 (33086 interne); stringhe deallocate: 941 (32876 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 951 (33086 interne); stringhe deallocate: 941 (32886 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7559053123046007 0.9774172016083528 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999704673201065 0.9999999341372767 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95010898809555e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 952 (33136 interne); stringhe deallocate: 942 (32926 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772624026e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945008 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 953 (33156 interne); stringhe deallocate: 943 (32946 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.24228e+000: 7.82900e-001
Calcolo la funzione ext_fun2 in 2.24228e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772623528e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945008 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7786541766821898


ris (2 : 2): [ -1 0.7786541766821898 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 953 (33181 interne); stringhe deallocate: 943 (32971 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.24228e+000: 7.82900e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950110569105617e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945008 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 954 (33206 interne); stringhe deallocate: 944 (32996 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7786541073871085 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79945008 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 955 (33226 interne); stringhe deallocate: 945 (33016 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 955 (33226 interne); stringhe deallocate: 945 (33026 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7829004567858118 0.004246280103621936 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999823264470289 0.5784878871708207 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.9501125453682e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 956 (33276 interne); stringhe deallocate: 946 (33066 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772624588e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951256 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 957 (33296 interne); stringhe deallocate: 947 (33086 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.28456e+000: 7.55905e-001
Calcolo la funzione ext_fun2 in 2.28456e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772623418e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951256 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7784890129005937


ris (2 : 2): [ -1 0.7784890129005937 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 957 (33321 interne); stringhe deallocate: 947 (33111 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.28456e+000: 7.55905e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950114126378267e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951256 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 958 (33346 interne); stringhe deallocate: 948 (33136 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7784886448932751 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951256 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 959 (33366 interne); stringhe deallocate: 949 (33156 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 959 (33366 interne); stringhe deallocate: 949 (33166 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7559053123046007 0.977416299404007 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999704673201065 0.9999999341360891 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950140608296884e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 960 (33416 interne); stringhe deallocate: 950 (33206 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772618279e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950712 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 961 (33436 interne); stringhe deallocate: 951 (33226 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.28456e+000: 7.55905e-001
Calcolo la funzione ext_fun2 in 2.28456e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772624113e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950712 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7784890129005937


ris (2 : 2): [ -1 0.7784890129005937 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 961 (33461 interne); stringhe deallocate: 951 (33251 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.28456e+000: 7.55905e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950142189306951e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950712 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 962 (33486 interne); stringhe deallocate: 952 (33276 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7784886448925663 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950712 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 963 (33506 interne); stringhe deallocate: 953 (33296 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 963 (33506 interne); stringhe deallocate: 953 (33306 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7559053123046007 0.977416299404007 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999704673201065 0.9999999341360891 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949825196788579e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 964 (33556 interne); stringhe deallocate: 954 (33346 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550763043e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950600 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 965 (33576 interne); stringhe deallocate: 955 (33366 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.28842e+000: 7.53372e-001
Calcolo la funzione ext_fun2 in 2.28842e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772623939e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950600 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7784743198207934


ris (2 : 2): [ -1 0.7784743198207934 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 965 (33601 interne); stringhe deallocate: 955 (33391 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.28842e+000: 7.53372e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949826777798646e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950600 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 966 (33626 interne); stringhe deallocate: 956 (33416 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7784738629414347 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950600 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 967 (33646 interne); stringhe deallocate: 957 (33436 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 967 (33646 interne); stringhe deallocate: 957 (33446 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7533720936640685 0.9748977738432751 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999690096189882 0.9999999307358987 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950169066478085e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 968 (33696 interne); stringhe deallocate: 958 (33486 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550761475e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950800 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 969 (33716 interne); stringhe deallocate: 959 (33506 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.29035e+000: 7.52101e-001
Calcolo la funzione ext_fun2 in 2.29035e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277262401e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950800 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7784670480387042


ris (2 : 2): [ -1 0.7784670480387042 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 969 (33741 interne); stringhe deallocate: 959 (33531 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.29035e+000: 7.52101e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950170647488151e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950800 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 970 (33766 interne); stringhe deallocate: 960 (33556 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7784667103839684 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79950800 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 971 (33786 interne); stringhe deallocate: 961 (33576 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 971 (33786 interne); stringhe deallocate: 961 (33586 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.752101270887277 0.9736342228485728 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.999968251462217 0.9999999289644463 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950127564963834e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 972 (33836 interne); stringhe deallocate: 962 (33626 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772624216e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952344 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 973 (33856 interne); stringhe deallocate: 963 (33646 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.29881e+000: 7.46496e-001
Calcolo la funzione ext_fun2 in 2.29881e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772624572e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952344 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7784352100082262


ris (2 : 2): [ -1 0.7784352100082262 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 973 (33881 interne); stringhe deallocate: 963 (33671 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.29881e+000: 7.46496e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950129145973901e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952344 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 974 (33906 interne); stringhe deallocate: 964 (33696 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7784347622943564 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952344 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 975 (33926 interne); stringhe deallocate: 965 (33716 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 975 (33926 interne); stringhe deallocate: 965 (33726 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7464961804222555 0.9680609704140293 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999646799911091 0.9999999205943602 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772623955e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 976 (33976 interne); stringhe deallocate: 966 (33766 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470220188068e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951200 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 977 (33996 interne); stringhe deallocate: 967 (33786 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.30000e+000: 7.45705e-001
Calcolo la funzione ext_fun2 in 2.30000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84248260227804e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951200 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7784307641614929


ris (2 : 2): [ -1 0.7784307641614929 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 977 (34021 interne); stringhe deallocate: 967 (33811 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.30000e+000: 7.45705e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950123612438667e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951200 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 978 (34046 interne); stringhe deallocate: 968 (33836 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7784304707600702 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951200 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 979 (34066 interne); stringhe deallocate: 969 (33856 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 979 (34066 interne); stringhe deallocate: 969 (33866 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.74570521217672 0.9672744480152271 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999641446436819 0.9999999193362648 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950183295568685e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 980 (34116 interne); stringhe deallocate: 970 (33906 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550763222e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951768 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 981 (34136 interne); stringhe deallocate: 971 (33926 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.29228e+000: 7.50828e-001
Calcolo la funzione ext_fun2 in 2.29228e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772625141e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951768 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7784597604420449


ris (2 : 2): [ -1 0.7784597604420449 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 981 (34161 interne); stringhe deallocate: 971 (33951 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.29228e+000: 7.50828e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950184876578752e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951768 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 982 (34186 interne); stringhe deallocate: 972 (33976 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7784595578266993 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951768 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 983 (34206 interne); stringhe deallocate: 973 (33996 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 983 (34206 interne); stringhe deallocate: 973 (34006 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7508276454501747 0.9723678850081298 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999674730249191 0.9999999271436306 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950173809508285e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 984 (34256 interne); stringhe deallocate: 974 (34046 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772625354e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 985 (34276 interne); stringhe deallocate: 975 (34066 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.30000e+000: 7.45705e-001
Calcolo la funzione ext_fun2 in 2.30000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772624311e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7784307690012298


ris (2 : 2): [ -1 0.7784307690012298 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 985 (34301 interne); stringhe deallocate: 975 (34091 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.30000e+000: 7.45705e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950175390518351e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 986 (34326 interne); stringhe deallocate: 976 (34116 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7784304707600604 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 987 (34346 interne); stringhe deallocate: 977 (34136 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 987 (34346 interne); stringhe deallocate: 977 (34146 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.74570521217672 0.9672744431754903 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999641446436819 0.999999919336257 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772618279e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 988 (34396 interne); stringhe deallocate: 978 (34186 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470218172281e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 989 (34416 interne); stringhe deallocate: 979 (34206 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.30000e+000: 7.45705e-001
Calcolo la funzione ext_fun2 in 2.30000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602283977e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7784307690012298


ris (2 : 2): [ -1 0.7784307690012298 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 989 (34441 interne); stringhe deallocate: 979 (34231 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.30000e+000: 7.45705e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950180528801068e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 990 (34466 interne); stringhe deallocate: 980 (34256 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7784304707600249 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 991 (34486 interne); stringhe deallocate: 981 (34276 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 991 (34486 interne); stringhe deallocate: 981 (34286 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.74570521217672 0.9672744431754903 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999641446436819 0.999999919336257 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950163137690335e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 992 (34536 interne); stringhe deallocate: 982 (34326 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550754502e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 993 (34556 interne); stringhe deallocate: 983 (34346 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.31930e+000: 7.32705e-001
Calcolo la funzione ext_fun2 in 2.31930e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772625425e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7783586206807363


ris (2 : 2): [ -1 0.7783586206807363 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 993 (34581 interne); stringhe deallocate: 983 (34371 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.31930e+000: 7.32705e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950164718700401e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 994 (34606 interne); stringhe deallocate: 984 (34396 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7783584683486415 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 995 (34626 interne); stringhe deallocate: 985 (34416 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 995 (34626 interne); stringhe deallocate: 985 (34426 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7327052867059137 0.9543466660251775 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999540876078806 0.9999998955542218 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772624327e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 996 (34676 interne); stringhe deallocate: 986 (34466 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470196591493e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951392 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 997 (34696 interne); stringhe deallocate: 987 (34486 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.32896e+000: 7.26103e-001
Calcolo la funzione ext_fun2 in 2.32896e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842686313880945e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951392 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7783243819595443


ris (2 : 2): [ -1 0.7783243819595443 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 997 (34721 interne); stringhe deallocate: 987 (34511 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.32896e+000: 7.26103e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949944563048614e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951392 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 998 (34746 interne); stringhe deallocate: 988 (34536 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7783241360732607 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951392 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 999 (34766 interne); stringhe deallocate: 989 (34556 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 999 (34766 interne); stringhe deallocate: 989 (34566 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7261026310227171 0.9477782490631728 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999479446531746 0.9999998809020054 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949947329816231e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1000 (34816 interne); stringhe deallocate: 990 (34606 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277262058e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1001 (34836 interne); stringhe deallocate: 991 (34626 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.37128e+000: 6.96362e-001
Calcolo la funzione ext_fun2 in 2.37128e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772625339e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7781749451071859


ris (2 : 2): [ -1 0.7781749451071859 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1001 (34861 interne); stringhe deallocate: 991 (34651 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.37128e+000: 6.96362e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949948910826298e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1002 (34886 interne); stringhe deallocate: 992 (34676 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7781748860427271 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1003 (34906 interne); stringhe deallocate: 993 (34696 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1003 (34906 interne); stringhe deallocate: 993 (34706 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6963623320302761 0.9181873869230902 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.999908356752332 0.999999784844849 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949940215270931e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1004 (34956 interne); stringhe deallocate: 994 (34746 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550764163e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952440 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1005 (34976 interne); stringhe deallocate: 995 (34766 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.37722e+000: 6.92087e-001
Calcolo la funzione ext_fun2 in 2.37722e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772625022e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952440 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7781542336383291


ris (2 : 2): [ -1 0.7781542336383291 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1005 (35001 interne); stringhe deallocate: 995 (34791 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.37722e+000: 6.92087e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.949941796280998e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952440 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1006 (35026 interne); stringhe deallocate: 996 (34816 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.778153905208347 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952440 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1007 (35046 interne); stringhe deallocate: 997 (34836 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1007 (35046 interne); stringhe deallocate: 997 (34846 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6920872148917551 0.9139329812534259 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999005949068387 0.9999997657499 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84261841001112e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425240 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1008 (35096 interne); stringhe deallocate: 998 (34886 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772625805e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952968 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1009 (35116 interne); stringhe deallocate: 999 (34906 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.33861e+000: 7.19432e-001
Calcolo la funzione ext_fun2 in 2.33861e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380515833e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947808 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7782898316075226


ris (2 : 2): [ -1 0.7782898316075226 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1009 (35141 interne); stringhe deallocate: 999 (34931 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.33861e+000: 7.19432e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903048016735e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947808 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1010 (35166 interne); stringhe deallocate: 1000 (34956 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7782898037984394 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947808 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1011 (35186 interne); stringhe deallocate: 1001 (34976 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1011 (35186 interne); stringhe deallocate: 1001 (34986 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.719432331395224 0.9411424997877014 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999409038904799 0.9999998640114176 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1012 (35236 interne); stringhe deallocate: 1002 (35026 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550762625e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952528 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1013 (35256 interne); stringhe deallocate: 1003 (35046 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.37722e+000: 6.92087e-001
Calcolo la funzione ext_fun2 in 2.37722e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84265236194376e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952528 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7781548429395255


ris (2 : 2): [ -1 0.7781548429395255 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1013 (35281 interne); stringhe deallocate: 1003 (35071 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.37722e+000: 6.92087e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950202267689485e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952528 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1014 (35306 interne); stringhe deallocate: 1004 (35096 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7781543820454138 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952528 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1015 (35326 interne); stringhe deallocate: 1005 (35116 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1015 (35326 interne); stringhe deallocate: 1005 (35126 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6920872148917551 0.9139323719522295 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999005949068387 0.9999997657470474 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.456054892794385e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1016 (35376 interne); stringhe deallocate: 1006 (35166 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.456054892796586e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1017 (35396 interne); stringhe deallocate: 1007 (35186 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.37722e+000: 6.92087e-001
Calcolo la funzione ext_fun2 in 2.37722e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842550506145651e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7781548429395255


ris (2 : 2): [ -1 0.7781548429395255 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1017 (35421 interne); stringhe deallocate: 1007 (35211 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.37722e+000: 6.92087e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950159580417685e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1018 (35446 interne); stringhe deallocate: 1008 (35236 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7781543820453836 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1019 (35466 interne); stringhe deallocate: 1009 (35256 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1019 (35466 interne); stringhe deallocate: 1009 (35266 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6920872148917551 0.9139323719522295 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999005949068387 0.9999997657470474 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950162347185301e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1020 (35516 interne); stringhe deallocate: 1010 (35306 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772625568e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947752 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1021 (35536 interne); stringhe deallocate: 1011 (35326 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.38291e+000: 6.87965e-001
Calcolo la funzione ext_fun2 in 2.38291e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772625734e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947752 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.778135395314655


ris (2 : 2): [ -1 0.778135395314655 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1021 (35561 interne); stringhe deallocate: 1011 (35351 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.38291e+000: 6.87965e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950146141832118e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947752 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1022 (35586 interne); stringhe deallocate: 1012 (35376 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7781353085591567 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79947752 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1023 (35606 interne); stringhe deallocate: 1013 (35396 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1023 (35606 interne); stringhe deallocate: 1013 (35406 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6879645525561524 0.9098291572414974 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.999892487926222 0.9999997457266889 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950148118094701e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1024 (35656 interne); stringhe deallocate: 1014 (35446 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772624856e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952832 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1025 (35676 interne); stringhe deallocate: 1015 (35466 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.38576e+000: 6.85895e-001
Calcolo la funzione ext_fun2 in 2.38576e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550763222e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952832 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.778125817485707


ris (2 : 2): [ -1 0.778125817485707 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1025 (35701 interne); stringhe deallocate: 1015 (35491 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.38576e+000: 6.85895e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950191200619018e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952832 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1026 (35726 interne); stringhe deallocate: 1016 (35516 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7781257718159127 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952832 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1027 (35746 interne); stringhe deallocate: 1017 (35536 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1027 (35746 interne); stringhe deallocate: 1017 (35546 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6858948427724141 0.9077690252867071 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9998881719983386 0.9999997350385916 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950193176881602e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425240 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1028 (35796 interne); stringhe deallocate: 1018 (35586 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772625947e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952160 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1029 (35816 interne); stringhe deallocate: 1019 (35606 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.39825e+000: 6.76755e-001
Calcolo la funzione ext_fun2 in 2.39825e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53524438052365e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952080 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7780839079245464


ris (2 : 2): [ -1 0.7780839079245464 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1029 (35841 interne); stringhe deallocate: 1019 (35631 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.39825e+000: 6.76755e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903048015964e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952080 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1030 (35866 interne); stringhe deallocate: 1020 (35656 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7780838101461116 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952080 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1031 (35886 interne); stringhe deallocate: 1021 (35676 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1031 (35886 interne); stringhe deallocate: 1021 (35686 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6767545117853391 0.8986706038607927 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9998669431543987 0.9999996821981123 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602285344e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1032 (35936 interne); stringhe deallocate: 1022 (35726 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277262639e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953560 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1033 (35956 interne); stringhe deallocate: 1023 (35746 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.40000e+000: 6.75463e-001
Calcolo la funzione ext_fun2 in 2.40000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950145351327084e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953560 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7780780673847656


ris (2 : 2): [ -1 0.7780780673847656 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1033 (35981 interne); stringhe deallocate: 1023 (35771 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.40000e+000: 6.75463e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950209382234785e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953560 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1034 (36006 interne); stringhe deallocate: 1024 (35796 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7780776112631065 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953560 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1035 (36026 interne); stringhe deallocate: 1025 (35816 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1035 (36026 interne); stringhe deallocate: 1025 (35826 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6754631805511506 0.897385113166385 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9998636354013133 0.9999996739272791 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842720265813221e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1036 (36076 interne); stringhe deallocate: 1026 (35866 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772625837e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953048 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1037 (36096 interne); stringhe deallocate: 1027 (35886 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.38861e+000: 6.83820e-001
Calcolo la funzione ext_fun2 in 2.38861e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950190410113985e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953048 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7781162095113234


ris (2 : 2): [ -1 0.7781162095113234 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1037 (36121 interne); stringhe deallocate: 1027 (35911 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.38861e+000: 6.83820e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950232306880752e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953048 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1038 (36146 interne); stringhe deallocate: 1028 (35936 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7781157582357006 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953048 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1039 (36166 interne); stringhe deallocate: 1029 (35956 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1039 (36166 interne); stringhe deallocate: 1029 (35966 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.683819569613184 0.9057033601018606 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9998836705396669 0.9999997238706972 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361948985e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1040 (36216 interne); stringhe deallocate: 1030 (36006 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772626501e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953720 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1041 (36236 interne); stringhe deallocate: 1031 (36026 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.40000e+000: 6.75463e-001
Calcolo la funzione ext_fun2 in 2.40000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950154837387484e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953720 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7780780813705485


ris (2 : 2): [ -1 0.7780780813705485 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1041 (36261 interne); stringhe deallocate: 1031 (36051 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.40000e+000: 6.75463e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950204639204585e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953720 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1042 (36286 interne); stringhe deallocate: 1032 (36076 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7780780881002771 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953720 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1043 (36306 interne); stringhe deallocate: 1033 (36096 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1043 (36306 interne); stringhe deallocate: 1033 (36106 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6754631805511506 0.8973850991806022 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9998636354013133 0.9999996739271879 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361949444e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1044 (36356 interne); stringhe deallocate: 1034 (36146 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772625979e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953192 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1045 (36376 interne); stringhe deallocate: 1035 (36166 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.40000e+000: 6.75463e-001
Calcolo la funzione ext_fun2 in 2.40000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950202267689485e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953192 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7780780813705485


ris (2 : 2): [ -1 0.7780780813705485 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1045 (36401 interne); stringhe deallocate: 1035 (36191 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.40000e+000: 6.75463e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950237840415986e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953192 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1046 (36426 interne); stringhe deallocate: 1036 (36216 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7780780881002185 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953192 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1047 (36446 interne); stringhe deallocate: 1037 (36236 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1047 (36446 interne); stringhe deallocate: 1037 (36246 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6754631805511506 0.8973850991806022 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9998636354013133 0.9999996739271879 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84265236194889e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1048 (36496 interne); stringhe deallocate: 1038 (36286 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772626667e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1049 (36516 interne); stringhe deallocate: 1039 (36306 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.42500e+000: 6.56819e-001
Calcolo la funzione ext_fun2 in 2.42500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410016773e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7779949729932796


ris (2 : 2): [ -1 0.7779949729932796 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1049 (36541 interne); stringhe deallocate: 1039 (36331 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.42500e+000: 6.56819e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950211753749885e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1050 (36566 interne); stringhe deallocate: 1040 (36356 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7779946415976102 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1051 (36586 interne); stringhe deallocate: 1041 (36376 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1051 (36586 interne); stringhe deallocate: 1041 (36386 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6568191866484611 0.8788242136551815 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9998056139147832 0.9999995274779057 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772626469e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1052 (36636 interne); stringhe deallocate: 1042 (36426 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772627291e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953720 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1053 (36656 interne); stringhe deallocate: 1043 (36446 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.43750e+000: 6.47343e-001
Calcolo la funzione ext_fun2 in 2.43750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772625868e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953720 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7779561569179531


ris (2 : 2): [ -1 0.7779561569179531 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1053 (36681 interne); stringhe deallocate: 1043 (36471 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.43750e+000: 6.47343e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950246140718836e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953720 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1054 (36706 interne); stringhe deallocate: 1044 (36496 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7779560177878659 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953720 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1055 (36726 interne); stringhe deallocate: 1045 (36516 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1055 (36726 interne); stringhe deallocate: 1045 (36526 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6473425173671444 0.8693863604491914 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9997672348531879 0.9999994293863233 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950275784657586e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1056 (36776 interne); stringhe deallocate: 1046 (36566 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.98314755076582e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1057 (36796 interne); stringhe deallocate: 1047 (36586 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.49231e+000: 6.04617e-001
Calcolo la funzione ext_fun2 in 2.49231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550765641e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7777867451949622


ris (2 : 2): [ -1 0.7777867451949622 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1057 (36821 interne); stringhe deallocate: 1047 (36611 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.49231e+000: 6.04617e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950277365667653e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1058 (36846 interne); stringhe deallocate: 1048 (36636 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7777867405966292 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1059 (36866 interne); stringhe deallocate: 1049 (36656 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1059 (36866 interne); stringhe deallocate: 1049 (36666 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6046170203359333 0.8268302751409712 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9994756320248486 0.999998664246332 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950242583446186e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1060 (36916 interne); stringhe deallocate: 1050 (36706 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772626161e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1061 (36936 interne); stringhe deallocate: 1051 (36726 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.50000e+000: 5.98472e-001
Calcolo la funzione ext_fun2 in 2.50000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826133085e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7777631924626464


ris (2 : 2): [ -1 0.7777631924626464 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1061 (36961 interne); stringhe deallocate: 1051 (36751 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.50000e+000: 5.98472e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950244164456253e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1062 (36986 interne); stringhe deallocate: 1052 (36776 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7777628987386667 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954504 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1063 (37006 interne); stringhe deallocate: 1053 (36796 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1063 (37006 interne); stringhe deallocate: 1053 (36806 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5984721441039566 0.8207089516413102 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9994106835118392 0.999998490409959 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772626453e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1064 (37056 interne); stringhe deallocate: 1054 (36846 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470224219644e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953704 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1065 (37076 interne); stringhe deallocate: 1055 (36866 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.45000e+000: 6.37765e-001
Calcolo la funzione ext_fun2 in 2.45000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842686313882194e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953704 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7779169169089011


ris (2 : 2): [ -1 0.7779169169089011 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1065 (37101 interne); stringhe deallocate: 1055 (36891 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.45000e+000: 6.37765e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950220844557769e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953704 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1066 (37126 interne); stringhe deallocate: 1056 (36916 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.777916917140776 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953704 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1067 (37146 interne); stringhe deallocate: 1057 (36936 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1067 (37146 interne); stringhe deallocate: 1057 (36946 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6377647021345037 0.8598477852256026 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9997207453031681 0.999999309543259 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950223611325386e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1068 (37196 interne); stringhe deallocate: 1058 (36986 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772626848e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953360 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1069 (37216 interne); stringhe deallocate: 1059 (37006 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.50000e+000: 5.98472e-001
Calcolo la funzione ext_fun2 in 2.50000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772627275e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953360 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7777643803427329


ris (2 : 2): [ -1 0.7777643803427329 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1069 (37241 interne); stringhe deallocate: 1059 (37031 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.50000e+000: 5.98472e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950225192335452e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953360 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1070 (37266 interne); stringhe deallocate: 1060 (37056 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7777643292502185 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953360 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1071 (37286 interne); stringhe deallocate: 1061 (37076 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1071 (37286 interne); stringhe deallocate: 1061 (37086 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5984721441039566 0.8207077637612237 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9994106835118392 0.9999984903741189 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772625979e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1072 (37336 interne); stringhe deallocate: 1062 (37126 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.41947022350819e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953872 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1073 (37356 interne); stringhe deallocate: 1063 (37146 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.50000e+000: 5.98472e-001
Calcolo la funzione ext_fun2 in 2.50000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602286388e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953872 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7777643803427329


ris (2 : 2): [ -1 0.7777643803427329 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1073 (37381 interne); stringhe deallocate: 1063 (37171 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.50000e+000: 5.98472e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950255231526719e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953872 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1074 (37406 interne); stringhe deallocate: 1064 (37196 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7777643292501351 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953872 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1075 (37426 interne); stringhe deallocate: 1065 (37216 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1075 (37426 interne); stringhe deallocate: 1065 (37226 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5984721441039566 0.8207077637612237 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9994106835118392 0.9999984903741189 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950216496780085e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1076 (37476 interne); stringhe deallocate: 1066 (37266 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772627457e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953400 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1077 (37496 interne); stringhe deallocate: 1067 (37286 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.52500e+000: 5.78259e-001
Calcolo la funzione ext_fun2 in 2.52500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772626145e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953400 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7776904588875392


ris (2 : 2): [ -1 0.7776904588875392 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1077 (37521 interne); stringhe deallocate: 1067 (37311 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.52500e+000: 5.78259e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950218077790152e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953400 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1078 (37546 interne); stringhe deallocate: 1068 (37336 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7776904194907655 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953400 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1079 (37566 interne); stringhe deallocate: 1069 (37356 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1079 (37566 interne); stringhe deallocate: 1069 (37366 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.578258627157108 0.8005681682695688 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.999134787860291 0.99999774223159 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950284084960437e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1080 (37616 interne); stringhe deallocate: 1070 (37406 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772627173e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953832 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1081 (37636 interne); stringhe deallocate: 1071 (37426 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.53750e+000: 5.68016e-001
Calcolo la funzione ext_fun2 in 2.53750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772626232e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953832 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.777655933598184


ris (2 : 2): [ -1 0.777655933598184 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1081 (37661 interne); stringhe deallocate: 1071 (37451 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.53750e+000: 5.68016e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950285665970503e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953832 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1082 (37686 interne); stringhe deallocate: 1072 (37476 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7776556103781847 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953832 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1083 (37706 interne); stringhe deallocate: 1073 (37496 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1083 (37706 interne); stringhe deallocate: 1073 (37506 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5680155479111305 0.7903596143129466 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9989490023241991 0.9999972312185161 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950269855869836e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1084 (37756 interne); stringhe deallocate: 1074 (37546 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550767582e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1085 (37776 interne); stringhe deallocate: 1075 (37566 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.59231e+000: 5.22078e-001
Calcolo la funzione ext_fun2 in 2.59231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772626833e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7775052488958483


ris (2 : 2): [ -1 0.7775052488958483 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1085 (37801 interne); stringhe deallocate: 1075 (37591 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.59231e+000: 5.22078e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950271436879903e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1086 (37826 interne); stringhe deallocate: 1076 (37616 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.777504929836236 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1087 (37846 interne); stringhe deallocate: 1077 (37636 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1087 (37846 interne); stringhe deallocate: 1077 (37646 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5220775073215195 0.7445722584256712 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9974879573850254 0.9999930862007382 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772626888e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1088 (37896 interne); stringhe deallocate: 1078 (37686 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470233349977e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953448 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1089 (37916 interne); stringhe deallocate: 1079 (37706 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.60000e+000: 5.15501e-001
Calcolo la funzione ext_fun2 in 2.60000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602285866e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953448 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7774842997171519


ris (2 : 2): [ -1 0.7774842997171519 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1089 (37941 interne); stringhe deallocate: 1079 (37731 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.60000e+000: 5.15501e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95029080425322e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953448 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1090 (37966 interne); stringhe deallocate: 1080 (37756 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7774839490013328 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953448 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1091 (37986 interne); stringhe deallocate: 1081 (37776 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1091 (37986 interne); stringhe deallocate: 1081 (37786 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5155013718214642 0.7380170721043122 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9971548104929853 0.9999921183975784 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950314914656737e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1092 (38036 interne); stringhe deallocate: 1082 (37826 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826133345e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954056 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1093 (38056 interne); stringhe deallocate: 1083 (37846 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.55000e+000: 5.57684e-001
Calcolo la funzione ext_fun2 in 2.55000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772627441e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954056 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7776210312373599


ris (2 : 2): [ -1 0.7776210312373599 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1093 (38081 interne); stringhe deallocate: 1083 (37871 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.55000e+000: 5.57684e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950316495666804e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954056 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1094 (38106 interne); stringhe deallocate: 1084 (37896 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7776208012656598 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954056 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1095 (38126 interne); stringhe deallocate: 1085 (37916 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1095 (38126 interne); stringhe deallocate: 1085 (37926 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.557683717391417 0.7800626861540571 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9987212540941463 0.999996598543405 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950280527687786e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1096 (38176 interne); stringhe deallocate: 1086 (37966 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772627955e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953304 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1097 (38196 interne); stringhe deallocate: 1087 (37986 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.60000e+000: 5.15501e-001
Calcolo la funzione ext_fun2 in 2.60000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772627157e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953304 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7774853562872293


ris (2 : 2): [ -1 0.7774853562872293 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1097 (38221 interne); stringhe deallocate: 1087 (38011 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.60000e+000: 5.15501e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950282108697853e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953304 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1098 (38246 interne); stringhe deallocate: 1088 (38036 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7774849026756359 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79953304 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1099 (38266 interne); stringhe deallocate: 1089 (38056 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1099 (38266 interne); stringhe deallocate: 1089 (38066 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5155013718214642 0.7380160155342349 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9971548104929853 0.9999921182311441 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410018472e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425240 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1100 (38316 interne); stringhe deallocate: 1090 (38106 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277262801e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955200 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1101 (38336 interne); stringhe deallocate: 1091 (38126 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.60000e+000: 5.15501e-001
Calcolo la funzione ext_fun2 in 2.60000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380527596e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954816 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7774853562872293


ris (2 : 2): [ -1 0.7774853562872293 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1101 (38361 interne); stringhe deallocate: 1091 (38151 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.60000e+000: 5.15501e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903048020099e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954816 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1102 (38386 interne); stringhe deallocate: 1092 (38176 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7774849026756403 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954816 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1103 (38406 interne); stringhe deallocate: 1093 (38196 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1103 (38406 interne); stringhe deallocate: 1093 (38206 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5155013718214642 0.7380160155342349 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9971548104929853 0.9999921182311441 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1104 (38456 interne); stringhe deallocate: 1094 (38246 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.983147550763252e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954656 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1105 (38476 interne); stringhe deallocate: 1095 (38266 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.62500e+000: 4.93920e-001
Calcolo la funzione ext_fun2 in 2.62500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361951112e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954656 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7774196062182527


ris (2 : 2): [ -1 0.7774196062182527 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1105 (38501 interne); stringhe deallocate: 1095 (38291 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.62500e+000: 4.93920e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950312543141637e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954656 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1106 (38526 interne); stringhe deallocate: 1096 (38316 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7774195759846601 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954656 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1107 (38546 interne); stringhe deallocate: 1097 (38336 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1107 (38546 interne); stringhe deallocate: 1097 (38346 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.4939202986100892 0.7165006923918365 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9957208512649817 0.9999878836586553 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.456054892798357e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1108 (38596 interne); stringhe deallocate: 1098 (38386 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772628129e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955144 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1109 (38616 interne); stringhe deallocate: 1099 (38406 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.63750e+000: 4.83013e-001
Calcolo la funzione ext_fun2 in 2.63750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842550506152458e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955144 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7773888974050862


ris (2 : 2): [ -1 0.7773888974050862 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1109 (38641 interne); stringhe deallocate: 1099 (38431 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.63750e+000: 4.83013e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950176181023385e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955144 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1110 (38666 interne); stringhe deallocate: 1100 (38456 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7773885815696984 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955144 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1111 (38686 interne); stringhe deallocate: 1101 (38476 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1111 (38686 interne); stringhe deallocate: 1101 (38486 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.4830131548613654 0.7056242574562792 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9947427735993596 0.9999849417147422 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950178947791001e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1112 (38736 interne); stringhe deallocate: 1102 (38526 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772628453e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954760 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1113 (38756 interne); stringhe deallocate: 1103 (38546 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.69231e+000: 4.34322e-001
Calcolo la funzione ext_fun2 in 2.69231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772627939e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954760 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7772548696110403


ris (2 : 2): [ -1 0.7772548696110403 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1113 (38781 interne); stringhe deallocate: 1103 (38571 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.69231e+000: 4.34322e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95031926243442e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954760 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1114 (38806 interne); stringhe deallocate: 1104 (38596 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7772545903282797 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954760 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1115 (38826 interne); stringhe deallocate: 1105 (38616 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1115 (38826 interne); stringhe deallocate: 1105 (38626 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.4343215684298284 0.6570666988187881 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9868981161946548 0.9999602599722586 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950333886777537e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1116 (38876 interne); stringhe deallocate: 1106 (38666 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772627821e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1117 (38896 interne); stringhe deallocate: 1107 (38686 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.70000e+000: 4.27380e-001
Calcolo la funzione ext_fun2 in 2.70000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772626105e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7772362361853227


ris (2 : 2): [ -1 0.7772362361853227 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1117 (38921 interne); stringhe deallocate: 1107 (38711 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.70000e+000: 4.27380e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950335467787604e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1118 (38946 interne); stringhe deallocate: 1108 (38736 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7772359936790387 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1119 (38966 interne); stringhe deallocate: 1109 (38756 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1119 (38966 interne); stringhe deallocate: 1109 (38766 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.4273798802338298 0.6501436440485071 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9850937331866245 0.999954363319962 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772628485e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1120 (39016 interne); stringhe deallocate: 1110 (38806 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470234772886e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1121 (39036 interne); stringhe deallocate: 1111 (38826 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.65000e+000: 4.72031e-001
Calcolo la funzione ext_fun2 in 2.65000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602288277e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7773578532024849


ris (2 : 2): [ -1 0.7773578532024849 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1121 (39061 interne); stringhe deallocate: 1111 (38851 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.65000e+000: 4.72031e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95030384758627e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1122 (39086 interne); stringhe deallocate: 1112 (38876 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7773575871544409 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1123 (39106 interne); stringhe deallocate: 1113 (38896 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1123 (39106 interne); stringhe deallocate: 1113 (38906 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.4720305412898823 0.6946726880873975 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9935343270876277 0.9999812573516861 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950329143747337e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1124 (39156 interne); stringhe deallocate: 1114 (38946 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826133295e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955216 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1125 (39176 interne); stringhe deallocate: 1115 (38966 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.70000e+000: 4.27380e-001
Calcolo la funzione ext_fun2 in 2.70000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772628113e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955216 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7772371759605919


ris (2 : 2): [ -1 0.7772371759605919 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1125 (39201 interne); stringhe deallocate: 1115 (38991 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.70000e+000: 4.27380e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950330724757404e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955216 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1126 (39226 interne); stringhe deallocate: 1116 (39016 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.777236947353277 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955216 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1127 (39246 interne); stringhe deallocate: 1117 (39036 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1127 (39246 interne); stringhe deallocate: 1117 (39046 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.4273798802338298 0.6501427042732378 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9850937331866245 0.9999543624628661 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950267484354736e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1128 (39296 interne); stringhe deallocate: 1118 (39086 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772628643e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952456 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1129 (39316 interne); stringhe deallocate: 1119 (39106 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.70000e+000: 4.27380e-001
Calcolo la funzione ext_fun2 in 2.70000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772628437e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952456 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7772371759605919


ris (2 : 2): [ -1 0.7772371759605919 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1129 (39341 interne); stringhe deallocate: 1119 (39131 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.70000e+000: 4.27380e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950269065364803e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952456 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1130 (39366 interne); stringhe deallocate: 1120 (39156 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7772369473534475 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79952456 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1131 (39386 interne); stringhe deallocate: 1121 (39176 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1131 (39386 interne); stringhe deallocate: 1121 (39186 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.4273798802338298 0.6501427042732378 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9850937331866245 0.9999543624628661 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950343372837937e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1132 (39436 interne); stringhe deallocate: 1122 (39226 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772627054e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955080 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1133 (39456 interne); stringhe deallocate: 1123 (39246 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.72500e+000: 4.04647e-001
Calcolo la funzione ext_fun2 in 2.72500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772627805e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955080 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7771786940007998


ris (2 : 2): [ -1 0.7771786940007998 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1133 (39481 interne); stringhe deallocate: 1123 (39271 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.72500e+000: 4.04647e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950344953848004e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955080 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1134 (39506 interne); stringhe deallocate: 1124 (39296 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.77717829638281 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955080 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1135 (39526 interne); stringhe deallocate: 1125 (39316 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1135 (39526 interne); stringhe deallocate: 1125 (39326 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.4046468817077021 0.6274681877069024 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9773281144461907 0.9999282024415437 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950263927082086e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1136 (39576 interne); stringhe deallocate: 1126 (39366 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772628556e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955872 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1137 (39596 interne); stringhe deallocate: 1127 (39386 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.73750e+000: 3.93185e-001
Calcolo la funzione ext_fun2 in 2.73750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772628342e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955872 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7771513797849392


ris (2 : 2): [ -1 0.7771513797849392 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1137 (39621 interne); stringhe deallocate: 1127 (39411 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.73750e+000: 3.93185e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950265508092153e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955872 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1138 (39646 interne); stringhe deallocate: 1128 (39436 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7771511166649612 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955872 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1139 (39666 interne); stringhe deallocate: 1129 (39456 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1139 (39666 interne); stringhe deallocate: 1129 (39466 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3931846540311468 0.6160332742462076 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9720563868762397 0.9999097710990035 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772628453e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1140 (39716 interne); stringhe deallocate: 1130 (39506 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.41947023856731e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955040 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1141 (39736 interne); stringhe deallocate: 1131 (39526 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.79231e+000: 3.42226e-001
Calcolo la funzione ext_fun2 in 2.79231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602286886e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955040 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7770321676200785


ris (2 : 2): [ -1 0.7770321676200785 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1141 (39761 interne); stringhe deallocate: 1131 (39551 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.79231e+000: 3.42226e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950340606070321e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955040 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1142 (39786 interne); stringhe deallocate: 1132 (39576 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7770319073754735 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955040 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1143 (39806 interne); stringhe deallocate: 1133 (39596 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1143 (39806 interne); stringhe deallocate: 1133 (39606 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3422260319940093 0.5651938643739307 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9314434198180336 0.9997508450794941 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950367087988938e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1144 (39856 interne); stringhe deallocate: 1134 (39646 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826133268e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1145 (39876 interne); stringhe deallocate: 1135 (39666 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.80000e+000: 3.34988e-001
Calcolo la funzione ext_fun2 in 2.80000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772628627e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7770155939606046


ris (2 : 2): [ -1 0.7770155939606046 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1145 (39901 interne); stringhe deallocate: 1135 (39691 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.80000e+000: 3.34988e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950368668999005e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1146 (39926 interne); stringhe deallocate: 1136 (39716 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7770152180746965 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1147 (39946 interne); stringhe deallocate: 1137 (39736 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1147 (39946 interne); stringhe deallocate: 1137 (39746 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3349881501559047 0.5579725561953001 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9225997274523758 0.9997121864974886 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950260369809436e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1148 (39996 interne); stringhe deallocate: 1138 (39786 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772627678e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1149 (40016 interne); stringhe deallocate: 1139 (39806 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.75000e+000: 3.81661e-001
Calcolo la funzione ext_fun2 in 2.75000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772627038e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7771237672540845


ris (2 : 2): [ -1 0.7771237672540845 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1149 (40041 interne); stringhe deallocate: 1139 (39831 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.75000e+000: 3.81661e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950261950819503e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1150 (40066 interne); stringhe deallocate: 1140 (39856 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7771234601096868 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1151 (40086 interne); stringhe deallocate: 1141 (39876 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1151 (40086 interne); stringhe deallocate: 1141 (39886 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3816609920523317 0.6045372247982472 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9655921243495905 0.9998864708429854 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772627125e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1152 (40136 interne); stringhe deallocate: 1142 (39926 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470238923038e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955824 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1153 (40156 interne); stringhe deallocate: 1143 (39946 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.80000e+000: 3.34988e-001
Calcolo la funzione ext_fun2 in 2.80000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602288317e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955824 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7770164298517355


ris (2 : 2): [ -1 0.7770164298517355 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1153 (40181 interne); stringhe deallocate: 1143 (39971 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.80000e+000: 3.34988e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95029673304097e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955824 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1154 (40206 interne); stringhe deallocate: 1144 (39996 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7770161717492607 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955824 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1155 (40226 interne); stringhe deallocate: 1145 (40016 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1155 (40226 interne); stringhe deallocate: 1145 (40026 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3349881501559047 0.5579717203041692 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9225997274523758 0.9997121816923282 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950370645261588e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1156 (40276 interne); stringhe deallocate: 1146 (40066 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826133748e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1157 (40296 interne); stringhe deallocate: 1147 (40086 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.80000e+000: 3.34988e-001
Calcolo la funzione ext_fun2 in 2.80000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772629101e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7770164298517355


ris (2 : 2): [ -1 0.7770164298517355 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1157 (40321 interne); stringhe deallocate: 1147 (40111 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.80000e+000: 3.34988e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950372226271655e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1158 (40346 interne); stringhe deallocate: 1148 (40136 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7770161717492981 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1159 (40366 interne); stringhe deallocate: 1149 (40156 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1159 (40366 interne); stringhe deallocate: 1149 (40166 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3349881501559047 0.5579717203041692 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9225997274523758 0.9997121816923282 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410018077e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425256 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1160 (40416 interne); stringhe deallocate: 1150 (40206 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277262956e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955784 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1161 (40436 interne); stringhe deallocate: 1151 (40226 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.82500e+000: 3.11330e-001
Calcolo la funzione ext_fun2 in 2.82500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380526963e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7769644125736646


ris (2 : 2): [ -1 0.7769644125736646 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1161 (40461 interne); stringhe deallocate: 1151 (40251 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.82500e+000: 3.11330e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903048021858e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1162 (40486 interne); stringhe deallocate: 1152 (40276 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7769641964990566 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1163 (40506 interne); stringhe deallocate: 1153 (40296 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1163 (40506 interne); stringhe deallocate: 1153 (40306 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3113303669217671 0.5343659543481025 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.8867245211258045 0.9995388515201655 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1164 (40556 interne); stringhe deallocate: 1154 (40346 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826133805e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955768 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1165 (40576 interne); stringhe deallocate: 1155 (40366 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.83750e+000: 2.99428e-001
Calcolo la funzione ext_fun2 in 2.83750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380528683e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955512 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7769401177113385


ris (2 : 2): [ -1 0.7769401177113385 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1165 (40601 interne); stringhe deallocate: 1155 (40391 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.83750e+000: 2.99428e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903048023464e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955512 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1166 (40626 interne); stringhe deallocate: 1156 (40416 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.776939877803903 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79955512 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1167 (40646 interne); stringhe deallocate: 1157 (40436 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1167 (40646 interne); stringhe deallocate: 1157 (40446 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2994275821074158 0.5224874643960773 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.8643010898320858 0.999415450665855 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842584379079487e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1168 (40696 interne); stringhe deallocate: 1158 (40486 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826133492e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956784 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1169 (40716 interne); stringhe deallocate: 1159 (40506 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.89231e+000: 2.46711e-001
Calcolo la funzione ext_fun2 in 2.89231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380530732e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956000 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.776834083434255


ris (2 : 2): [ -1 0.776834083434255 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1169 (40741 interne); stringhe deallocate: 1159 (40531 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.89231e+000: 2.46711e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304802225e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956000 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1170 (40766 interne); stringhe deallocate: 1160 (40556 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7768340199549257 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956000 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1171 (40786 interne); stringhe deallocate: 1161 (40576 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1171 (40786 interne); stringhe deallocate: 1161 (40586 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2467110861713918 0.4698770027371368 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.7322018674287109 0.9983312805861081 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652282944798e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1172 (40836 interne); stringhe deallocate: 1162 (40626 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772630121e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1173 (40856 interne); stringhe deallocate: 1163 (40646 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.90000e+000: 2.39249e-001
Calcolo la funzione ext_fun2 in 2.90000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842550506154592e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7768193418514391


ris (2 : 2): [ -1 0.7768193418514391 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1173 (40881 interne); stringhe deallocate: 1163 (40671 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.90000e+000: 2.39249e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950416099301005e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1174 (40906 interne); stringhe deallocate: 1164 (40696 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7768192380030277 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1175 (40926 interne); stringhe deallocate: 1165 (40716 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1175 (40926 interne); stringhe deallocate: 1165 (40726 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.239249329213982 0.4624299873625429 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.7105998197165455 0.998064676577107 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361951278e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1176 (40976 interne); stringhe deallocate: 1166 (40766 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772630263e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954880 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1177 (40996 interne); stringhe deallocate: 1167 (40786 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.85000e+000: 2.87478e-001
Calcolo la funzione ext_fun2 in 2.85000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772626983e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954880 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7769155575101958


ris (2 : 2): [ -1 0.7769155575101958 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1177 (41021 interne); stringhe deallocate: 1167 (40811 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.85000e+000: 2.87478e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950418866068622e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954880 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1178 (41046 interne); stringhe deallocate: 1168 (40836 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7769155591090007 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79954880 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1179 (41066 interne); stringhe deallocate: 1169 (40856 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1179 (41066 interne); stringhe deallocate: 1169 (40866 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.287478012342544 0.5105624548323482 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.8387602107182548 0.9992583971775519 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950420842331205e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425240 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1180 (41116 interne); stringhe deallocate: 1170 (40906 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772629054e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956408 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1181 (41136 interne); stringhe deallocate: 1171 (40926 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.90000e+000: 2.39249e-001
Calcolo la funzione ext_fun2 in 2.90000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380530935e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957552 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7768200853419367


ris (2 : 2): [ -1 0.7768200853419367 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1181 (41161 interne); stringhe deallocate: 1171 (40951 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.90000e+000: 2.39249e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903048024615e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957552 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1182 (41186 interne); stringhe deallocate: 1172 (40976 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7768197148400642 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957552 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1183 (41206 interne); stringhe deallocate: 1173 (40996 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1183 (41206 interne); stringhe deallocate: 1173 (41006 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.239249329213982 0.4624292438720453 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.7105998197165455 0.9980646479476837 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602289898e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1184 (41256 interne); stringhe deallocate: 1174 (41046 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277263039e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1185 (41276 interne); stringhe deallocate: 1175 (41066 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.90000e+000: 2.39249e-001
Calcolo la funzione ext_fun2 in 2.90000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410017365e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7768200853419367


ris (2 : 2): [ -1 0.7768200853419367 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1185 (41301 interne); stringhe deallocate: 1175 (41091 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.90000e+000: 2.39249e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950364716473838e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1186 (41326 interne); stringhe deallocate: 1176 (41116 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7768197148402161 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1187 (41346 interne); stringhe deallocate: 1177 (41136 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1187 (41346 interne); stringhe deallocate: 1177 (41146 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.239249329213982 0.4624292438720453 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.7105998197165455 0.9980646479476837 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842550506155351e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1188 (41396 interne); stringhe deallocate: 1178 (41186 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772630232e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1189 (41416 interne); stringhe deallocate: 1179 (41206 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.92500e+000: 2.14903e-001
Calcolo la funzione ext_fun2 in 2.92500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842686313885815e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7767738181301755


ris (2 : 2): [ -1 0.7767738181301755 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1189 (41441 interne); stringhe deallocate: 1179 (41231 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.92500e+000: 2.14903e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950432304654189e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1190 (41466 interne); stringhe deallocate: 1180 (41256 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7767734616358526 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1191 (41486 interne); stringhe deallocate: 1181 (41276 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1191 (41486 interne); stringhe deallocate: 1181 (41286 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2149031420216867 0.4381293238915112 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.6400174269729386 0.9968633530151867 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.8413027726302e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1192 (41536 interne); stringhe deallocate: 1182 (41326 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277262971e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1193 (41556 interne); stringhe deallocate: 1183 (41346 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.93750e+000: 2.02679e-001
Calcolo la funzione ext_fun2 in 2.93750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950425190108889e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7767522088576102


ris (2 : 2): [ -1 0.7767522088576102 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1193 (41581 interne); stringhe deallocate: 1183 (41371 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.93750e+000: 2.02679e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950424399603855e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1194 (41606 interne); stringhe deallocate: 1184 (41396 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7767520039636748 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1195 (41626 interne); stringhe deallocate: 1185 (41416 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1195 (41626 interne); stringhe deallocate: 1185 (41426 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2026787287608671 0.4259265199032569 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.606183584779217 0.9960050246117174 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950396731927688e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1196 (41676 interne); stringhe deallocate: 1186 (41466 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772629599e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957480 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1197 (41696 interne); stringhe deallocate: 1187 (41486 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.99231e+000: 1.48731e-001
Calcolo la funzione ext_fun2 in 2.99231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772628208e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957480 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7766578957652359


ris (2 : 2): [ -1 0.7766578957652359 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1197 (41721 interne); stringhe deallocate: 1187 (41511 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.99231e+000: 1.48731e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950398312937755e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957480 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1198 (41746 interne); stringhe deallocate: 1188 (41536 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7766575902063382 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957480 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1199 (41766 interne); stringhe deallocate: 1189 (41556 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1199 (41766 interne); stringhe deallocate: 1189 (41566 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1487310847275928 0.3720731889623569 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4883048286261359 0.98848538730488 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772629544e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1200 (41816 interne); stringhe deallocate: 1190 (41606 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602290167e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956952 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1201 (41836 interne); stringhe deallocate: 1191 (41626 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.00000e+000: 1.41120e-001
Calcolo la funzione ext_fun2 in 3.00000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950364716473838e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 0 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7766447837386339


ris (2 : 2): [ -1 0.7766447837386339 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1201 (41861 interne); stringhe deallocate: 1191 (41651 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.00000e+000: 1.41120e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950418866068622e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 0 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1202 (41886 interne); stringhe deallocate: 1192 (41676 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7766447156031555 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 0 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1203 (41906 interne); stringhe deallocate: 1193 (41696 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1203 (41906 interne); stringhe deallocate: 1193 (41706 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1411200080598672 0.3644752243212334 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4765078408781355 0.9866554972502608 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.052941956760758e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425256 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1204 (41956 interne); stringhe deallocate: 1194 (41746 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772629418e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957856 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1205 (41976 interne); stringhe deallocate: 1195 (41766 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.95000e+000: 1.90423e-001
Calcolo la funzione ext_fun2 in 2.95000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842550506155304e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957856 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7767303635771706


ris (2 : 2): [ -1 0.7767303635771706 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1205 (42001 interne); stringhe deallocate: 1195 (41791 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 2.95000e+000: 1.90423e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950432304654189e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957856 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1206 (42026 interne); stringhe deallocate: 1196 (41816 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7767300694543646 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957856 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1207 (42046 interne); stringhe deallocate: 1197 (41836 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1207 (42046 interne); stringhe deallocate: 1197 (41846 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.190422647361027 0.4136922837838564 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.5744087436270218 0.9949114499529301 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.053685918527618e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1208 (42096 interne); stringhe deallocate: 1198 (41886 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772631275e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956016 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1209 (42116 interne); stringhe deallocate: 1199 (41906 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.00000e+000: 1.41120e-001
Calcolo la funzione ext_fun2 in 3.00000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470241452654e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956016 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7766454450426


ris (2 : 2): [ -1 0.7766454450426 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1209 (42141 interne); stringhe deallocate: 1199 (41931 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.00000e+000: 1.41120e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950383688594638e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956016 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1210 (42166 interne); stringhe deallocate: 1200 (41956 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7766451924404132 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956016 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1211 (42186 interne); stringhe deallocate: 1201 (41976 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1211 (42186 interne); stringhe deallocate: 1201 (41986 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1411200080598672 0.3644745630172672 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4765078408781355 0.9866553263304507 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95047499192599e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1212 (42236 interne); stringhe deallocate: 1202 (42026 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826133936e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957480 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1213 (42256 interne); stringhe deallocate: 1203 (42046 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.00000e+000: 1.41120e-001
Calcolo la funzione ext_fun2 in 3.00000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.4194702408993e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957480 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7766454450426


ris (2 : 2): [ -1 0.7766454450426 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1213 (42281 interne); stringhe deallocate: 1203 (42071 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.00000e+000: 1.41120e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950476572936056e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957480 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1214 (42306 interne); stringhe deallocate: 1204 (42096 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7766451924403279 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957480 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1215 (42326 interne); stringhe deallocate: 1205 (42116 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1215 (42326 interne); stringhe deallocate: 1205 (42126 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1411200080598672 0.3644745630172672 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4765078408781355 0.9866553263304507 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950437047684389e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1216 (42376 interne); stringhe deallocate: 1206 (42166 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772624453e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958536 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1217 (42396 interne); stringhe deallocate: 1207 (42186 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.02500e+000: 1.16329e-001
Calcolo la funzione ext_fun2 in 3.02500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772630619e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958536 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7766042922763744


ris (2 : 2): [ -1 0.7766042922763744 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1217 (42421 interne); stringhe deallocate: 1207 (42211 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.02500e+000: 1.16329e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950438628694456e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958536 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1218 (42446 interne); stringhe deallocate: 1208 (42236 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7766041844440412 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958536 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1219 (42466 interne); stringhe deallocate: 1209 (42256 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1219 (42466 interne); stringhe deallocate: 1209 (42266 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1163286759640601 0.3397243836876857 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4456618496769214 0.9785402482481163 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772630358e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1220 (42516 interne); stringhe deallocate: 1210 (42306 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.41947021568219e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957368 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1221 (42536 interne); stringhe deallocate: 1211 (42326 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.03750e+000: 1.03905e-001
Calcolo la funzione ext_fun2 in 3.03750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842686313885111e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957368 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7765850717245335


ris (2 : 2): [ -1 0.7765850717245335 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1221 (42561 interne); stringhe deallocate: 1211 (42351 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.03750e+000: 1.03905e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950135470014167e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957368 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1222 (42586 interne); stringhe deallocate: 1212 (42376 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7765846341205647 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957368 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1223 (42606 interne); stringhe deallocate: 1213 (42396 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1223 (42606 interne); stringhe deallocate: 1213 (42406 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1039047765532198 0.3273197048286863 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4340113578252353 0.972881849937465 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950138236781784e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1224 (42656 interne); stringhe deallocate: 1214 (42446 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772624382e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1225 (42676 interne); stringhe deallocate: 1215 (42466 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.09231e+000: 4.92650e-002
Calcolo la funzione ext_fun2 in 3.09231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772631259e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7765011841398972


ris (2 : 2): [ -1 0.7765011841398972 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1225 (42701 interne); stringhe deallocate: 1215 (42491 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.09231e+000: 4.92650e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950139817791851e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1226 (42726 interne); stringhe deallocate: 1216 (42516 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7765011876178614 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1227 (42746 interne); stringhe deallocate: 1217 (42536 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1227 (42746 interne); stringhe deallocate: 1217 (42546 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.04926501144915527 0.2727638273092581 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4036220556989123 0.9282261557196782 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277263039e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425272 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1228 (42796 interne); stringhe deallocate: 1218 (42586 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470248883401e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956656 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1229 (42816 interne); stringhe deallocate: 1219 (42606 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.10000e+000: 4.15807e-002
Calcolo la funzione ext_fun2 in 3.10000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602290277e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956656 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7764895215359718


ris (2 : 2): [ -1 0.7764895215359718 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1229 (42841 interne); stringhe deallocate: 1219 (42631 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.10000e+000: 4.15807e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950131912741517e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956656 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1230 (42866 interne); stringhe deallocate: 1220 (42656 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7764892666896701 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79956656 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1231 (42886 interne); stringhe deallocate: 1221 (42676 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1231 (42886 interne); stringhe deallocate: 1221 (42686 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.04158066243329049 0.2650911408973187 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4012294009685564 0.9185762323456023 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950470248895789e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1232 (42936 interne); stringhe deallocate: 1222 (42726 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772631702e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1233 (42956 interne); stringhe deallocate: 1223 (42746 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.05000e+000: 9.14646e-002
Calcolo la funzione ext_fun2 in 3.05000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772624437e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7765656412534754


ris (2 : 2): [ -1 0.7765656412534754 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1233 (42981 interne); stringhe deallocate: 1223 (42771 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.05000e+000: 9.14646e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950471829905856e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1234 (43006 interne); stringhe deallocate: 1224 (42796 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7765655606350412 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1235 (43026 interne); stringhe deallocate: 1225 (42816 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1235 (43026 interne); stringhe deallocate: 1225 (42826 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.09146464223243719 0.3148990009789618 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4244497569275105 0.9658456784070844 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95049633556189e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1236 (43076 interne); stringhe deallocate: 1226 (42866 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826133972e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957768 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1237 (43096 interne); stringhe deallocate: 1227 (42886 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.10000e+000: 4.15807e-002
Calcolo la funzione ext_fun2 in 3.10000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772624524e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957768 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7764901097384265


ris (2 : 2): [ -1 0.7764901097384265 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1237 (43121 interne); stringhe deallocate: 1227 (42911 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.10000e+000: 4.15807e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950497916571957e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957768 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1238 (43146 interne); stringhe deallocate: 1228 (42936 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.776489743526775 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957768 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1239 (43166 interne); stringhe deallocate: 1229 (42956 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1239 (43166 interne); stringhe deallocate: 1229 (42966 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.04158066243329049 0.265090552694864 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4012294009685564 0.9185754558033679 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950446533744789e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1240 (43216 interne); stringhe deallocate: 1230 (43006 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826134052e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951600 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1241 (43236 interne); stringhe deallocate: 1231 (43026 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.10000e+000: 4.15807e-002
Calcolo la funzione ext_fun2 in 3.10000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772624366e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951600 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7764901097384265


ris (2 : 2): [ -1 0.7764901097384265 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1241 (43261 interne); stringhe deallocate: 1231 (43051 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.10000e+000: 4.15807e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950448114754856e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951600 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1242 (43286 interne); stringhe deallocate: 1232 (43076 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.776489743526823 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951600 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1243 (43306 interne); stringhe deallocate: 1233 (43096 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1243 (43306 interne); stringhe deallocate: 1233 (43106 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.04158066243329049 0.265090552694864 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4012294009685564 0.9185754558033679 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950467877380689e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1244 (43356 interne); stringhe deallocate: 1234 (43146 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772631402e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957960 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1245 (43376 interne); stringhe deallocate: 1235 (43166 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.12500e+000: 1.65919e-002
Calcolo la funzione ext_fun2 in 3.12500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772631165e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957960 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7764535060594158


ris (2 : 2): [ -1 0.7764535060594158 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1245 (43401 interne); stringhe deallocate: 1235 (43191 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.12500e+000: 1.65919e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950469458390756e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957960 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1246 (43426 interne); stringhe deallocate: 1236 (43216 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7764535039028297 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957960 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1247 (43446 interne); stringhe deallocate: 1237 (43236 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1247 (43446 interne); stringhe deallocate: 1237 (43246 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.01659189222934791 0.2401383861699321 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3953987860912088 0.8805109532381181 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277262454e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1248 (43496 interne); stringhe deallocate: 1238 (43286 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470248171947e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951560 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1249 (43516 interne); stringhe deallocate: 1239 (43306 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.13750e+000: 4.09264e-003
Calcolo la funzione ext_fun2 in 3.13750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602291463e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951560 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7764364101756025


ris (2 : 2): [ -1 0.7764364101756025 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1249 (43541 interne); stringhe deallocate: 1239 (43331 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.13750e+000: 4.09264e-003

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950482896976323e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951560 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1250 (43566 interne); stringhe deallocate: 1240 (43356 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7764363377650936 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79951560 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1251 (43586 interne); stringhe deallocate: 1241 (43376 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1251 (43586 interne); stringhe deallocate: 1241 (43386 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.004092642164605302 0.2276562319890028 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3933445681843472 0.8578136451821121 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950463134350489e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1252 (43636 interne); stringhe deallocate: 1242 (43426 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826134178e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958440 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1253 (43656 interne); stringhe deallocate: 1243 (43446 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.19231e+000: -5.06933e-002
Calcolo la funzione ext_fun2 in 3.19231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277263069e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958440 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7763617956477681


ris (2 : 2): [ -1 0.7763617956477681 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1253 (43681 interne); stringhe deallocate: 1243 (43471 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.19231e+000: -5.06933e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950464715360556e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958440 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1254 (43706 interne); stringhe deallocate: 1244 (43496 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.776361474331341 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958440 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1255 (43726 interne); stringhe deallocate: 1245 (43516 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1255 (43726 interne); stringhe deallocate: 1245 (43526 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9493066984611656 0.1729449028133974 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999992539393108 0.7434502901844582 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.8426184100218e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425240 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1256 (43776 interne); stringhe deallocate: 1246 (43566 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842550506156221e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958968 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1257 (43796 interne); stringhe deallocate: 1247 (43586 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.20000e+000: -5.83741e-002
Calcolo la funzione ext_fun2 in 3.20000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950502659602157e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958968 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7763514222452081


ris (2 : 2): [ -1 0.7763514222452081 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1257 (43821 interne); stringhe deallocate: 1247 (43611 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.20000e+000: -5.83741e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.840818957591425e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 0 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1258 (43846 interne); stringhe deallocate: 1248 (43636 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903048026006e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 0 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1259 (43866 interne); stringhe deallocate: 1249 (43656 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1259 (43866 interne); stringhe deallocate: 1249 (43666 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9416258565724199 0.1652744343272118 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999991365842693 0.7277692422813957 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84268623727394e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1260 (43916 interne); stringhe deallocate: 1250 (43706 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772632255e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959032 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1261 (43936 interne); stringhe deallocate: 1251 (43726 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.15000e+000: -8.40725e-003
Calcolo la funzione ext_fun2 in 3.15000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380531567e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958968 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7764191275773504


ris (2 : 2): [ -1 0.7764191275773504 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1261 (43961 interne); stringhe deallocate: 1251 (43751 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.15000e+000: -8.40725e-003

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903048026006e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958968 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1262 (43986 interne); stringhe deallocate: 1252 (43776 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7764186947901894 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958968 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1263 (44006 interne); stringhe deallocate: 1253 (43796 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1263 (44006 interne); stringhe deallocate: 1253 (43806 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.991592752632851 0.2151736250555005 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999996662049269 0.8331110119211385 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1264 (44056 interne); stringhe deallocate: 1254 (43846 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772632168e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957824 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1265 (44076 interne); stringhe deallocate: 1255 (43866 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.20000e+000: -5.83741e-002
Calcolo la funzione ext_fun2 in 3.20000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410021421e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957824 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7763519454268996


ris (2 : 2): [ -1 0.7763519454268996 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1265 (44101 interne); stringhe deallocate: 1255 (43891 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.20000e+000: -5.83741e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950442185967106e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957824 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1266 (44126 interne); stringhe deallocate: 1256 (43916 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7763519375882186 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957824 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1267 (44146 interne); stringhe deallocate: 1257 (43936 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1267 (44146 interne); stringhe deallocate: 1257 (43946 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9416258565724199 0.1652739111455204 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999991365842693 0.7277681921202966 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842550506157082e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1268 (44196 interne); stringhe deallocate: 1258 (43986 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772631892e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1269 (44216 interne); stringhe deallocate: 1259 (44006 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.12099e+000: 2.06058e-002
Calcolo la funzione ext_fun2 in 3.12099e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.41947025188732e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7764593840188439


ris (2 : 2): [ -1 0.7764593840188439 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1269 (44241 interne); stringhe deallocate: 1259 (44031 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.12099e+000: 2.06058e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95052123647044e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1270 (44266 interne); stringhe deallocate: 1260 (44056 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7764592259487833 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1271 (44286 interne); stringhe deallocate: 1261 (44076 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1271 (44286 interne); stringhe deallocate: 1261 (44086 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.02060579117708185 0.244146407158238 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3961654229294117 0.8873063351123792 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950523212733024e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1272 (44336 interne); stringhe deallocate: 1262 (44126 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277263137e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958648 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1273 (44356 interne); stringhe deallocate: 1263 (44146 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.13148e+000: 1.01144e-002
Calcolo la funzione ext_fun2 in 3.13148e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772631465e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958648 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7764448708989316


ris (2 : 2): [ -1 0.7764448708989316 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1273 (44381 interne); stringhe deallocate: 1263 (44171 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.13148e+000: 1.01144e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950507402632357e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958648 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1274 (44406 interne); stringhe deallocate: 1264 (44196 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7764444439968203 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958648 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1275 (44426 interne); stringhe deallocate: 1265 (44216 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1275 (44426 interne); stringhe deallocate: 1265 (44226 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.01011437522740821 0.2336695043284767 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3942751455609462 0.8690263984822508 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95047973495619e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1276 (44476 interne); stringhe deallocate: 1266 (44266 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772631852e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1277 (44496 interne); stringhe deallocate: 1267 (44286 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.17748e+000: -3.58842e-002
Calcolo la funzione ext_fun2 in 3.17748e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826134035e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7763815321670872


ris (2 : 2): [ -1 0.7763815321670872 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1277 (44521 interne); stringhe deallocate: 1267 (44311 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.17748e+000: -3.58842e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950481315966256e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1278 (44546 interne); stringhe deallocate: 1268 (44336 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7763815014919917 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1279 (44566 interne); stringhe deallocate: 1269 (44356 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1279 (44566 interne); stringhe deallocate: 1269 (44366 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9641157908867972 0.1877342587197101 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999994370794815 0.7748335947636544 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950503845359707e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1280 (44616 interne); stringhe deallocate: 1270 (44406 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826134293e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958392 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1281 (44636 interne); stringhe deallocate: 1271 (44426 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.18394e+000: -4.23363e-002
Calcolo la funzione ext_fun2 in 3.18394e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826134218e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958392 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.776372748690505


ris (2 : 2): [ -1 0.776372748690505 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1281 (44661 interne); stringhe deallocate: 1271 (44451 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.18394e+000: -4.23363e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950505426369773e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958392 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1282 (44686 interne); stringhe deallocate: 1272 (44476 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.776372441586048 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958392 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1283 (44706 interne); stringhe deallocate: 1273 (44496 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1283 (44706 interne); stringhe deallocate: 1273 (44506 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9576636950614202 0.1812909463709153 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999993635810148 0.7610306719870464 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950531513035874e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1284 (44756 interne); stringhe deallocate: 1274 (44546 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772632295e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959120 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1285 (44776 interne); stringhe deallocate: 1275 (44566 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.14197e+000: -3.78154e-004
Calcolo la funzione ext_fun2 in 3.14197e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772632224e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959120 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7764302172807154


ris (2 : 2): [ -1 0.7764302172807154 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1285 (44801 interne); stringhe deallocate: 1275 (44591 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.14197e+000: -3.78154e-004

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95053309404594e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959120 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1286 (44826 interne); stringhe deallocate: 1276 (44616 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7764301388821782 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959120 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1287 (44846 interne); stringhe deallocate: 1277 (44636 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1287 (44846 interne); stringhe deallocate: 1277 (44646 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9996218457276593 0.223191628446944 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999997134783647 0.8491826514694759 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772630587e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1288 (44896 interne); stringhe deallocate: 1278 (44686 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470255958421e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959440 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1289 (44916 interne); stringhe deallocate: 1279 (44706 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.18394e+000: -4.23363e-002
Calcolo la funzione ext_fun2 in 3.18394e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602291131e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959440 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7763730561698574


ris (2 : 2): [ -1 0.7763730561698574 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1289 (44941 interne); stringhe deallocate: 1279 (44731 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.18394e+000: -4.23363e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950527560510707e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959440 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1290 (44966 interne); stringhe deallocate: 1280 (44756 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7763729184232275 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959440 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1291 (44986 interne); stringhe deallocate: 1281 (44776 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1291 (44986 interne); stringhe deallocate: 1281 (44786 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9576636950614202 0.1812906388915629 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999993635810148 0.7610300169703557 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950540999096274e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1292 (45036 interne); stringhe deallocate: 1282 (44826 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826134306e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959160 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1293 (45056 interne); stringhe deallocate: 1283 (44846 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.11826e+000: 2.33328e-002
Calcolo la funzione ext_fun2 in 3.11826e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842686313887546e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959160 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7764633776633584


ris (2 : 2): [ -1 0.7764633776633584 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1293 (45081 interne); stringhe deallocate: 1283 (44871 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.11826e+000: 2.33328e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950542580106341e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959160 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1294 (45106 interne); stringhe deallocate: 1284 (44896 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7764630406461146 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959160 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1295 (45126 interne); stringhe deallocate: 1285 (44916 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1295 (45126 interne); stringhe deallocate: 1285 (44926 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.02333275708758102 0.2468693794242227 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3967194579052429 0.8917779520877163 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950535070308524e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1296 (45176 interne); stringhe deallocate: 1286 (44966 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772629876e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1297 (45196 interne); stringhe deallocate: 1287 (44986 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.12739e+000: 1.42055e-002
Calcolo la funzione ext_fun2 in 3.12739e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277263239e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7764506548275771


ris (2 : 2): [ -1 0.7764506548275771 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1297 (45221 interne); stringhe deallocate: 1287 (45011 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.12739e+000: 1.42055e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950536651318591e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1298 (45246 interne); stringhe deallocate: 1288 (45036 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7764506428797091 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79958632 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1299 (45266 interne); stringhe deallocate: 1289 (45056 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1299 (45266 interne); stringhe deallocate: 1289 (45066 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.01420550749182598 0.2377548526642488 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3949691299493982 0.8763520550621609 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950405032230538e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1300 (45316 interne); stringhe deallocate: 1290 (45106 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826133842e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959608 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1301 (45336 interne); stringhe deallocate: 1291 (45126 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.16741e+000: -2.58178e-002
Calcolo la funzione ext_fun2 in 3.16741e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772632279e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959608 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.77639512122586


ris (2 : 2): [ -1 0.77639512122586 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1301 (45361 interne); stringhe deallocate: 1291 (45151 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.16741e+000: -2.58178e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950406613240605e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959608 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1302 (45386 interne); stringhe deallocate: 1292 (45176 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7763948529322153 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959608 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1303 (45406 interne); stringhe deallocate: 1293 (45196 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1303 (45406 interne); stringhe deallocate: 1293 (45206 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9741821853201111 0.1977870640942512 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.999999535168083 0.7964823102504568 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950412146775839e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1304 (45456 interne); stringhe deallocate: 1294 (45246 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772632975e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959704 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1305 (45476 interne); stringhe deallocate: 1295 (45266 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.17303e+000: -3.14333e-002
Calcolo la funzione ext_fun2 in 3.17303e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277263258e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959704 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7763874260175053


ris (2 : 2): [ -1 0.7763874260175053 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1305 (45501 interne); stringhe deallocate: 1295 (45291 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.17303e+000: -3.14333e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950413727785905e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959704 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1306 (45526 interne); stringhe deallocate: 1296 (45316 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7763872235380163 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959704 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1307 (45546 interne); stringhe deallocate: 1297 (45336 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1307 (45546 interne); stringhe deallocate: 1297 (45346 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9685667167502065 0.1921792907327012 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999994827729493 0.7844082823482906 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950559971217074e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1308 (45596 interne); stringhe deallocate: 1298 (45386 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772633078e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1309 (45616 interne); stringhe deallocate: 1299 (45406 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.13652e+000: 5.07707e-003
Calcolo la funzione ext_fun2 in 3.13652e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772632461e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.776437821000328


ris (2 : 2): [ -1 0.776437821000328 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1309 (45641 interne); stringhe deallocate: 1299 (45431 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.13652e+000: 5.07707e-003

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950561552227141e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1310 (45666 interne); stringhe deallocate: 1300 (45456 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7764377682767973 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1311 (45686 interne); stringhe deallocate: 1301 (45476 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1311 (45686 interne); stringhe deallocate: 1301 (45486 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.005077074065281455 0.2286392530649535 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3934896936753567 0.8596800860048928 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1312 (45736 interne); stringhe deallocate: 1302 (45526 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772632548e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959792 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1313 (45756 interne); stringhe deallocate: 1303 (45546 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.17303e+000: -3.14333e-002
Calcolo la funzione ext_fun2 in 3.17303e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84268631388557e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959792 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7763876276270377


ris (2 : 2): [ -1 0.7763876276270377 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1313 (45781 interne); stringhe deallocate: 1303 (45571 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.17303e+000: -3.14333e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950566690509858e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959792 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1314 (45806 interne); stringhe deallocate: 1304 (45596 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7763872235379683 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959792 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1315 (45826 interne); stringhe deallocate: 1305 (45616 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1315 (45826 interne); stringhe deallocate: 1305 (45626 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9685667167502065 0.1921790891231688 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999994827729493 0.7844078478002545 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410022994e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1316 (45876 interne); stringhe deallocate: 1306 (45666 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.41947025821136e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1317 (45896 interne); stringhe deallocate: 1307 (45686 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.17303e+000: -3.14333e-002
Calcolo la funzione ext_fun2 in 3.17303e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842686313885712e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7763876276270377


ris (2 : 2): [ -1 0.7763876276270377 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1317 (45921 interne); stringhe deallocate: 1307 (45711 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.17303e+000: -3.14333e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950540208591241e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1318 (45946 interne); stringhe deallocate: 1308 (45736 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7763872235380243 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79957264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1319 (45966 interne); stringhe deallocate: 1309 (45756 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1319 (45966 interne); stringhe deallocate: 1309 (45766 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9685667167502065 0.1921790891231688 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999994827729493 0.7844078478002545 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772633014e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1320 (46016 interne); stringhe deallocate: 1310 (45806 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277263284e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959824 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1321 (46036 interne); stringhe deallocate: 1311 (45826 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.17977e+000: -3.81714e-002
Calcolo la funzione ext_fun2 in 3.17977e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772632959e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959824 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7763785654267106


ris (2 : 2): [ -1 0.7763785654267106 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1321 (46061 interne); stringhe deallocate: 1311 (45851 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.17977e+000: -3.81714e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950565109499791e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959824 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1322 (46086 interne); stringhe deallocate: 1312 (45876 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7763781636319953 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959824 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1323 (46106 interne); stringhe deallocate: 1313 (45896 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1323 (46106 interne); stringhe deallocate: 1313 (45906 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9618285927525255 0.1854500273258149 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999994120505996 0.7699254614609329 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772629876e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1324 (46156 interne); stringhe deallocate: 1314 (45946 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470256314148e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959776 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1325 (46176 interne); stringhe deallocate: 1315 (45966 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.18314e+000: -4.15398e-002
Calcolo la funzione ext_fun2 in 3.18314e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602292838e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959776 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7763741148464525


ris (2 : 2): [ -1 0.7763741148464525 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1325 (46201 interne); stringhe deallocate: 1315 (45991 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.18314e+000: -4.15398e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950554832934358e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959776 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1326 (46226 interne); stringhe deallocate: 1316 (46016 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7763738720975519 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959776 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1327 (46246 interne); stringhe deallocate: 1317 (46036 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1327 (46246 interne); stringhe deallocate: 1317 (46046 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9584601623024863 0.1820860474560339 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999993731493315 0.7627258776846926 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950544556368924e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1328 (46296 interne); stringhe deallocate: 1318 (46086 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772633663e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1329 (46316 interne); stringhe deallocate: 1319 (46106 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.19793e+000: -5.63030e-002
Calcolo la funzione ext_fun2 in 3.19793e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772632532e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7763546466313508


ris (2 : 2): [ -1 0.7763546466313508 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1329 (46341 interne); stringhe deallocate: 1319 (46131 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.19793e+000: -5.63030e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950546137378991e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1330 (46366 interne); stringhe deallocate: 1320 (46156 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7763543217741775 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1331 (46386 interne); stringhe deallocate: 1321 (46176 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1331 (46386 interne); stringhe deallocate: 1321 (46186 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9436969727431309 0.1673423261117801 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999991699352202 0.7319420541046582 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950594358186025e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1332 (46436 interne); stringhe deallocate: 1322 (46226 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772634074e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960360 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1333 (46456 interne); stringhe deallocate: 1323 (46246 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.20000e+000: -5.83741e-002
Calcolo la funzione ext_fun2 in 3.20000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277263303e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960360 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7763519362824956


ris (2 : 2): [ -1 0.7763519362824956 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1333 (46481 interne); stringhe deallocate: 1323 (46271 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.20000e+000: -5.83741e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950595939196092e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960360 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1334 (46506 interne); stringhe deallocate: 1324 (46296 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7763519375884327 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960360 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1335 (46526 interne); stringhe deallocate: 1325 (46316 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1335 (46526 interne); stringhe deallocate: 1325 (46326 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9416258565724199 0.1652739202899244 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999991365842693 0.7277682104754581 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410023065e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1336 (46576 interne); stringhe deallocate: 1326 (46366 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772633307e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960560 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1337 (46596 interne); stringhe deallocate: 1327 (46386 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.18652e+000: -4.49078e-002
Calcolo la funzione ext_fun2 in 3.18652e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380534944e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960160 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7763696478697585


ris (2 : 2): [ -1 0.7763696478697585 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1337 (46621 interne); stringhe deallocate: 1327 (46411 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.18652e+000: -4.49078e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903048028245e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960160 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1338 (46646 interne); stringhe deallocate: 1328 (46436 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7763695805631983 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960160 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1339 (46666 interne); stringhe deallocate: 1329 (46456 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1339 (46666 interne); stringhe deallocate: 1329 (46466 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9550922039267704 0.1787225560570119 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999993316801914 0.7555755947413891 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1340 (46716 interne); stringhe deallocate: 1330 (46506 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826134665e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959808 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1341 (46736 interne); stringhe deallocate: 1331 (46526 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.20000e+000: -5.83741e-002
Calcolo la funzione ext_fun2 in 3.20000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361955705e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959808 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7763519454293344


ris (2 : 2): [ -1 0.7763519454293344 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1341 (46761 interne); stringhe deallocate: 1331 (46551 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.20000e+000: -5.83741e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950577362327808e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959808 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1342 (46786 interne); stringhe deallocate: 1332 (46576 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7763519375884664 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79959808 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1343 (46806 interne); stringhe deallocate: 1333 (46596 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1343 (46806 interne); stringhe deallocate: 1333 (46606 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9416258565724199 0.1652739111430855 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999991365842693 0.7277681921154093 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.456054892807362e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1344 (46856 interne); stringhe deallocate: 1334 (46646 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772633963e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961336 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1345 (46876 interne); stringhe deallocate: 1335 (46666 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.20000e+000: -5.83741e-002
Calcolo la funzione ext_fun2 in 3.20000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842550506158734e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961336 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7763519454293344


ris (2 : 2): [ -1 0.7763519454293344 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1345 (46901 interne); stringhe deallocate: 1335 (46691 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.20000e+000: -5.83741e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950631511922592e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961336 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1346 (46926 interne); stringhe deallocate: 1336 (46716 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7763519375884203 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961336 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1347 (46946 interne); stringhe deallocate: 1337 (46736 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1347 (46946 interne); stringhe deallocate: 1337 (46746 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9416258565724199 0.1652739111430855 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999991365842693 0.7277681921154093 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950634278690209e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1348 (46996 interne); stringhe deallocate: 1338 (46786 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772633892e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960104 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1349 (47016 interne); stringhe deallocate: 1339 (46806 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.22500e+000: -8.33107e-002
Calcolo la funzione ext_fun2 in 3.22500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772634058e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960104 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7763193879746859


ris (2 : 2): [ -1 0.7763193879746859 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1349 (47041 interne); stringhe deallocate: 1339 (46831 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.22500e+000: -8.33107e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950610958791725e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960104 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1350 (47066 interne); stringhe deallocate: 1340 (46856 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7763190358244962 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960104 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1351 (47086 interne); stringhe deallocate: 1341 (46876 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1351 (47086 interne); stringhe deallocate: 1341 (46886 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9166893277920305 0.1403699398173446 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.999998612598291 0.6817298578231649 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950612935054308e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425240 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1352 (47136 interne); stringhe deallocate: 1342 (46926 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772632137e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1353 (47156 interne); stringhe deallocate: 1343 (46946 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.23750e+000: -9.57604e-002
Calcolo la funzione ext_fun2 in 3.23750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380537082e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7763041818949428


ris (2 : 2): [ -1 0.7763041818949428 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1353 (47181 interne); stringhe deallocate: 1343 (46971 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.23750e+000: -9.57604e-002

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304803042e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1354 (47206 interne); stringhe deallocate: 1344 (46996 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7763037770352348 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1355 (47226 interne); stringhe deallocate: 1345 (47016 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1355 (47226 interne); stringhe deallocate: 1345 (47026 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.9042396154483298 0.127935433553387 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999982419143169 0.6622430846527666 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84248260229374e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1356 (47276 interne); stringhe deallocate: 1346 (47066 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772634832e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962104 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1357 (47296 interne); stringhe deallocate: 1347 (47086 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.29231e+000: -1.50145e-001
Calcolo la funzione ext_fun2 in 3.29231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950582895863041e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962104 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7762378153664478


ris (2 : 2): [ -1 0.7762378153664478 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1357 (47321 interne); stringhe deallocate: 1347 (47111 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.29231e+000: -1.50145e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95051886495534e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962104 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1358 (47346 interne); stringhe deallocate: 1348 (47136 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7762374966705492 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962104 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1359 (47366 interne); stringhe deallocate: 1349 (47156 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1359 (47366 interne); stringhe deallocate: 1349 (47166 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8498548961851742 0.07361708081872642 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999950538118001 0.6055465762668304 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.056514200917927e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1360 (47416 interne); stringhe deallocate: 1350 (47206 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772634097e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961408 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1361 (47436 interne); stringhe deallocate: 1351 (47226 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.30000e+000: -1.57746e-001
Calcolo la funzione ext_fun2 in 3.30000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950610168286692e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961408 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7762285886550209


ris (2 : 2): [ -1 0.7762285886550209 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1361 (47461 interne); stringhe deallocate: 1351 (47251 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.30000e+000: -1.57746e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950654436568559e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961408 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1362 (47486 interne); stringhe deallocate: 1352 (47276 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7762284367644607 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961408 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1363 (47506 interne); stringhe deallocate: 1353 (47296 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1363 (47506 interne); stringhe deallocate: 1353 (47306 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8422543058567513 0.06602571720173048 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.999994284515178 0.6007360396729042 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361955175e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1364 (47556 interne); stringhe deallocate: 1354 (47346 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277263473e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962048 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1365 (47576 interne); stringhe deallocate: 1355 (47366 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.25000e+000: -1.08195e-001
Calcolo la funzione ext_fun2 in 3.25000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950606611014042e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962048 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7762888097404489


ris (2 : 2): [ -1 0.7762888097404489 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1365 (47601 interne); stringhe deallocate: 1355 (47391 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.25000e+000: -1.08195e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950617678084509e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962048 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1366 (47626 interne); stringhe deallocate: 1356 (47416 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7762885182464654 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962048 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1367 (47646 interne); stringhe deallocate: 1357 (47436 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1367 (47646 interne); stringhe deallocate: 1357 (47446 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8918048654698916 0.1155160557294427 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999977728258017 0.6453239086523893 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361957886e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1368 (47696 interne); stringhe deallocate: 1358 (47486 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772633204e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1369 (47716 interne); stringhe deallocate: 1359 (47506 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.30000e+000: -1.57746e-001
Calcolo la funzione ext_fun2 in 3.30000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410024812e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7762290540034408


ris (2 : 2): [ -1 0.7762290540034408 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1369 (47741 interne); stringhe deallocate: 1359 (47531 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.30000e+000: -1.57746e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950649298285842e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1370 (47766 interne); stringhe deallocate: 1360 (47556 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7762289136015186 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1371 (47786 interne); stringhe deallocate: 1361 (47576 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1371 (47786 interne); stringhe deallocate: 1361 (47586 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8422543058567513 0.06602525185331057 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.999994284515178 0.6007357632641466 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826134565e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1372 (47836 interne); stringhe deallocate: 1362 (47626 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772634572e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961408 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1373 (47856 interne); stringhe deallocate: 1363 (47646 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.30000e+000: -1.57746e-001
Calcolo la funzione ext_fun2 in 3.30000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826134748e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961408 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7762290540034408


ris (2 : 2): [ -1 0.7762290540034408 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1373 (47881 interne); stringhe deallocate: 1363 (47671 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.30000e+000: -1.57746e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950573014550124e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961408 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1374 (47906 interne); stringhe deallocate: 1364 (47696 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7762289136016722 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961408 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1375 (47926 interne); stringhe deallocate: 1365 (47716 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1375 (47926 interne); stringhe deallocate: 1365 (47726 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8422543058567513 0.06602525185331057 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.999994284515178 0.6007357632641466 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950639812225442e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1376 (47976 interne); stringhe deallocate: 1366 (47766 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772634461e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960488 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1377 (47996 interne); stringhe deallocate: 1367 (47786 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.32500e+000: -1.82381e-001
Calcolo la funzione ext_fun2 in 3.32500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826134618e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960488 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7762000954976426


ris (2 : 2): [ -1 0.7762000954976426 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1377 (48021 interne); stringhe deallocate: 1367 (47811 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.32500e+000: -1.82381e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950641393235509e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960488 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1378 (48046 interne); stringhe deallocate: 1368 (47836 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7761998265350094 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960488 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1379 (48066 interne); stringhe deallocate: 1369 (47856 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1379 (48066 interne); stringhe deallocate: 1369 (47866 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8176191760525683 0.04141908055492571 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999908684676774 0.5888470077600063 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.05085282613442e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1380 (48116 interne); stringhe deallocate: 1370 (47906 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.41947027070134e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961120 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1381 (48136 interne); stringhe deallocate: 1371 (47926 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.33750e+000: -1.94657e-001
Calcolo la funzione ext_fun2 in 3.33750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602294538e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961120 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7761865703202857


ris (2 : 2): [ -1 0.7761865703202857 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1381 (48161 interne); stringhe deallocate: 1371 (47951 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.33750e+000: -1.94657e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950635859700275e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961120 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1382 (48186 interne); stringhe deallocate: 1372 (47976 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7761864750947014 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961120 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1383 (48206 interne); stringhe deallocate: 1373 (47996 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1383 (48206 interne); stringhe deallocate: 1373 (48006 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.8053433948403199 0.02915682452003415 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999884669727508 0.5846148314867573 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950688428284993e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1384 (48256 interne); stringhe deallocate: 1374 (48046 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772634999e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961392 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1385 (48276 interne); stringhe deallocate: 1375 (48066 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.39231e+000: -2.48097e-001
Calcolo la funzione ext_fun2 in 3.39231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277263386e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961392 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7761275400453155


ris (2 : 2): [ -1 0.7761275400453155 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1385 (48301 interne); stringhe deallocate: 1375 (48091 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.39231e+000: -2.48097e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95069000929506e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961392 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1386 (48326 interne); stringhe deallocate: 1376 (48116 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7761273472870229 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961392 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1387 (48346 interne); stringhe deallocate: 1377 (48136 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1387 (48346 interne); stringhe deallocate: 1377 (48146 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7519032941551279 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999681316934472 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950661155861343e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1388 (48396 interne); stringhe deallocate: 1378 (48186 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277263507e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962032 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1389 (48416 interne); stringhe deallocate: 1379 (48206 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.40000e+000: -2.55541e-001
Calcolo la funzione ext_fun2 in 3.40000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772634556e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962032 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.77611933326812


ris (2 : 2): [ -1 0.77611933326812 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1389 (48441 interne); stringhe deallocate: 1379 (48231 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.40000e+000: -2.55541e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950662736871409e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962032 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1390 (48466 interne); stringhe deallocate: 1380 (48256 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7761192410553415 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962032 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1391 (48486 interne); stringhe deallocate: 1381 (48276 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1391 (48486 interne); stringhe deallocate: 1381 (48286 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7444588979731683 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999632845939576 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950664713133993e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1392 (48536 interne); stringhe deallocate: 1382 (48326 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826134827e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961800 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1393 (48556 interne); stringhe deallocate: 1383 (48346 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.35000e+000: -2.06902e-001
Calcolo la funzione ext_fun2 in 3.35000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772634445e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961800 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7761728974263249


ris (2 : 2): [ -1 0.7761728974263249 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1393 (48581 interne); stringhe deallocate: 1383 (48371 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.35000e+000: -2.06902e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950666294144059e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961800 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1394 (48606 interne); stringhe deallocate: 1384 (48396 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7761726468170789 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961800 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1395 (48626 interne); stringhe deallocate: 1385 (48416 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1395 (48626 interne); stringhe deallocate: 1385 (48426 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7930980283265998 0.01692513090027492 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999854423490759 0.5812487548130103 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410025397e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1396 (48676 interne); stringhe deallocate: 1386 (48466 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772636042e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963328 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1397 (48696 interne); stringhe deallocate: 1387 (48486 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.40000e+000: -2.55541e-001
Calcolo la funzione ext_fun2 in 3.40000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380538675e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961872 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7761197471762422


ris (2 : 2): [ -1 0.7761197471762422 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1397 (48721 interne); stringhe deallocate: 1387 (48511 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.40000e+000: -2.55541e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903048031483e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961872 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1398 (48746 interne); stringhe deallocate: 1388 (48536 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7761197178926071 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961872 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1399 (48766 interne); stringhe deallocate: 1389 (48556 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1399 (48766 interne); stringhe deallocate: 1389 (48566 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7444588979731683 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999632845939576 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1400 (48816 interne); stringhe deallocate: 1390 (48606 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826134893e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961856 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1401 (48836 interne); stringhe deallocate: 1391 (48626 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.40000e+000: -2.55541e-001
Calcolo la funzione ext_fun2 in 3.40000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361958037e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961856 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7761197471762422


ris (2 : 2): [ -1 0.7761197471762422 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1401 (48861 interne); stringhe deallocate: 1391 (48651 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.40000e+000: -2.55541e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950714119698577e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961856 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1402 (48886 interne); stringhe deallocate: 1392 (48676 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7761197178925574 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961856 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1403 (48906 interne); stringhe deallocate: 1393 (48696 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1403 (48906 interne); stringhe deallocate: 1393 (48706 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7444588979731683 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999632845939576 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.45605489281036e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1404 (48956 interne); stringhe deallocate: 1394 (48746 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277263624e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962512 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1405 (48976 interne); stringhe deallocate: 1395 (48766 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.42500e+000: -2.79629e-001
Calcolo la funzione ext_fun2 in 3.42500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842550506160141e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962512 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.776093989786203


ris (2 : 2): [ -1 0.776093989786203 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1405 (49001 interne); stringhe deallocate: 1395 (48791 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.42500e+000: -2.79629e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950691985557643e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962512 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1406 (49026 interne); stringhe deallocate: 1396 (48816 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7760939686860882 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962512 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1407 (49046 interne); stringhe deallocate: 1397 (48836 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1407 (49046 interne); stringhe deallocate: 1397 (48846 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.7203713132189038 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999419498454722 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95069475232526e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425240 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1408 (49096 interne); stringhe deallocate: 1398 (48886 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772635149e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962840 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1409 (49116 interne); stringhe deallocate: 1399 (48906 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.43750e+000: -2.91608e-001
Calcolo la funzione ext_fun2 in 3.43750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.5352443805397e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963600 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.776081959701814


ris (2 : 2): [ -1 0.776081959701814 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1409 (49141 interne); stringhe deallocate: 1399 (48931 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.43750e+000: -2.91608e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903048034177e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963600 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1410 (49166 interne); stringhe deallocate: 1400 (48956 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7760815709198505 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963600 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1411 (49186 interne); stringhe deallocate: 1401 (48976 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1411 (49186 interne); stringhe deallocate: 1401 (48986 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.708392118686147 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999270971766882 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84248260229536e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1412 (49236 interne); stringhe deallocate: 1402 (49026 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826134838e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962568 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1413 (49256 interne); stringhe deallocate: 1403 (49046 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.49231e+000: -3.43569e-001
Calcolo la funzione ext_fun2 in 3.49231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380539611e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 0 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7760294547201302


ris (2 : 2): [ -1 0.7760294547201302 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1413 (49281 interne); stringhe deallocate: 1403 (49071 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.49231e+000: -3.43569e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903048032406e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 0 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1414 (49306 interne); stringhe deallocate: 1404 (49096 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7760291188324642 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 0 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1415 (49326 interne); stringhe deallocate: 1405 (49116 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1415 (49326 interne); stringhe deallocate: 1405 (49126 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6564305924000166 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9998041723327911 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.05803414772987e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1416 (49376 interne); stringhe deallocate: 1406 (49166 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772635694e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962440 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1417 (49396 interne); stringhe deallocate: 1407 (49186 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.50000e+000: -3.50783e-001
Calcolo la funzione ext_fun2 in 3.50000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842584458093856e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962440 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7760221551321382


ris (2 : 2): [ -1 0.7760221551321382 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1417 (49421 interne); stringhe deallocate: 1407 (49211 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.50000e+000: -3.50783e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950676570709493e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962440 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1418 (49446 interne); stringhe deallocate: 1408 (49236 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7760219662751382 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962440 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1419 (49466 interne); stringhe deallocate: 1409 (49256 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1419 (49466 interne); stringhe deallocate: 1409 (49266 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6492167723103801 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9997753834005494 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277263522e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425240 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1420 (49516 interne); stringhe deallocate: 1410 (49306 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470275009592e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962840 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1421 (49536 interne); stringhe deallocate: 1411 (49326 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.45000e+000: -3.03542e-001
Calcolo la funzione ext_fun2 in 3.45000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53524438053903e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963696 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7760697982296315


ris (2 : 2): [ -1 0.7760697982296315 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1421 (49561 interne); stringhe deallocate: 1411 (49351 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.45000e+000: -3.03542e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903048033304e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963696 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1422 (49586 interne); stringhe deallocate: 1412 (49376 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7760696499910367 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963696 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1423 (49606 interne); stringhe deallocate: 1413 (49396 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1423 (49606 interne); stringhe deallocate: 1413 (49406 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6964584872915707 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9999085241780212 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842686313890985e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1424 (49656 interne); stringhe deallocate: 1414 (49446 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772634319e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1425 (49676 interne); stringhe deallocate: 1415 (49466 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.50000e+000: -3.50783e-001
Calcolo la funzione ext_fun2 in 3.50000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950717676971227e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7760225232862487


ris (2 : 2): [ -1 0.7760225232862487 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1425 (49701 interne); stringhe deallocate: 1415 (49491 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.50000e+000: -3.50783e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950732301314344e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1426 (49726 interne); stringhe deallocate: 1416 (49516 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7760224431121419 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961584 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1427 (49746 interne); stringhe deallocate: 1417 (49536 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1427 (49746 interne); stringhe deallocate: 1417 (49546 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6492167723103801 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9997753834005494 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84278816968937e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1428 (49796 interne); stringhe deallocate: 1418 (49586 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772636334e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963712 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1429 (49816 interne); stringhe deallocate: 1419 (49606 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.50000e+000: -3.50783e-001
Calcolo la funzione ext_fun2 in 3.50000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602295803e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963712 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7760225232862487


ris (2 : 2): [ -1 0.7760225232862487 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1429 (49841 interne); stringhe deallocate: 1419 (49631 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.50000e+000: -3.50783e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950628745154975e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963712 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1430 (49866 interne); stringhe deallocate: 1420 (49656 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7760224431123683 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963712 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1431 (49886 interne); stringhe deallocate: 1421 (49676 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1431 (49886 interne); stringhe deallocate: 1421 (49686 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6492167723103801 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9997753834005494 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772636303e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1432 (49936 interne); stringhe deallocate: 1422 (49726 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826134935e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963696 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1433 (49956 interne); stringhe deallocate: 1423 (49746 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.52500e+000: -3.74083e-001
Calcolo la funzione ext_fun2 in 3.52500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842686313891388e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963696 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7759996131559314


ris (2 : 2): [ -1 0.7759996131559314 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1433 (49981 interne); stringhe deallocate: 1423 (49771 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.52500e+000: -3.74083e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950729534546727e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963696 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1434 (50006 interne); stringhe deallocate: 1424 (49796 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7759995549287151 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963696 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1435 (50026 interne); stringhe deallocate: 1425 (49816 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1435 (50026 interne); stringhe deallocate: 1425 (49826 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6259174077906018 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9996502058542848 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950701471618043e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1436 (50076 interne); stringhe deallocate: 1426 (49866 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277263688e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963656 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1437 (50096 interne); stringhe deallocate: 1427 (49886 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.53750e+000: -3.85646e-001
Calcolo la funzione ext_fun2 in 3.53750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.8413027726345e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963656 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.775988912894738


ris (2 : 2): [ -1 0.775988912894738 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1437 (50121 interne); stringhe deallocate: 1427 (49911 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.53750e+000: -3.85646e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95070305262811e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963656 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1438 (50146 interne); stringhe deallocate: 1428 (49936 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7759885876741972 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963656 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1439 (50166 interne); stringhe deallocate: 1429 (49956 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1439 (50166 interne); stringhe deallocate: 1429 (49966 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.614354492089312 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9995642226923238 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772636224e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1440 (50216 interne); stringhe deallocate: 1430 (50006 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470276234875e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963992 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1441 (50236 interne); stringhe deallocate: 1431 (50026 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.59231e+000: -4.35609e-001
Calcolo la funzione ext_fun2 in 3.59231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950627954649942e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963992 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7759422118908375


ris (2 : 2): [ -1 0.7759422118908375 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1441 (50261 interne); stringhe deallocate: 1431 (50051 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.59231e+000: -4.35609e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950756806970377e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963992 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1442 (50286 interne); stringhe deallocate: 1432 (50076 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7759418576326675 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963992 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1443 (50306 interne); stringhe deallocate: 1433 (50096 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1443 (50306 interne); stringhe deallocate: 1433 (50106 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.564390722596697 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9988741233883424 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361958859e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1444 (50356 interne); stringhe deallocate: 1434 (50146 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772636793e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961656 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1445 (50376 interne); stringhe deallocate: 1435 (50166 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.60000e+000: -4.42520e-001
Calcolo la funzione ext_fun2 in 3.60000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410026717e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961656 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7759357192100223


ris (2 : 2): [ -1 0.7759357192100223 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1445 (50401 interne); stringhe deallocate: 1435 (50191 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.60000e+000: -4.42520e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950745344647394e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961656 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1446 (50426 interne); stringhe deallocate: 1436 (50216 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7759356587496269 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79961656 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1447 (50446 interne); stringhe deallocate: 1437 (50236 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1447 (50446 interne); stringhe deallocate: 1437 (50246 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5574795567051476 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9987162892929454 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950736649092027e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1448 (50496 interne); stringhe deallocate: 1438 (50286 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772637204e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963656 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1449 (50516 interne); stringhe deallocate: 1439 (50306 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.55000e+000: -3.97148e-001
Calcolo la funzione ext_fun2 in 3.55000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772635789e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963656 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7759780957695507


ris (2 : 2): [ -1 0.7759780957695507 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1449 (50541 interne); stringhe deallocate: 1439 (50331 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.55000e+000: -3.97148e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950752459192694e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963656 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1450 (50566 interne); stringhe deallocate: 1440 (50356 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7759780972567532 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963656 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1451 (50586 interne); stringhe deallocate: 1441 (50376 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1451 (50586 interne); stringhe deallocate: 1441 (50386 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.6028518327140402 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9994577439023414 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950771431313494e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1452 (50636 interne); stringhe deallocate: 1442 (50426 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772636919e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964120 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1453 (50656 interne); stringhe deallocate: 1443 (50446 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.60000e+000: -4.42520e-001
Calcolo la funzione ext_fun2 in 3.60000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826135135e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964120 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7759360466678367


ris (2 : 2): [ -1 0.7759360466678367 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1453 (50681 interne); stringhe deallocate: 1443 (50471 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.60000e+000: -4.42520e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950773012323561e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964120 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1454 (50706 interne); stringhe deallocate: 1444 (50496 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7759356587496411 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964120 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1455 (50726 interne); stringhe deallocate: 1445 (50516 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1455 (50726 interne); stringhe deallocate: 1445 (50526 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5574795567051476 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9987162892929454 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826134654e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1456 (50776 interne); stringhe deallocate: 1446 (50566 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470279871198e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963784 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1457 (50796 interne); stringhe deallocate: 1447 (50586 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.60000e+000: -4.42520e-001
Calcolo la funzione ext_fun2 in 3.60000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84255050616177e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963784 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7759360466678367


ris (2 : 2): [ -1 0.7759360466678367 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1457 (50821 interne); stringhe deallocate: 1447 (50611 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.60000e+000: -4.42520e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950758783232961e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963784 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1458 (50846 interne); stringhe deallocate: 1448 (50636 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7759356587496926 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963784 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1459 (50866 interne); stringhe deallocate: 1449 (50656 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1459 (50866 interne); stringhe deallocate: 1449 (50666 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5574795567051476 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9987162892929454 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950761550000577e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425240 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1460 (50916 interne); stringhe deallocate: 1450 (50706 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772636619e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964208 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1461 (50936 interne); stringhe deallocate: 1451 (50726 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.62500e+000: -4.64799e-001
Calcolo la funzione ext_fun2 in 3.62500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380541837e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964752 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7759156690569702


ris (2 : 2): [ -1 0.7759156690569702 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1461 (50961 interne); stringhe deallocate: 1451 (50751 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.62500e+000: -4.64799e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903048035998e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964752 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1462 (50986 interne); stringhe deallocate: 1452 (50776 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.775915631588961 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964752 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1463 (51006 interne); stringhe deallocate: 1453 (50796 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1463 (51006 interne); stringhe deallocate: 1453 (50806 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5352012119683911 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9980410923612745 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602296696e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1464 (51056 interne); stringhe deallocate: 1454 (50846 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826134877e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964536 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1465 (51076 interne); stringhe deallocate: 1455 (50866 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.63750e+000: -4.75830e-001
Calcolo la funzione ext_fun2 in 3.63750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842686313892898e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964536 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7759061516183634


ris (2 : 2): [ -1 0.7759061516183634 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1465 (51101 interne); stringhe deallocate: 1455 (50891 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.63750e+000: -4.75830e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950742973132294e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964536 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1466 (51126 interne); stringhe deallocate: 1456 (50916 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7759060948456726 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964536 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1467 (51146 interne); stringhe deallocate: 1457 (50936 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1467 (51146 interne); stringhe deallocate: 1457 (50946 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5241701079300644 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9975855910691878 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772635465e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1468 (51196 interne); stringhe deallocate: 1458 (50986 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772637307e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963928 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1469 (51216 interne); stringhe deallocate: 1459 (51006 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.69231e+000: -5.23297e-001
Calcolo la funzione ext_fun2 in 3.69231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772637038e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963928 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7758646130120185


ris (2 : 2): [ -1 0.7758646130120185 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1469 (51241 interne); stringhe deallocate: 1459 (51031 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.69231e+000: -5.23297e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95068763777996e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963928 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1470 (51266 interne); stringhe deallocate: 1460 (51056 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7758646100131124 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963928 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1471 (51286 interne); stringhe deallocate: 1461 (51076 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1471 (51286 interne); stringhe deallocate: 1461 (51086 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.4767033166999085 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9940788763791083 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772636959e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1472 (51336 interne); stringhe deallocate: 1462 (51126 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470282084612e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963816 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1473 (51356 interne); stringhe deallocate: 1463 (51146 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.70000e+000: -5.29836e-001
Calcolo la funzione ext_fun2 in 3.70000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602297139e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963816 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7758588380416757


ris (2 : 2): [ -1 0.7758588380416757 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1473 (51381 interne); stringhe deallocate: 1463 (51171 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.70000e+000: -5.29836e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950778150606278e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963816 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1474 (51406 interne); stringhe deallocate: 1464 (51196 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7758584111301135 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79963816 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1475 (51426 interne); stringhe deallocate: 1465 (51216 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1475 (51426 interne); stringhe deallocate: 1465 (51226 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.4701638590915066 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9933031911550672 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950802261009795e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1476 (51476 interne); stringhe deallocate: 1466 (51266 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772637892e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962760 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1477 (51496 interne); stringhe deallocate: 1467 (51286 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.65000e+000: -4.86787e-001
Calcolo la funzione ext_fun2 in 3.65000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772636651e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962760 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7758965302340801


ris (2 : 2): [ -1 0.7758965302340801 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1477 (51521 interne); stringhe deallocate: 1467 (51311 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.65000e+000: -4.86787e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950803842019862e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962760 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1478 (51546 interne); stringhe deallocate: 1468 (51336 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7758960812656195 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962760 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1479 (51566 interne); stringhe deallocate: 1469 (51356 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1479 (51566 interne); stringhe deallocate: 1469 (51366 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.5132133513443002 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9970288714536679 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950805818282445e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1480 (51616 interne); stringhe deallocate: 1470 (51406 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826135307e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964712 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1481 (51636 interne); stringhe deallocate: 1471 (51426 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.70000e+000: -5.29836e-001
Calcolo la funzione ext_fun2 in 3.70000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772635481e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964712 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7758591293018224


ris (2 : 2): [ -1 0.7758591293018224 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1481 (51661 interne); stringhe deallocate: 1471 (51451 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.70000e+000: -5.29836e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950807399292512e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964712 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1482 (51686 interne); stringhe deallocate: 1472 (51476 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7758588879672663 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964712 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1483 (51706 interne); stringhe deallocate: 1473 (51496 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1483 (51706 interne); stringhe deallocate: 1473 (51506 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.4701638590915066 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9933031911550672 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410028219e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1484 (51756 interne); stringhe deallocate: 1474 (51546 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772638247e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965560 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1485 (51776 interne); stringhe deallocate: 1475 (51566 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.70000e+000: -5.29836e-001
Calcolo la funzione ext_fun2 in 3.70000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380543191e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7758591293018224


ris (2 : 2): [ -1 0.7758591293018224 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1485 (51801 interne); stringhe deallocate: 1475 (51591 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.70000e+000: -5.29836e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903048036631e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1486 (51826 interne); stringhe deallocate: 1476 (51616 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7758588879673178 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1487 (51846 interne); stringhe deallocate: 1477 (51636 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1487 (51846 interne); stringhe deallocate: 1477 (51646 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.4701638590915066 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9933031911550672 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1488 (51896 interne); stringhe deallocate: 1478 (51686 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772638145e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962840 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1489 (51916 interne); stringhe deallocate: 1479 (51706 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.72500e+000: -5.50871e-001
Calcolo la funzione ext_fun2 in 3.72500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410028203e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962840 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7758410042619874


ris (2 : 2): [ -1 0.7758410042619874 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1489 (51941 interne); stringhe deallocate: 1479 (51731 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.72500e+000: -5.50871e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950824395150728e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962840 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1490 (51966 interne); stringhe deallocate: 1480 (51756 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7758407681552964 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962840 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1491 (51986 interne); stringhe deallocate: 1481 (51776 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1491 (51986 interne); stringhe deallocate: 1481 (51786 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.4491291319941401 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9900620179318151 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950797122727078e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1492 (52036 interne); stringhe deallocate: 1482 (51826 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772637473e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965080 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1493 (52056 interne); stringhe deallocate: 1483 (51846 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.73750e+000: -5.61260e-001
Calcolo la funzione ext_fun2 in 3.73750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772637876e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965080 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7758325388950214


ris (2 : 2): [ -1 0.7758325388950214 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1493 (52081 interne); stringhe deallocate: 1483 (51871 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.73750e+000: -5.61260e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950820047373045e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965080 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1494 (52106 interne); stringhe deallocate: 1484 (51896 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7758321850863732 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965080 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1495 (52126 interne); stringhe deallocate: 1485 (51916 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1495 (52126 interne); stringhe deallocate: 1485 (51926 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.4387400587639291 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9879334563121229 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950784869899061e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1496 (52176 interne); stringhe deallocate: 1486 (51966 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.05085282613536e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964624 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1497 (52196 interne); stringhe deallocate: 1487 (51986 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.79231e+000: -6.05755e-001
Calcolo la funzione ext_fun2 in 3.79231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772637757e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964624 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7757955920272249


ris (2 : 2): [ -1 0.7757955920272249 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1497 (52221 interne); stringhe deallocate: 1487 (52011 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.79231e+000: -6.05755e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950786450909128e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964624 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1498 (52246 interne); stringhe deallocate: 1488 (52036 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7757954686252573 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964624 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1499 (52266 interne); stringhe deallocate: 1489 (52056 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1499 (52266 interne); stringhe deallocate: 1489 (52066 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3942445182837691 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9725891732297665 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950814118585295e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1500 (52316 interne); stringhe deallocate: 1490 (52106 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772637947e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964808 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1501 (52336 interne); stringhe deallocate: 1491 (52126 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.80000e+000: -6.11858e-001
Calcolo la funzione ext_fun2 in 3.80000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826135232e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964808 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7757904554305849


ris (2 : 2): [ -1 0.7757904554305849 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1501 (52361 interne); stringhe deallocate: 1491 (52151 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.80000e+000: -6.11858e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950815699595362e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964808 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1502 (52386 interne); stringhe deallocate: 1492 (52176 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7757902234165046 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964808 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1503 (52406 interne); stringhe deallocate: 1493 (52196 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1503 (52406 interne); stringhe deallocate: 1493 (52206 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3881421090572808 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9693837646699924 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277263767e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1504 (52456 interne); stringhe deallocate: 1494 (52246 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470280701229e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965112 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1505 (52476 interne); stringhe deallocate: 1495 (52266 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.75000e+000: -5.71561e-001
Calcolo la funzione ext_fun2 in 3.75000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602297479e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965112 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7758239810726867


ris (2 : 2): [ -1 0.7758239810726867 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1505 (52501 interne); stringhe deallocate: 1495 (52291 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.75000e+000: -5.71561e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950810166060128e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965112 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1506 (52526 interne); stringhe deallocate: 1496 (52316 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7758236020175335 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965112 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1507 (52546 interne); stringhe deallocate: 1497 (52336 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1507 (52546 interne); stringhe deallocate: 1497 (52346 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.4284386812576563 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.985383849429066 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950788427171711e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1508 (52596 interne); stringhe deallocate: 1498 (52386 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826135414e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965576 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1509 (52616 interne); stringhe deallocate: 1499 (52406 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.80000e+000: -6.11858e-001
Calcolo la funzione ext_fun2 in 3.80000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772637457e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965576 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7757907144944072


ris (2 : 2): [ -1 0.7757907144944072 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1509 (52641 interne); stringhe deallocate: 1499 (52431 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.80000e+000: -6.11858e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950790008181778e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965576 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1510 (52666 interne); stringhe deallocate: 1500 (52456 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7757907002537072 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965576 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1511 (52686 interne); stringhe deallocate: 1501 (52476 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1511 (52686 interne); stringhe deallocate: 1501 (52486 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3881421090572808 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9693837646699924 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950828347675895e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1512 (52736 interne); stringhe deallocate: 1502 (52526 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277263884e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965488 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1513 (52756 interne); stringhe deallocate: 1503 (52546 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.80000e+000: -6.11858e-001
Calcolo la funzione ext_fun2 in 3.80000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772638042e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965488 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7757907144944072


ris (2 : 2): [ -1 0.7757907144944072 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1513 (52781 interne); stringhe deallocate: 1503 (52571 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.80000e+000: -6.11858e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950829928685962e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965488 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1514 (52806 interne); stringhe deallocate: 1504 (52596 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7757907002537632 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965488 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1515 (52826 interne); stringhe deallocate: 1505 (52616 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1515 (52826 interne); stringhe deallocate: 1505 (52626 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3881421090572808 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9693837646699924 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950853248584446e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1516 (52876 interne); stringhe deallocate: 1506 (52666 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826134499e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965328 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1517 (52896 interne); stringhe deallocate: 1507 (52686 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.82500e+000: -6.31439e-001
Calcolo la funzione ext_fun2 in 3.82500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772637931e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965328 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7757745930230937


ris (2 : 2): [ -1 0.7757745930230937 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1517 (52921 interne); stringhe deallocate: 1507 (52711 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.82500e+000: -6.31439e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950854829594512e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965328 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1518 (52946 interne); stringhe deallocate: 1508 (52736 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7757744877897839 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965328 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1519 (52966 interne); stringhe deallocate: 1509 (52756 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1519 (52966 interne); stringhe deallocate: 1509 (52766 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3685611716393046 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9565451081718663 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950586057883175e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1520 (53016 interne); stringhe deallocate: 1510 (52806 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772638896e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966192 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1521 (53036 interne); stringhe deallocate: 1511 (52826 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.83750e+000: -6.41082e-001
Calcolo la funzione ext_fun2 in 3.83750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772637528e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966192 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7757670634302243


ris (2 : 2): [ -1 0.7757670634302243 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1521 (53061 interne); stringhe deallocate: 1511 (52851 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.83750e+000: -6.41082e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950587638893241e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966192 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1522 (53086 interne); stringhe deallocate: 1512 (52876 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7757668583958592 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966192 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1523 (53106 interne); stringhe deallocate: 1513 (52896 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1523 (53106 interne); stringhe deallocate: 1513 (52906 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3589179334027545 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.948529920333271 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772638058e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1524 (53156 interne); stringhe deallocate: 1514 (52946 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470269792259e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965288 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1525 (53176 interne); stringhe deallocate: 1515 (52966 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.89231e+000: -6.82162e-001
Calcolo la funzione ext_fun2 in 3.89231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602298103e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965288 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7757342007234537


ris (2 : 2): [ -1 0.7757342007234537 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1525 (53201 interne); stringhe deallocate: 1515 (52991 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.89231e+000: -6.82162e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950857596362129e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965288 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1526 (53226 interne); stringhe deallocate: 1516 (53016 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7757339566315462 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965288 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1527 (53246 interne); stringhe deallocate: 1517 (53036 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1527 (53246 interne); stringhe deallocate: 1517 (53046 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.317838228404798 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.8977172725702747 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95067933747711e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1528 (53296 interne); stringhe deallocate: 1518 (53086 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772633591e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964880 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1529 (53316 interne); stringhe deallocate: 1519 (53106 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.90000e+000: -6.87766e-001
Calcolo la funzione ext_fun2 in 3.90000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772638825e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964880 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7757296319337497


ris (2 : 2): [ -1 0.7757296319337497 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1529 (53341 interne); stringhe deallocate: 1519 (53131 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.90000e+000: -6.87766e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950680918487176e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964880 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1530 (53366 interne); stringhe deallocate: 1520 (53156 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7757291882597652 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964880 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1531 (53386 interne); stringhe deallocate: 1521 (53176 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1531 (53386 interne); stringhe deallocate: 1521 (53186 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3122338408160259 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.8883035928316986 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84272026582726e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1532 (53436 interne); stringhe deallocate: 1522 (53226 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772639006e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964880 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1533 (53456 interne); stringhe deallocate: 1523 (53246 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.85000e+000: -6.50625e-001
Calcolo la funzione ext_fun2 in 3.85000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84268631388919e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964880 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7757594516021383


ris (2 : 2): [ -1 0.7757594516021383 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1533 (53481 interne); stringhe deallocate: 1523 (53271 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.85000e+000: -6.50625e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950592381923441e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964880 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1534 (53506 interne); stringhe deallocate: 1524 (53296 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7757592290013404 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79964880 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1535 (53526 interne); stringhe deallocate: 1525 (53316 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1535 (53526 interne); stringhe deallocate: 1525 (53326 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3493748629348323 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.9392980869720796 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950861548887296e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1536 (53576 interne); stringhe deallocate: 1526 (53366 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772637251e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1537 (53596 interne); stringhe deallocate: 1527 (53386 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.90000e+000: -6.87766e-001
Calcolo la funzione ext_fun2 in 3.90000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950856805857096e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7757298623602766


ris (2 : 2): [ -1 0.7757298623602766 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1537 (53621 interne); stringhe deallocate: 1527 (53411 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.90000e+000: -6.87766e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950863129897362e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1538 (53646 interne); stringhe deallocate: 1528 (53436 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7757296650973347 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79962672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1539 (53666 interne); stringhe deallocate: 1529 (53456 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1539 (53666 interne); stringhe deallocate: 1529 (53466 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3122338408160259 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.8883035928316986 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277263722e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1540 (53716 interne); stringhe deallocate: 1530 (53506 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826135495e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960784 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1541 (53736 interne); stringhe deallocate: 1531 (53526 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.90000e+000: -6.87766e-001
Calcolo la funzione ext_fun2 in 3.90000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772635346e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960784 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7757298623602766


ris (2 : 2): [ -1 0.7757298623602766 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1541 (53761 interne); stringhe deallocate: 1531 (53551 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.90000e+000: -6.87766e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950775383838661e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960784 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1542 (53786 interne); stringhe deallocate: 1532 (53576 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7757296650975052 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79960784 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1543 (53806 interne); stringhe deallocate: 1533 (53596 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1543 (53806 interne); stringhe deallocate: 1533 (53606 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.3122338408160259 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.8883035928316986 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950849691311796e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1544 (53856 interne); stringhe deallocate: 1534 (53646 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772639457e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1545 (53876 interne); stringhe deallocate: 1535 (53666 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.92500e+000: -7.05698e-001
Calcolo la funzione ext_fun2 in 3.92500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772633576e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.775715522980078


ris (2 : 2): [ -1 0.775715522980078 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1545 (53901 interne); stringhe deallocate: 1535 (53691 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.92500e+000: -7.05698e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950851272321862e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1546 (53926 interne); stringhe deallocate: 1536 (53716 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7757153599828364 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1547 (53946 interne); stringhe deallocate: 1537 (53736 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1547 (53946 interne); stringhe deallocate: 1537 (53746 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2943023393315233 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.8537146578585434 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950884078280746e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1548 (53996 interne); stringhe deallocate: 1538 (53786 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826135656e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965688 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1549 (54016 interne); stringhe deallocate: 1539 (53806 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.93750e+000: -7.14499e-001
Calcolo la funzione ext_fun2 in 3.93750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772638991e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965688 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7757088257194621


ris (2 : 2): [ -1 0.7757088257194621 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1549 (54041 interne); stringhe deallocate: 1539 (53831 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.93750e+000: -7.14499e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950885659290813e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965688 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1550 (54066 interne); stringhe deallocate: 1540 (53856 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7757086842626402 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79965688 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1551 (54086 interne); stringhe deallocate: 1541 (53876 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1551 (54086 interne); stringhe deallocate: 1541 (53886 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2855012881374633 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.8342491063749076 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950892378583596e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1552 (54136 interne); stringhe deallocate: 1542 (53926 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772635836e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966816 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1553 (54156 interne); stringhe deallocate: 1543 (53946 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.99231e+000: -7.51752e-001
Calcolo la funzione ext_fun2 in 3.99231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772637236e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966816 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7756795957045597


ris (2 : 2): [ -1 0.7756795957045597 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1553 (54181 interne); stringhe deallocate: 1543 (53971 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.99231e+000: -7.51752e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950893959593663e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966816 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1554 (54206 interne); stringhe deallocate: 1544 (53996 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7756795971955643 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966816 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1555 (54226 interne); stringhe deallocate: 1545 (54016 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1555 (54226 interne); stringhe deallocate: 1545 (54026 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2482478734549048 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.7366092981693062 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772633591e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1556 (54276 interne); stringhe deallocate: 1546 (54066 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470289673461e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966984 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1557 (54296 interne); stringhe deallocate: 1547 (54086 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.00000e+000: -7.56802e-001
Calcolo la funzione ext_fun2 in 4.00000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380536424e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7756755319555793


ris (2 : 2): [ -1 0.7756755319555793 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1557 (54321 interne); stringhe deallocate: 1547 (54111 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.00000e+000: -7.56802e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903048033532e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1558 (54346 interne); stringhe deallocate: 1548 (54136 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7756753056615322 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1559 (54366 interne); stringhe deallocate: 1549 (54156 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1559 (54366 interne); stringhe deallocate: 1549 (54166 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2431975046920718 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.7220657889436675 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.061022763588314e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425256 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1560 (54416 interne); stringhe deallocate: 1550 (54206 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772639378e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966664 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1561 (54436 interne); stringhe deallocate: 1551 (54226 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.95000e+000: -7.23188e-001
Calcolo la funzione ext_fun2 in 3.95000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380546138e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967056 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7757020553140315


ris (2 : 2): [ -1 0.7757020553140315 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1561 (54461 interne); stringhe deallocate: 1551 (54251 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 3.95000e+000: -7.23188e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304803911e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967056 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1562 (54486 interne); stringhe deallocate: 1552 (54276 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.775702008542396 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967056 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1563 (54506 interne); stringhe deallocate: 1553 (54296 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1563 (54506 interne); stringhe deallocate: 1553 (54306 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2768118759134879 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.8135026673137138 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602295653e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1564 (54556 interne); stringhe deallocate: 1554 (54346 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772639062e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966384 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1565 (54576 interne); stringhe deallocate: 1555 (54366 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.00000e+000: -7.56802e-001
Calcolo la funzione ext_fun2 in 4.00000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380540079e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7756757369104196


ris (2 : 2): [ -1 0.7756757369104196 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1565 (54601 interne); stringhe deallocate: 1555 (54391 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.00000e+000: -7.56802e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903048039173e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1566 (54626 interne); stringhe deallocate: 1556 (54416 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7756753056615011 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1567 (54646 interne); stringhe deallocate: 1557 (54436 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1567 (54646 interne); stringhe deallocate: 1557 (54446 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2431975046920718 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.7220657889436675 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84268623727394e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425304 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1568 (54696 interne); stringhe deallocate: 1558 (54486 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772639212e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1569 (54716 interne); stringhe deallocate: 1559 (54506 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.00000e+000: -7.56802e-001
Calcolo la funzione ext_fun2 in 4.00000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842550506160908e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7756757369104196


ris (2 : 2): [ -1 0.7756757369104196 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1569 (54741 interne); stringhe deallocate: 1559 (54531 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.00000e+000: -7.56802e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950865106159946e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1570 (54766 interne); stringhe deallocate: 1560 (54556 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7756753056615198 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1571 (54786 interne); stringhe deallocate: 1561 (54576 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1571 (54786 interne); stringhe deallocate: 1561 (54586 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2431975046920718 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.7220657889436675 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772639765e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1572 (54836 interne); stringhe deallocate: 1562 (54626 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772639441e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966608 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1573 (54856 interne); stringhe deallocate: 1563 (54646 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.02500e+000: -7.72905e-001
Calcolo la funzione ext_fun2 in 4.02500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950775383838661e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966608 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7756629826263667


ris (2 : 2): [ -1 0.7756629826263667 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1573 (54881 interne); stringhe deallocate: 1563 (54671 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.02500e+000: -7.72905e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950873406462796e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966608 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1574 (54906 interne); stringhe deallocate: 1564 (54696 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7756629078954322 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966608 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1575 (54926 interne); stringhe deallocate: 1565 (54716 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1575 (54926 interne); stringhe deallocate: 1565 (54726 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2270946047765091 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.6751276608541665 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.8426523619621e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1576 (54976 interne); stringhe deallocate: 1566 (54766 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772639496e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966720 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1577 (54996 interne); stringhe deallocate: 1567 (54786 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.03750e+000: -7.80776e-001
Calcolo la funzione ext_fun2 in 4.03750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410029152e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966720 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7756570256907748


ris (2 : 2): [ -1 0.7756570256907748 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1577 (55021 interne); stringhe deallocate: 1567 (54811 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.03750e+000: -7.80776e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950884868785779e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966720 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1578 (55046 interne); stringhe deallocate: 1568 (54836 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7756567090123818 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966720 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1579 (55066 interne); stringhe deallocate: 1569 (54856 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1579 (55066 interne); stringhe deallocate: 1569 (54866 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.219223677819229 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.6523481611485482 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772640319e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1580 (55116 interne); stringhe deallocate: 1570 (54906 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772639884e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1581 (55136 interne); stringhe deallocate: 1571 (54926 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.09231e+000: -8.13831e-001
Calcolo la funzione ext_fun2 in 4.09231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772639678e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7756310268046466


ris (2 : 2): [ -1 0.7756310268046466 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1581 (55161 interne); stringhe deallocate: 1571 (54951 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.09231e+000: -8.13831e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950887635553396e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1582 (55186 interne); stringhe deallocate: 1572 (54976 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7756309598058824 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1583 (55206 interne); stringhe deallocate: 1573 (54996 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1583 (55206 interne); stringhe deallocate: 1573 (55006 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.186168777257235 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.5639936750464646 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950905421916646e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1584 (55256 interne); stringhe deallocate: 1574 (55046 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826135568e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967112 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1585 (55276 interne); stringhe deallocate: 1575 (55066 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.10000e+000: -8.18277e-001
Calcolo la funzione ext_fun2 in 4.10000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470288962006e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967112 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7756274122684465


ris (2 : 2): [ -1 0.7756274122684465 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1585 (55301 interne); stringhe deallocate: 1575 (55091 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.10000e+000: -8.18277e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950907002926713e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967112 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1586 (55326 interne); stringhe deallocate: 1576 (55116 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.775627145108535 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967112 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1587 (55346 interne); stringhe deallocate: 1577 (55136 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1587 (55346 interne); stringhe deallocate: 1577 (55146 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1817228889355892 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.5534797556693294 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950869058685113e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1588 (55396 interne); stringhe deallocate: 1578 (55186 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826135799e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1589 (55416 interne); stringhe deallocate: 1579 (55206 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.05000e+000: -7.88525e-001
Calcolo la funzione ext_fun2 in 4.05000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826135589e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7756510036959033


ris (2 : 2): [ -1 0.7756510036959033 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1589 (55441 interne); stringhe deallocate: 1579 (55231 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.05000e+000: -7.88525e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950870639695179e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1590 (55466 interne); stringhe deallocate: 1580 (55256 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7756509869665829 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967672 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1591 (55486 interne); stringhe deallocate: 1581 (55276 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1591 (55486 interne); stringhe deallocate: 1581 (55286 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.2114747455738044 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.6303539255101144 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950930322825197e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1592 (55536 interne); stringhe deallocate: 1582 (55326 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826135907e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966568 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1593 (55556 interne); stringhe deallocate: 1583 (55346 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.10000e+000: -8.18277e-001
Calcolo la funzione ext_fun2 in 4.10000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772640334e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966568 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7756275945672776


ris (2 : 2): [ -1 0.7756275945672776 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1593 (55581 interne); stringhe deallocate: 1583 (55371 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.10000e+000: -8.18277e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950931903835264e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966568 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1594 (55606 interne); stringhe deallocate: 1584 (55396 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7756271451087367 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966568 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1595 (55626 interne); stringhe deallocate: 1585 (55416 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1595 (55626 interne); stringhe deallocate: 1585 (55426 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1817228889355892 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.5534797556693294 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950958781006397e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1596 (55676 interne); stringhe deallocate: 1586 (55466 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772641022e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966800 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1597 (55696 interne); stringhe deallocate: 1587 (55486 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.10000e+000: -8.18277e-001
Calcolo la funzione ext_fun2 in 4.10000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772639868e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966800 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7756275945672776


ris (2 : 2): [ -1 0.7756275945672776 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1597 (55721 interne); stringhe deallocate: 1587 (55511 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.10000e+000: -8.18277e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950960362016464e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966800 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1598 (55746 interne); stringhe deallocate: 1588 (55536 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7756271451087446 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966800 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1599 (55766 interne); stringhe deallocate: 1589 (55556 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1599 (55766 interne); stringhe deallocate: 1589 (55566 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1817228889355892 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.5534797556693294 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950962338279047e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1600 (55816 interne); stringhe deallocate: 1590 (55606 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772641164e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966856 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1601 (55836 interne); stringhe deallocate: 1591 (55626 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.12500e+000: -8.32391e-001
Calcolo la funzione ext_fun2 in 4.12500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772639141e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966856 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7756162501605146


ris (2 : 2): [ -1 0.7756162501605146 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1601 (55861 interne); stringhe deallocate: 1591 (55651 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.12500e+000: -8.32391e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950963919289114e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966856 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1602 (55886 interne); stringhe deallocate: 1592 (55676 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.775616177854122 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966856 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1603 (55906 interne); stringhe deallocate: 1593 (55696 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1603 (55906 interne); stringhe deallocate: 1593 (55706 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1676094854420127 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.5227762144911333 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950969452824347e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1604 (55956 interne); stringhe deallocate: 1594 (55746 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826135858e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1605 (55976 interne); stringhe deallocate: 1595 (55766 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.13750e+000: -8.39253e-001
Calcolo la funzione ext_fun2 in 4.13750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772640366e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7756109517133314


ris (2 : 2): [ -1 0.7756109517133314 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1605 (56001 interne); stringhe deallocate: 1595 (55791 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.13750e+000: -8.39253e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950971033834414e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1606 (56026 interne); stringhe deallocate: 1596 (55816 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7756109326453284 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1607 (56046 interne); stringhe deallocate: 1597 (55836 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1607 (56046 interne); stringhe deallocate: 1597 (55846 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1607473264218873 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.5093700841403197 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950945737673347e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1608 (56096 interne); stringhe deallocate: 1598 (55886 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772641307e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966512 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1609 (56116 interne); stringhe deallocate: 1599 (55906 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.19231e+000: -8.67779e-001
Calcolo la funzione ext_fun2 in 4.19231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772640935e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966512 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7755878267822574


ris (2 : 2): [ -1 0.7755878267822574 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1609 (56141 interne); stringhe deallocate: 1599 (55931 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.19231e+000: -8.67779e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950947318683414e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966512 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1610 (56166 interne); stringhe deallocate: 1600 (55956 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7755875676246458 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79966512 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1611 (56186 interne); stringhe deallocate: 1601 (55976 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1611 (56186 interne); stringhe deallocate: 1601 (55986 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1322212136203759 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4641588342484678 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950976567369648e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1612 (56236 interne); stringhe deallocate: 1602 (56026 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826135835e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967752 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1613 (56256 interne); stringhe deallocate: 1603 (56046 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.20000e+000: -8.71576e-001
Calcolo la funzione ext_fun2 in 4.20000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772641006e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967752 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.775584611802197


ris (2 : 2): [ -1 0.775584611802197 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1613 (56281 interne); stringhe deallocate: 1603 (56071 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.20000e+000: -8.71576e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950978148379714e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967752 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1614 (56306 interne); stringhe deallocate: 1604 (56096 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7755842297644557 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967752 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1615 (56326 interne); stringhe deallocate: 1605 (56116 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1615 (56326 interne); stringhe deallocate: 1605 (56126 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1284242275864118 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4593405295741682 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950939808885597e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1616 (56376 interne); stringhe deallocate: 1606 (56166 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772639963e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968688 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1617 (56396 interne); stringhe deallocate: 1607 (56186 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.15000e+000: -8.45984e-001
Calcolo la funzione ext_fun2 in 4.15000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772641149e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968688 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7756055953986168


ris (2 : 2): [ -1 0.7756055953986168 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1617 (56421 interne); stringhe deallocate: 1607 (56211 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.15000e+000: -8.45984e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950941389895664e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968688 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1618 (56446 interne); stringhe deallocate: 1608 (56236 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7756052105993483 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968688 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1619 (56466 interne); stringhe deallocate: 1609 (56256 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1619 (56466 interne); stringhe deallocate: 1609 (56266 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1540162989245535 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4971956851765321 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772640951e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1620 (56516 interne); stringhe deallocate: 1610 (56306 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470299870976e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968400 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1621 (56536 interne); stringhe deallocate: 1611 (56326 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.20000e+000: -8.71576e-001
Calcolo la funzione ext_fun2 in 4.20000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602300451e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968400 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7755847739494477


ris (2 : 2): [ -1 0.7755847739494477 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1621 (56561 interne); stringhe deallocate: 1611 (56351 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.20000e+000: -8.71576e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95091095545188e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968400 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1622 (56586 interne); stringhe deallocate: 1612 (56376 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7755847066017045 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968400 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1623 (56606 interne); stringhe deallocate: 1613 (56396 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1623 (56606 interne); stringhe deallocate: 1613 (56406 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1284242275864118 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4593405295741682 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950980124642298e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1624 (56656 interne); stringhe deallocate: 1614 (56446 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826135961e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1625 (56676 interne); stringhe deallocate: 1615 (56466 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.20000e+000: -8.71576e-001
Calcolo la funzione ext_fun2 in 4.20000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772641291e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7755847739494477


ris (2 : 2): [ -1 0.7755847739494477 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1625 (56701 interne); stringhe deallocate: 1615 (56491 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.20000e+000: -8.71576e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950981705652364e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1626 (56726 interne); stringhe deallocate: 1616 (56516 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7755847066016885 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968544 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1627 (56746 interne); stringhe deallocate: 1617 (56536 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1627 (56746 interne); stringhe deallocate: 1617 (56546 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1284242275864118 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4593405295741682 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950973010096998e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1628 (56796 interne); stringhe deallocate: 1618 (56586 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826135938e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1629 (56816 interne); stringhe deallocate: 1619 (56606 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.22500e+000: -8.83559e-001
Calcolo la funzione ext_fun2 in 4.22500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772640556e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7755746835700685


ris (2 : 2): [ -1 0.7755746835700685 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1629 (56841 interne); stringhe deallocate: 1619 (56631 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.22500e+000: -8.83559e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950974591107064e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1630 (56866 interne); stringhe deallocate: 1620 (56656 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7755742161841948 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968064 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1631 (56886 interne); stringhe deallocate: 1621 (56676 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1631 (56886 interne); stringhe deallocate: 1621 (56686 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1164413369772578 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4457781293433425 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950967081309247e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1632 (56936 interne); stringhe deallocate: 1622 (56726 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772640081e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968616 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1633 (56956 interne); stringhe deallocate: 1623 (56746 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.23750e+000: -8.89343e-001
Calcolo la funzione ext_fun2 in 4.23750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772639947e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968616 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7755699708210182


ris (2 : 2): [ -1 0.7755699708210182 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1633 (56981 interne); stringhe deallocate: 1623 (56771 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.23750e+000: -8.89343e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950968662319314e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968616 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1634 (57006 interne); stringhe deallocate: 1624 (56796 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7755699246496546 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968616 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1635 (57026 interne); stringhe deallocate: 1625 (56816 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1635 (57026 interne); stringhe deallocate: 1625 (56826 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.110656510318888 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4400609928697269 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772640002e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1636 (57076 interne); stringhe deallocate: 1626 (56866 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470301056733e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1637 (57096 interne); stringhe deallocate: 1627 (56886 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.29231e+000: -9.13056e-001
Calcolo la funzione ext_fun2 in 4.29231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602301139e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.775549402153786


ris (2 : 2): [ -1 0.775549402153786 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1637 (57121 interne); stringhe deallocate: 1627 (56911 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.29231e+000: -9.13056e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95091688423963e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1638 (57146 interne); stringhe deallocate: 1628 (56936 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7755489438148659 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967944 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1639 (57166 interne); stringhe deallocate: 1629 (56956 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1639 (57166 interne); stringhe deallocate: 1629 (56966 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.08694420876749254 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4214332590125686 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950991982217798e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1640 (57216 interne); stringhe deallocate: 1630 (57006 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826136019e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967328 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1641 (57236 interne); stringhe deallocate: 1631 (57026 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.30000e+000: -9.16166e-001
Calcolo la funzione ext_fun2 in 4.30000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277264122e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967328 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.775546542562343


ris (2 : 2): [ -1 0.775546542562343 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1641 (57261 interne); stringhe deallocate: 1631 (57051 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.30000e+000: -9.16166e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950993563227865e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967328 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1642 (57286 interne); stringhe deallocate: 1632 (57076 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7755460827919087 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967328 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1643 (57306 interne); stringhe deallocate: 1633 (57096 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1643 (57306 interne); stringhe deallocate: 1633 (57106 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.0838340632505451 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4194867934190966 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950988424945148e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1644 (57356 interne); stringhe deallocate: 1634 (57146 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772642018e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968760 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1645 (57376 interne); stringhe deallocate: 1635 (57166 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.25000e+000: -8.94989e-001
Calcolo la funzione ext_fun2 in 4.25000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772641101e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968760 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7755652066011984


ris (2 : 2): [ -1 0.7755652066011984 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1645 (57401 interne); stringhe deallocate: 1635 (57191 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.25000e+000: -8.94989e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950990005955214e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968760 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1646 (57426 interne); stringhe deallocate: 1636 (57216 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7755651562782902 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968760 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1647 (57446 interne); stringhe deallocate: 1637 (57236 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1647 (57446 interne); stringhe deallocate: 1637 (57246 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.1050106417714165 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4349583517930614 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951012140096148e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1648 (57496 interne); stringhe deallocate: 1638 (57286 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826136006e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967488 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1649 (57516 interne); stringhe deallocate: 1639 (57306 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.30000e+000: -9.16166e-001
Calcolo la funzione ext_fun2 in 4.30000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772640066e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967488 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7755466867855986


ris (2 : 2): [ -1 0.7755466867855986 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1649 (57541 interne); stringhe deallocate: 1639 (57331 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.30000e+000: -9.16166e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951013721106215e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967488 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1650 (57566 interne); stringhe deallocate: 1640 (57356 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7755465596290589 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967488 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1651 (57586 interne); stringhe deallocate: 1641 (57376 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1651 (57586 interne); stringhe deallocate: 1641 (57386 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.0838340632505451 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4194867934190966 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950984867672498e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1652 (57636 interne); stringhe deallocate: 1642 (57426 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772642184e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1653 (57656 interne); stringhe deallocate: 1643 (57446 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.30000e+000: -9.16166e-001
Calcolo la funzione ext_fun2 in 4.30000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772641599e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7755466867855986


ris (2 : 2): [ -1 0.7755466867855986 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1653 (57681 interne); stringhe deallocate: 1643 (57471 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.30000e+000: -9.16166e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950986448682564e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1654 (57706 interne); stringhe deallocate: 1644 (57496 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7755465596291389 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968496 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1655 (57726 interne); stringhe deallocate: 1645 (57516 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1655 (57726 interne); stringhe deallocate: 1645 (57526 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.0838340632505451 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4194867934190966 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951020440398998e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1656 (57776 interne); stringhe deallocate: 1646 (57566 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772642429e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968856 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1657 (57796 interne); stringhe deallocate: 1647 (57586 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.32500e+000: -9.25899e-001
Calcolo la funzione ext_fun2 in 4.32500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772641528e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968856 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7755377118115746


ris (2 : 2): [ -1 0.7755377118115746 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1657 (57821 interne); stringhe deallocate: 1647 (57611 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.32500e+000: -9.25899e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951022021409065e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968856 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1658 (57846 interne); stringhe deallocate: 1648 (57636 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7755374997231606 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968856 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1659 (57866 interne); stringhe deallocate: 1649 (57656 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1659 (57866 interne); stringhe deallocate: 1649 (57666 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.07410141460776276 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4140199007863555 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772640081e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1660 (57916 interne); stringhe deallocate: 1650 (57706 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470292044976e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969000 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1661 (57936 interne); stringhe deallocate: 1651 (57726 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.33750e+000: -9.30548e-001
Calcolo la funzione ext_fun2 in 4.33750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602301779e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969000 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7755335200167254


ris (2 : 2): [ -1 0.7755335200167254 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1661 (57961 interne); stringhe deallocate: 1651 (57751 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.33750e+000: -9.30548e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951034274237082e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969000 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1662 (57986 interne); stringhe deallocate: 1652 (57776 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7755332081884427 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969000 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1663 (58006 interne); stringhe deallocate: 1653 (57796 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1663 (58006 interne); stringhe deallocate: 1653 (57806 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.06945172038690972 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4117140521343063 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950901864643996e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425272 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1664 (58056 interne); stringhe deallocate: 1654 (57846 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772640856e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968928 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1665 (58076 interne); stringhe deallocate: 1655 (57866 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.39231e+000: -9.49210e-001
Calcolo la funzione ext_fun2 in 4.39231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772641457e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968928 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7755152250401759


ris (2 : 2): [ -1 0.7755152250401759 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1665 (58101 interne); stringhe deallocate: 1655 (57891 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.39231e+000: -9.49210e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950903445654063e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968928 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1666 (58126 interne); stringhe deallocate: 1656 (57916 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7755150883765483 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968928 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1667 (58146 interne); stringhe deallocate: 1657 (57936 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1667 (58146 interne); stringhe deallocate: 1657 (57946 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.05079015556448696 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4041374441570305 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950954037976197e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1668 (58196 interne); stringhe deallocate: 1658 (57986 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772642374e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969408 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1669 (58216 interne); stringhe deallocate: 1659 (58006 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.40000e+000: -9.51602e-001
Calcolo la funzione ext_fun2 in 4.40000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772642168e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969408 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7755126815521706


ris (2 : 2): [ -1 0.7755126815521706 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1669 (58241 interne); stringhe deallocate: 1659 (58031 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.40000e+000: -9.51602e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950955618986264e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969408 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1670 (58266 interne); stringhe deallocate: 1660 (58056 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7755122273537696 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969408 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1671 (58286 interne); stringhe deallocate: 1661 (58076 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1671 (58286 interne); stringhe deallocate: 1661 (58086 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.04839792611048399 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4033352555412613 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951029926459398e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1672 (58336 interne); stringhe deallocate: 1662 (58126 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826135871e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1673 (58356 interne); stringhe deallocate: 1663 (58146 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.35000e+000: -9.35053e-001
Calcolo la funzione ext_fun2 in 4.35000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772642413e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7755292824407611


ris (2 : 2): [ -1 0.7755292824407611 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1673 (58381 interne); stringhe deallocate: 1663 (58171 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.35000e+000: -9.35053e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951031507469465e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1674 (58406 interne); stringhe deallocate: 1664 (58196 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7755289166541255 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1675 (58426 interne); stringhe deallocate: 1665 (58216 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1675 (58426 interne); stringhe deallocate: 1665 (58226 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.06494742244155094 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4096513178905248 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277264073e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1676 (58476 interne); stringhe deallocate: 1666 (58266 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772641844e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969576 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1677 (58496 interne); stringhe deallocate: 1667 (58286 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.40000e+000: -9.51602e-001
Calcolo la funzione ext_fun2 in 4.40000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.060400684202772e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969576 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7755128098327756


ris (2 : 2): [ -1 0.7755128098327756 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1677 (58521 interne); stringhe deallocate: 1667 (58311 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.40000e+000: -9.51602e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950950875956064e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969576 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1678 (58546 interne); stringhe deallocate: 1668 (58336 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7755127041908683 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969576 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1679 (58566 interne); stringhe deallocate: 1669 (58356 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1679 (58566 interne); stringhe deallocate: 1669 (58366 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.04839792611048399 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4033352555412613 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951003444540781e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425272 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1680 (58616 interne); stringhe deallocate: 1670 (58406 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772638651e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969824 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1681 (58636 interne); stringhe deallocate: 1671 (58426 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.40000e+000: -9.51602e-001
Calcolo la funzione ext_fun2 in 4.40000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277264084e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969824 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7755128098327756


ris (2 : 2): [ -1 0.7755128098327756 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1681 (58661 interne); stringhe deallocate: 1671 (58451 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.40000e+000: -9.51602e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951005025550848e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969824 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1682 (58686 interne); stringhe deallocate: 1672 (58476 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7755127041905094 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969824 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1683 (58706 interne); stringhe deallocate: 1673 (58496 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1683 (58706 interne); stringhe deallocate: 1673 (58506 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.04839792611048399 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4033352555412613 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950843762524045e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425240 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1684 (58756 interne); stringhe deallocate: 1674 (58546 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772642809e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79967176 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1685 (58776 interne); stringhe deallocate: 1675 (58566 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.42500e+000: -9.58987e-001
Calcolo la funzione ext_fun2 in 4.42500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380544468e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970176 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7755048269655608


ris (2 : 2): [ -1 0.7755048269655608 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1685 (58801 interne); stringhe deallocate: 1675 (58591 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.42500e+000: -9.58987e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903048038034e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970176 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1686 (58826 interne); stringhe deallocate: 1676 (58616 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7755045979592854 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970176 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1687 (58846 interne); stringhe deallocate: 1677 (58636 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1687 (58846 interne); stringhe deallocate: 1677 (58646 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.04101276484212657 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4010653670966182 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842686313897554e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1688 (58896 interne); stringhe deallocate: 1678 (58686 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772642896e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1689 (58916 interne); stringhe deallocate: 1679 (58706 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.43750e+000: -9.62455e-001
Calcolo la funzione ext_fun2 in 4.43750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950950085451031e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7755010985378702


ris (2 : 2): [ -1 0.7755010985378702 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1689 (58941 interne); stringhe deallocate: 1679 (58731 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.43750e+000: -9.62455e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951052455852849e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1690 (58966 interne); stringhe deallocate: 1680 (58756 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7755007832620313 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1691 (58986 interne); stringhe deallocate: 1681 (58776 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1691 (58986 interne); stringhe deallocate: 1681 (58786 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.03754466126646061 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4000993566833004 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842720265827015e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1692 (59036 interne); stringhe deallocate: 1682 (58826 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772642935e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1693 (59056 interne); stringhe deallocate: 1683 (58846 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.49231e+000: -9.75880e-001
Calcolo la funzione ext_fun2 in 4.49231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951004235045815e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754848259148962


ris (2 : 2): [ -1 0.7754848259148962 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1693 (59081 interne); stringhe deallocate: 1683 (58871 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.49231e+000: -9.75880e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951057594135566e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1694 (59106 interne); stringhe deallocate: 1684 (58896 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754845707986569 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970352 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1695 (59126 interne); stringhe deallocate: 1685 (58916 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1695 (59126 interne); stringhe deallocate: 1685 (58926 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.02412029336002297 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3968846849668891 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361965847e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1696 (59176 interne); stringhe deallocate: 1686 (58966 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772643077e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1697 (59196 interne); stringhe deallocate: 1687 (58986 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.50000e+000: -9.77530e-001
Calcolo la funzione ext_fun2 in 4.50000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410029033e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754825635877903


ris (2 : 2): [ -1 0.7754825635877903 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1697 (59221 interne); stringhe deallocate: 1687 (59011 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.50000e+000: -9.77530e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951059570398149e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1698 (59246 interne); stringhe deallocate: 1688 (59036 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754821866128818 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79968136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1699 (59266 interne); stringhe deallocate: 1689 (59056 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1699 (59266 interne); stringhe deallocate: 1689 (59066 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.02246988233490299 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3965411420038457 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772642745e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1700 (59316 interne); stringhe deallocate: 1690 (59106 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772642619e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1701 (59336 interne); stringhe deallocate: 1691 (59126 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.45000e+000: -9.65773e-001
Calcolo la funzione ext_fun2 in 4.45000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772641797e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754973293897762


ris (2 : 2): [ -1 0.7754973293897762 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1701 (59361 interne); stringhe deallocate: 1691 (59151 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.45000e+000: -9.65773e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951066684943449e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1702 (59386 interne); stringhe deallocate: 1692 (59176 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754969685647346 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1703 (59406 interne); stringhe deallocate: 1693 (59196 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1703 (59406 interne); stringhe deallocate: 1693 (59206 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.03422693937936117 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3992303458140798 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951042179287415e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1704 (59456 interne); stringhe deallocate: 1694 (59246 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772642524e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969752 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1705 (59476 interne); stringhe deallocate: 1695 (59266 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.50000e+000: -9.77530e-001
Calcolo la funzione ext_fun2 in 4.50000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826136271e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969752 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754826776880689


ris (2 : 2): [ -1 0.7754826776880689 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1705 (59501 interne); stringhe deallocate: 1695 (59291 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.50000e+000: -9.77530e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951043760297482e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969752 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1706 (59526 interne); stringhe deallocate: 1696 (59316 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754826634499779 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969752 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1707 (59546 interne); stringhe deallocate: 1697 (59336 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1707 (59546 interne); stringhe deallocate: 1697 (59346 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.02246988233490299 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3965411420038457 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951037436257215e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1708 (59596 interne); stringhe deallocate: 1698 (59386 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826136064e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970128 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1709 (59616 interne); stringhe deallocate: 1699 (59406 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.50000e+000: -9.77530e-001
Calcolo la funzione ext_fun2 in 4.50000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826136288e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970128 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754826776880689


ris (2 : 2): [ -1 0.7754826776880689 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1709 (59641 interne); stringhe deallocate: 1699 (59431 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.50000e+000: -9.77530e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951039017267282e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970128 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1710 (59666 interne); stringhe deallocate: 1700 (59456 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754826634498944 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970128 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1711 (59686 interne); stringhe deallocate: 1701 (59476 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1711 (59686 interne); stringhe deallocate: 1701 (59486 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.02246988233490299 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3965411420038457 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951000282520648e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1712 (59736 interne); stringhe deallocate: 1702 (59526 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772641686e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1713 (59756 interne); stringhe deallocate: 1703 (59546 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.52500e+000: -9.82494e-001
Calcolo la funzione ext_fun2 in 4.52500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772642761e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754755772587195


ris (2 : 2): [ -1 0.7754755772587195 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1713 (59781 interne); stringhe deallocate: 1703 (59571 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.52500e+000: -9.82494e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951001863530715e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1714 (59806 interne); stringhe deallocate: 1704 (59596 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754755108925107 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1715 (59826 interne); stringhe deallocate: 1705 (59616 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1715 (59826 interne); stringhe deallocate: 1705 (59626 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.01750599853115431 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3955684332318669 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950995539490448e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1716 (59876 interne); stringhe deallocate: 1706 (59666 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826136364e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970336 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1717 (59896 interne); stringhe deallocate: 1707 (59686 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.53750e+000: -9.84746e-001
Calcolo la funzione ext_fun2 in 4.53750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772642603e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970336 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754722609769014


ris (2 : 2): [ -1 0.7754722609769014 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1717 (59921 interne); stringhe deallocate: 1707 (59711 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.53750e+000: -9.84746e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.950997120500515e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970336 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1718 (59946 interne); stringhe deallocate: 1708 (59736 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754721730325924 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970336 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1719 (59966 interne); stringhe deallocate: 1709 (59756 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1719 (59966 interne); stringhe deallocate: 1709 (59766 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.01525413774520024 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.395155605714428 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951079728276499e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1720 (60016 interne); stringhe deallocate: 1710 (59806 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826136377e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970480 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1721 (60036 interne); stringhe deallocate: 1711 (59826 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.59231e+000: -9.92799e-001
Calcolo la funzione ext_fun2 in 4.59231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772642508e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970480 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754577871535687


ris (2 : 2): [ -1 0.7754577871535687 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1721 (60061 interne); stringhe deallocate: 1711 (59851 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.59231e+000: -9.92799e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951081309286566e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970480 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1722 (60086 interne); stringhe deallocate: 1712 (59876 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754573910806961 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970480 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1723 (60106 interne); stringhe deallocate: 1713 (59896 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1723 (60106 interne); stringhe deallocate: 1713 (59906 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.007201098601362976 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3938119818382677 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951083285549149e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1724 (60156 interne); stringhe deallocate: 1714 (59946 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826136507e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970776 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1725 (60176 interne); stringhe deallocate: 1715 (59966 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.60000e+000: -9.93691e-001
Calcolo la funzione ext_fun2 in 4.60000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772641765e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970776 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754557749074236


ris (2 : 2): [ -1 0.7754557749074236 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1725 (60201 interne); stringhe deallocate: 1715 (59991 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.60000e+000: -9.93691e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951084866559216e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970776 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1726 (60226 interne); stringhe deallocate: 1716 (60016 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754554837321406 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970776 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1727 (60246 interne); stringhe deallocate: 1717 (60036 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1727 (60246 interne); stringhe deallocate: 1717 (60046 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.00630899636653548 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3936750733492596 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772644097e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1728 (60296 interne); stringhe deallocate: 1718 (60086 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772642216e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1729 (60316 interne); stringhe deallocate: 1719 (60106 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.55000e+000: -9.86844e-001
Calcolo la funzione ext_fun2 in 4.55000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842584458099413e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754689084759731


ris (2 : 2): [ -1 0.7754689084759731 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1729 (60341 interne); stringhe deallocate: 1719 (60131 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.55000e+000: -9.86844e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951119253528167e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1730 (60366 interne); stringhe deallocate: 1720 (60156 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754688351723553 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970848 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1731 (60386 interne); stringhe deallocate: 1721 (60176 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1731 (60386 interne); stringhe deallocate: 1721 (60186 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.01315614149676336 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3947860978624828 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772642524e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1732 (60436 interne); stringhe deallocate: 1722 (60226 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470315997278e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969168 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1733 (60456 interne); stringhe deallocate: 1723 (60246 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.60000e+000: -9.93691e-001
Calcolo la funzione ext_fun2 in 4.60000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602303131e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969168 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754558763948898


ris (2 : 2): [ -1 0.7754558763948898 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1733 (60481 interne); stringhe deallocate: 1723 (60271 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.60000e+000: -9.93691e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951023602419132e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969168 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1734 (60506 interne); stringhe deallocate: 1724 (60296 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754554837321939 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969168 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1735 (60526 interne); stringhe deallocate: 1725 (60316 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1735 (60526 interne); stringhe deallocate: 1725 (60326 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.00630899636653548 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3936750733492596 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.9511413876691e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1736 (60576 interne); stringhe deallocate: 1726 (60366 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826136604e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972080 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1737 (60596 interne); stringhe deallocate: 1727 (60386 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.60000e+000: -9.93691e-001
Calcolo la funzione ext_fun2 in 4.60000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951084076054183e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972080 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754558763948898


ris (2 : 2): [ -1 0.7754558763948898 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1737 (60621 interne); stringhe deallocate: 1727 (60411 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.60000e+000: -9.93691e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951142968679167e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972080 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1738 (60646 interne); stringhe deallocate: 1728 (60436 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754554837321983 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972080 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1739 (60666 interne); stringhe deallocate: 1729 (60456 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1739 (60666 interne); stringhe deallocate: 1729 (60466 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.00630899636653548 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3936750733492596 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84265236196527e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1740 (60716 interne); stringhe deallocate: 1730 (60506 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772644168e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972024 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1741 (60736 interne); stringhe deallocate: 1731 (60526 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.62500e+000: -9.96184e-001
Calcolo la funzione ext_fun2 in 4.62500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842584458101856e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972024 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754495608574283


ris (2 : 2): [ -1 0.7754495608574283 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1741 (60761 interne); stringhe deallocate: 1731 (60551 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.62500e+000: -9.96184e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95114494494175e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972024 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1742 (60786 interne); stringhe deallocate: 1732 (60576 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754492848490884 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972024 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1743 (60806 interne); stringhe deallocate: 1733 (60596 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1743 (60806 interne); stringhe deallocate: 1733 (60606 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.003815987513520747 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3933042580304736 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772641686e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1744 (60856 interne); stringhe deallocate: 1734 (60646 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470308013178e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970424 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1745 (60876 interne); stringhe deallocate: 1735 (60666 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.63750e+000: -9.97197e-001
Calcolo la funzione ext_fun2 in 4.63750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951022811914098e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970424 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754466111622725


ris (2 : 2): [ -1 0.7754466111622725 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1745 (60901 interne); stringhe deallocate: 1735 (60691 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.63750e+000: -9.97197e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95112122979075e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970424 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1746 (60926 interne); stringhe deallocate: 1736 (60716 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754464238260086 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970424 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1747 (60946 interne); stringhe deallocate: 1737 (60736 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1747 (60946 interne); stringhe deallocate: 1737 (60746 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.002802869365886029 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3931583936971835 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361967697e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1748 (60996 interne); stringhe deallocate: 1738 (60786 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826136618e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1749 (61016 interne); stringhe deallocate: 1739 (60806 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.69231e+000: -9.99798e-001
Calcolo la funzione ext_fun2 in 4.69231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951142178174134e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754337372966272


ris (2 : 2): [ -1 0.7754337372966272 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1749 (61041 interne); stringhe deallocate: 1739 (60831 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.69231e+000: -9.99798e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951063127670799e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1750 (61066 interne); stringhe deallocate: 1740 (60856 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.775433549222929 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972152 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1751 (61086 interne); stringhe deallocate: 1741 (60876 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1751 (61086 interne); stringhe deallocate: 1741 (60886 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.0002016222897933684 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927961974857928 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842652361967222e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1752 (61136 interne); stringhe deallocate: 1742 (60926 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772644492e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969168 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1753 (61156 interne); stringhe deallocate: 1743 (60946 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.70000e+000: -9.99923e-001
Calcolo la funzione ext_fun2 in 4.70000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842686313900384e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969168 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754319474871261


ris (2 : 2): [ -1 0.7754319474871261 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1753 (61181 interne); stringhe deallocate: 1743 (60971 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.70000e+000: -9.99923e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.9511485022144e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969168 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1754 (61206 interne); stringhe deallocate: 1744 (60996 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754316418742713 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79969168 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1755 (61226 interne); stringhe deallocate: 1745 (61016 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1755 (61226 interne); stringhe deallocate: 1745 (61026 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 7.674243589916863e-005 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927792454264572 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951135854133867e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425288 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1756 (61276 interne); stringhe deallocate: 1746 (61066 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772643781e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1757 (61296 interne); stringhe deallocate: 1747 (61086 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.65000e+000: -9.98054e-001
Calcolo la funzione ext_fun2 in 4.65000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772644153e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754436292517203


ris (2 : 2): [ -1 0.7754436292517203 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1757 (61321 interne); stringhe deallocate: 1747 (61111 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.65000e+000: -9.98054e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951137435143934e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1758 (61346 interne); stringhe deallocate: 1748 (61136 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754435628031464 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1759 (61366 interne); stringhe deallocate: 1749 (61156 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1759 (61366 interne); stringhe deallocate: 1749 (61166 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.001945561241120553 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3930370855028942 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772643022e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1760 (61416 interne); stringhe deallocate: 1750 (61206 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470314100066e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1761 (61436 interne); stringhe deallocate: 1751 (61226 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.70000e+000: -9.99923e-001
Calcolo la funzione ext_fun2 in 4.70000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842584458100781e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754320377560187


ris (2 : 2): [ -1 0.7754320377560187 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1761 (61461 interne); stringhe deallocate: 1751 (61251 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.70000e+000: -9.99923e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951101862417433e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1762 (61486 interne); stringhe deallocate: 1752 (61276 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754316418742411 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1763 (61506 interne); stringhe deallocate: 1753 (61296 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1763 (61506 interne); stringhe deallocate: 1753 (61306 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 7.674243589916863e-005 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927792454264572 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772644532e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1764 (61556 interne); stringhe deallocate: 1754 (61346 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470318250218e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971864 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1765 (61576 interne); stringhe deallocate: 1755 (61366 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.70000e+000: -9.99923e-001
Calcolo la funzione ext_fun2 in 4.70000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602304522e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971864 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754320377560187


ris (2 : 2): [ -1 0.7754320377560187 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1765 (61601 interne); stringhe deallocate: 1755 (61391 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.70000e+000: -9.99923e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951123996558367e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971864 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1766 (61626 interne); stringhe deallocate: 1756 (61416 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754316418743343 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971864 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1767 (61646 interne); stringhe deallocate: 1757 (61436 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1767 (61646 interne); stringhe deallocate: 1757 (61446 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 7.674243589916863e-005 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927792454264572 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951163917062551e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1768 (61696 interne); stringhe deallocate: 1758 (61486 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826136642e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970408 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1769 (61716 interne); stringhe deallocate: 1759 (61506 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.72500e+000: -9.99920e-001
Calcolo la funzione ext_fun2 in 4.72500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772644477e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970408 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754264203473431


ris (2 : 2): [ -1 0.7754264203473431 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1769 (61741 interne); stringhe deallocate: 1759 (61531 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.72500e+000: -9.99920e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951165498072617e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970408 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1770 (61766 interne); stringhe deallocate: 1760 (61556 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754263966655701 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970408 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1771 (61786 interne); stringhe deallocate: 1761 (61576 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1771 (61786 interne); stringhe deallocate: 1761 (61586 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 7.951785399828992e-005 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3927796217539465 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410034622e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1772 (61836 interne); stringhe deallocate: 1762 (61626 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772645125e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972520 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1773 (61856 interne); stringhe deallocate: 1763 (61646 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.73750e+000: -9.99685e-001
Calcolo la funzione ext_fun2 in 4.73750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535244380553436e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754237967158217


ris (2 : 2): [ -1 0.7754237967158217 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1773 (61881 interne); stringhe deallocate: 1763 (61671 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.73750e+000: -9.99685e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903048047938e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1774 (61906 interne); stringhe deallocate: 1764 (61696 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754235356426511 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1775 (61926 interne); stringhe deallocate: 1765 (61716 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1775 (61926 interne); stringhe deallocate: 1765 (61726 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.0003152650863217366 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3928116583556816 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425280 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1776 (61976 interne); stringhe deallocate: 1766 (61766 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772643504e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971192 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1777 (61996 interne); stringhe deallocate: 1767 (61786 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.79231e+000: -9.96808e-001
Calcolo la funzione ext_fun2 in 4.79231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842618410034606e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971192 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754123459461912


ris (2 : 2): [ -1 0.7754123459461912 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1777 (62021 interne); stringhe deallocate: 1767 (61811 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.79231e+000: -9.96808e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951168264840234e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971192 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1778 (62046 interne); stringhe deallocate: 1768 (61836 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754120915506739 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971192 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1779 (62066 interne); stringhe deallocate: 1769 (61856 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1779 (62066 interne); stringhe deallocate: 1769 (61866 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.003191800878900142 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3932140664890764 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951132296861217e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1780 (62116 interne); stringhe deallocate: 1770 (61906 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772645196e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1781 (62136 interne); stringhe deallocate: 1771 (61926 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.80000e+000: -9.96165e-001
Calcolo la funzione ext_fun2 in 4.80000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772645038e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754107539848608


ris (2 : 2): [ -1 0.7754107539848608 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1781 (62161 interne); stringhe deallocate: 1771 (61951 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.80000e+000: -9.96165e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951088028579349e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1782 (62186 interne); stringhe deallocate: 1772 (61976 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754106610393894 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972232 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1783 (62206 interne); stringhe deallocate: 1773 (61996 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1783 (62206 interne); stringhe deallocate: 1773 (62006 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.00383539116415943 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3933070785154008 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951171031607851e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1784 (62256 interne); stringhe deallocate: 1774 (62046 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826136346e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971176 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1785 (62276 interne); stringhe deallocate: 1775 (62066 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.75000e+000: -9.99293e-001
Calcolo la funzione ext_fun2 in 4.75000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772644824e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971176 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754211444300412


ris (2 : 2): [ -1 0.7754211444300412 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1785 (62301 interne); stringhe deallocate: 1775 (62091 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.75000e+000: -9.99293e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951172612617917e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971176 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1786 (62326 interne); stringhe deallocate: 1776 (62116 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.775421151456654 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971176 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1787 (62346 interne); stringhe deallocate: 1777 (62136 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1787 (62346 interne); stringhe deallocate: 1777 (62146 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.000707211024622012 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3928652328245905 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951074985246299e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425296 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1788 (62396 interne); stringhe deallocate: 1778 (62186 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772645623e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971792 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1789 (62416 interne); stringhe deallocate: 1779 (62206 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.80000e+000: -9.96165e-001
Calcolo la funzione ext_fun2 in 4.80000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772643006e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971792 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754108342752974


ris (2 : 2): [ -1 0.7754108342752974 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1789 (62441 interne); stringhe deallocate: 1779 (62231 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.80000e+000: -9.96165e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951076566256366e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971792 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1790 (62466 interne); stringhe deallocate: 1780 (62256 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754106610394373 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971792 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1791 (62486 interne); stringhe deallocate: 1781 (62276 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1791 (62486 interne); stringhe deallocate: 1781 (62286 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.00383539116415943 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3933070785154008 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951192375243751e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1792 (62536 interne); stringhe deallocate: 1782 (62326 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826136543e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1793 (62556 interne); stringhe deallocate: 1783 (62346 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.80000e+000: -9.96165e-001
Calcolo la funzione ext_fun2 in 4.80000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772644406e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754108342752974


ris (2 : 2): [ -1 0.7754108342752974 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1793 (62581 interne); stringhe deallocate: 1783 (62371 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.80000e+000: -9.96165e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951193956253818e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1794 (62606 interne); stringhe deallocate: 1784 (62396 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754106610392908 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1795 (62626 interne); stringhe deallocate: 1785 (62416 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1795 (62626 interne); stringhe deallocate: 1785 (62426 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.00383539116415943 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3933070785154008 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.9511271585785e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1796 (62676 interne); stringhe deallocate: 1786 (62466 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772645315e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972536 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1797 (62696 interne); stringhe deallocate: 1787 (62486 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.82500e+000: -9.93666e-001
Calcolo la funzione ext_fun2 in 4.82500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277264518e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972536 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754058378232265


ris (2 : 2): [ -1 0.7754058378232265 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1797 (62721 interne); stringhe deallocate: 1787 (62511 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.82500e+000: -9.93666e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951128739588567e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972536 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1798 (62746 interne); stringhe deallocate: 1788 (62536 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754054158306625 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972536 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1799 (62766 interne); stringhe deallocate: 1789 (62556 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1799 (62766 interne); stringhe deallocate: 1789 (62566 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.006333923122312402 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3936788681598589 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951176960395601e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1800 (62816 interne); stringhe deallocate: 1790 (62606 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772645386e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1801 (62836 interne); stringhe deallocate: 1791 (62626 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.83750e+000: -9.92184e-001
Calcolo la funzione ext_fun2 in 4.83750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772643259e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754035042117866


ris (2 : 2): [ -1 0.7754035042117866 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1801 (62861 interne); stringhe deallocate: 1791 (62651 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.83750e+000: -9.92184e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951178541405668e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1802 (62886 interne); stringhe deallocate: 1792 (62676 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754035084820377 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970912 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1803 (62906 interne); stringhe deallocate: 1793 (62696 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1803 (62906 interne); stringhe deallocate: 1793 (62706 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.007816180226176139 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3939077021248463 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951180517668251e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1804 (62956 interne); stringhe deallocate: 1794 (62746 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826136843e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972624 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1805 (62976 interne); stringhe deallocate: 1795 (62766 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.89231e+000: -9.83858e-001
Calcolo la funzione ext_fun2 in 4.89231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772645607e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972624 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7753933192270475


ris (2 : 2): [ -1 0.7753933192270475 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1805 (63001 interne); stringhe deallocate: 1795 (62791 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.89231e+000: -9.83858e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951182098678318e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972624 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1806 (63026 interne); stringhe deallocate: 1796 (62816 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7753930180646158 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972624 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1807 (63046 interne); stringhe deallocate: 1797 (62836 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1807 (63046 interne); stringhe deallocate: 1797 (62846 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.01614175749264246 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3953162897185191 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951206604334351e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1808 (63096 interne); stringhe deallocate: 1798 (62886 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772645575e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1809 (63116 interne); stringhe deallocate: 1799 (62906 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.90000e+000: -9.82453e-001
Calcolo la funzione ext_fun2 in 4.90000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772644303e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7753919032434604


ris (2 : 2): [ -1 0.7753919032434604 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1809 (63141 interne); stringhe deallocate: 1799 (62931 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.90000e+000: -9.82453e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951208185344418e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1810 (63166 interne); stringhe deallocate: 1800 (62956 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7753915875531039 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79970680 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1811 (63186 interne); stringhe deallocate: 1801 (62976 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1811 (63186 interne); stringhe deallocate: 1801 (62986 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.01754738737566752 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3955761822480285 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951190003728651e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1812 (63236 interne); stringhe deallocate: 1802 (63026 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772643726e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79973056 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1813 (63256 interne); stringhe deallocate: 1803 (63046 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.85000e+000: -9.90547e-001
Calcolo la funzione ext_fun2 in 4.85000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772645299e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79973056 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7754011451135713


ris (2 : 2): [ -1 0.7754011451135713 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1813 (63281 interne); stringhe deallocate: 1803 (63071 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.85000e+000: -9.90547e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951191584738718e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79973056 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1814 (63306 interne); stringhe deallocate: 1804 (63096 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7754011242960601 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79973056 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1815 (63326 interne); stringhe deallocate: 1805 (63116 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1815 (63326 interne); stringhe deallocate: 1805 (63126 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.00945346403328684 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3941678724798444 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95109751463975e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1816 (63376 interne); stringhe deallocate: 1806 (63166 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772645979e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971736 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1817 (63396 interne); stringhe deallocate: 1807 (63186 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.90000e+000: -9.82453e-001
Calcolo la funzione ext_fun2 in 4.90000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277264537e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971736 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7753919746584743


ris (2 : 2): [ -1 0.7753919746584743 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1817 (63421 interne); stringhe deallocate: 1807 (63211 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.90000e+000: -9.82453e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951099095649816e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971736 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1818 (63446 interne); stringhe deallocate: 1808 (63236 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7753915875531492 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971736 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1819 (63466 interne); stringhe deallocate: 1809 (63256 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1819 (63466 interne); stringhe deallocate: 1809 (63266 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.01754738737566752 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3955761822480285 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951210161607001e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1820 (63516 interne); stringhe deallocate: 1810 (63306 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 1.050852826136812e-285 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972744 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1821 (63536 interne); stringhe deallocate: 1811 (63326 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.90000e+000: -9.82453e-001
Calcolo la funzione ext_fun2 in 4.90000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772645892e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972744 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7753919746584743


ris (2 : 2): [ -1 0.7753919746584743 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1821 (63561 interne); stringhe deallocate: 1811 (63351 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.90000e+000: -9.82453e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951211742617068e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972744 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1822 (63586 interne); stringhe deallocate: 1812 (63376 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7753915875531225 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79972744 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1823 (63606 interne); stringhe deallocate: 1813 (63396 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1823 (63606 interne); stringhe deallocate: 1813 (63406 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.01754738737566752 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3955761822480285 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951198304031501e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425312 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1824 (63656 interne); stringhe deallocate: 1814 (63446 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772643971e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79973416 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1825 (63676 interne); stringhe deallocate: 1815 (63466 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.92500e+000: -9.77483e-001
Calcolo la funzione ext_fun2 in 4.92500e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.84130277264556e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79973416 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7753875305215531


ris (2 : 2): [ -1 0.7753875305215531 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1825 (63701 interne); stringhe deallocate: 1815 (63491 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.92500e+000: -9.77483e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951199885041568e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79973416 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1826 (63726 interne); stringhe deallocate: 1816 (63516 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7753872960184998 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79973416 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1827 (63746 interne); stringhe deallocate: 1817 (63536 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1827 (63746 interne); stringhe deallocate: 1817 (63546 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.02251671136845346 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3965507471438758 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772645386e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1828 (63796 interne); stringhe deallocate: 1818 (63586 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470313270036e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79973344 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1829 (63816 interne); stringhe deallocate: 1819 (63606 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.93750e+000: -9.74769e-001
Calcolo la funzione ext_fun2 in 4.93750e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842686313899419e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79973344 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7753854548709488


ris (2 : 2): [ -1 0.7753854548709488 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1829 (63841 interne); stringhe deallocate: 1819 (63631 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.93750e+000: -9.74769e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951111348477833e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79973344 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1830 (63866 interne); stringhe deallocate: 1820 (63656 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7753853886698767 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79973344 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1831 (63886 interne); stringhe deallocate: 1821 (63676 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1831 (63886 interne); stringhe deallocate: 1821 (63686 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.02523066812084462 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3971217312519721 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.95111411524545e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1832 (63936 interne); stringhe deallocate: 1822 (63726 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772645441e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971384 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1833 (63956 interne); stringhe deallocate: 1823 (63746 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.99231e+000: -9.61078e-001
Calcolo la funzione ext_fun2 in 4.99231e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772645963e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971384 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7753763957493802


ris (2 : 2): [ -1 0.7753763957493802 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1833 (63981 interne); stringhe deallocate: 1823 (63771 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.99231e+000: -9.61078e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951115696255516e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971384 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1834 (64006 interne); stringhe deallocate: 1824 (63796 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7753763287640263 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971384 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1835 (64026 interne); stringhe deallocate: 1825 (63816 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1835 (64026 interne); stringhe deallocate: 1825 (63826 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.03892210044522237 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.4004757903272402 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772645575e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425248 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1836 (64076 interne); stringhe deallocate: 1826 (63866 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 2.419470326669096e-312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1837 (64096 interne); stringhe deallocate: 1827 (63886 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.00000e+000: -9.58924e-001
Calcolo la funzione ext_fun2 in 5.00000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842482602305502e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7753751362906984


ris (2 : 2): [ -1 0.7753751362906984 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1837 (64121 interne); stringhe deallocate: 1827 (63911 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.00000e+000: -9.58924e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951184865445934e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1838 (64146 interne); stringhe deallocate: 1828 (63936 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7753748982526973 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971136 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1839 (64166 interne); stringhe deallocate: 1829 (63956 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1839 (64166 interne); stringhe deallocate: 1829 (63966 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.04107572533686155 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.401083470070657 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951248105848602e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425224 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1840 (64216 interne); stringhe deallocate: 1830 (64006 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 9.457766840031357e-286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971424 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1841 (64236 interne); stringhe deallocate: 1831 (64026 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.95000e+000: -9.71903e-001
Calcolo la funzione ext_fun2 in 4.95000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772643955e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971424 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7753833565509147


ris (2 : 2): [ -1 0.7753833565509147 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1841 (64261 interne); stringhe deallocate: 1831 (64051 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 4.95000e+000: -9.71903e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.951249686858669e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971424 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1842 (64286 interne); stringhe deallocate: 1832 (64076 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7753830044721184 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79971424 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1843 (64306 interne); stringhe deallocate: 1833 (64096 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1843 (64306 interne); stringhe deallocate: 1833 (64106 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.02809693059817919 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.3977563620810369 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


*** target ***
85: abs_m_d	<=>	ris <- abs(m)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
------------------------------ Fine abs_m_d

86: somma_righe_d	<=>	ris <- apply(m, 1, sum)
tmp_d (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]


tmp1_d (5 : 5): [ 0 2 1 0 0 ]
------------------------------ Fine somma_righe_d

88: which_v_indxne_d	<=>	ris <- which(v != val)
tmp1_d (5 : 5): [ 0 2 1 0 0 ]
val = 0


ind_reg (2 : 5): [ 2 3 ]
------------------------------ Fine which_v_indxne_d

Controllo la funzione ext_fun1 definita come 'sin(x)' ... ok
Controllo la funzione ext_fun2 definita come 'if(x < 1, 0, x - 1)' ... ok

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 1 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945788482835798e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 2425264 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1844 (64356 interne); stringhe deallocate: 1834 (64146 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 1
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 2 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.8413027726439e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79974184 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1845 (64376 interne); stringhe deallocate: 1835 (64166 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 2
ind_reg (2 : 5): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 2
val = 0


ind (2 : 10): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.00000e+000: -9.58924e-001
Calcolo la funzione ext_fun2 in 5.00000e+000: 0.00000e+000

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 3 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841302772644042e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79974184 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7753751998113918


ris (2 : 2): [ -1 0.7753751998113918 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1845 (64401 interne); stringhe deallocate: 1835 (64191 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 3
ind_reg (2 : 5): [ 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

124: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
ext_in (5 x 2 : 5 x 2): [
	 0 0
	 1 1
	 1 0
	 0 0
	 0 0
 ]
r = 3
val = 0


ind (1 : 10): [ 1 ]
------------------------------ Fine which_m_rowindxne_d

Calcolo la funzione ext_fun1 in 5.00000e+000: -9.58924e-001

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 4 (1 : 1): [ 5 ]
st = 1
end = 1


r (1 : 1): [ 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 3.945790063845865e-316 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79974184 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1846 (64426 interne); stringhe deallocate: 1836 (64216 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 4
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
Lista r 5 (1 : 1): [ 1 ]
st = 1
end = 1


r (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7753748982523785 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79974184 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

ATTENZIONE (boole_result.c, linea 42): divisione per zero!

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 0, el2 = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1847 (64446 interne); stringhe deallocate: 1837 (64236 interne)

122: esiste_v_i	<=>	elem %IN% v
elem = 5
ind_reg (2 : 5): [ 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 1847 (64446 interne); stringhe deallocate: 1837 (64246 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 0 0.04107572533686155 0 0 0 ]
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.6678634016690571 0.401083470070657 0.5777023782457583 0.6159125446867719 0.7752402230371419 ]
------------------------------ Fine f_aux5_d


Stringhe allocate: 1847 (64451 interne); stringhe deallocate: 1837 (64266 interne)

118: moltiplica1_mv_d	m <- m * v
ris (5 x 51 : 5 x 51): [
	 0.8988629876690203 0.87602881029155 0.8554517783726388 0.836908774119874 0.8201987352819193 0.8051404742709336 0.7915707137889927 0.7793423164061272 0.7683226891435622 0.7583923457629965 0.7494436111727677 0.7413794539027301 0.7341124339883269 0.7275637548557231 0.721662408927552 0.7163444076850488 0.7115520878381034 0.7072334860800081 0.7033417756473434 0.6998347585755975 0.6966744081450299 0.6938264565554995 0.6912600233594022 0.6889472806406762 0.6868631512251383 0.6849850367970968 0.6832925729111535 0.6817674081169034 0.6803930049943673 0.679154460838117 0.6780383460666729 0.6770325586050394 0.6761261926702545 0.6753094204833667 0.6745733857622066 0.6739101076542465 0.6733123942096883 0.6727737643988772 0.6722883778382506 0.6718509714628365 0.6714568024586392 0.6711015968361266 0.6707815030871992 0.6704930504231405 0.6702331111407227 0.6699988667084019 0.6697877772048727 0.6695975537786051 0.6694261338297396 0.669271658645239 0.6691324532447914
	 0.86013003877782 0.827644063860309 0.8284449241176977 0.8416387566956004 0.8542931389745501 0.8659479278675236 0.8364041811061104 0.8292239021767097 0.8412903819385178 0.853920439003065 0.8656024770763187 0.8763526658223466 0.8862431162348768 0.8953424893788468 0.9037140265832653 0.9114159331563634 0.9185017661237402 0.9250208006256457 0.9310183694152123 0.9365361742622809 0.9416125666760589 0.9462827855440875 0.950579098739233 0.9545306183099624 0.9581617155059563 0.9614836144199412 0.9644496795286364 0.9667071367348633 0.9662741431024243 0.9553411020986037 0.9252724062482997 0.8855526892151542 0.8714528687188933 0.8817351695316278 0.8911938421883571 0.8998888332462897 0.9078472867894309 0.9149513681339581 0.9204656483481393 0.9216466322908861 0.9126765325698929 0.8902018917424558 0.858959880269062 0.8251402563884482 0.7919429541681388 0.7605448176834143 0.7312946716868601 0.7042419361773605 0.6793398685877315 0.6565374123617475 0.6358556720062135
	 0.7529666664997292 0.7633589776155123 0.7840184321340464 0.8049239801603572 0.8240866345137998 0.8414048891496551 0.8570236681221806 0.871105133384369 0.8837998905731964 0.8952443796798065 0.869245201929208 0.8437363057264525 0.8255969863960625 0.8155085168149417 0.8121038128994914 0.8128118688386956 0.815070480546035 0.8166714892670883 0.8155895208035062 0.8099597062435128 0.7987448018362903 0.7827754380178047 0.7644668818145106 0.7646830107336262 0.7878592632043207 0.8087528377289185 0.8275883078449923 0.8445669308616007 0.859862405093773 0.8735784155241291 0.885438066278286 0.8928664617962657 0.8864685924550437 0.8632462632251245 0.8357395813718007 0.8103256072093039 0.7874146445308393 0.7667601728021081 0.7481399511911694 0.7313536272709029 0.7162205812393468 0.7025779824618558 0.6902790374235936 0.6791914102404382 0.6691957987330938 0.6601846507430583 0.6520610068780824 0.6447374572351362 0.6381352008752855 0.6321831979304878 0.6268174052190274
	 0.6820456255132146 0.6758127449207684 0.6701672980392988 0.6650539206293483 0.6604224664965475 0.6562275155542413 0.6524279284475214 0.6489864431047594 0.6458693093131696 0.6430459577347278 0.6404887001165286 0.6381724577555799 0.6360745155551256 0.6341742992605561 0.6324531736902875 0.630894259982886 0.6294822700682016 0.6282033567391927 0.6270449778541126 0.6259957733373067 0.6250454537723831 0.6241846994952037 0.6234050691971134 0.6226989171460921 0.6220593181940923 0.6214799998698123 0.6209552808764571 0.620480015361026 0.62004954245454 0.6196596405634879 0.6193064859691905 0.6189866153290743 0.618696891714295 0.6184344738372937 0.6181967882014567 0.6179815038537255 0.6177865095276492 0.6176098929384608 0.6174499220295413 0.6173050279863593 0.6171737898513046 0.6170549205885355 0.6169472544621817 0.6168497356041186 0.6167614076592023 0.6166814044064151 0.6166089412639453 0.6165433075948924 0.6164838597381404 0.6164300146960544 0.6163812444170965
	 0.8224436778595854 0.8172257387250572 0.8125845982537782 0.8084564961738815 0.8047847205603721 0.8015188284155005 0.7986139527845685 0.7960301863719412 0.7937320332930505 0.7916879214305373 0.7898697686952617 0.7882525972334582 0.7868141902799988 0.7855347869436 0.7843968107309214 0.7833846280800089 0.7824843335858061 0.7816835589671529 0.7809713031508526 0.7803377811384955 0.7797742895797662 0.7792730872054751 0.7788272884776971 0.7784307690012298 0.7780780813705485 0.7777643803427329 0.7774853562872293 0.7772371759605919 0.7770164298517355 0.7768200853419367 0.7766454450426 0.7764901097384265 0.7763519454293344 0.7762290540034408 0.7761197471762422 0.7760225232862487 0.7759360466678367 0.7758591293018224 0.7757907144944072 0.7757298623602766 0.7756757369104196 0.7756275945672776 0.7755847739494477 0.7755466867855986 0.7755128098327756 0.7754826776880689 0.7754558763948898 0.7754320377560187 0.7754108342752974 0.7753919746584743 0.7753751998113918
 ]
parm1[j][f][i1] (5 : 5): [ 12.67431725 9.032985081 12.19219754 9.171903361 10.26385753 ]


ris (5 x 51 : 5 x 51): [
	 11.39247467 11.10306706177517 10.84226723117151 10.60724731250387 10.39545897901181 10.20460580172528 10.03261835237064 9.877631764481135 9.737965512578638 9.612105190171912 9.498686088989302 9.396478401394951 9.304373885537737 9.221373848642662 9.146578318147025 9.079176283263646 9.018436901159989 8.963701572401481 8.914376799732754 8.86992775276428 8.829872468786093 8.793776626827743 8.761248838299474 8.731936403364713 8.705521485962128 8.681717667869329 8.660266843644715 8.640936421183859 8.623516799979445 8.607819098414996 8.593673105714302 8.580925436339486 8.569437866937431 8.559085837119838 8.549757099556839 8.541350502391573 8.533774892570651 8.526948127468124 8.520796184209857 8.515252357040685 8.510256534031372 8.505754545282665 8.501697575559017 8.498041634983128 8.494747082052029 8.491778193802748 8.489102778466874 8.486691826413978 8.484519195599077 8.482561328103463 8.480796994695279
	 7.769541808 7.476096481228382 7.48333063998534 7.602510332822747 7.71681717915777 7.822094713350205 7.555226489617517 7.490367137170822 7.599363468839423 7.713450585875656 7.818974261507031 7.916080556067835 8.00542084708859 8.087615348944523 8.163235319617073 8.232806526787122 8.296812750267897 8.355699091666134 8.409875041064559 8.459717289927999 8.505572266866958 8.547758284226864 8.586566817221916 8.622260834551597 8.655060481350668 8.685067144681286 8.711859566557402 8.732251143822246 8.728339918800257 8.629581922522785 8.357971841501861 7.999184230119917 7.871820761932415 7.9647006317722 8.050140680766498 8.128682405272231 8.200570997395257 8.264742058194582 8.314552469101734 8.325220279437467 8.244193502482652 8.04118040718758 7.758971783647983 7.453479625689368 7.153608890003864 6.869989991566146 6.6057738591622 6.361406902904651 6.136466897881479 5.93049265098201 5.743674798901356
	 9.180318338999999 9.307023449020765 9.558907599579378 9.813792170798116 10.04742703806603 10.2585746196344 10.44900185820103 10.62068586433028 10.77546285169879 10.91499632363096 10.59800921261809 10.28699971108674 10.06584154656949 9.942840932560182 9.901330109857799 9.909962867737947 9.937500307839986 9.957020122430331 9.943828549190288 9.875188737961279 9.738454408036207 9.543752769773102 9.320531235870348 9.323166322346312 9.60573577070593 9.86047435862654 10.09012013104048 10.29712685681616 10.48361230012278 10.65084060875038 10.79543581350048 10.88600427906094 10.80800019221765 10.52486896690756 10.1895020680819 9.879649874816282 9.600314892008873 9.348491492607836 9.121470072488696 8.91680789528238 8.732302808683736 8.565969549429601 8.416018381989506 8.280835841122601 8.158967371091961 8.049101674735276 7.95005660398888 7.860766440048083 7.780270426299063 7.707702430637427 7.642281625940609
	 6.255656565 6.198489186545431 6.146709693318933 6.099810289866547 6.057331040139593 6.018855355492626 5.984005909738089 5.952440938755978 5.923850888856208 5.897955381024614 5.874500461281309 5.853256110186034 5.834013987066504 5.816585386847715 5.800799389445065 5.786501183572639 5.773550548528448 5.761820479067684 5.751195939878306 5.741572737444238 5.732856498232691 5.724961743184834 5.717811049433442 5.711334291063302 5.705467951285764 5.700154499600211 5.695341827701476 5.690982738323126 5.687034482425308 5.683458339960306 5.680219240149917 5.677285417550751 5.674628100554595 5.67222122914654 5.670041199464346 5.668066632231819 5.666278163117105 5.664658252829119 5.663191015111938 5.661862060950289 5.660658357458288 5.659568100067577 5.658580596761406 5.657686163219377 5.656876027844529 5.656142245741399 5.655477620801431 5.65487563513165 5.654330385134502 5.653836523612021 5.65338920732653
	 8.441444735999999 8.387888552122991 8.340252547549065 8.297882295931709 8.26019571415252 8.226675062469212 8.196859832850958 8.170340422500951 8.146752506717087 8.125772033784868 8.107110773142219 8.090512355656687 8.075748751616217 8.062617138048013 8.050937112328551 8.040548213805248 8.031307719381706 8.023088682782211 8.015778190558791 8.009275810881839 8.003492213803684 7.998347944040261 7.993772329411293 7.989702509996962 7.986082574403056 7.982862791746542 7.97999892859341 7.977451641079056 7.975185934467452 7.973170682392079 7.971378199240691 7.969783859809274 7.968365761025022 7.967104420937992 7.965982511236569 7.964984619081163 7.964097035390107 7.963307566503754 7.962605366667501 7.961980789032388 7.961425253126309 7.960931126975138 7.960491622254386 7.960100701030917 7.959752992813591 7.959443720773249 7.959168636118438 7.958923959725356 7.958706330220093 7.958512757799951 7.958340583159408
 ]
------------------------------ Fine moltiplica1_mv_d


*** write_m_d ***
ris (5 x 51 : 5 x 51): [
	 11.39247467 11.10306706177517 10.84226723117151 10.60724731250387 10.39545897901181 10.20460580172528 10.03261835237064 9.877631764481135 9.737965512578638 9.612105190171912 9.498686088989302 9.396478401394951 9.304373885537737 9.221373848642662 9.146578318147025 9.079176283263646 9.018436901159989 8.963701572401481 8.914376799732754 8.86992775276428 8.829872468786093 8.793776626827743 8.761248838299474 8.731936403364713 8.705521485962128 8.681717667869329 8.660266843644715 8.640936421183859 8.623516799979445 8.607819098414996 8.593673105714302 8.580925436339486 8.569437866937431 8.559085837119838 8.549757099556839 8.541350502391573 8.533774892570651 8.526948127468124 8.520796184209857 8.515252357040685 8.510256534031372 8.505754545282665 8.501697575559017 8.498041634983128 8.494747082052029 8.491778193802748 8.489102778466874 8.486691826413978 8.484519195599077 8.482561328103463 8.480796994695279
	 7.769541808 7.476096481228382 7.48333063998534 7.602510332822747 7.71681717915777 7.822094713350205 7.555226489617517 7.490367137170822 7.599363468839423 7.713450585875656 7.818974261507031 7.916080556067835 8.00542084708859 8.087615348944523 8.163235319617073 8.232806526787122 8.296812750267897 8.355699091666134 8.409875041064559 8.459717289927999 8.505572266866958 8.547758284226864 8.586566817221916 8.622260834551597 8.655060481350668 8.685067144681286 8.711859566557402 8.732251143822246 8.728339918800257 8.629581922522785 8.357971841501861 7.999184230119917 7.871820761932415 7.9647006317722 8.050140680766498 8.128682405272231 8.200570997395257 8.264742058194582 8.314552469101734 8.325220279437467 8.244193502482652 8.04118040718758 7.758971783647983 7.453479625689368 7.153608890003864 6.869989991566146 6.6057738591622 6.361406902904651 6.136466897881479 5.93049265098201 5.743674798901356
	 9.180318338999999 9.307023449020765 9.558907599579378 9.813792170798116 10.04742703806603 10.2585746196344 10.44900185820103 10.62068586433028 10.77546285169879 10.91499632363096 10.59800921261809 10.28699971108674 10.06584154656949 9.942840932560182 9.901330109857799 9.909962867737947 9.937500307839986 9.957020122430331 9.943828549190288 9.875188737961279 9.738454408036207 9.543752769773102 9.320531235870348 9.323166322346312 9.60573577070593 9.86047435862654 10.09012013104048 10.29712685681616 10.48361230012278 10.65084060875038 10.79543581350048 10.88600427906094 10.80800019221765 10.52486896690756 10.1895020680819 9.879649874816282 9.600314892008873 9.348491492607836 9.121470072488696 8.91680789528238 8.732302808683736 8.565969549429601 8.416018381989506 8.280835841122601 8.158967371091961 8.049101674735276 7.95005660398888 7.860766440048083 7.780270426299063 7.707702430637427 7.642281625940609
	 6.255656565 6.198489186545431 6.146709693318933 6.099810289866547 6.057331040139593 6.018855355492626 5.984005909738089 5.952440938755978 5.923850888856208 5.897955381024614 5.874500461281309 5.853256110186034 5.834013987066504 5.816585386847715 5.800799389445065 5.786501183572639 5.773550548528448 5.761820479067684 5.751195939878306 5.741572737444238 5.732856498232691 5.724961743184834 5.717811049433442 5.711334291063302 5.705467951285764 5.700154499600211 5.695341827701476 5.690982738323126 5.687034482425308 5.683458339960306 5.680219240149917 5.677285417550751 5.674628100554595 5.67222122914654 5.670041199464346 5.668066632231819 5.666278163117105 5.664658252829119 5.663191015111938 5.661862060950289 5.660658357458288 5.659568100067577 5.658580596761406 5.657686163219377 5.656876027844529 5.656142245741399 5.655477620801431 5.65487563513165 5.654330385134502 5.653836523612021 5.65338920732653
	 8.441444735999999 8.387888552122991 8.340252547549065 8.297882295931709 8.26019571415252 8.226675062469212 8.196859832850958 8.170340422500951 8.146752506717087 8.125772033784868 8.107110773142219 8.090512355656687 8.075748751616217 8.062617138048013 8.050937112328551 8.040548213805248 8.031307719381706 8.023088682782211 8.015778190558791 8.009275810881839 8.003492213803684 7.998347944040261 7.993772329411293 7.989702509996962 7.986082574403056 7.982862791746542 7.97999892859341 7.977451641079056 7.975185934467452 7.973170682392079 7.971378199240691 7.969783859809274 7.968365761025022 7.967104420937992 7.965982511236569 7.964984619081163 7.964097035390107 7.963307566503754 7.962605366667501 7.961980789032388 7.961425253126309 7.960931126975138 7.960491622254386 7.960100701030917 7.959752992813591 7.959443720773249 7.959168636118438 7.958923959725356 7.958706330220093 7.958512757799951 7.958340583159408
 ]

Stringhe allocate: 1847 (64451 interne); stringhe deallocate: 1837 (64266 interne)


*** write_vn_d ***
parm1[j][f][i1] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]

Stringhe allocate: 1847 (64451 interne); stringhe deallocate: 1837 (64266 interne)


*** write_vn_d ***
parm1[j][f][i1] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]

Stringhe allocate: 1847 (64451 interne); stringhe deallocate: 1837 (64266 interne)


*** write_vn_d ***
parm1[j][f][i1] (5 : 5): [ 1.040829206 0.833709414 1.036836698 0.989892399 1.171423905 ]

Stringhe allocate: 1847 (64451 interne); stringhe deallocate: 1837 (64266 interne)


*** write_vn_d ***
parm1[j][f][i1] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]

Stringhe allocate: 1847 (64451 interne); stringhe deallocate: 1837 (64266 interne)


*** write_vn_d ***
parm1[j][f][i1] (5 : 5): [ 12.67431725 9.032985081 12.19219754 9.171903361 10.26385753 ]

Stringhe allocate: 1847 (64451 interne); stringhe deallocate: 1837 (64266 interne)


*** write_vn_d ***
parm1[j][f][i1] (5 : 5): [ 0.8988629876690203 0.86013003877782 0.7529666664997292 0.6820456255132146 0.8224436778595854 ]

Stringhe allocate: 1847 (64451 interne); stringhe deallocate: 1837 (64266 interne)


Stringhe allocate: 1847 (64451 interne); stringhe deallocate: 1837 (64296 interne)

Trasformo la matrice
ris (5 x 51 : 5 x 51): [
	 11.39247467 11.10306706177517 10.84226723117151 10.60724731250387 10.39545897901181 10.20460580172528 10.03261835237064 9.877631764481135 9.737965512578638 9.612105190171912 9.498686088989302 9.396478401394951 9.304373885537737 9.221373848642662 9.146578318147025 9.079176283263646 9.018436901159989 8.963701572401481 8.914376799732754 8.86992775276428 8.829872468786093 8.793776626827743 8.761248838299474 8.731936403364713 8.705521485962128 8.681717667869329 8.660266843644715 8.640936421183859 8.623516799979445 8.607819098414996 8.593673105714302 8.580925436339486 8.569437866937431 8.559085837119838 8.549757099556839 8.541350502391573 8.533774892570651 8.526948127468124 8.520796184209857 8.515252357040685 8.510256534031372 8.505754545282665 8.501697575559017 8.498041634983128 8.494747082052029 8.491778193802748 8.489102778466874 8.486691826413978 8.484519195599077 8.482561328103463 8.480796994695279
	 7.769541808 7.476096481228382 7.48333063998534 7.602510332822747 7.71681717915777 7.822094713350205 7.555226489617517 7.490367137170822 7.599363468839423 7.713450585875656 7.818974261507031 7.916080556067835 8.00542084708859 8.087615348944523 8.163235319617073 8.232806526787122 8.296812750267897 8.355699091666134 8.409875041064559 8.459717289927999 8.505572266866958 8.547758284226864 8.586566817221916 8.622260834551597 8.655060481350668 8.685067144681286 8.711859566557402 8.732251143822246 8.728339918800257 8.629581922522785 8.357971841501861 7.999184230119917 7.871820761932415 7.9647006317722 8.050140680766498 8.128682405272231 8.200570997395257 8.264742058194582 8.314552469101734 8.325220279437467 8.244193502482652 8.04118040718758 7.758971783647983 7.453479625689368 7.153608890003864 6.869989991566146 6.6057738591622 6.361406902904651 6.136466897881479 5.93049265098201 5.743674798901356
	 9.180318338999999 9.307023449020765 9.558907599579378 9.813792170798116 10.04742703806603 10.2585746196344 10.44900185820103 10.62068586433028 10.77546285169879 10.91499632363096 10.59800921261809 10.28699971108674 10.06584154656949 9.942840932560182 9.901330109857799 9.909962867737947 9.937500307839986 9.957020122430331 9.943828549190288 9.875188737961279 9.738454408036207 9.543752769773102 9.320531235870348 9.323166322346312 9.60573577070593 9.86047435862654 10.09012013104048 10.29712685681616 10.48361230012278 10.65084060875038 10.79543581350048 10.88600427906094 10.80800019221765 10.52486896690756 10.1895020680819 9.879649874816282 9.600314892008873 9.348491492607836 9.121470072488696 8.91680789528238 8.732302808683736 8.565969549429601 8.416018381989506 8.280835841122601 8.158967371091961 8.049101674735276 7.95005660398888 7.860766440048083 7.780270426299063 7.707702430637427 7.642281625940609
	 6.255656565 6.198489186545431 6.146709693318933 6.099810289866547 6.057331040139593 6.018855355492626 5.984005909738089 5.952440938755978 5.923850888856208 5.897955381024614 5.874500461281309 5.853256110186034 5.834013987066504 5.816585386847715 5.800799389445065 5.786501183572639 5.773550548528448 5.761820479067684 5.751195939878306 5.741572737444238 5.732856498232691 5.724961743184834 5.717811049433442 5.711334291063302 5.705467951285764 5.700154499600211 5.695341827701476 5.690982738323126 5.687034482425308 5.683458339960306 5.680219240149917 5.677285417550751 5.674628100554595 5.67222122914654 5.670041199464346 5.668066632231819 5.666278163117105 5.664658252829119 5.663191015111938 5.661862060950289 5.660658357458288 5.659568100067577 5.658580596761406 5.657686163219377 5.656876027844529 5.656142245741399 5.655477620801431 5.65487563513165 5.654330385134502 5.653836523612021 5.65338920732653
	 8.441444735999999 8.387888552122991 8.340252547549065 8.297882295931709 8.26019571415252 8.226675062469212 8.196859832850958 8.170340422500951 8.146752506717087 8.125772033784868 8.107110773142219 8.090512355656687 8.075748751616217 8.062617138048013 8.050937112328551 8.040548213805248 8.031307719381706 8.023088682782211 8.015778190558791 8.009275810881839 8.003492213803684 7.998347944040261 7.993772329411293 7.989702509996962 7.986082574403056 7.982862791746542 7.97999892859341 7.977451641079056 7.975185934467452 7.973170682392079 7.971378199240691 7.969783859809274 7.968365761025022 7.967104420937992 7.965982511236569 7.964984619081163 7.964097035390107 7.963307566503754 7.962605366667501 7.961980789032388 7.961425253126309 7.960931126975138 7.960491622254386 7.960100701030917 7.959752992813591 7.959443720773249 7.959168636118438 7.958923959725356 7.958706330220093 7.958512757799951 7.958340583159408
 ]

Stringhe allocate: 1847 (64451 interne); stringhe deallocate: 1840 (64451 interne)

