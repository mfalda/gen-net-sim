
*** simulatenet ***
Ho trasformato la stringa 'connectivity' che vale 'MTM'
------------------------------ Fine inSTRINGA

Ho trasformato la stringa 'INdegree' che vale 'free'
------------------------------ Fine inSTRINGA

Ho trasformato il vettore num_subnet (3 : 3): [ 5 5 10 ]
Ho trasformato la stringa 'formula' che vale '1 / (1 + e ^ (-10 * (x - 0.5)))'
------------------------------ Fine inSTRINGA

Ho trasformato il vettore Xmin (5 : 5): [ 8.419340674000001 3.482809808 6.932805339 5.544149565 7.900224736 ]
Ho trasformato il vettore Xmax (5 : 5): [ 12.67431725 9.032985081 12.19219754 9.171903361 10.26385753 ]
Ho trasformato il vettore lambda (5 : 5): [ 1.040829206 0.833709414 1.036836698 0.989892399 1.171423905 ]
Ho trasformato il vettore X0 (5 : 5): [ 11.39247467 7.769541808 9.180318338999999 6.255656565 8.441444735999999 ]
Ho trasformato il vettore weight_par (2 : 2): [ 1 0 ]
Ho trasformato la stringa 'act_fun' che vale 'sigmoidal'
------------------------------ Fine inSTRINGA

Ho trasformato il vettore alpha (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
Ho trasformato il vettore beta (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
Ho trasformato il vettore times (51 : 51): [ 0 0.1 0.2 0.3 0.4 0.5 0.6000000000000001 0.7000000000000001 0.8 0.9 1 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 3 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 4 4.100000000000001 4.2 4.3 4.4 4.5 4.600000000000001 4.7 4.800000000000001 4.9 5 ]
Ho trasformato la stringa 'method' che vale 'rkf45'
------------------------------ Fine inSTRINGA

Ho trasformato il vettore param (6 : 6): [ 0 0 0 0 0 0 ]
230: copia_v_d	<=>	ris[st:end] <- v[st:end]
lambda (5 : 5): [ 1.040829206 0.833709414 1.036836698 0.989892399 1.171423905 ]
st = 1
end = 5


parm0[LAMBDA] (5 : 5): [ 1.040829206 0.833709414 1.036836698 0.989892399 1.171423905 ]
------------------------------ Fine copia_v_d

232: copia_v_d	<=>	ris[st:end] <- v[st:end]
alpha (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
st = 1
end = 5


parm0[ALPHA] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
------------------------------ Fine copia_v_d

234: copia_v_d	<=>	ris[st:end] <- v[st:end]
beta (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
st = 1
end = 5


parm0[BETA] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
------------------------------ Fine copia_v_d

236: copia_v_d	<=>	ris[st:end] <- v[st:end]
Xmin (5 : 5): [ 8.419340674000001 3.482809808 6.932805339 5.544149565 7.900224736 ]
st = 1
end = 5


parm0[XMIN] (5 : 5): [ 8.419340674000001 3.482809808 6.932805339 5.544149565 7.900224736 ]
------------------------------ Fine copia_v_d

238: copia_v_d	<=>	ris[st:end] <- v[st:end]
Xmax (5 : 5): [ 12.67431725 9.032985081 12.19219754 9.171903361 10.26385753 ]
st = 1
end = 5


parm0[XMAX] (5 : 5): [ 12.67431725 9.032985081 12.19219754 9.171903361 10.26385753 ]
------------------------------ Fine copia_v_d

240: copia_v_d	<=>	ris[st:end] <- v[st:end]
X0 (5 : 5): [ 11.39247467 7.769541808 9.180318338999999 6.255656565 8.441444735999999 ]
st = 1
end = 5


parm0[XZERO] (5 : 5): [ 11.39247467 7.769541808 9.180318338999999 6.255656565 8.441444735999999 ]
------------------------------ Fine copia_v_d

275: dividi1_vv_d	<=>	v1 <- v1 / v2
parm0[XMIN] (5 : 5): [ 8.419340674000001 3.482809808 6.932805339 5.544149565 7.900224736 ]
parm0[XMAX] (5 : 5): [ 12.67431725 9.032985081 12.19219754 9.171903361 10.26385753 ]


parm0[XMIN] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]
------------------------------ Fine dividi_vv_d

278: dividi1_vv_d	<=>	v1 <- v1 / v2
parm0[XZERO] (5 : 5): [ 11.39247467 7.769541808 9.180318338999999 6.255656565 8.441444735999999 ]
parm0[XMAX] (5 : 5): [ 12.67431725 9.032985081 12.19219754 9.171903361 10.26385753 ]


parm0[XZERO] (5 : 5): [ 0.8988629876690203 0.86013003877782 0.7529666664997292 0.6820456255132146 0.8224436778595854 ]
------------------------------ Fine dividi_vv_d

287: copia_v_d	<=>	ris[st:end] <- v[st:end]
parm0[LAMBDA] (5 : 5): [ 1.040829206 0.833709414 1.036836698 0.989892399 1.171423905 ]
st = 1
end = 5


parm1[j][i] (5 : 5): [ 1.040829206 0.833709414 1.036836698 0.989892399 1.171423905 ]
------------------------------ Fine copia_v_d

287: copia_v_d	<=>	ris[st:end] <- v[st:end]
parm0[ALPHA] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
st = 1
end = 5


parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
------------------------------ Fine copia_v_d

287: copia_v_d	<=>	ris[st:end] <- v[st:end]
parm0[BETA] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
st = 1
end = 5


parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
------------------------------ Fine copia_v_d

287: copia_v_d	<=>	ris[st:end] <- v[st:end]
parm0[XMIN] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]
st = 1
end = 5


parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]
------------------------------ Fine copia_v_d

287: copia_v_d	<=>	ris[st:end] <- v[st:end]
parm0[XMAX] (5 : 5): [ 12.67431725 9.032985081 12.19219754 9.171903361 10.26385753 ]
st = 1
end = 5


parm1[j][i] (5 : 5): [ 12.67431725 9.032985081 12.19219754 9.171903361 10.26385753 ]
------------------------------ Fine copia_v_d

287: copia_v_d	<=>	ris[st:end] <- v[st:end]
parm0[XZERO] (5 : 5): [ 0.8988629876690203 0.86013003877782 0.7529666664997292 0.6820456255132146 0.8224436778595854 ]
st = 1
end = 5


parm1[j][i] (5 : 5): [ 0.8988629876690203 0.86013003877782 0.7529666664997292 0.6820456255132146 0.8224436778595854 ]
------------------------------ Fine copia_v_d


*** simulatenet1 ***

*** connectivity_modular1 ***
48: InitMatr_i
Mdiscr (5 x 5 : 5 x 5): [
	 2425208 0 0 0 0
	 2425208 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

53: seq_d	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


tmp1_d (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_d

54: exp_d	<=>	ris <- v ^ val
tmp1_d (5 : 5): [ 1 2 3 4 5 ]
val = -2.2


tmp2_d (5 : 5): [ 1 0.217637640824031 0.08919350686224783 0.04736614270344993 0.02899118654710781 ]
------------------------------ Fine exp_d

56: vettore2v_d		<=>	ris <- c(v1, v2)
tmp2_d (5 : 5): [ 1 0.217637640824031 0.08919350686224783 0.04736614270344993 0.02899118654710781 ]
scalare_d (1 : 1): [ 0 ]


Prob (6 : 6): [ 1 0.217637640824031 0.08919350686224783 0.04736614270344993 0.02899118654710781 0 ]
------------------------------ Fine vettore2v_d

58: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
Prob (6 : 6): [ 1 0.217637640824031 0.08919350686224783 0.04736614270344993 0.02899118654710781 0 ]
canc_NA = 0



ris: 1.383188476936837
------------------------------ Fine somma_v_d

58: dividi1_vs_d	<=>	v <- v / div
Prob (6 : 6): [ 1 0.217637640824031 0.08919350686224783 0.04736614270344993 0.02899118654710781 0 ]
div = 1.383


Prob (6 : 6): [ 0.722967272120837 0.1573448914973642 0.06448398634709048 0.03424417098119949 0.02095967905350884 0 ]
------------------------------ Fine dividi1_vs_d

61: InitVett_d
tmp2_d (6 : 16): [ 5.842414621812633e-308 0 0 0 0 0 ]
val = 0


tmp2_d (6 : 16): [ 0 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

63: vettore2v_d		<=>	ris <- c(v1, v2)
scalare_d (1 : 1): [ 5 ]
tmp2_d (6 : 16): [ 0 0 0 0 0 0 ]


Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
------------------------------ Fine vettore2v_d

64: copia_v_d	<=>	ris[st:end] <- v[st:end]
Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
st = 1
end = 7


Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
------------------------------ Fine copia_v_d

66: moltiplica_vs_d	<=>	ris <- v1 * v2
Prob (6 : 6): [ 0.722967272120837 0.1573448914973642 0.06448398634709048 0.03424417098119949 0.02095967905350884 0 ]
val = 5


tmp1_d (6 : 16): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
------------------------------ Fine moltiplica_vs_d

68: vettore2v_d		<=>	ris <- c(v1, v2)
scalare_d (1 : 1): [ 1.#QNAN ]
tmp1_d (6 : 16): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]


STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
------------------------------ Fine vettore2v_d

69: copia_v_d	<=>	ris[st:end] <- v[st:end]
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
st = 1
end = 7


STin (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
------------------------------ Fine copia_v_d

72: InitVett_d
tmp1_d (7 : 16): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 0 ]
val = 1


tmp1_d (7 : 16): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine InitVett_d

73: moltiplica_vs_d	<=>	ris <- v1 * v2
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
val = 0.1


tmp2_d (7 : 16): [ 1.#QNAN 0.3614836360604186 0.07867244574868211 0.03224199317354524 0.01712208549059974 0.01047983952675442 0 ]
------------------------------ Fine moltiplica_vs_d

74: cbind2v_d	<=>	ris <- cbind(v1, v2)
tmp2_d (7 : 16): [ 1.#QNAN 0.3614836360604186 0.07867244574868211 0.03224199317354524 0.01712208549059974 0.01047983952675442 0 ]
tmp1_d (7 : 16): [ 1 1 1 1 1 1 1 ]


aus (7 x 2 : 7 x 2): [
	 1.#QNAN 1
	 0.3614836360604186 1
	 0.07867244574868211 1
	 0.03224199317354524 1
	 0.01712208549059974 1
	 0.01047983952675442 1
	 0 1
 ]
------------------------------ Fine cbind2v_d

76: max_righe_d	<=>	ris <- apply(m, 1, max)
aus (7 x 2 : 7 x 2): [
	 1.#QNAN 1
	 0.3614836360604186 1
	 0.07867244574868211 1
	 0.03224199317354524 1
	 0.01712208549059974 1
	 0.01047983952675442 1
	 0 1
 ]


toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
------------------------------ Fine max_righe_d

78: assegna_v_segm_d	<=>	v[st:end] <- val
STin (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
start = 7
end = 7
val = 0


STin (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
------------------------------ Fine assegna_v_segm_d

88: assegna_v_segm_d	<=>	v[st:end] <- val
STin (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
start = 2
end = 6
val = 1.#QNAN


STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
------------------------------ Fine assegna_v_segm_d

96: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


h (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

110: somma_righe_i	<=>	ris <- apply(m, 1, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


Sin (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_righe_i

112: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


Sout (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_colonne_i


*** cluster_coeff ***
19: trasponi_i	<=>	ris <- t(m)
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine trasponi_i

20: somma1_m_i	<=>	m1 <- m1 + m2
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine somma1_m_i

22: which_m_indxne_i	<=>	ris <- which(m!=val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


ind (0 : 25): [ ]
------------------------------ Fine which_m_indxne_i

24: assegna1_ms_indx_i	<=>	m[indx] = val
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
ind (0 : 25): [ ]
val = 1


tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_ms_indx_i

26: assegna1_s_diag_i	<=>	diag_i(m) <- s
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_s_diag_i

31: InitVett_d
ris (5 : 5): [ 1.000000017727926 2 3 4 5 ]
val = 0


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1


ris: 0
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 1
val = 0


neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 2


ris: 0
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 2
val = 0


neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 3


ris: 0
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 3
val = 0


neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 4


ris: 0
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 4
val = 0


neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 5


ris: 0
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 5
val = 0


neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

69: media_v_d	<=>	ris <- mean(v)
ris (5 : 5): [ 0 0 0 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 5 (225 interne); stringhe deallocate: 0 (15 interne)


*** module1 ***
44: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


tmp1_i (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i


*** sampleB ***

***sample***
tmp1_i (5 : 5): [ 1 2 3 4 5 ]
k = 1, replace = 0


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (240 interne); stringhe deallocate: 0 (15 interne)


Stringhe allocate: 5 (240 interne); stringhe deallocate: 0 (15 interne)


*** mod1 ***
18: InitMatr_i
ris (1 x 1 : 1 x 1): [
	 79849080
 ]
val = 0


ris (1 x 1 : 1 x 1): [
	 0
 ]
------------------------------ Fine InitMatr_i


Stringhe allocate: 5 (245 interne); stringhe deallocate: 0 (15 interne)


*** probmod ***
46: InitMatr_i
checkOUT (1 x 5 : 1 x 5): [
	 79849080 2425208 0 0 0
 ]
val = 0


checkOUT (1 x 5 : 1 x 5): [
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

48: InitMatr_i
checkIN (1 x 5 : 1 x 5): [
	 79849080 2425208 0 0 0
 ]
val = 0


checkIN (1 x 5 : 1 x 5): [
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

50: InitMatr_d
ris (1 x 5 : 1 x 5): [
	 1 0.217637640824031 0.08919350686224783 0.04736614270344993 0.02899118654710781
 ]
val = 0


ris (1 x 5 : 1 x 5): [
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_d

52: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (1 x 1 : 1 x 1): [
	 1
 ]


M_in (1 : 1): [ 1 ]
------------------------------ Fine somma_righe_i

54: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (1 x 1 : 1 x 1): [
	 1
 ]


M_out (1 : 1): [ 1 ]
------------------------------ Fine somma_colonne_i

57: InitMatr_i
memory (1 x 3 : 1 x 3): [
	 79849080 2425208 0
 ]
val = -2147483648


memory (1 x 3 : 1 x 3): [
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (1 x 3 : 1 x 3): [
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 3): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (1 x 3 : 1 x 3): [
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 3): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 3): [ ]
tmp_i2 (0 : 3): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 11): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 11): [ 0 0 0 0 0 ]
s = 1


ind (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 11): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 11): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 11): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (5 : 5): [ 5 5 5 5 5 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (5 : 5): [ 4 4 4 4 4 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (5 : 5): [ 5.842414621812633e-308 0 0 0 0 ]
val = 0


S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (5 : 5): [ 0 0 0 0 0 ]
T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]


a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (5 : 5): [ 1 1 1 1 1 ]
T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]


tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]


m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
ind (0 : 5): [ ]
val = 0


a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
ind (0 : 5): [ ]
val = 0


b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]


tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]


m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
toll2 (5 : 5): [ 1 1 1 1 1 ]


tmp_d1 (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
val = 0

ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
toll2 (5 : 5): [ 1 1 1 1 1 ]


tmp_d1 (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0


ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (0 : 5): [ ]
ind2 (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (0 : 5): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ 1 1 1 1 1 ]
tmp_i1 (0 : 5): [ ]
val = -1.#INF


S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ 1 1 1 1 1 ]
ind (0 : 5): [ ]
val = 0


S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
val = 0


ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ 1 1 1 1 1 ]
ind (0 : 5): [ ]
val = -1.#INF


S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (5 : 5): [ 0 0 0 0 0 ]
S2 (5 : 5): [ 1 1 1 1 1 ]


ris (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (5 : 5): [ 1 1 1 1 1 ]
div = 2.000


ris (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (405 interne); stringhe deallocate: 0 (115 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
ris (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
val = -1.#INF


indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (1 x 5 : 1 x 5): [
	 0 0 0 0 0
 ]
riga = 1
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkOUT (1 x 5 : 1 x 5): [
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


tmp_i1 (5 : 11): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (5 : 11): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (5 : 11): [ 1 2 3 4 5 ]
st = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 5
indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
ris (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
indInf (0 : 5): [ ]
val = -1


ris (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 11): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 11): [ 0 0 0 0 0 ]
s = 1


ind (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 11): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 11): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 11): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (5 : 5): [ 5 5 5 5 5 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (5 : 5): [ 4 4 4 4 4 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (5 : 5): [ 3.614835774595612 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
val = 0


S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (5 : 5): [ 0 0 0 0 0 ]
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (5 : 5): [ 1 1 1 1 1 ]
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


tmpm_d (5 x 2 : 5 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (5 x 2 : 5 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (5 : 5): [ 1.614835739135742 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0


S2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ 0 0 0 0 0 ]
ind (0 : 5): [ ]
val = -1.#INF


S2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (5 : 5): [ 0 0 0 0 0 ]
S2 (5 : 5): [ 0 0 0 0 0 ]


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (5 : 5): [ 0 0 0 0 0 ]
div = 2.000


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (510 interne); stringhe deallocate: 0 (200 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
ris (5 : 5): [ 0 0 0 0 0 ]
val = -1.#INF


indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (1 x 5 : 1 x 5): [
	 0 0 0 0 0
 ]
riga = 1
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkIN (1 x 5 : 1 x 5): [
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


tmp_i1 (5 : 11): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (5 : 11): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (5 : 11): [ 1 2 3 4 5 ]
st = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 5
indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
ris (5 : 5): [ 0 0 0 0 0 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (5 : 5): [ 0 0 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (5 : 5): [ 0 0 0 0 0 ]
indInf (0 : 5): [ ]
val = -1


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
ris (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
ris (5 : 5): [ 0 0 0 0 0 ]


tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (1 x 5 : 1 x 5): [
	 0 0 0 0 0
 ]
riga = 1
tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


ris (1 x 5 : 1 x 5): [
	 0.5 0.5 0.5 0.5 0.5
 ]
------------------------------ Fine aggiungi_mv_riga_d

168: somma_m_d	<=>	ris <- sum(m)
ris (1 x 5 : 1 x 5): [
	 0.5 0.5 0.5 0.5 0.5
 ]


ris: 2.5
------------------------------ Fine somma_m_d

173: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkIN (1 x 5 : 1 x 5): [
	 1 1 1 1 1
 ]


aus (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_colonne_i

175: which_v_indxne_i	<=>	ris <- which(v != val)
aus (5 : 5): [ 1 1 1 1 1 ]
val = 0


tmp_i1 (5 : 11): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

186: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkIN (1 x 5 : 1 x 5): [
	 1 1 1 1 1
 ]


rs (1 : 1): [ 5 ]
------------------------------ Fine somma_righe_i

188: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (1 : 1): [ 5 ]
decr = 0


ord_ind (1 : 1): [ 1 ]
------------------------------ Fine ordine_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (1 x 5 : 1 x 5): [
	 1 1 1 1 1
 ]
r = 1
val = 0


I_add (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
I (0 : 0): [ ]
I_add (5 : 5): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

216: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
checkOUT (1 x 5 : 1 x 5): [
	 1 1 1 1 1
 ]
checkOUT (1 x 5 : 1 x 5): [
	 1 1 1 1 1
 ]
val1 = 0
val2 = 0


checkOUT (1 x 5 : 1 x 5): [
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

218: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
checkOUT (1 x 5 : 1 x 5): [
	 1 1 1 1 1
 ]
checkOUT (1 x 5 : 1 x 5): [
	 1 1 1 1 1
 ]
val1 = 0
val2 = 1


checkOUT (1 x 5 : 1 x 5): [
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

220: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkOUT (1 x 5 : 1 x 5): [
	 1 1 1 1 1
 ]


aus (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_colonne_i

222: which_v_indxne_i	<=>	ris <- which(v != val)
aus (5 : 5): [ 1 1 1 1 1 ]
val = 0


tmp_i1 (5 : 11): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

232: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkOUT (1 x 5 : 1 x 5): [
	 1 1 1 1 1
 ]


rs (1 : 1): [ 5 ]
------------------------------ Fine somma_righe_i

234: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (1 : 1): [ 5 ]
decr = 0


ord_ind (1 : 1): [ 1 ]
------------------------------ Fine ordine_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (1 x 5 : 1 x 5): [
	 1 1 1 1 1
 ]
r = 1
val = 0


I_add (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 5): [ ]
I_add (5 : 5): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i


Stringhe allocate: 5 (555 interne); stringhe deallocate: 0 (320 interne)


Stringhe allocate: 5 (560 interne); stringhe deallocate: 0 (335 interne)


*** module2 ***
44: seq_i	<=>	ris <- seq(da, a, incr)
da = 2
a = 5
incr = 1


tmp1_i (4 : 4): [ 2 3 4 5 ]
------------------------------ Fine seq_i


*** sampleB ***

***sample***
tmp1_i (4 : 4): [ 2 3 4 5 ]
k = 1, replace = 0


ris (1 : 1): [ 4 ]
*****************************************


Stringhe allocate: 5 (570 interne); stringhe deallocate: 0 (335 interne)


Stringhe allocate: 5 (570 interne); stringhe deallocate: 0 (335 interne)


*** mod2 ***
17: InitMatr_i
ris (4 x 4 : 4 x 4): [
	 2425280 0 0 0
	 79843576 70 0 44
	 0 12 0 1
	 44 5 44 0
 ]
val = 0


ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine InitMatr_i


*** triangola ***
27: diag_i	<=>	ris <- diag(m)
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 1 0 0 0
	 1 0 0 0
	 1 0 0 0
 ]


Dmem (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine diag_i

29: assegna1_s_diag_i	<=>	diag_i(m) <- s
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 1 0 0 0
	 1 0 0 0
	 1 0 0 0
 ]
val = 0


ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 1 0 0 0
	 1 0 0 0
	 1 0 0 0
 ]
------------------------------ Fine assegna1_s_diag_i

33: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 1 0 0 0
	 1 0 0 0
	 1 0 0 0
 ]
r = 1
val = 0


tmp1_i (0 : 16): [ ]
------------------------------ Fine which_m_rowindxne_i

34: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 1 0 0 0
	 1 0 0 0
	 1 0 0 0
 ]
c = 1, val = 0


tmp2_i (3 : 16): [ 2 3 4 ]
------------------------------ Fine which_m_colindxne_i

35: unione_i	<=>	ris <- union(v1, v2)
tmp1_i (0 : 16): [ ]
tmp2_i (3 : 16): [ 2 3 4 ]
4876: elimina_doppi_i	<=>	ris <- union(v, v)
ind (3 : 3): [ 2 3 4 ]


ris (3 : 3): [ 2 3 4 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 2 3 4 ]
------------------------------ Fine unione_i

55: InitMatr_i
coord (1 x 2 : 2 x 2): [
	 79848192 1819240302
 ]
val = 0


coord (1 x 2 : 2 x 2): [
	 0 0
 ]
------------------------------ Fine InitMatr_i

72: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 2, el2 = 3


tmp1_i (2 : 16): [ 2 3 ]
------------------------------ Fine vettore2s_i

73: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (1 x 2 : 2 x 2): [
	 0 0
 ]
riga = 2
tmp1_i (2 : 16): [ 2 3 ]


coord (2 x 2 : 2 x 2): [
	 0 0
	 2 3
 ]
------------------------------ Fine aggiungi_mv_riga_i

74: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 3, el2 = 2


tmp1_i (2 : 16): [ 3 2 ]
------------------------------ Fine vettore2s_i

76: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (2 x 2 : 2 x 2): [
	 0 0
	 2 3
 ]
riga = 3
tmp1_i (2 : 16): [ 3 2 ]


coord (3 x 2 : 3 x 2): [
	 0 0
	 2 3
	 3 2
 ]
------------------------------ Fine aggiungi_mv_riga_i

72: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 2, el2 = 4


tmp1_i (2 : 16): [ 2 4 ]
------------------------------ Fine vettore2s_i

73: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (3 x 2 : 3 x 2): [
	 0 0
	 2 3
	 3 2
 ]
riga = 4
tmp1_i (2 : 16): [ 2 4 ]


coord (4 x 2 : 4 x 2): [
	 0 0
	 2 3
	 3 2
	 2 4
 ]
------------------------------ Fine aggiungi_mv_riga_i

74: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 4, el2 = 2


tmp1_i (2 : 16): [ 4 2 ]
------------------------------ Fine vettore2s_i

76: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (4 x 2 : 4 x 2): [
	 0 0
	 2 3
	 3 2
	 2 4
 ]
riga = 5
tmp1_i (2 : 16): [ 4 2 ]


coord (5 x 2 : 5 x 2): [
	 0 0
	 2 3
	 3 2
	 2 4
	 4 2
 ]
------------------------------ Fine aggiungi_mv_riga_i

72: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 3, el2 = 4


tmp1_i (2 : 16): [ 3 4 ]
------------------------------ Fine vettore2s_i

73: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (5 x 2 : 5 x 2): [
	 0 0
	 2 3
	 3 2
	 2 4
	 4 2
 ]
riga = 6
tmp1_i (2 : 16): [ 3 4 ]


coord (6 x 2 : 6 x 2): [
	 0 0
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
 ]
------------------------------ Fine aggiungi_mv_riga_i

74: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 4, el2 = 3


tmp1_i (2 : 16): [ 4 3 ]
------------------------------ Fine vettore2s_i

76: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (6 x 2 : 6 x 2): [
	 0 0
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
 ]
riga = 7
tmp1_i (2 : 16): [ 4 3 ]


coord (7 x 2 : 7 x 2): [
	 0 0
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
	 4 3
 ]
------------------------------ Fine aggiungi_mv_riga_i

89: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 1 0 0 0
	 1 0 0 0
	 1 0 0 0
 ]


M_in (4 : 4): [ 0 1 1 1 ]
------------------------------ Fine somma_righe_i

91: which_v_indxlt_i	<=>	ris <- which(v<val)
M_in (4 : 4): [ 0 1 1 1 ]
val = 5

ris (4 : 10): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxlt_i

95: which_m_colindxin_i	<=>	ris <- which(m[, c] %IN% v)
coord (7 x 2 : 7 x 2): [
	 0 0
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
	 4 3
 ]
c = 1
ris (4 : 10): [ 1 2 3 4 ]
3754: esiste_v_i	<=>	elem %IN% v
elem = 0
ris (4 : 10): [ 1 2 3 4 ]


indx = 0
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (4 : 10): [ 1 2 3 4 ]


indx = 2
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 3
ris (4 : 10): [ 1 2 3 4 ]


indx = 3
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (4 : 10): [ 1 2 3 4 ]


indx = 2
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 4
ris (4 : 10): [ 1 2 3 4 ]


indx = 4
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 3
ris (4 : 10): [ 1 2 3 4 ]


indx = 3
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 4
ris (4 : 10): [ 1 2 3 4 ]


indx = 4
------------------------------ Fine esiste_v_i



ind_aus (6 : 7): [ 2 3 4 5 6 7 ]
------------------------------ Fine which_m_colindxin_i

101: righe_i	<=>	ris <- m[indx,]
coord (7 x 2 : 7 x 2): [
	 0 0
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
	 4 3
 ]
ind_aus (6 : 7): [ 2 3 4 5 6 7 ]



tmp_coord1 (6 x 2 : 6 x 2): [
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
	 4 3
 ]
------------------------------ Fine righe_i

102: copia_m_i	<=>	ris <- da
tmp_coord1 (6 x 2 : 6 x 2): [
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
	 4 3
 ]


coord (6 x 2 : 7 x 2): [
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
	 4 3
 ]
------------------------------ Fine copia_m_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 6
incr = 1


tmp1_i (6 : 16): [ 1 2 3 4 5 6 ]
------------------------------ Fine seq_i


*** sampleB ***

***sample***
tmp1_i (6 : 16): [ 1 2 3 4 5 6 ]
k = 1, replace = 0


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 5 (660 interne); stringhe deallocate: 0 (370 interne)


Stringhe allocate: 5 (660 interne); stringhe deallocate: 0 (370 interne)

107: riga_i	<=>	ris <- m[r,]
coord (6 x 2 : 7 x 2): [
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
	 4 3
 ]
r = 2

coord_ind (2 : 2): [ 3 2 ]
------------------------------ Fine riga_i

111: which_m_colneand2_i	<=>	ris <- which((m[, c] != val1) & (m[, c] != val2))
coord (6 x 2 : 7 x 2): [
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
	 4 3
 ]
c = 1, val1 = 3, val2 = 2


ris (2 : 32): [ 4 6 ]
------------------------------ Fine which_m_colneand2_i

114: righe_i	<=>	ris <- m[indx,]
coord (6 x 2 : 7 x 2): [
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
	 4 3
 ]
ris (2 : 32): [ 4 6 ]



tmp_coord1 (2 x 2 : 6 x 2): [
	 4 2
	 4 3
 ]
------------------------------ Fine righe_i

115: copia_m_i	<=>	ris <- da
tmp_coord1 (2 x 2 : 6 x 2): [
	 4 2
	 4 3
 ]


coord (2 x 2 : 7 x 2): [
	 4 2
	 4 3
 ]
------------------------------ Fine copia_m_i

89: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 1 0 0 0
	 1 1 0 0
	 1 0 0 0
 ]


M_in (4 : 4): [ 0 1 2 1 ]
------------------------------ Fine somma_righe_i

91: which_v_indxlt_i	<=>	ris <- which(v<val)
M_in (4 : 4): [ 0 1 2 1 ]
val = 5

ris (4 : 32): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxlt_i

95: which_m_colindxin_i	<=>	ris <- which(m[, c] %IN% v)
coord (2 x 2 : 7 x 2): [
	 4 2
	 4 3
 ]
c = 1
ris (4 : 32): [ 1 2 3 4 ]
3754: esiste_v_i	<=>	elem %IN% v
elem = 4
ris (4 : 32): [ 1 2 3 4 ]


indx = 4
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 4
ris (4 : 32): [ 1 2 3 4 ]


indx = 4
------------------------------ Fine esiste_v_i



ind_aus (2 : 7): [ 1 2 ]
------------------------------ Fine which_m_colindxin_i

101: righe_i	<=>	ris <- m[indx,]
coord (2 x 2 : 7 x 2): [
	 4 2
	 4 3
 ]
ind_aus (2 : 7): [ 1 2 ]



tmp_coord1 (2 x 2 : 6 x 2): [
	 4 2
	 4 3
 ]
------------------------------ Fine righe_i

102: copia_m_i	<=>	ris <- da
tmp_coord1 (2 x 2 : 6 x 2): [
	 4 2
	 4 3
 ]


coord (2 x 2 : 7 x 2): [
	 4 2
	 4 3
 ]
------------------------------ Fine copia_m_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp1_i (2 : 16): [ 1 2 ]
------------------------------ Fine seq_i


*** sampleB ***

***sample***
tmp1_i (2 : 16): [ 1 2 ]
k = 1, replace = 0


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 5 (665 interne); stringhe deallocate: 0 (370 interne)


Stringhe allocate: 5 (665 interne); stringhe deallocate: 0 (370 interne)

107: riga_i	<=>	ris <- m[r,]
coord (2 x 2 : 7 x 2): [
	 4 2
	 4 3
 ]
r = 2

coord_ind (2 : 2): [ 4 3 ]
------------------------------ Fine riga_i

111: which_m_colneand2_i	<=>	ris <- which((m[, c] != val1) & (m[, c] != val2))
coord (2 x 2 : 7 x 2): [
	 4 2
	 4 3
 ]
c = 1, val1 = 4, val2 = 3


ris (0 : 32): [ ]
------------------------------ Fine which_m_colneand2_i

33: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 1 0 0 0
	 1 1 0 0
	 1 0 1 0
 ]
r = 2
val = 0


tmp1_i (1 : 16): [ 1 ]
------------------------------ Fine which_m_rowindxne_i

34: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 1 0 0 0
	 1 1 0 0
	 1 0 1 0
 ]
c = 2, val = 0


tmp2_i (1 : 16): [ 3 ]
------------------------------ Fine which_m_colindxne_i

35: unione_i	<=>	ris <- union(v1, v2)
tmp1_i (1 : 16): [ 1 ]
tmp2_i (1 : 16): [ 3 ]
4876: elimina_doppi_i	<=>	ris <- union(v, v)
ind (2 : 2): [ 1 3 ]


ris (2 : 32): [ 1 3 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 32): [ 1 3 ]
------------------------------ Fine unione_i

33: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 1 0 0 0
	 1 1 0 0
	 1 0 1 0
 ]
r = 3
val = 0


tmp1_i (2 : 16): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

34: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 1 0 0 0
	 1 1 0 0
	 1 0 1 0
 ]
c = 3, val = 0


tmp2_i (1 : 16): [ 4 ]
------------------------------ Fine which_m_colindxne_i

35: unione_i	<=>	ris <- union(v1, v2)
tmp1_i (2 : 16): [ 1 2 ]
tmp2_i (1 : 16): [ 4 ]
4876: elimina_doppi_i	<=>	ris <- union(v, v)
ind (3 : 3): [ 1 2 4 ]


ris (3 : 32): [ 1 2 4 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 32): [ 1 2 4 ]
------------------------------ Fine unione_i

55: InitMatr_i
coord (1 x 2 : 7 x 2): [
	 4 4
 ]
val = 0


coord (1 x 2 : 7 x 2): [
	 0 0
 ]
------------------------------ Fine InitMatr_i

72: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 2, el2 = 4


tmp1_i (2 : 16): [ 2 4 ]
------------------------------ Fine vettore2s_i

73: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (1 x 2 : 7 x 2): [
	 0 0
 ]
riga = 2
tmp1_i (2 : 16): [ 2 4 ]


coord (2 x 2 : 2 x 2): [
	 0 0
	 2 4
 ]
------------------------------ Fine aggiungi_mv_riga_i

74: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 4, el2 = 2


tmp1_i (2 : 16): [ 4 2 ]
------------------------------ Fine vettore2s_i

76: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (2 x 2 : 2 x 2): [
	 0 0
	 2 4
 ]
riga = 3
tmp1_i (2 : 16): [ 4 2 ]


coord (3 x 2 : 3 x 2): [
	 0 0
	 2 4
	 4 2
 ]
------------------------------ Fine aggiungi_mv_riga_i

33: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 1 0 0 0
	 1 1 0 0
	 1 0 1 0
 ]
r = 4
val = 0


tmp1_i (2 : 16): [ 1 3 ]
------------------------------ Fine which_m_rowindxne_i

34: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 1 0 0 0
	 1 1 0 0
	 1 0 1 0
 ]
c = 4, val = 0


tmp2_i (0 : 16): [ ]
------------------------------ Fine which_m_colindxne_i

35: unione_i	<=>	ris <- union(v1, v2)
tmp1_i (2 : 16): [ 1 3 ]
tmp2_i (0 : 16): [ ]
4876: elimina_doppi_i	<=>	ris <- union(v, v)
ind (2 : 2): [ 1 3 ]


ris (2 : 32): [ 1 3 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 32): [ 1 3 ]
------------------------------ Fine unione_i

152: assegna1_v_diag_i	<=>	diag(m) <- v
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 1 0 0 0
	 1 1 0 0
	 1 0 1 0
 ]
Dmem (4 : 4): [ 0 0 0 0 ]


ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 1 0 0 0
	 1 1 0 0
	 1 0 1 0
 ]
------------------------------ Fine assegna1_v_diag_i


Stringhe allocate: 5 (690 interne); stringhe deallocate: 0 (450 interne)


Stringhe allocate: 5 (690 interne); stringhe deallocate: 0 (450 interne)


*** probmod ***
46: InitMatr_i
checkOUT (4 x 5 : 4 x 5): [
	 79776608 1954 1954 1954 1954
	 2146959360 2146959360 2146959360 2146959360 2146959360
	 1954 1954 1954 1954 1954
	 2146959360 2146959360 2146959360 2146959360 2146959360
 ]
val = 0


checkOUT (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

48: InitMatr_i
checkIN (4 x 5 : 4 x 5): [
	 79776696 909654318 925971763 775293241 842608942
	 943076144 876098355 775489846 942814009 892811569
	 959854131 774900019 858798129 858993968 2612
	 959514936 825375025 858994737 842074425 5046364
 ]
val = 0


checkIN (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

50: InitMatr_d
ris (4 x 5 : 4 x 5): [
	 6.365987372895817e-314 2.970794074051357e-314 1.060997895482636e-313 5.943748220914334e-298 6.870599297710891e-298
	 1.853255257146149e-316 2.758594615210408e-313 5.943649790767034e-298 7.74682409913448e-304 6.870774284745643e-298
	 0 2.470328229206233e-323 0 1.85065485068815e-284 -7.559493430819439e+303
	 1.851161999817849e-316 1.697596632772218e-313 5.943740929792313e-298 6.694738203493697e-298 2.124566037797817e+185
 ]
val = 0


ris (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_d

52: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 1 0 0 0
	 1 1 0 0
	 1 0 1 0
 ]


M_in (4 : 4): [ 0 1 2 2 ]
------------------------------ Fine somma_righe_i

54: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 1 0 0 0
	 1 1 0 0
	 1 0 1 0
 ]


M_out (4 : 4): [ 3 1 1 0 ]
------------------------------ Fine somma_colonne_i

57: InitMatr_i
memory (4 x 3 : 4 x 3): [
	 79846424 3 4
	 4 4 2
	 2 3 4
	 3 2 3
 ]
val = -2147483648


memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


tmp_i1 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 3


tmp_i2 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 12): [ ]
tmp_i2 (0 : 12): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 3


ind (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 3 3 3 3 3 ]
s = 1


tmp_i1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (5 : 5): [ 4 4 4 4 4 ]


T2 (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 3 3 3 3 3 ]
s = 1


tmp_i1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 4 4 4 4 4 ]


old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 3 3 3 3 3 ]
s = 1


tmp_i1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 4 4 4 4 4 ]


toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (5 : 5): [ 5 5 5 5 5 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (5 : 5): [ 4 4 4 4 4 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (5 : 5): [ 1.000000017730368 1 1 1 1 ]
val = 0


S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (5 : 5): [ 0 0 0 0 0 ]
T2 (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]


a (5 : 5): [ -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 ]


a (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (5 : 5): [ 1 1 1 1 1 ]
T2 (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]


b (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]


b (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
b (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]


tmpm_d (5 x 2 : 5 x 2): [
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (5 x 2 : 5 x 2): [
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
 ]


m (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
complemento = 0


ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
ind (0 : 5): [ ]
val = 0


a (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
ind (0 : 5): [ ]
val = 0


b (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
b (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]


tmpm_d (5 x 2 : 5 x 2): [
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (5 x 2 : 5 x 2): [
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
 ]


m (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
b (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
m (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
T2 (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]


S2 (5 : 5): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
toll2 (5 : 5): [ 1 1 1 1 1 ]


tmp_d1 (5 : 5): [ -0.6775800682645476 -0.6775800682645476 -0.6775800682645476 -0.6775800682645476 -0.6775800682645476 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (5 : 5): [ -0.6775800682645476 -0.6775800682645476 -0.6775800682645476 -0.6775800682645476 -0.6775800682645476 ]
val = 0

ind1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
toll2 (5 : 5): [ 1 1 1 1 1 ]


tmp_d1 (5 : 5): [ -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (5 : 5): [ -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 ]
val = 0


ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (5 : 5): [ 1 2 3 4 5 ]
ind2 (0 : 5): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
tmp_i1 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 4
ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 4
tmp_i1 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 5
ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 5
tmp_i1 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (0 : 5): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
tmp_i1 (0 : 5): [ ]
val = -1.#INF


S2 (5 : 5): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
ind (0 : 5): [ ]
val = 0


S2 (5 : 5): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
val = 0


ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
ind (0 : 5): [ ]
val = -1.#INF


S2 (5 : 5): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (5 : 5): [ 0 0 0 0 0 ]
S2 (5 : 5): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 ]


ris (5 : 5): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (5 : 5): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
div = 2.000


ris (5 : 5): [ -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (850 interne); stringhe deallocate: 0 (550 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
ris (5 : 5): [ -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 ]
val = -1.#INF


indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
st = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 5
indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
ris (5 : 5): [ -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (5 : 5): [ -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 ]


min = -1.050772612935894
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (5 : 5): [ -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 ]
indInf (0 : 5): [ ]
val = -2.050772612935894


ris (5 : 5): [ -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 ]
------------------------------ Fine assegna1_vs_indx_d

155: InitVett_d
S_in (5 : 5): [ 3.945137897193354e-316 0 0 0 0 ]
val = 0


S_in (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

156: aggiungi_ms_riga_i	<=>	m[riga,] <- val # riga <= dim(m)[0] + 1
checkIN (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1, val = 1


checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_ms_riga_i

159: somma_vv_d	<=>	ris <- v1 + v2
ris (5 : 5): [ -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 ]
S_in (5 : 5): [ 0 0 0 0 0 ]


tmp_d1 (5 : 5): [ -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
tmp_d1 (5 : 5): [ -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 ]


ris (4 x 5 : 4 x 5): [
	 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 12): [ ]
tmp_i2 (0 : 12): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


ind (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (5 : 5): [ 5 5 5 5 5 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (5 : 5): [ 4 4 4 4 4 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (5 : 5): [ 0 0 0 0 0 ]
T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]


a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (5 : 5): [ 1 1 1 1 1 ]
T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]


tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]


m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
ind (0 : 5): [ ]
val = 0


a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
ind (0 : 5): [ ]
val = 0


b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]


tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]


m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
toll2 (5 : 5): [ 1 1 1 1 1 ]


tmp_d1 (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
val = 0

ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
toll2 (5 : 5): [ 1 1 1 1 1 ]


tmp_d1 (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0


ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (0 : 5): [ ]
ind2 (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (0 : 5): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ 1 1 1 1 1 ]
tmp_i1 (0 : 5): [ ]
val = -1.#INF


S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ 1 1 1 1 1 ]
ind (0 : 5): [ ]
val = 0


S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
val = 0


ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ 1 1 1 1 1 ]
ind (0 : 5): [ ]
val = -1.#INF


S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (5 : 5): [ 0 0 0 0 0 ]
S2 (5 : 5): [ 1 1 1 1 1 ]


ris (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (5 : 5): [ 1 1 1 1 1 ]
div = 2.000


ris (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (970 interne); stringhe deallocate: 0 (650 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
ris (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
val = -1.#INF


indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 2
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
st = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 5
indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
ris (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
indInf (0 : 5): [ ]
val = -1


ris (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


ind (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (5 : 5): [ 5 5 5 5 5 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (5 : 5): [ 4 4 4 4 4 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (5 : 5): [ 5.00000007092099 5 5 5 5 ]
val = 0


S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (5 : 5): [ 0 0 0 0 0 ]
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (5 : 5): [ 1 1 1 1 1 ]
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


tmpm_d (5 x 2 : 5 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (5 x 2 : 5 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


S2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ 0 0 0 0 0 ]
ind (0 : 5): [ ]
val = -1.#INF


S2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (5 : 5): [ 0 0 0 0 0 ]
S2 (5 : 5): [ 0 0 0 0 0 ]


S_in (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
S_in (5 : 5): [ 0 0 0 0 0 ]
div = 2.000


S_in (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (1055 interne); stringhe deallocate: 0 (735 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
S_in (5 : 5): [ 0 0 0 0 0 ]
val = -1.#INF


indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 2
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
st = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 5
indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
S_in (5 : 5): [ 0 0 0 0 0 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (5 : 5): [ 0 0 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
S_in (5 : 5): [ 0 0 0 0 0 ]
indInf (0 : 5): [ ]
val = -1


S_in (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
ris (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
S_in (5 : 5): [ 0 0 0 0 0 ]


tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (4 x 5 : 4 x 5): [
	 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 2
tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


ris (4 x 5 : 4 x 5): [
	 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894
	 0.5 0.5 0.5 0.5 0.5
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 2


tmp_i1 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 12): [ ]
tmp_i2 (0 : 12): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


ind (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (5 : 5): [ 5 5 5 5 5 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (5 : 5): [ 4 4 4 4 4 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (5 : 5): [ 5.000000070922894 5 5 5 5 ]
val = 0


S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (5 : 5): [ 0 0 0 0 0 ]
T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]


a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (5 : 5): [ 1 1 1 1 1 ]
T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]


tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]


m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
ind (0 : 5): [ ]
val = 0


a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
ind (0 : 5): [ ]
val = 0


b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]


tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]


m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
toll2 (5 : 5): [ 1 1 1 1 1 ]


tmp_d1 (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
val = 0

ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
toll2 (5 : 5): [ 1 1 1 1 1 ]


tmp_d1 (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0


ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (0 : 5): [ ]
ind2 (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (0 : 5): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ 1 1 1 1 1 ]
tmp_i1 (0 : 5): [ ]
val = -1.#INF


S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ 1 1 1 1 1 ]
ind (0 : 5): [ ]
val = 0


S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
val = 0


ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ 1 1 1 1 1 ]
ind (0 : 5): [ ]
val = -1.#INF


S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (5 : 5): [ 0 0 0 0 0 ]
S2 (5 : 5): [ 1 1 1 1 1 ]


ris (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (5 : 5): [ 1 1 1 1 1 ]
div = 2.000


ris (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (1155 interne); stringhe deallocate: 0 (835 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
ris (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
val = -1.#INF


indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 3
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
st = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 5
indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
ris (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
indInf (0 : 5): [ ]
val = -1


ris (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 2


ind (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 2 2 2 2 2 ]
s = 1


tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 2 2 2 2 2 ]
s = 1


tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 2 2 2 2 2 ]
s = 1


tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (5 : 5): [ 5 5 5 5 5 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (5 : 5): [ 4 4 4 4 4 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (5 : 5): [ 5.000000070920748 5 5 5 5 ]
val = 0


S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (5 : 5): [ 0 0 0 0 0 ]
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (5 : 5): [ 1 1 1 1 1 ]
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


tmpm_d (5 x 2 : 5 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (5 x 2 : 5 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


S2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ 0 0 0 0 0 ]
ind (0 : 5): [ ]
val = -1.#INF


S2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (5 : 5): [ 0 0 0 0 0 ]
S2 (5 : 5): [ 0 0 0 0 0 ]


S_in (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
S_in (5 : 5): [ 0 0 0 0 0 ]
div = 2.000


S_in (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (1240 interne); stringhe deallocate: 0 (920 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
S_in (5 : 5): [ 0 0 0 0 0 ]
val = -1.#INF


indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 3
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
st = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 5
indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
S_in (5 : 5): [ 0 0 0 0 0 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (5 : 5): [ 0 0 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
S_in (5 : 5): [ 0 0 0 0 0 ]
indInf (0 : 5): [ ]
val = -1


S_in (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
ris (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
S_in (5 : 5): [ 0 0 0 0 0 ]


tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (4 x 5 : 4 x 5): [
	 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894
	 0.5 0.5 0.5 0.5 0.5
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 3
tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


ris (4 x 5 : 4 x 5): [
	 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894
	 0.5 0.5 0.5 0.5 0.5
	 0.5 0.5 0.5 0.5 0.5
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 2


tmp_i1 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 12): [ ]
tmp_i2 (0 : 12): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

119: InitVett_d
ris (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
val = 0


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

122: InitVett_i
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
val = 1


tmp_i1 (5 : 12): [ 1 1 1 1 1 ]
------------------------------ Fine InitVett_i

123: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 4
tmp_i1 (5 : 12): [ 1 1 1 1 1 ]


checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_mv_riga_i

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 2


ind (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 2 2 2 2 2 ]
s = 1


tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 2 2 2 2 2 ]
s = 1


tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 2 2 2 2 2 ]
s = 1


tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (5 : 5): [ 5 5 5 5 5 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (5 : 5): [ 4 4 4 4 4 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (5 : 5): [ 5.000000070921956 5 5 5 5 ]
val = 0


S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (5 : 5): [ 0 0 0 0 0 ]
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (5 : 5): [ 1 1 1 1 1 ]
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


tmpm_d (5 x 2 : 5 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (5 x 2 : 5 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


S2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ 0 0 0 0 0 ]
ind (0 : 5): [ ]
val = -1.#INF


S2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (5 : 5): [ 0 0 0 0 0 ]
S2 (5 : 5): [ 0 0 0 0 0 ]


S_in (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
S_in (5 : 5): [ 0 0 0 0 0 ]
div = 2.000


S_in (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (1325 interne); stringhe deallocate: 0 (1005 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
S_in (5 : 5): [ 0 0 0 0 0 ]
val = -1.#INF


indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 4
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
st = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 5
indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
S_in (5 : 5): [ 0 0 0 0 0 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (5 : 5): [ 0 0 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
S_in (5 : 5): [ 0 0 0 0 0 ]
indInf (0 : 5): [ ]
val = -1


S_in (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
ris (5 : 5): [ 0 0 0 0 0 ]
S_in (5 : 5): [ 0 0 0 0 0 ]


tmp_d1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (4 x 5 : 4 x 5): [
	 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894
	 0.5 0.5 0.5 0.5 0.5
	 0.5 0.5 0.5 0.5 0.5
	 0 0 0 0 0
 ]
riga = 4
tmp_d1 (5 : 5): [ 0 0 0 0 0 ]


ris (4 x 5 : 4 x 5): [
	 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894
	 0.5 0.5 0.5 0.5 0.5
	 0.5 0.5 0.5 0.5 0.5
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

168: somma_m_d	<=>	ris <- sum(m)
ris (4 x 5 : 4 x 5): [
	 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894
	 0.5 0.5 0.5 0.5 0.5
	 0.5 0.5 0.5 0.5 0.5
	 0 0 0 0 0
 ]


ris: -0.2538630646794697
------------------------------ Fine somma_m_d

173: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]


aus (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_colonne_i

175: which_v_indxne_i	<=>	ris <- which(v != val)
aus (5 : 5): [ 4 4 4 4 4 ]
val = 0


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

186: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]


rs (4 : 4): [ 5 5 5 5 ]
------------------------------ Fine somma_righe_i

188: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (4 : 4): [ 5 5 5 5 ]
decr = 0


ord_ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine ordine_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
I (0 : 0): [ ]
I_add (5 : 20): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
I_add (5 : 20): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 3
val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 10): [ 1 2 3 4 5 ]
I_add (5 : 20): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 4
val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 10): [ 1 2 3 4 5 ]
I_add (5 : 20): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

216: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 0


checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

218: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 1


checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

220: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]


aus (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_colonne_i

222: which_v_indxne_i	<=>	ris <- which(v != val)
aus (5 : 5): [ 4 4 4 4 4 ]
val = 0


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

232: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]


rs (4 : 4): [ 5 5 5 5 ]
------------------------------ Fine somma_righe_i

234: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (4 : 4): [ 5 5 5 5 ]
decr = 0


ord_ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine ordine_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 10): [ ]
I_add (5 : 20): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
I_add (5 : 20): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 3
val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 10): [ 1 2 3 4 5 ]
I_add (5 : 20): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 4
val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 10): [ 1 2 3 4 5 ]
I_add (5 : 20): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i


Stringhe allocate: 5 (1430 interne); stringhe deallocate: 0 (1185 interne)


Stringhe allocate: 5 (1435 interne); stringhe deallocate: 0 (1195 interne)


*** module3 ***
51: seq_i	<=>	ris <- seq(da, a, incr)
da = 2
a = 5
incr = 1


tmp1_i (4 : 4): [ 2 3 4 5 ]
------------------------------ Fine seq_i


*** sampleB ***

***sample***
tmp1_i (4 : 4): [ 2 3 4 5 ]
k = 1, replace = 0


ris (1 : 1): [ 4 ]
*****************************************


Stringhe allocate: 5 (1445 interne); stringhe deallocate: 0 (1195 interne)


Stringhe allocate: 5 (1445 interne); stringhe deallocate: 0 (1195 interne)

54: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


tmp1_i (3 : 4): [ 1 2 3 ]
------------------------------ Fine seq_i


*** sampleB ***

***sample***
tmp1_i (3 : 4): [ 1 2 3 ]
k = 1, replace = 0


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (1450 interne); stringhe deallocate: 0 (1195 interne)


Stringhe allocate: 5 (1450 interne); stringhe deallocate: 0 (1195 interne)


*** mod3 ***
33: InitMatr_i
ris (4 x 4 : 4 x 4): [
	 79854208 0 2 0
	 79855600 281 0 173
	 0 22 0 1
	 173 5 222 0
 ]
val = 0


ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

34: copia_v_d	<=>	ris[st:end] <- v[st:end]
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
st = 1
end = 7


STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
------------------------------ Fine copia_v_d

35: copia_v_d	<=>	ris[st:end] <- v[st:end]
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
st = 1
end = 7


STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
------------------------------ Fine copia_v_d

39: segmento_v_d	<=>	ris <- v[st:end]
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
start = 2
end = 4


tmp1_d (3 : 3): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 ]
------------------------------ Fine segmento_v_d

40: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
tmp1_d (3 : 3): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 ]
canc_NA = 1



ris: 4.723980749826459
------------------------------ Fine somma_v_d

43: segmento_v_d	<=>	ris <- v[st:end]
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
start = 2
end = 4


p (3 : 3): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 ]
------------------------------ Fine segmento_v_d

44: dividi1_vs_d	<=>	v <- v / div
p (3 : 3): [ 3.614836360604185 0.7867244574868211 0.3224199317354524 ]
div = 4.724


p (3 : 3): [ 0.7652097991163449 0.166538455415112 0.068251745468543 ]
------------------------------ Fine dividi1_vs_d

61: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


tmp1_i (3 : 3): [ 1 2 3 ]
------------------------------ Fine seq_i


*** sampleB_p ***

*** sample_p ***
tmp1_i (3 : 3): [ 1 2 3 ]
k = 1, replace = 1
p (3 : 3): [ 0.7652097991163449 0.166538455415112 0.068251745468543 ]


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (1495 interne); stringhe deallocate: 0 (1195 interne)

64: somma_v_i	<=>	ris <- sum(v, na.rm=canc_NA)
ris (1 : 1): [ 1 ]
canc_NA = 0



ris: 1
------------------------------ Fine somma_v_i

68: segmento1_v_d	<=>	v <- v[st:end]
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
start = 1
end = 4


STout (4 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 ]
------------------------------ Fine segmento1_v_d

78: dividi1_vs_d	<=>	v <- v / div
STout (4 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 ]
div = 1.575


STout (4 : 7): [ 1.#QNAN 2.295629397349035 0.499615366245336 0.204755236405629 ]
------------------------------ Fine dividi1_vs_d

80: max_v_i		<=>	ris <- max(v)
ris (1 : 1): [ 1 ]


max = 1
------------------------------ Fine max_v_i

82: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 4
incr = 1


tmp2_i (5 : 5): [ 0 1 2 3 4 ]
------------------------------ Fine seq_i


*** hist1 ***
ris (1 : 1): [ 1 ]
tmp2_i (5 : 5): [ 0 1 2 3 4 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
tmp1_i (4 : 10): [ 0 2 3 4 ]
val = 0


tmp1_i (4 : 10): [ 0 0 0 0 ]
------------------------------ Fine InitVett_i



tmp1_i (4 : 10): [ 0 1 0 0 ]

Stringhe allocate: 5 (1500 interne); stringhe deallocate: 0 (1195 interne)

84: dividi_vs_i	ris <- v / div
tmp1_i (4 : 10): [ 0 1 0 0 ]
div = 4.000


Freq_out (4 : 4): [ 0 0.25 0 0 ]
------------------------------ Fine dividi_vs_i

87: InitVett_d
tmp3_d (2 : 2): [ 3.287239484600103e-085 5.38784212246792e-310 ]
val = 1.#INF


tmp3_d (2 : 2): [ 1.#INF 1.#INF ]
------------------------------ Fine InitVett_d


***score***
31: somma_vs_i	<=>	ris <- v + s
ris (1 : 1): [ 1 ]
s = 1


ind (1 : 1): [ 2 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
ris (1 : 1): [ 1 ]
s = 1


tmp_i1 (1 : 1): [ 2 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (4 : 7): [ 1.#QNAN 2.295629397349035 0.499615366245336 0.204755236405629 ]
tmp_i1 (1 : 1): [ 2 ]


T1 (1 : 1): [ 2.295629397349035 ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (1 : 1): [ 2 ]
s = 1


tmp_i1 (1 : 1): [ 3 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (4 : 7): [ 1.#QNAN 2.295629397349035 0.499615366245336 0.204755236405629 ]
tmp_i1 (1 : 1): [ 3 ]


T2 (1 : 1): [ 0.499615366245336 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
ris (1 : 1): [ 1 ]
s = 1


tmp_i1 (1 : 1): [ 2 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (4 : 4): [ 0 0.25 0 0 ]
tmp_i1 (1 : 1): [ 2 ]


old1 (1 : 1): [ 0.25 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (1 : 1): [ 2 ]
s = 1


tmp_i1 (1 : 1): [ 3 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (4 : 4): [ 0 0.25 0 0 ]
tmp_i1 (1 : 1): [ 3 ]


old2 (1 : 1): [ 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (1 : 1): [ 0.25 ]
s = -1


new1 (1 : 1): [ -0.75 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (1 : 1): [ 0 ]
s = 1


new2 (1 : 1): [ 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
ris (1 : 1): [ 1 ]
s = 1


tmp_i1 (1 : 1): [ 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
tmp3_d (2 : 2): [ 1.#INF 1.#INF ]
tmp_i1 (1 : 1): [ 2 ]


toll1 (1 : 1): [ 1.#INF ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (1 : 1): [ 2 ]
s = 1


tmp_i1 (1 : 1): [ 3 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
tmp3_d (2 : 2): [ 1.#INF 1.#INF ]
tmp_i1 (1 : 1): [ 3 ]
ATTENZIONE (assegna_vindxNA_d, linea scoremodular.c # 56): assegnato NA per via di un elemento specificato alla posizione 3 che e` al di fuori dei limiti dell'array (2)!


toll2 (1 : 1): [ 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (1 : 1): [ 0.25 ]
T1 (1 : 1): [ 2.295629397349035 ]


a (1 : 1): [ -2.045629397349035 ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (1 : 1): [ -2.045629397349035 ]


a (1 : 1): [ 2.045629397349035 ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (1 : 1): [ -0.75 ]
T1 (1 : 1): [ 2.295629397349035 ]


b (1 : 1): [ -3.045629397349035 ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (1 : 1): [ -3.045629397349035 ]


b (1 : 1): [ 3.045629397349035 ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (1 : 1): [ 2.295629397349035 ]
complemento = 0


ind (0 : 1): [ ]
------------------------------ Fine which_v_indxNA_d

68: assegna1_vs_indx_d	<=>	v[indx] <- val
a (1 : 1): [ 2.045629397349035 ]
ind (0 : 1): [ ]
val = 0


a (1 : 1): [ 2.045629397349035 ]
------------------------------ Fine assegna1_vs_indx_d

70: assegna1_vs_indx_d	<=>	v[indx] <- val
b (1 : 1): [ 3.045629397349035 ]
ind (0 : 1): [ ]
val = 0


b (1 : 1): [ 3.045629397349035 ]
------------------------------ Fine assegna1_vs_indx_d

78: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (1 : 1): [ 2.045629397349035 ]
b (1 : 1): [ 3.045629397349035 ]


tmpm_d (1 x 2 : 1 x 2): [
	 2.045629397349035 3.045629397349035
 ]
------------------------------ Fine cbind2v_d

79: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (1 x 2 : 1 x 2): [
	 2.045629397349035 3.045629397349035
 ]


m (1 : 1): [ 3.045629397349035 ]
------------------------------ Fine max_righe_d

81: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (1 : 1): [ 2.045629397349035 ]
b (1 : 1): [ 3.045629397349035 ]
m (1 : 1): [ 3.045629397349035 ]
T1 (1 : 1): [ 2.295629397349035 ]


S1 (1 : 1): [ -1.32670778692157 ]
------------------------------ Fine f_aux_d

83: diff_vv_d	<=>	ris <- v1 - v2
a (1 : 1): [ 2.045629397349035 ]
toll1 (1 : 1): [ 1.#INF ]


tmp_d1 (1 : 1): [ -1.#INF ]
------------------------------ Fine diff_vv_d

84: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (1 : 1): [ -1.#INF ]
val = 0

ind1 (1 : 1): [ 1 ]
------------------------------ Fine which_v_indxlt_d

86: diff_vv_d	<=>	ris <- v1 - v2
b (1 : 1): [ 3.045629397349035 ]
toll1 (1 : 1): [ 1.#INF ]


tmp_d1 (1 : 1): [ -1.#INF ]
------------------------------ Fine diff_vv_d

87: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (1 : 1): [ -1.#INF ]
val = 0


ind2 (0 : 1): [ ]
------------------------------ Fine which_v_indxgt_d

89: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (1 : 1): [ 1 ]
ind2 (0 : 1): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (0 : 1): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 1): [ ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (0 : 1): [ ]
------------------------------ Fine interseca_i

91: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (1 : 1): [ -1.32670778692157 ]
tmp_i1 (0 : 1): [ ]
val = -1.#INF


S1 (1 : 1): [ -1.32670778692157 ]
------------------------------ Fine assegna1_vs_indx_d

93: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (1 : 1): [ -1.32670778692157 ]
ind (0 : 1): [ ]
val = 0


S1 (1 : 1): [ -1.32670778692157 ]
------------------------------ Fine assegna1_vs_indx_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (1 : 1): [ 0 ]
T2 (1 : 1): [ 0.499615366245336 ]


a (1 : 1): [ -0.499615366245336 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (1 : 1): [ -0.499615366245336 ]


a (1 : 1): [ 0.499615366245336 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (1 : 1): [ 1 ]
T2 (1 : 1): [ 0.499615366245336 ]


b (1 : 1): [ 0.500384633754664 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (1 : 1): [ 0.500384633754664 ]


b (1 : 1): [ 0.500384633754664 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (1 : 1): [ 0.499615366245336 ]
b (1 : 1): [ 0.500384633754664 ]


tmpm_d (1 x 2 : 1 x 2): [
	 0.499615366245336 0.500384633754664
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (1 x 2 : 1 x 2): [
	 0.499615366245336 0.500384633754664
 ]


m (1 : 1): [ 0.500384633754664 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (1 : 1): [ 0.499615366245336 ]
complemento = 0


ind (0 : 1): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (1 : 1): [ 0.499615366245336 ]
ind (0 : 1): [ ]
val = 0


a (1 : 1): [ 0.499615366245336 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (1 : 1): [ 0.500384633754664 ]
ind (0 : 1): [ ]
val = 0


b (1 : 1): [ 0.500384633754664 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (1 : 1): [ 0.499615366245336 ]
b (1 : 1): [ 0.500384633754664 ]


tmpm_d (1 x 2 : 1 x 2): [
	 0.499615366245336 0.500384633754664
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (1 x 2 : 1 x 2): [
	 0.499615366245336 0.500384633754664
 ]


m (1 : 1): [ 0.500384633754664 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (1 : 1): [ 0.499615366245336 ]
b (1 : 1): [ 0.500384633754664 ]
m (1 : 1): [ 0.500384633754664 ]
T2 (1 : 1): [ 0.499615366245336 ]


S2 (1 : 1): [ -1.001539719474822 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (1 : 1): [ 0.499615366245336 ]
toll2 (1 : 1): [ 1.#QNAN ]


tmp_d1 (1 : 1): [ 1.#QNAN ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (1 : 1): [ 1.#QNAN ]
val = 0

ind1 (0 : 1): [ ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (1 : 1): [ 0.500384633754664 ]
toll2 (1 : 1): [ 1.#QNAN ]


tmp_d1 (1 : 1): [ 1.#QNAN ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (1 : 1): [ 1.#QNAN ]
val = 0


ind2 (0 : 1): [ ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (0 : 1): [ ]
ind2 (0 : 1): [ ]


tmp_i1 (0 : 1): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (1 : 1): [ -1.001539719474822 ]
tmp_i1 (0 : 1): [ ]
val = -1.#INF


S2 (1 : 1): [ -1.001539719474822 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (1 : 1): [ -1.001539719474822 ]
ind (0 : 1): [ ]
val = 0


S2 (1 : 1): [ -1.001539719474822 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (1 : 1): [ 0.499615366245336 ]
val = 0


ind (0 : 1): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (1 : 1): [ -1.001539719474822 ]
ind (0 : 1): [ ]
val = -1.#INF


S2 (1 : 1): [ -1.001539719474822 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (1 : 1): [ -1.32670778692157 ]
S2 (1 : 1): [ -1.001539719474822 ]


ris (1 : 1): [ -2.328247506396391 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (1 : 1): [ -2.328247506396391 ]
div = 2.000


ris (1 : 1): [ -1.164123753198196 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (1616 interne); stringhe deallocate: 0 (1296 interne)

90: which_v_indxne_d	<=>	ris <- which(v != val)
ris (1 : 1): [ -1.164123753198196 ]
val = -1.#INF


indok (1 : 1): [ 1 ]
------------------------------ Fine which_v_indxne_d

92: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


tmp3_i (1 : 1): [ 1 ]
------------------------------ Fine seq_i

93: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp3_i (1 : 1): [ 1 ]
indok (1 : 1): [ 1 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp3_i (1 : 1): [ 1 ]
st = 1
end = 1


indInf (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (1 : 1): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 1): [ 1 ]
indx = 1


indInf (0 : 1): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 1): [ ]
------------------------------ Fine setdiff_i

95: assegna_v_indx_d	<=>	ris <-v[indx] senza sforamento dei limiti
ris (1 : 1): [ -1.164123753198196 ]
indok (1 : 1): [ 1 ]


tmp1_d (1 : 3): [ -1.164123753198196 ]
------------------------------ Fine assegna_v_indx_d

96: min_v_d	<=>	ris <- min(v)
tmp1_d (1 : 3): [ -1.164123753198196 ]


min = -1.164123753198196
------------------------------ Fine min_v_d

99: assegna1_v_indx_d	<=>	v[indx] <- val
ris (1 : 1): [ -1.164123753198196 ]
indInf (0 : 1): [ ]
val = -1


ris (1 : 1): [ -1.164123753198196 ]
------------------------------ Fine assegna1_v_indx_d

101: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
ris (1 : 1): [ -1.164123753198196 ]
canc_NA = 0



ris: -1.164123753198196
------------------------------ Fine somma_v_d

101: dividi_vs_d	ris <- v / div
ris (1 : 1): [ -1.164123753198196 ]
div = -1.164


p (1 : 3): [ 1 ]
------------------------------ Fine dividi_vs_d

119: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


tmp2_i (1 : 5): [ 1 ]
------------------------------ Fine seq_i


*** sampleB_p ***
25: rep_v_i	<=>	ris <- rep(v, rip)
tmp2_i (1 : 5): [ 1 ]
rip = 1


ris (1 : 1): [ 1 ]
------------------------------ Fine rep_v_i

64: somma_v_i	<=>	ris <- sum(v, na.rm=canc_NA)
ris (1 : 1): [ 2 ]
canc_NA = 0



ris: 2
------------------------------ Fine somma_v_i

68: segmento1_v_d	<=>	v <- v[st:end]
STout (4 : 7): [ 1.#QNAN 2.295629397349035 0.499615366245336 0.204755236405629 ]
start = 1
end = 4


STout (4 : 7): [ 1.#QNAN 2.295629397349035 0.499615366245336 0.204755236405629 ]
------------------------------ Fine segmento1_v_d

78: dividi1_vs_d	<=>	v <- v / div
STout (4 : 7): [ 1.#QNAN 2.295629397349035 0.499615366245336 0.204755236405629 ]
div = 1.575


STout (4 : 7): [ 1.#QNAN 1.457856955132618 0.3172845483739683 0.1300313743317969 ]
------------------------------ Fine dividi1_vs_d

80: max_v_i		<=>	ris <- max(v)
ris (1 : 1): [ 2 ]


max = 2
------------------------------ Fine max_v_i

82: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 4
incr = 1


tmp2_i (5 : 5): [ 0 1 2 3 4 ]
------------------------------ Fine seq_i


*** hist1 ***
ris (1 : 1): [ 2 ]
tmp2_i (5 : 5): [ 0 1 2 3 4 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
tmp1_i (4 : 10): [ 0 1 0 0 ]
val = 0


tmp1_i (4 : 10): [ 0 0 0 0 ]
------------------------------ Fine InitVett_i



tmp1_i (4 : 10): [ 0 0 1 0 ]

Stringhe allocate: 5 (1636 interne); stringhe deallocate: 0 (1296 interne)

84: dividi_vs_i	ris <- v / div
tmp1_i (4 : 10): [ 0 0 1 0 ]
div = 4.000


Freq_out (4 : 4): [ 0 0 0.25 0 ]
------------------------------ Fine dividi_vs_i

87: InitVett_d
tmp3_d (2 : 2): [ 1.#INF 1.#INF ]
val = 1.#INF


tmp3_d (2 : 2): [ 1.#INF 1.#INF ]
------------------------------ Fine InitVett_d


***score***
31: somma_vs_i	<=>	ris <- v + s
ris (1 : 1): [ 2 ]
s = 1


ind (1 : 1): [ 3 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
ris (1 : 1): [ 2 ]
s = 1


tmp_i1 (1 : 1): [ 3 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (4 : 7): [ 1.#QNAN 1.457856955132618 0.3172845483739683 0.1300313743317969 ]
tmp_i1 (1 : 1): [ 3 ]


T1 (1 : 1): [ 0.3172845483739683 ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (1 : 1): [ 3 ]
s = 1


tmp_i1 (1 : 1): [ 4 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (4 : 7): [ 1.#QNAN 1.457856955132618 0.3172845483739683 0.1300313743317969 ]
tmp_i1 (1 : 1): [ 4 ]


T2 (1 : 1): [ 0.1300313743317969 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
ris (1 : 1): [ 2 ]
s = 1


tmp_i1 (1 : 1): [ 3 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (4 : 4): [ 0 0 0.25 0 ]
tmp_i1 (1 : 1): [ 3 ]


old1 (1 : 1): [ 0.25 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (1 : 1): [ 3 ]
s = 1


tmp_i1 (1 : 1): [ 4 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (4 : 4): [ 0 0 0.25 0 ]
tmp_i1 (1 : 1): [ 4 ]


old2 (1 : 1): [ 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (1 : 1): [ 0.25 ]
s = -1


new1 (1 : 1): [ -0.75 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (1 : 1): [ 0 ]
s = 1


new2 (1 : 1): [ 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
ris (1 : 1): [ 2 ]
s = 1


tmp_i1 (1 : 1): [ 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
tmp3_d (2 : 2): [ 1.#INF 1.#INF ]
tmp_i1 (1 : 1): [ 3 ]
ATTENZIONE (assegna_vindxNA_d, linea scoremodular.c # 52): assegnato NA per via di un elemento specificato alla posizione 3 che e` al di fuori dei limiti dell'array (2)!


toll1 (1 : 1): [ 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (1 : 1): [ 3 ]
s = 1


tmp_i1 (1 : 1): [ 4 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
tmp3_d (2 : 2): [ 1.#INF 1.#INF ]
tmp_i1 (1 : 1): [ 4 ]
ATTENZIONE (assegna_vindxNA_d, linea scoremodular.c # 56): assegnato NA per via di un elemento specificato alla posizione 4 che e` al di fuori dei limiti dell'array (2)!


toll2 (1 : 1): [ 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (1 : 1): [ 0.25 ]
T1 (1 : 1): [ 0.3172845483739683 ]


a (1 : 1): [ -0.0672845483739683 ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (1 : 1): [ -0.0672845483739683 ]


a (1 : 1): [ 0.0672845483739683 ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (1 : 1): [ -0.75 ]
T1 (1 : 1): [ 0.3172845483739683 ]


b (1 : 1): [ -1.067284548373968 ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (1 : 1): [ -1.067284548373968 ]


b (1 : 1): [ 1.067284548373968 ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (1 : 1): [ 0.3172845483739683 ]
complemento = 0


ind (0 : 1): [ ]
------------------------------ Fine which_v_indxNA_d

68: assegna1_vs_indx_d	<=>	v[indx] <- val
a (1 : 1): [ 0.0672845483739683 ]
ind (0 : 1): [ ]
val = 0


a (1 : 1): [ 0.0672845483739683 ]
------------------------------ Fine assegna1_vs_indx_d

70: assegna1_vs_indx_d	<=>	v[indx] <- val
b (1 : 1): [ 1.067284548373968 ]
ind (0 : 1): [ ]
val = 0


b (1 : 1): [ 1.067284548373968 ]
------------------------------ Fine assegna1_vs_indx_d

78: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (1 : 1): [ 0.0672845483739683 ]
b (1 : 1): [ 1.067284548373968 ]


tmpm_d (1 x 2 : 1 x 2): [
	 0.0672845483739683 1.067284548373968
 ]
------------------------------ Fine cbind2v_d

79: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (1 x 2 : 1 x 2): [
	 0.0672845483739683 1.067284548373968
 ]


m (1 : 1): [ 1.067284548373968 ]
------------------------------ Fine max_righe_d

81: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (1 : 1): [ 0.0672845483739683 ]
b (1 : 1): [ 1.067284548373968 ]
m (1 : 1): [ 1.067284548373968 ]
T1 (1 : 1): [ 0.3172845483739683 ]


S1 (1 : 1): [ -3.363808776203027 ]
------------------------------ Fine f_aux_d

83: diff_vv_d	<=>	ris <- v1 - v2
a (1 : 1): [ 0.0672845483739683 ]
toll1 (1 : 1): [ 1.#QNAN ]


tmp_d1 (1 : 1): [ 1.#QNAN ]
------------------------------ Fine diff_vv_d

84: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (1 : 1): [ 1.#QNAN ]
val = 0

ind1 (0 : 1): [ ]
------------------------------ Fine which_v_indxlt_d

86: diff_vv_d	<=>	ris <- v1 - v2
b (1 : 1): [ 1.067284548373968 ]
toll1 (1 : 1): [ 1.#QNAN ]


tmp_d1 (1 : 1): [ 1.#QNAN ]
------------------------------ Fine diff_vv_d

87: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (1 : 1): [ 1.#QNAN ]
val = 0


ind2 (0 : 1): [ ]
------------------------------ Fine which_v_indxgt_d

89: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (0 : 1): [ ]
ind2 (0 : 1): [ ]


tmp_i1 (0 : 1): [ ]
------------------------------ Fine interseca_i

91: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (1 : 1): [ -3.363808776203027 ]
tmp_i1 (0 : 1): [ ]
val = -1.#INF


S1 (1 : 1): [ -3.363808776203027 ]
------------------------------ Fine assegna1_vs_indx_d

93: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (1 : 1): [ -3.363808776203027 ]
ind (0 : 1): [ ]
val = 0


S1 (1 : 1): [ -3.363808776203027 ]
------------------------------ Fine assegna1_vs_indx_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (1 : 1): [ 0 ]
T2 (1 : 1): [ 0.1300313743317969 ]


a (1 : 1): [ -0.1300313743317969 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (1 : 1): [ -0.1300313743317969 ]


a (1 : 1): [ 0.1300313743317969 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (1 : 1): [ 1 ]
T2 (1 : 1): [ 0.1300313743317969 ]


b (1 : 1): [ 0.8699686256682031 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (1 : 1): [ 0.8699686256682031 ]


b (1 : 1): [ 0.8699686256682031 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (1 : 1): [ 0.1300313743317969 ]
b (1 : 1): [ 0.8699686256682031 ]


tmpm_d (1 x 2 : 1 x 2): [
	 0.1300313743317969 0.8699686256682031
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (1 x 2 : 1 x 2): [
	 0.1300313743317969 0.8699686256682031
 ]


m (1 : 1): [ 0.8699686256682031 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (1 : 1): [ 0.1300313743317969 ]
complemento = 0


ind (0 : 1): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (1 : 1): [ 0.1300313743317969 ]
ind (0 : 1): [ ]
val = 0


a (1 : 1): [ 0.1300313743317969 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (1 : 1): [ 0.8699686256682031 ]
ind (0 : 1): [ ]
val = 0


b (1 : 1): [ 0.8699686256682031 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (1 : 1): [ 0.1300313743317969 ]
b (1 : 1): [ 0.8699686256682031 ]


tmpm_d (1 x 2 : 1 x 2): [
	 0.1300313743317969 0.8699686256682031
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (1 x 2 : 1 x 2): [
	 0.1300313743317969 0.8699686256682031
 ]


m (1 : 1): [ 0.8699686256682031 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (1 : 1): [ 0.1300313743317969 ]
b (1 : 1): [ 0.8699686256682031 ]
m (1 : 1): [ 0.8699686256682031 ]
T2 (1 : 1): [ 0.1300313743317969 ]


S2 (1 : 1): [ -6.690451670904683 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (1 : 1): [ 0.1300313743317969 ]
toll2 (1 : 1): [ 1.#QNAN ]


tmp_d1 (1 : 1): [ 1.#QNAN ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (1 : 1): [ 1.#QNAN ]
val = 0

ind1 (0 : 1): [ ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (1 : 1): [ 0.8699686256682031 ]
toll2 (1 : 1): [ 1.#QNAN ]


tmp_d1 (1 : 1): [ 1.#QNAN ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (1 : 1): [ 1.#QNAN ]
val = 0


ind2 (0 : 1): [ ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (0 : 1): [ ]
ind2 (0 : 1): [ ]


tmp_i1 (0 : 1): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (1 : 1): [ -6.690451670904683 ]
tmp_i1 (0 : 1): [ ]
val = -1.#INF


S2 (1 : 1): [ -6.690451670904683 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (1 : 1): [ -6.690451670904683 ]
ind (0 : 1): [ ]
val = 0


S2 (1 : 1): [ -6.690451670904683 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (1 : 1): [ 0.1300313743317969 ]
val = 0


ind (0 : 1): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (1 : 1): [ -6.690451670904683 ]
ind (0 : 1): [ ]
val = -1.#INF


S2 (1 : 1): [ -6.690451670904683 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (1 : 1): [ -3.363808776203027 ]
S2 (1 : 1): [ -6.690451670904683 ]


ris (1 : 1): [ -10.05426044710771 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (1 : 1): [ -10.05426044710771 ]
div = 2.000


ris (1 : 1): [ -5.027130223553855 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (1738 interne); stringhe deallocate: 0 (1398 interne)

90: which_v_indxne_d	<=>	ris <- which(v != val)
ris (1 : 1): [ -5.027130223553855 ]
val = -1.#INF


indok (1 : 1): [ 1 ]
------------------------------ Fine which_v_indxne_d

92: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


tmp3_i (1 : 1): [ 1 ]
------------------------------ Fine seq_i

93: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp3_i (1 : 1): [ 1 ]
indok (1 : 1): [ 1 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp3_i (1 : 1): [ 1 ]
st = 1
end = 1


indInf (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (1 : 1): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 1): [ 1 ]
indx = 1


indInf (0 : 1): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 1): [ ]
------------------------------ Fine setdiff_i

95: assegna_v_indx_d	<=>	ris <-v[indx] senza sforamento dei limiti
ris (1 : 1): [ -5.027130223553855 ]
indok (1 : 1): [ 1 ]


tmp1_d (1 : 3): [ -5.027130223553855 ]
------------------------------ Fine assegna_v_indx_d

96: min_v_d	<=>	ris <- min(v)
tmp1_d (1 : 3): [ -5.027130223553855 ]


min = -5.027130223553855
------------------------------ Fine min_v_d

99: assegna1_v_indx_d	<=>	v[indx] <- val
ris (1 : 1): [ -5.027130223553855 ]
indInf (0 : 1): [ ]
val = -1


ris (1 : 1): [ -5.027130223553855 ]
------------------------------ Fine assegna1_v_indx_d

101: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
ris (1 : 1): [ -5.027130223553855 ]
canc_NA = 0



ris: -5.027130223553855
------------------------------ Fine somma_v_d

101: dividi_vs_d	ris <- v / div
ris (1 : 1): [ -5.027130223553855 ]
div = -5.027


p (1 : 3): [ 1 ]
------------------------------ Fine dividi_vs_d

119: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


tmp2_i (1 : 5): [ 1 ]
------------------------------ Fine seq_i


*** sampleB_p ***
25: rep_v_i	<=>	ris <- rep(v, rip)
tmp2_i (1 : 5): [ 1 ]
rip = 1


ris (1 : 1): [ 1 ]
------------------------------ Fine rep_v_i

64: somma_v_i	<=>	ris <- sum(v, na.rm=canc_NA)
ris (1 : 1): [ 3 ]
canc_NA = 0



ris: 3
------------------------------ Fine somma_v_i

131: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


tmp1_i (3 : 10): [ 1 2 3 ]
------------------------------ Fine seq_i

133: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
tmp1_i (3 : 10): [ 1 2 3 ]
scalare_i (1 : 1): [ 4 ]
val = 1


ris (4 x 4 : 4 x 4): [
	 0 0 0 1
	 0 0 0 1
	 0 0 0 1
	 0 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

135: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


indS (3 : 3): [ 1 2 3 ]
------------------------------ Fine seq_i

137: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


tmp2_i (3 : 5): [ 1 2 3 ]
------------------------------ Fine seq_i

138: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp2_i (3 : 5): [ 1 2 3 ]
indS (3 : 3): [ 1 2 3 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp2_i (3 : 5): [ 1 2 3 ]
st = 1
end = 3


indBS (3 : 3): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indBS (3 : 3): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indBS (3 : 3): [ 1 2 3 ]
indx = 1


indBS (2 : 3): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indBS (2 : 3): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indBS (2 : 3): [ 2 3 ]
indx = 1


indBS (1 : 3): [ 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indBS (1 : 3): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indBS (1 : 3): [ 3 ]
indx = 1


indBS (0 : 3): [ ]
------------------------------ Fine elimina1_indx_i



indBS (0 : 3): [ ]
------------------------------ Fine setdiff_i


*** triangola ***
27: diag_i	<=>	ris <- diag(m)
ris (4 x 4 : 4 x 4): [
	 0 0 0 1
	 0 0 0 1
	 0 0 0 1
	 0 0 0 0
 ]


Dmem (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine diag_i

29: assegna1_s_diag_i	<=>	diag_i(m) <- s
ris (4 x 4 : 4 x 4): [
	 0 0 0 1
	 0 0 0 1
	 0 0 0 1
	 0 0 0 0
 ]
val = 0


ris (4 x 4 : 4 x 4): [
	 0 0 0 1
	 0 0 0 1
	 0 0 0 1
	 0 0 0 0
 ]
------------------------------ Fine assegna1_s_diag_i

33: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
ris (4 x 4 : 4 x 4): [
	 0 0 0 1
	 0 0 0 1
	 0 0 0 1
	 0 0 0 0
 ]
r = 1
val = 0


tmp1_i (1 : 16): [ 4 ]
------------------------------ Fine which_m_rowindxne_i

34: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
ris (4 x 4 : 4 x 4): [
	 0 0 0 1
	 0 0 0 1
	 0 0 0 1
	 0 0 0 0
 ]
c = 1, val = 0


tmp2_i (0 : 16): [ ]
------------------------------ Fine which_m_colindxne_i

35: unione_i	<=>	ris <- union(v1, v2)
tmp1_i (1 : 16): [ 4 ]
tmp2_i (0 : 16): [ ]
4876: elimina_doppi_i	<=>	ris <- union(v, v)
ind (1 : 1): [ 4 ]


ris (1 : 1): [ 4 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 4 ]
------------------------------ Fine unione_i

33: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
ris (4 x 4 : 4 x 4): [
	 0 0 0 1
	 0 0 0 1
	 0 0 0 1
	 0 0 0 0
 ]
r = 2
val = 0


tmp1_i (1 : 16): [ 4 ]
------------------------------ Fine which_m_rowindxne_i

34: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
ris (4 x 4 : 4 x 4): [
	 0 0 0 1
	 0 0 0 1
	 0 0 0 1
	 0 0 0 0
 ]
c = 2, val = 0


tmp2_i (0 : 16): [ ]
------------------------------ Fine which_m_colindxne_i

35: unione_i	<=>	ris <- union(v1, v2)
tmp1_i (1 : 16): [ 4 ]
tmp2_i (0 : 16): [ ]
4876: elimina_doppi_i	<=>	ris <- union(v, v)
ind (1 : 1): [ 4 ]


ris (1 : 1): [ 4 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 4 ]
------------------------------ Fine unione_i

33: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
ris (4 x 4 : 4 x 4): [
	 0 0 0 1
	 0 0 0 1
	 0 0 0 1
	 0 0 0 0
 ]
r = 3
val = 0


tmp1_i (1 : 16): [ 4 ]
------------------------------ Fine which_m_rowindxne_i

34: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
ris (4 x 4 : 4 x 4): [
	 0 0 0 1
	 0 0 0 1
	 0 0 0 1
	 0 0 0 0
 ]
c = 3, val = 0


tmp2_i (0 : 16): [ ]
------------------------------ Fine which_m_colindxne_i

35: unione_i	<=>	ris <- union(v1, v2)
tmp1_i (1 : 16): [ 4 ]
tmp2_i (0 : 16): [ ]
4876: elimina_doppi_i	<=>	ris <- union(v, v)
ind (1 : 1): [ 4 ]


ris (1 : 1): [ 4 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 4 ]
------------------------------ Fine unione_i

33: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
ris (4 x 4 : 4 x 4): [
	 0 0 0 1
	 0 0 0 1
	 0 0 0 1
	 0 0 0 0
 ]
r = 4
val = 0


tmp1_i (0 : 16): [ ]
------------------------------ Fine which_m_rowindxne_i

34: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
ris (4 x 4 : 4 x 4): [
	 0 0 0 1
	 0 0 0 1
	 0 0 0 1
	 0 0 0 0
 ]
c = 4, val = 0


tmp2_i (3 : 16): [ 1 2 3 ]
------------------------------ Fine which_m_colindxne_i

35: unione_i	<=>	ris <- union(v1, v2)
tmp1_i (0 : 16): [ ]
tmp2_i (3 : 16): [ 1 2 3 ]
4876: elimina_doppi_i	<=>	ris <- union(v, v)
ind (3 : 3): [ 1 2 3 ]


ris (3 : 5): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 5): [ 1 2 3 ]
------------------------------ Fine unione_i

55: InitMatr_i
coord (1 x 2 : 2 x 2): [
	 79845728 1819240302
 ]
val = 0


coord (1 x 2 : 2 x 2): [
	 0 0
 ]
------------------------------ Fine InitMatr_i

72: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 2


tmp1_i (2 : 16): [ 1 2 ]
------------------------------ Fine vettore2s_i

73: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (1 x 2 : 2 x 2): [
	 0 0
 ]
riga = 2
tmp1_i (2 : 16): [ 1 2 ]


coord (2 x 2 : 2 x 2): [
	 0 0
	 1 2
 ]
------------------------------ Fine aggiungi_mv_riga_i

74: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 2, el2 = 1


tmp1_i (2 : 16): [ 2 1 ]
------------------------------ Fine vettore2s_i

76: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (2 x 2 : 2 x 2): [
	 0 0
	 1 2
 ]
riga = 3
tmp1_i (2 : 16): [ 2 1 ]


coord (3 x 2 : 3 x 2): [
	 0 0
	 1 2
	 2 1
 ]
------------------------------ Fine aggiungi_mv_riga_i

72: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 3


tmp1_i (2 : 16): [ 1 3 ]
------------------------------ Fine vettore2s_i

73: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (3 x 2 : 3 x 2): [
	 0 0
	 1 2
	 2 1
 ]
riga = 4
tmp1_i (2 : 16): [ 1 3 ]


coord (4 x 2 : 4 x 2): [
	 0 0
	 1 2
	 2 1
	 1 3
 ]
------------------------------ Fine aggiungi_mv_riga_i

74: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 3, el2 = 1


tmp1_i (2 : 16): [ 3 1 ]
------------------------------ Fine vettore2s_i

76: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (4 x 2 : 4 x 2): [
	 0 0
	 1 2
	 2 1
	 1 3
 ]
riga = 5
tmp1_i (2 : 16): [ 3 1 ]


coord (5 x 2 : 5 x 2): [
	 0 0
	 1 2
	 2 1
	 1 3
	 3 1
 ]
------------------------------ Fine aggiungi_mv_riga_i

72: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 2, el2 = 3


tmp1_i (2 : 16): [ 2 3 ]
------------------------------ Fine vettore2s_i

73: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (5 x 2 : 5 x 2): [
	 0 0
	 1 2
	 2 1
	 1 3
	 3 1
 ]
riga = 6
tmp1_i (2 : 16): [ 2 3 ]


coord (6 x 2 : 6 x 2): [
	 0 0
	 1 2
	 2 1
	 1 3
	 3 1
	 2 3
 ]
------------------------------ Fine aggiungi_mv_riga_i

74: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 3, el2 = 2


tmp1_i (2 : 16): [ 3 2 ]
------------------------------ Fine vettore2s_i

76: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (6 x 2 : 6 x 2): [
	 0 0
	 1 2
	 2 1
	 1 3
	 3 1
	 2 3
 ]
riga = 7
tmp1_i (2 : 16): [ 3 2 ]


coord (7 x 2 : 7 x 2): [
	 0 0
	 1 2
	 2 1
	 1 3
	 3 1
	 2 3
	 3 2
 ]
------------------------------ Fine aggiungi_mv_riga_i

89: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (4 x 4 : 4 x 4): [
	 0 0 0 1
	 0 0 0 1
	 0 0 0 1
	 0 0 0 0
 ]


M_in (4 : 4): [ 1 1 1 0 ]
------------------------------ Fine somma_righe_i

91: which_v_indxlt_i	<=>	ris <- which(v<val)
M_in (4 : 4): [ 1 1 1 0 ]
val = 5

ris (4 : 5): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxlt_i

95: which_m_colindxin_i	<=>	ris <- which(m[, c] %IN% v)
coord (7 x 2 : 7 x 2): [
	 0 0
	 1 2
	 2 1
	 1 3
	 3 1
	 2 3
	 3 2
 ]
c = 1
ris (4 : 5): [ 1 2 3 4 ]
3754: esiste_v_i	<=>	elem %IN% v
elem = 0
ris (4 : 5): [ 1 2 3 4 ]


indx = 0
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (4 : 5): [ 1 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (4 : 5): [ 1 2 3 4 ]


indx = 2
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (4 : 5): [ 1 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 3
ris (4 : 5): [ 1 2 3 4 ]


indx = 3
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (4 : 5): [ 1 2 3 4 ]


indx = 2
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 3
ris (4 : 5): [ 1 2 3 4 ]


indx = 3
------------------------------ Fine esiste_v_i



ind_aus (6 : 7): [ 2 3 4 5 6 7 ]
------------------------------ Fine which_m_colindxin_i

101: righe_i	<=>	ris <- m[indx,]
coord (7 x 2 : 7 x 2): [
	 0 0
	 1 2
	 2 1
	 1 3
	 3 1
	 2 3
	 3 2
 ]
ind_aus (6 : 7): [ 2 3 4 5 6 7 ]



tmp_coord1 (6 x 2 : 6 x 2): [
	 1 2
	 2 1
	 1 3
	 3 1
	 2 3
	 3 2
 ]
------------------------------ Fine righe_i

102: copia_m_i	<=>	ris <- da
tmp_coord1 (6 x 2 : 6 x 2): [
	 1 2
	 2 1
	 1 3
	 3 1
	 2 3
	 3 2
 ]


coord (6 x 2 : 7 x 2): [
	 1 2
	 2 1
	 1 3
	 3 1
	 2 3
	 3 2
 ]
------------------------------ Fine copia_m_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 6
incr = 1


tmp1_i (6 : 16): [ 1 2 3 4 5 6 ]
------------------------------ Fine seq_i


*** sampleB ***

***sample***
tmp1_i (6 : 16): [ 1 2 3 4 5 6 ]
k = 1, replace = 0


ris (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 5 (1848 interne); stringhe deallocate: 0 (1448 interne)


Stringhe allocate: 5 (1848 interne); stringhe deallocate: 0 (1448 interne)

107: riga_i	<=>	ris <- m[r,]
coord (6 x 2 : 7 x 2): [
	 1 2
	 2 1
	 1 3
	 3 1
	 2 3
	 3 2
 ]
r = 3

coord_ind (2 : 2): [ 1 3 ]
------------------------------ Fine riga_i

111: which_m_colneand2_i	<=>	ris <- which((m[, c] != val1) & (m[, c] != val2))
coord (6 x 2 : 7 x 2): [
	 1 2
	 2 1
	 1 3
	 3 1
	 2 3
	 3 2
 ]
c = 1, val1 = 1, val2 = 3


ris (2 : 22): [ 2 5 ]
------------------------------ Fine which_m_colneand2_i

114: righe_i	<=>	ris <- m[indx,]
coord (6 x 2 : 7 x 2): [
	 1 2
	 2 1
	 1 3
	 3 1
	 2 3
	 3 2
 ]
ris (2 : 22): [ 2 5 ]



tmp_coord1 (2 x 2 : 6 x 2): [
	 2 1
	 2 3
 ]
------------------------------ Fine righe_i

115: copia_m_i	<=>	ris <- da
tmp_coord1 (2 x 2 : 6 x 2): [
	 2 1
	 2 3
 ]


coord (2 x 2 : 7 x 2): [
	 2 1
	 2 3
 ]
------------------------------ Fine copia_m_i

152: assegna1_v_diag_i	<=>	diag(m) <- v
ris (4 x 4 : 4 x 4): [
	 0 0 1 1
	 0 0 0 1
	 0 0 0 1
	 0 0 0 0
 ]
Dmem (4 : 4): [ 0 0 0 0 ]


ris (4 x 4 : 4 x 4): [
	 0 0 1 1
	 0 0 0 1
	 0 0 0 1
	 0 0 0 0
 ]
------------------------------ Fine assegna1_v_diag_i


Stringhe allocate: 5 (1853 interne); stringhe deallocate: 0 (1503 interne)



*****************************************
*****************************************


Stringhe allocate: 5 (1853 interne); stringhe deallocate: 0 (1593 interne)


*** probmod ***
46: InitMatr_i
checkOUT (4 x 5 : 4 x 5): [
	 79776520 1600220775 1634037353 543370866 1954
	 1330207310 1684957558 1868788512 909451299 2146959360
	 673203534 1598115448 1869440370 1954 1954
	 1702064993 1814047844 1634497892 2146959360 2146959360
 ]
val = 0


checkOUT (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

48: InitMatr_i
checkIN (4 x 5 : 4 x 5): [
	 79776608 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val = 0


checkIN (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

50: InitMatr_d
ris (4 x 5 : 4 x 5): [
	 5.8424146983316e-308 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


ris (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_d

52: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (4 x 4 : 4 x 4): [
	 0 0 1 1
	 0 0 0 1
	 0 0 0 1
	 0 0 0 0
 ]


M_in (4 : 4): [ 2 1 1 0 ]
------------------------------ Fine somma_righe_i

54: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (4 x 4 : 4 x 4): [
	 0 0 1 1
	 0 0 0 1
	 0 0 0 1
	 0 0 0 0
 ]


M_out (4 : 4): [ 0 0 1 3 ]
------------------------------ Fine somma_colonne_i

57: InitMatr_i
memory (4 x 3 : 4 x 3): [
	 79853248 2 3
	 2 3 1
	 1 2 3
	 3 1 2
 ]
val = -2147483648


memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 2


tmp_i1 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 12): [ ]
tmp_i2 (0 : 12): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

119: InitVett_d
S_out (5 : 5): [ 2.161447438708917e-314 2.121995791953404e-314 1.48219693752374e-323 2.121995791953404e-314 2.121995792447469e-314 ]
val = 0


S_out (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

122: InitVett_i
tmp_i1 (5 : 12): [ 79855832 -2147483648 -2147483648 -2147483648 -2147483648 ]
val = 1


tmp_i1 (5 : 12): [ 1 1 1 1 1 ]
------------------------------ Fine InitVett_i

123: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
checkOUT (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
tmp_i1 (5 : 12): [ 1 1 1 1 1 ]


checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_i

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 2


ind (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 2 2 2 2 2 ]
s = 1


tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 2 2 2 2 2 ]
s = 1


tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 2 2 2 2 2 ]
s = 1


tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (5 : 5): [ 5 5 5 5 5 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (5 : 5): [ 4 4 4 4 4 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (5 : 5): [ 3.945097581436653e-316 0 0 0 0 ]
val = 0


S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (5 : 5): [ 0 0 0 0 0 ]
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (5 : 5): [ 1 1 1 1 1 ]
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


tmpm_d (5 x 2 : 5 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (5 x 2 : 5 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


S2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ 0 0 0 0 0 ]
ind (0 : 5): [ ]
val = -1.#INF


S2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (5 : 5): [ 0 0 0 0 0 ]
S2 (5 : 5): [ 0 0 0 0 0 ]


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (5 : 5): [ 0 0 0 0 0 ]
div = 2.000


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (2003 interne); stringhe deallocate: 0 (1678 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
ris (5 : 5): [ 0 0 0 0 0 ]
val = -1.#INF


indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
st = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 5
indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
ris (5 : 5): [ 0 0 0 0 0 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (5 : 5): [ 0 0 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (5 : 5): [ 0 0 0 0 0 ]
indInf (0 : 5): [ ]
val = -1


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
S_out (5 : 5): [ 0 0 0 0 0 ]
ris (5 : 5): [ 0 0 0 0 0 ]


tmp_d1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
tmp_d1 (5 : 5): [ 0 0 0 0 0 ]


ris (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 12): [ ]
tmp_i2 (0 : 12): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

119: InitVett_d
S_out (5 : 5): [ 0 0 0 0 0 ]
val = 0


S_out (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

122: InitVett_i
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
val = 1


tmp_i1 (5 : 12): [ 1 1 1 1 1 ]
------------------------------ Fine InitVett_i

123: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 2
tmp_i1 (5 : 12): [ 1 1 1 1 1 ]


checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_i

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


ind (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (5 : 5): [ 5 5 5 5 5 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (5 : 5): [ 4 4 4 4 4 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (5 : 5): [ 0 0 0 0 0 ]
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (5 : 5): [ 1 1 1 1 1 ]
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


tmpm_d (5 x 2 : 5 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (5 x 2 : 5 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (5 : 5): [ 1.614835739135742 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0


S2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ 0 0 0 0 0 ]
ind (0 : 5): [ ]
val = -1.#INF


S2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (5 : 5): [ 0 0 0 0 0 ]
S2 (5 : 5): [ 0 0 0 0 0 ]


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (5 : 5): [ 0 0 0 0 0 ]
div = 2.000


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (2103 interne); stringhe deallocate: 0 (1763 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
ris (5 : 5): [ 0 0 0 0 0 ]
val = -1.#INF


indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 2
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
st = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 5
indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
ris (5 : 5): [ 0 0 0 0 0 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (5 : 5): [ 0 0 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (5 : 5): [ 0 0 0 0 0 ]
indInf (0 : 5): [ ]
val = -1


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
S_out (5 : 5): [ 0 0 0 0 0 ]
ris (5 : 5): [ 0 0 0 0 0 ]


tmp_d1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 2
tmp_d1 (5 : 5): [ 0 0 0 0 0 ]


ris (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 12): [ ]
tmp_i2 (0 : 12): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


ind (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (5 : 5): [ 5 5 5 5 5 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (5 : 5): [ 4 4 4 4 4 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (5 : 5): [ 5.000000070920748 5 5 5 5 ]
val = 0


S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (5 : 5): [ 0 0 0 0 0 ]
T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 -3.614836360604185 ]


a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (5 : 5): [ 1 1 1 1 1 ]
T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]


tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]


m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
ind (0 : 5): [ ]
val = 0


a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
ind (0 : 5): [ ]
val = 0


b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]


tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (5 x 2 : 5 x 2): [
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
	 3.614836360604185 2.614836360604185
 ]


m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
m (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
toll2 (5 : 5): [ 1 1 1 1 1 ]


tmp_d1 (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
val = 0

ind1 (0 : 5): [ ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (5 : 5): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
toll2 (5 : 5): [ 1 1 1 1 1 ]


tmp_d1 (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (5 : 5): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0


ind2 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (0 : 5): [ ]
ind2 (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (0 : 5): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ 1 1 1 1 1 ]
tmp_i1 (0 : 5): [ ]
val = -1.#INF


S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ 1 1 1 1 1 ]
ind (0 : 5): [ ]
val = 0


S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (5 : 5): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
val = 0


ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ 1 1 1 1 1 ]
ind (0 : 5): [ ]
val = -1.#INF


S2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (5 : 5): [ 0 0 0 0 0 ]
S2 (5 : 5): [ 1 1 1 1 1 ]


S_out (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
S_out (5 : 5): [ 1 1 1 1 1 ]
div = 2.000


S_out (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (2203 interne); stringhe deallocate: 0 (1863 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
S_out (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
val = -1.#INF


indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 3
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
st = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 5
indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
S_out (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
S_out (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
indInf (0 : 5): [ ]
val = -1


S_out (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


ind (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 1 1 1 1 1 ]
s = 1


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (5 : 5): [ 5 5 5 5 5 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (5 : 5): [ 4 4 4 4 4 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (5 : 5): [ 5.000000070921232 5 5 5 5 ]
val = 0


S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (5 : 5): [ 0 0 0 0 0 ]
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (5 : 5): [ 1 1 1 1 1 ]
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


tmpm_d (5 x 2 : 5 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (5 x 2 : 5 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


S2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ 0 0 0 0 0 ]
ind (0 : 5): [ ]
val = -1.#INF


S2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (5 : 5): [ 0 0 0 0 0 ]
S2 (5 : 5): [ 0 0 0 0 0 ]


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (5 : 5): [ 0 0 0 0 0 ]
div = 2.000


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (2288 interne); stringhe deallocate: 0 (1948 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
ris (5 : 5): [ 0 0 0 0 0 ]
val = -1.#INF


indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 3
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
st = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 5
indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
ris (5 : 5): [ 0 0 0 0 0 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (5 : 5): [ 0 0 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (5 : 5): [ 0 0 0 0 0 ]
indInf (0 : 5): [ ]
val = -1


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
S_out (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
ris (5 : 5): [ 0 0 0 0 0 ]


tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 3
tmp_d1 (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]


ris (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0.5 0.5 0.5 0.5 0.5
	 0 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


tmp_i1 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 3


tmp_i2 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 12): [ ]
tmp_i2 (0 : 12): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 3


ind (5 : 5): [ 3 3 3 3 3 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 3 3 3 3 3 ]
s = 1


tmp_i1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (5 : 5): [ 4 4 4 4 4 ]


T2 (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5 5 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 3 3 3 3 3 ]
s = 1


tmp_i1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
tmp_i1 (5 : 5): [ 4 4 4 4 4 ]


old2 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (5 : 5): [ 5 5 5 5 5 ]
s = -1


new1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (5 : 5): [ 0 0 0 0 0 ]
s = 1


new2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (5 : 5): [ 3 3 3 3 3 ]
s = 1


tmp_i1 (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (5 : 5): [ 4 4 4 4 4 ]


toll2 (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (5 : 5): [ 5 5 5 5 5 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (5 : 5): [ 4 4 4 4 4 ]
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (5 : 5): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (5 : 5): [ 5.000000070920265 5 5 5 5 ]
val = 0


S1 (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (5 : 5): [ 0 0 0 0 0 ]
T2 (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]


a (5 : 5): [ -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (5 : 5): [ -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 ]


a (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (5 : 5): [ 1 1 1 1 1 ]
T2 (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]


b (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]


b (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
b (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]


tmpm_d (5 x 2 : 5 x 2): [
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (5 x 2 : 5 x 2): [
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
 ]


m (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
complemento = 0


ind (0 : 5): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
ind (0 : 5): [ ]
val = 0


a (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
ind (0 : 5): [ ]
val = 0


b (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
b (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]


tmpm_d (5 x 2 : 5 x 2): [
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (5 x 2 : 5 x 2): [
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
 ]


m (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
b (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
m (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
T2 (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]


S2 (5 : 5): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
toll2 (5 : 5): [ 1 1 1 1 1 ]


tmp_d1 (5 : 5): [ -0.6775800682645476 -0.6775800682645476 -0.6775800682645476 -0.6775800682645476 -0.6775800682645476 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (5 : 5): [ -0.6775800682645476 -0.6775800682645476 -0.6775800682645476 -0.6775800682645476 -0.6775800682645476 ]
val = 0

ind1 (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (5 : 5): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
toll2 (5 : 5): [ 1 1 1 1 1 ]


tmp_d1 (5 : 5): [ -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (5 : 5): [ -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 ]
val = 0


ind2 (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (5 : 5): [ 1 2 3 4 5 ]
ind2 (0 : 5): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
tmp_i1 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 4
ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 4
tmp_i1 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 5
ind2 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 5
tmp_i1 (0 : 5): [ ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (0 : 5): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
tmp_i1 (0 : 5): [ ]
val = -1.#INF


S2 (5 : 5): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
ind (0 : 5): [ ]
val = 0


S2 (5 : 5): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (5 : 5): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
val = 0


ind (0 : 5): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (5 : 5): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
ind (0 : 5): [ ]
val = -1.#INF


S2 (5 : 5): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (5 : 5): [ 0 0 0 0 0 ]
S2 (5 : 5): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 ]


S_out (5 : 5): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
S_out (5 : 5): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
div = 2.000


S_out (5 : 5): [ -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (2388 interne); stringhe deallocate: 0 (2048 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
S_out (5 : 5): [ -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 ]
val = -1.#INF


indok (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 4
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
st = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 5
indInf (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 5): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
S_out (5 : 5): [ -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (5 : 5): [ -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 ]


min = -1.050772612935894
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
S_out (5 : 5): [ -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 ]
indInf (0 : 5): [ ]
val = -2.050772612935894


S_out (5 : 5): [ -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 ]
------------------------------ Fine assegna1_vs_indx_d

155: InitVett_d
ris (5 : 5): [ 0 0 0 0 0 ]
val = 0


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

156: aggiungi_ms_riga_i	<=>	m[riga,] <- val # riga <= dim(m)[0] + 1
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 4, val = 1


checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine aggiungi_ms_riga_i

159: somma_vv_d	<=>	ris <- v1 + v2
S_out (5 : 5): [ -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 ]
ris (5 : 5): [ 0 0 0 0 0 ]


tmp_d1 (5 : 5): [ -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0.5 0.5 0.5 0.5 0.5
	 0 0 0 0 0
 ]
riga = 4
tmp_d1 (5 : 5): [ -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 ]


ris (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0.5 0.5 0.5 0.5 0.5
	 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894
 ]
------------------------------ Fine aggiungi_mv_riga_d

168: somma_m_d	<=>	ris <- sum(m)
ris (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0.5 0.5 0.5 0.5 0.5
	 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894 -1.050772612935894
 ]


ris: -2.753863064679469
------------------------------ Fine somma_m_d

173: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]


aus (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_colonne_i

175: which_v_indxne_i	<=>	ris <- which(v != val)
aus (5 : 5): [ 4 4 4 4 4 ]
val = 0


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

186: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]


rs (4 : 4): [ 5 5 5 5 ]
------------------------------ Fine somma_righe_i

188: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (4 : 4): [ 5 5 5 5 ]
decr = 0


ord_ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine ordine_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
I (0 : 0): [ ]
I_add (5 : 20): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
I_add (5 : 20): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 3
val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 10): [ 1 2 3 4 5 ]
I_add (5 : 20): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 4
val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 10): [ 1 2 3 4 5 ]
I_add (5 : 20): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

216: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 0


checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

218: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 1


checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

220: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]


aus (5 : 5): [ 4 4 4 4 4 ]
------------------------------ Fine somma_colonne_i

222: which_v_indxne_i	<=>	ris <- which(v != val)
aus (5 : 5): [ 4 4 4 4 4 ]
val = 0


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
------------------------------ Fine which_v_indxne_i

232: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]


rs (4 : 4): [ 5 5 5 5 ]
------------------------------ Fine somma_righe_i

234: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (4 : 4): [ 5 5 5 5 ]
decr = 0


ord_ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine ordine_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 1
val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 10): [ ]
I_add (5 : 20): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 2
val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 5): [ 1 2 3 4 5 ]
I_add (5 : 20): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 3
val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 10): [ 1 2 3 4 5 ]
I_add (5 : 20): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
r = 4
val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (5 : 10): [ 1 2 3 4 5 ]
I_add (5 : 20): [ 1 2 3 4 5 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine elimina_doppi_i



ris (5 : 10): [ 1 2 3 4 5 ]
------------------------------ Fine unione1_i


Stringhe allocate: 5 (2493 interne); stringhe deallocate: 0 (2228 interne)

90: seq_i	<=>	ris <- seq(da, a, incr)
da = 4
a = 4
incr = 1


ris->indices (1 : 1): [ 4 ]
------------------------------ Fine seq_i


Stringhe allocate: 5 (2498 interne); stringhe deallocate: 0 (2243 interne)

143: vettore3s_d		<=>	ris <- c(el1, el2, el3)
el1 = 2.5, el2 = -0.06346576616986743, el3 = -0.6884657661698673


prob_mod (3 : 3): [ 2.5 -0.06346576616986743 -0.6884657661698673 ]
------------------------------ Fine vettore3s_d

145: assegna1_v_indxeq_d	<=>	v[which(v==val1)] <- val2
prob_mod (3 : 3): [ 2.5 -0.06346576616986743 -0.6884657661698673 ]
prob_mod (3 : 3): [ 2.5 -0.06346576616986743 -0.6884657661698673 ]
val1 = 0
val2 = 1.#QNAN


prob_mod (3 : 3): [ 2.5 -0.06346576616986743 -0.6884657661698673 ]
------------------------------ Fine assegna1_v_indxeq_d

147: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
prob_mod (3 : 3): [ 2.5 -0.06346576616986743 -0.6884657661698673 ]
complemento = 1


ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

153: copia_v_indx_d	<=>	ris <- v[indx]
prob_mod (3 : 3): [ 2.5 -0.06346576616986743 -0.6884657661698673 ]
ind (3 : 3): [ 1 2 3 ]


tmp1_d (3 : 16): [ 2.5 -0.06346576616986743 -0.6884657661698673 ]
------------------------------ Fine copia_v_indx_d

154: min_v_d	<=>	ris <- min(v)
tmp1_d (3 : 16): [ 2.5 -0.06346576616986743 -0.6884657661698673 ]


min = -0.6884657661698673
------------------------------ Fine min_v_d

157: somma1_vs_d	<=>	v <- v + s
prob_mod (3 : 3): [ 2.5 -0.06346576616986743 -0.6884657661698673 ]
s = 0.7995768772809784


prob_mod (3 : 3): [ 3.299576877280979 0.7361111111111109 0.1111111111111111 ]
------------------------------ Fine somma1_vs_d

160: assegna1_v_indxNA_d	<=>	v1[which(is.na(v2))] <- val oppure v1[which(!is.na(v2))] <- val
prob_mod (3 : 3): [ 3.299576877280979 0.7361111111111109 0.1111111111111111 ]
prob_mod (3 : 3): [ 3.299576877280979 0.7361111111111109 0.1111111111111111 ]
val = 0
complemento = 0


prob_mod (3 : 3): [ 3.299576877280979 0.7361111111111109 0.1111111111111111 ]
------------------------------ Fine assegna1_v_indxNA_d

162: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
prob_mod (3 : 3): [ 3.299576877280979 0.7361111111111109 0.1111111111111111 ]
canc_NA = 0



ris: 4.1467990995032
------------------------------ Fine somma_v_d

162: dividi1_vs_d	<=>	v <- v / div
prob_mod (3 : 3): [ 3.299576877280979 0.7361111111111109 0.1111111111111111 ]
div = 4.147


prob_mod (3 : 3): [ 0.7956924842769159 0.1775130874315323 0.02679442829155204 ]
------------------------------ Fine dividi1_vs_d

164: vettore3s_i		<=>	ris <- c(el1, el2, el3)
el1 = 1, el2 = 2, el3 = 3


tmp1_i (3 : 3): [ 1 2 3 ]
------------------------------ Fine vettore3s_i


*** sampleB_p ***

*** sample_p ***
tmp1_i (3 : 3): [ 1 2 3 ]
k = 1, replace = 0
prob_mod (3 : 3): [ 0.7956924842769159 0.1775130874315323 0.02679442829155204 ]


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (2518 interne); stringhe deallocate: 0 (2243 interne)


*** assign_nodes ***
35: copia_v_i	<=>	ris[st:end] <- v[st:end]
h (5 : 5): [ 1 2 3 4 5 ]
st = 1
end = 5


or_h (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine copia_v_i

37: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 5
incr = 1


aus_h (5 : 5): [ 1 2 3 4 5 ]
------------------------------ Fine seq_i

43: InitVett_i
index (1 : 1): [ 79857680 ]
val = 0


index (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

45: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (1 x 1 : 1 x 1): [
	 1
 ]


M_in (1 : 1): [ 1 ]
------------------------------ Fine somma_righe_i

47: ordine_i	<=>	ris <- order(v, decreasing=decr)
M_in (1 : 1): [ 1 ]
decr = 1


Ord (1 : 1): [ 1 ]
------------------------------ Fine ordine_i

52: riga_d	<=>	ris <- m[r,]
ris (1 x 5 : 1 x 5): [
	 0.5 0.5 0.5 0.5 0.5
 ]
r = 1

p (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine riga_d

54: which_v_indxle_d	<=>	ris <- which(v<=val)
p (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
val = 0


tmp_i (0 : 5): [ ]
------------------------------ Fine which_v_indxle_d

61: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


Sin_h (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i

66: which_v_indxgt_i	<=>	ris <- which(v > val)
Sin_h (5 : 5): [ 0 0 0 0 0 ]
val = 4


ind (0 : 5): [ ]
------------------------------ Fine which_v_indxgt_i

72: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
p (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
aus_h (5 : 5): [ 1 2 3 4 5 ]


tmp_d (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
------------------------------ Fine assegna_v_indxNA_d

73: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
tmp_d (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
canc_NA = 0



ris: 2.5
------------------------------ Fine somma_v_d

74: dividi_vs_d	ris <- v / div
tmp_d (5 : 5): [ 0.5 0.5 0.5 0.5 0.5 ]
div = 2.500


p (5 : 5): [ 0.2 0.2 0.2 0.2 0.2 ]
------------------------------ Fine dividi_vs_d


*** sampleB_p ***

*** sample_p ***
h (5 : 5): [ 1 2 3 4 5 ]
k = 1, replace = 0
p (5 : 5): [ 0.2 0.2 0.2 0.2 0.2 ]


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (2578 interne); stringhe deallocate: 0 (2243 interne)

81: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
h (5 : 5): [ 1 2 3 4 5 ]
ris (1 : 1): [ 1 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 1
h (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
h (5 : 5): [ 1 2 3 4 5 ]
indx = 1


h (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i



h (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine setdiff1_i

83: which_vv_eq_i	<=>	ris <- which(v1 == v2)
or_h (5 : 5): [ 1 2 3 4 5 ]
ris (1 : 1): [ 1 ]
2017: esiste_v_i	<=>	elem %IN% v
elem = 1
or_h (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i



tmp_i (1 : 5): [ 1 ]
------------------------------ Fine which_vv_eq_i

84: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
aus_h (5 : 5): [ 1 2 3 4 5 ]
tmp_i (1 : 5): [ 1 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 1
aus_h (5 : 5): [ 1 2 3 4 5 ]


indx = 1
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
aus_h (5 : 5): [ 1 2 3 4 5 ]
indx = 1


aus_h (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine elimina1_indx_i



aus_h (4 : 5): [ 2 3 4 5 ]
------------------------------ Fine setdiff1_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
ris (1 x 1 : 1 x 1): [
	 1
 ]
riga = 1
val = 1


ind (1 : 5): [ 1 ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
index (1 : 1): [ 1 ]
ind (1 : 5): [ 1 ]


co (1 : 1): [ 1 ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
ri (1 : 1): [ 1 ]
co (1 : 1): [ 1 ]
val = 1


Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

107: esiste_v_i	<=>	elem %IN% v
elem = 1
ris->indices (1 : 1): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

109: accoda1_vv_i	<=>	v1 <- c(v1, v2)
ris (0 : 1): [ ]
ri (1 : 1): [ 1 ]


ris (1 : 1): [ 1 ]
------------------------------ Fine accoda_vv_i


Stringhe allocate: 5 (2588 interne); stringhe deallocate: 0 (2308 interne)

332: accoda1_vv_i	<=>	v1 <- c(v1, v2)
h_new (0 : 0): [ ]
ris (1 : 1): [ 1 ]
ATTENZIONE (accoda_vv_i, linea connectivity_modular.c # 332): ingrandito il vettore da 0 a 1!


h_new (1 : 2): [ 1 ]
------------------------------ Fine accoda_vv_i

334: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


Sout (5 : 5): [ 1 0 0 0 0 ]
------------------------------ Fine somma_colonne_i

336: max_v_i		<=>	ris <- max(v)
Sout (5 : 5): [ 1 0 0 0 0 ]


max = 1
------------------------------ Fine max_v_i

338: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 2
incr = 1


tmp2_i (3 : 3): [ 0 1 2 ]
------------------------------ Fine seq_i


*** hist1 ***
Sout (5 : 5): [ 1 0 0 0 0 ]
tmp2_i (3 : 3): [ 0 1 2 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
tmp1_i (2 : 3): [ 1 2 ]
val = 0


tmp1_i (2 : 3): [ 0 0 ]
------------------------------ Fine InitVett_i



tmp1_i (2 : 3): [ 4 1 ]

Stringhe allocate: 5 (2599 interne); stringhe deallocate: 0 (2314 interne)

340: promuovi_i	(implicita)
tmp1_i (2 : 3): [ 4 1 ]
ATTENZIONE (promuovi_i, linea connectivity_modular.c # 340): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

tmp1_d (2 : 16): [ 4 1 ]
------------------------------ Fine promuovi_i

341: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
Freq_out (7 : 7): [ 5 0 0 0 0 0 0 ]
start = 1
end = 2
tmp1_d (2 : 16): [ 4 1 ]


Freq_out (7 : 7): [ 4 1 0 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

343: somma_righe_i	<=>	ris <- apply(m, 1, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


Sin (5 : 5): [ 1 0 0 0 0 ]
------------------------------ Fine somma_righe_i

345: max_v_i		<=>	ris <- max(v)
Sin (5 : 5): [ 1 0 0 0 0 ]


max = 1
------------------------------ Fine max_v_i

347: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 2
incr = 1


tmp2_i (3 : 3): [ 0 1 2 ]
------------------------------ Fine seq_i


*** hist1 ***
Sin (5 : 5): [ 1 0 0 0 0 ]
tmp2_i (3 : 3): [ 0 1 2 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
tmp1_i (2 : 3): [ 4 1 ]
val = 0


tmp1_i (2 : 3): [ 0 0 ]
------------------------------ Fine InitVett_i



tmp1_i (2 : 3): [ 4 1 ]

Stringhe allocate: 5 (2600 interne); stringhe deallocate: 0 (2315 interne)

349: promuovi_i	(implicita)
tmp1_i (2 : 3): [ 4 1 ]
ATTENZIONE (promuovi_i, linea connectivity_modular.c # 349): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

tmp1_d (2 : 16): [ 4 1 ]
------------------------------ Fine promuovi_i

350: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
Freq_in (7 : 7): [ 5 0 0 0 0 0 0 ]
start = 1
end = 2
tmp1_d (2 : 16): [ 4 1 ]


Freq_in (7 : 7): [ 4 1 0 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

110: somma_righe_i	<=>	ris <- apply(m, 1, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


Sin (5 : 5): [ 1 0 0 0 0 ]
------------------------------ Fine somma_righe_i

112: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


Sout (5 : 5): [ 1 0 0 0 0 ]
------------------------------ Fine somma_colonne_i


*** cluster_coeff ***
19: trasponi_i	<=>	ris <- t(m)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


tmpm_i (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine trasponi_i

20: somma1_m_i	<=>	m1 <- m1 + m2
tmpm_i (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


tmpm_i (5 x 5 : 5 x 5): [
	 2 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine somma1_m_i

22: which_m_indxne_i	<=>	ris <- which(m!=val)
tmpm_i (5 x 5 : 5 x 5): [
	 2 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


ind (1 : 25): [ 1 ]
------------------------------ Fine which_m_indxne_i

24: assegna1_ms_indx_i	<=>	m[indx] = val
tmpm_i (5 x 5 : 5 x 5): [
	 2 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
ind (1 : 25): [ 1 ]
val = 1


tmpm_i (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_ms_indx_i

26: assegna1_s_diag_i	<=>	diag_i(m) <- s
tmpm_i (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_s_diag_i

31: InitVett_d
ris (5 : 5): [ 0 0 0 0 0 ]
val = 0


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1


ris: 0
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 1
val = 0


neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 2


ris: 0
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 2
val = 0


neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 3


ris: 0
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 3
val = 0


neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 4


ris: 0
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 4
val = 0


neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 5


ris: 0
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
r = 5
val = 0


neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

69: media_v_d	<=>	ris <- mean(v)
ris (5 : 5): [ 0 0 0 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 5 (2616 interne); stringhe deallocate: 0 (2331 interne)


*** module1 ***
44: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 4
incr = 1


tmp1_i (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine seq_i


*** sampleB ***

***sample***
tmp1_i (4 : 4): [ 1 2 3 4 ]
k = 1, replace = 0


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 5 (2631 interne); stringhe deallocate: 0 (2331 interne)


Stringhe allocate: 5 (2631 interne); stringhe deallocate: 0 (2331 interne)


*** mod1 ***
18: InitMatr_i
ris (2 x 2 : 2 x 2): [
	 79859184 1936024687
	 1851747943 25390
 ]
val = 0


ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i

21: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


x (1 : 1): [ 1 ]
------------------------------ Fine seq_i

23: somma_vs_i	<=>	ris <- v + s
x (1 : 1): [ 1 ]
s = 1


tmp1_i (1 : 1): [ 2 ]
------------------------------ Fine somma_vs_i

24: cbind2v_i	<=>	ris <- cbind(v1, v2)
x (1 : 1): [ 1 ]
tmp1_i (1 : 1): [ 2 ]


ind (1 x 2 : 1 x 2): [
	 1 2
 ]
------------------------------ Fine cbind2v_i

26: assegna1_ms_indx2_i	<=>	m[indxm] <- val
ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
ind (1 x 2 : 1 x 2): [
	 1 2
 ]
val = 1


ris (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
------------------------------ Fine assegna1_ms_indx2_i

29: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 1, el2 = -1


tmp1_i (2 : 4): [ 1 -1 ]
------------------------------ Fine vettore2s_i


*** sampleB ***

***sample***
tmp1_i (2 : 4): [ 1 -1 ]
k = 1, replace = 0


ris (1 : 1): [ -1 ]
*****************************************


Stringhe allocate: 5 (2656 interne); stringhe deallocate: 0 (2331 interne)


Stringhe allocate: 5 (2656 interne); stringhe deallocate: 0 (2331 interne)


Stringhe allocate: 5 (2656 interne); stringhe deallocate: 0 (2351 interne)


*** probmod ***
46: InitMatr_i
checkOUT (2 x 4 : 2 x 4): [
	 79848456 5 0 79032608
	 5 5 0 8289
 ]
val = 0


checkOUT (2 x 4 : 2 x 4): [
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

48: InitMatr_i
checkIN (2 x 4 : 2 x 4): [
	 79852008 1918987381 0 0
	 1685024101 25390 0 0
 ]
val = 0


checkIN (2 x 4 : 2 x 4): [
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

50: InitMatr_d
ris (2 x 4 : 2 x 4): [
	 9.691965937899128e-286 1.824916380230134e-312 9.881312916824931e-324 1.294417432488816e-312
	 1.294417432488816e-312 1.060997896668394e-313 1.40051722203708e-312 4.940656458412465e-324
 ]
val = 0


ris (2 x 4 : 2 x 4): [
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine InitMatr_d

52: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


M_in (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

54: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


M_out (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

57: InitMatr_i
memory (2 x 3 : 2 x 3): [
	 79858440 4 5
	 3 5 0
 ]
val = -2147483648


memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 1 0 0 0 0 ]
h (4 : 5): [ 2 3 4 5 ]


tmp_i1 (4 : 6): [ 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 6): [ 0 0 0 0 ]
s = 1


ind (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 6): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 6): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


old1 (4 : 4): [ 4 4 4 4 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


old2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (4 : 4): [ 4 4 4 4 ]
s = -1


new1 (4 : 4): [ 3 3 3 3 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (4 : 4): [ 1 1 1 1 ]
s = 1


new2 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 6): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


toll1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


toll2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (4 : 4): [ 4 4 4 4 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (4 : 4): [ 3 3 3 3 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (4 : 4): [ 5.8424146983316e-308 0 0 0 ]
val = 0


S1 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (4 : 4): [ 1 1 1 1 ]
T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


a (4 : 4): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (4 : 4): [ 2 2 2 2 ]
T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


b (4 : 4): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 -1.614836360604185 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 -1.614836360604185 ]


b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]


tmpm_d (4 x 2 : 4 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (4 x 2 : 4 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]


m (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


ind (0 : 4): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
ind (0 : 4): [ ]
val = 0


a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
ind (0 : 4): [ ]
val = 0


b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]


tmpm_d (4 x 2 : 4 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (4 x 2 : 4 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]


m (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
m (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
toll2 (4 : 4): [ 1 1 1 1 ]


tmp_d1 (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0

ind1 (0 : 4): [ ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
toll2 (4 : 4): [ 1 1 1 1 ]


tmp_d1 (4 : 4): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (4 : 4): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
val = 0


ind2 (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (0 : 4): [ ]
ind2 (4 : 4): [ 1 2 3 4 ]


tmp_i1 (0 : 4): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
tmp_i1 (0 : 4): [ ]
val = -1.#INF


S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
ind (0 : 4): [ ]
val = 0


S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
val = 0


ind (0 : 4): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
ind (0 : 4): [ ]
val = -1.#INF


S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (4 : 4): [ 0 0 0 0 ]
S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]


ris (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
div = 2.000


ris (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (2816 interne); stringhe deallocate: 0 (2451 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
ris (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
val = -1.#INF


indok (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (2 x 4 : 2 x 4): [
	 0 0 0 0
	 0 0 0 0
 ]
riga = 1
indok (4 : 4): [ 1 2 3 4 ]
val = 1


checkOUT (2 x 4 : 2 x 4): [
	 1 1 1 1
	 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 4
incr = 1


tmp_i1 (4 : 6): [ 1 2 3 4 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (4 : 6): [ 1 2 3 4 ]
indok (4 : 4): [ 1 2 3 4 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (4 : 6): [ 1 2 3 4 ]
st = 1
end = 4


indInf (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (4 : 4): [ 1 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 4): [ 1 2 3 4 ]
indx = 1


indInf (3 : 4): [ 2 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (3 : 4): [ 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 4): [ 2 3 4 ]
indx = 1


indInf (2 : 4): [ 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (2 : 4): [ 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 4): [ 3 4 ]
indx = 1


indInf (1 : 4): [ 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (1 : 4): [ 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 4): [ 4 ]
indx = 1


indInf (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 4): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
ris (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
indok (4 : 4): [ 1 2 3 4 ]


tmp_d1 (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]


min = 0.3616811523063164
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
indInf (0 : 4): [ ]
val = -1


ris (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
------------------------------ Fine assegna1_vs_indx_d

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 0 0 0 0 ]
h (4 : 5): [ 2 3 4 5 ]


tmp_i1 (4 : 6): [ 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 6): [ 0 0 0 0 ]
s = 1


ind (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 6): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 6): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


old1 (4 : 4): [ 4 4 4 4 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


old2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (4 : 4): [ 4 4 4 4 ]
s = -1


new1 (4 : 4): [ 3 3 3 3 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (4 : 4): [ 1 1 1 1 ]
s = 1


new2 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 6): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


toll1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


toll2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (4 : 4): [ 4 4 4 4 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (4 : 4): [ 3 3 3 3 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (4 : 4): [ 6.218345866837361e+175 5.387842123834802e-310 0 0 ]
val = 0


S1 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (4 : 4): [ 1 1 1 1 ]
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (4 : 4): [ 2 2 2 2 ]
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


tmpm_d (4 x 2 : 4 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (4 x 2 : 4 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (4 : 4): [ 6.218345866836557e+175 5.387842123834802e-310 0 0 ]
val = 0


S2 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 4): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 0 0 0 0 ]
ind (0 : 4): [ ]
val = -1.#INF


S2 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (4 : 4): [ 0 0 0 0 ]
S2 (4 : 4): [ 0 0 0 0 ]


ris (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (4 : 4): [ 0 0 0 0 ]
div = 2.000


ris (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (2921 interne); stringhe deallocate: 0 (2536 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
ris (4 : 4): [ 0 0 0 0 ]
val = -1.#INF


indok (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (2 x 4 : 2 x 4): [
	 0 0 0 0
	 0 0 0 0
 ]
riga = 1
indok (4 : 4): [ 1 2 3 4 ]
val = 1


checkIN (2 x 4 : 2 x 4): [
	 1 1 1 1
	 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 4
incr = 1


tmp_i1 (4 : 6): [ 1 2 3 4 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (4 : 6): [ 1 2 3 4 ]
indok (4 : 4): [ 1 2 3 4 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (4 : 6): [ 1 2 3 4 ]
st = 1
end = 4


indInf (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (4 : 4): [ 1 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 4): [ 1 2 3 4 ]
indx = 1


indInf (3 : 4): [ 2 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (3 : 4): [ 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 4): [ 2 3 4 ]
indx = 1


indInf (2 : 4): [ 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (2 : 4): [ 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 4): [ 3 4 ]
indx = 1


indInf (1 : 4): [ 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (1 : 4): [ 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 4): [ 4 ]
indx = 1


indInf (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 4): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
ris (4 : 4): [ 0 0 0 0 ]
indok (4 : 4): [ 1 2 3 4 ]


tmp_d1 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (4 : 4): [ 0 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (4 : 4): [ 0 0 0 0 ]
indInf (0 : 4): [ ]
val = -1


ris (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
ris (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
ris (4 : 4): [ 0 0 0 0 ]


tmp_d1 (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 4 : 2 x 4): [
	 0 0 0 0
	 0 0 0 0
 ]
riga = 1
tmp_d1 (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]


ris (2 x 4 : 2 x 4): [
	 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164
	 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 1 0 0 0 0 ]
h (4 : 5): [ 2 3 4 5 ]


tmp_i1 (4 : 6): [ 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 6): [ 0 0 0 0 ]
s = 1


ind (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 6): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 6): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


old1 (4 : 4): [ 4 4 4 4 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


old2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (4 : 4): [ 4 4 4 4 ]
s = -1


new1 (4 : 4): [ 3 3 3 3 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (4 : 4): [ 1 1 1 1 ]
s = 1


new2 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 6): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


toll1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


toll2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (4 : 4): [ 4 4 4 4 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (4 : 4): [ 3 3 3 3 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


S1 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (4 : 4): [ 1 1 1 1 ]
T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


a (4 : 4): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (4 : 4): [ 2 2 2 2 ]
T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


b (4 : 4): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 -1.614836360604185 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 -1.614836360604185 ]


b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]


tmpm_d (4 x 2 : 4 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (4 x 2 : 4 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]


m (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


ind (0 : 4): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
ind (0 : 4): [ ]
val = 0


a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
ind (0 : 4): [ ]
val = 0


b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]


tmpm_d (4 x 2 : 4 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (4 x 2 : 4 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]


m (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
m (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
toll2 (4 : 4): [ 1 1 1 1 ]


tmp_d1 (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0

ind1 (0 : 4): [ ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
toll2 (4 : 4): [ 1 1 1 1 ]


tmp_d1 (4 : 4): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (4 : 4): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
val = 0


ind2 (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (0 : 4): [ ]
ind2 (4 : 4): [ 1 2 3 4 ]


tmp_i1 (0 : 4): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
tmp_i1 (0 : 4): [ ]
val = -1.#INF


S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
ind (0 : 4): [ ]
val = 0


S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
val = 0


ind (0 : 4): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
ind (0 : 4): [ ]
val = -1.#INF


S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (4 : 4): [ 0 0 0 0 ]
S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]


ris (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
div = 2.000


ris (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (3021 interne); stringhe deallocate: 0 (2636 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
ris (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
val = -1.#INF


indok (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (2 x 4 : 2 x 4): [
	 1 1 1 1
	 0 0 0 0
 ]
riga = 2
indok (4 : 4): [ 1 2 3 4 ]
val = 1


checkOUT (2 x 4 : 2 x 4): [
	 1 1 1 1
	 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 4
incr = 1


tmp_i1 (4 : 6): [ 1 2 3 4 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (4 : 6): [ 1 2 3 4 ]
indok (4 : 4): [ 1 2 3 4 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (4 : 6): [ 1 2 3 4 ]
st = 1
end = 4


indInf (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (4 : 4): [ 1 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 4): [ 1 2 3 4 ]
indx = 1


indInf (3 : 4): [ 2 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (3 : 4): [ 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 4): [ 2 3 4 ]
indx = 1


indInf (2 : 4): [ 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (2 : 4): [ 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 4): [ 3 4 ]
indx = 1


indInf (1 : 4): [ 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (1 : 4): [ 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 4): [ 4 ]
indx = 1


indInf (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 4): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
ris (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
indok (4 : 4): [ 1 2 3 4 ]


tmp_d1 (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]


min = 0.3616811523063164
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
indInf (0 : 4): [ ]
val = -1


ris (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
------------------------------ Fine assegna1_vs_indx_d

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 0 0 0 0 ]
h (4 : 5): [ 2 3 4 5 ]


tmp_i1 (4 : 6): [ 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 6): [ 0 0 0 0 ]
s = 1


ind (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 6): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 6): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


old1 (4 : 4): [ 4 4 4 4 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


old2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (4 : 4): [ 4 4 4 4 ]
s = -1


new1 (4 : 4): [ 3 3 3 3 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (4 : 4): [ 1 1 1 1 ]
s = 1


new2 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 6): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


toll1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


toll2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (4 : 4): [ 4 4 4 4 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (4 : 4): [ 3 3 3 3 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (4 : 4): [ 4.000000070931961 4 4 4 ]
val = 0


S1 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (4 : 4): [ 1 1 1 1 ]
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (4 : 4): [ 2 2 2 2 ]
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


tmpm_d (4 x 2 : 4 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (4 x 2 : 4 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (4 : 4): [ 0.6148362248392543 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
val = 0


S2 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 4): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 0 0 0 0 ]
ind (0 : 4): [ ]
val = -1.#INF


S2 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (4 : 4): [ 0 0 0 0 ]
S2 (4 : 4): [ 0 0 0 0 ]


ris (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (4 : 4): [ 0 0 0 0 ]
div = 2.000


ris (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (3106 interne); stringhe deallocate: 0 (2721 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
ris (4 : 4): [ 0 0 0 0 ]
val = -1.#INF


indok (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (2 x 4 : 2 x 4): [
	 1 1 1 1
	 0 0 0 0
 ]
riga = 2
indok (4 : 4): [ 1 2 3 4 ]
val = 1


checkIN (2 x 4 : 2 x 4): [
	 1 1 1 1
	 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 4
incr = 1


tmp_i1 (4 : 6): [ 1 2 3 4 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (4 : 6): [ 1 2 3 4 ]
indok (4 : 4): [ 1 2 3 4 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (4 : 6): [ 1 2 3 4 ]
st = 1
end = 4


indInf (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (4 : 4): [ 1 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 4): [ 1 2 3 4 ]
indx = 1


indInf (3 : 4): [ 2 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (3 : 4): [ 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 4): [ 2 3 4 ]
indx = 1


indInf (2 : 4): [ 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (2 : 4): [ 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 4): [ 3 4 ]
indx = 1


indInf (1 : 4): [ 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (1 : 4): [ 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 4): [ 4 ]
indx = 1


indInf (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 4): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
ris (4 : 4): [ 0 0 0 0 ]
indok (4 : 4): [ 1 2 3 4 ]


tmp_d1 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (4 : 4): [ 0 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (4 : 4): [ 0 0 0 0 ]
indInf (0 : 4): [ ]
val = -1


ris (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
ris (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
ris (4 : 4): [ 0 0 0 0 ]


tmp_d1 (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 4 : 2 x 4): [
	 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164
	 0 0 0 0
 ]
riga = 2
tmp_d1 (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]


ris (2 x 4 : 2 x 4): [
	 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164
	 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164
 ]
------------------------------ Fine aggiungi_mv_riga_d

168: somma_m_d	<=>	ris <- sum(m)
ris (2 x 4 : 2 x 4): [
	 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164
	 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164
 ]


ris: 2.893449218450531
------------------------------ Fine somma_m_d

173: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkIN (2 x 4 : 2 x 4): [
	 1 1 1 1
	 1 1 1 1
 ]


aus (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_colonne_i

175: which_v_indxne_i	<=>	ris <- which(v != val)
aus (4 : 4): [ 2 2 2 2 ]
val = 0


tmp_i1 (4 : 6): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxne_i

186: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkIN (2 x 4 : 2 x 4): [
	 1 1 1 1
	 1 1 1 1
 ]


rs (2 : 2): [ 4 4 ]
------------------------------ Fine somma_righe_i

188: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (2 : 2): [ 4 4 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (2 x 4 : 2 x 4): [
	 1 1 1 1
	 1 1 1 1
 ]
r = 1
val = 0


I_add (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
I (0 : 0): [ ]
I_add (4 : 8): [ 1 2 3 4 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (4 : 4): [ 1 2 3 4 ]


ris (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine elimina_doppi_i



ris (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (2 x 4 : 2 x 4): [
	 1 1 1 1
	 1 1 1 1
 ]
r = 2
val = 0


I_add (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (4 : 4): [ 1 2 3 4 ]
I_add (4 : 8): [ 1 2 3 4 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (8 : 8): [ 1 2 3 4 1 2 3 4 ]


ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine elimina_doppi_i



ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine unione1_i

216: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
checkOUT (2 x 4 : 2 x 4): [
	 1 1 1 1
	 1 1 1 1
 ]
checkOUT (2 x 4 : 2 x 4): [
	 1 1 1 1
	 1 1 1 1
 ]
val1 = 0
val2 = 0


checkOUT (2 x 4 : 2 x 4): [
	 1 1 1 1
	 1 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

218: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
checkOUT (2 x 4 : 2 x 4): [
	 1 1 1 1
	 1 1 1 1
 ]
checkOUT (2 x 4 : 2 x 4): [
	 1 1 1 1
	 1 1 1 1
 ]
val1 = 0
val2 = 1


checkOUT (2 x 4 : 2 x 4): [
	 1 1 1 1
	 1 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

220: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkOUT (2 x 4 : 2 x 4): [
	 1 1 1 1
	 1 1 1 1
 ]


aus (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_colonne_i

222: which_v_indxne_i	<=>	ris <- which(v != val)
aus (4 : 4): [ 2 2 2 2 ]
val = 0


tmp_i1 (4 : 6): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxne_i

232: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkOUT (2 x 4 : 2 x 4): [
	 1 1 1 1
	 1 1 1 1
 ]


rs (2 : 2): [ 4 4 ]
------------------------------ Fine somma_righe_i

234: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (2 : 2): [ 4 4 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (2 x 4 : 2 x 4): [
	 1 1 1 1
	 1 1 1 1
 ]
r = 1
val = 0


I_add (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 8): [ ]
I_add (4 : 8): [ 1 2 3 4 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (4 : 4): [ 1 2 3 4 ]


ris (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine elimina_doppi_i



ris (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (2 x 4 : 2 x 4): [
	 1 1 1 1
	 1 1 1 1
 ]
r = 2
val = 0


I_add (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (4 : 4): [ 1 2 3 4 ]
I_add (4 : 8): [ 1 2 3 4 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (8 : 8): [ 1 2 3 4 1 2 3 4 ]


ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine elimina_doppi_i



ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine unione1_i


Stringhe allocate: 5 (3171 interne); stringhe deallocate: 0 (2861 interne)


Stringhe allocate: 5 (3176 interne); stringhe deallocate: 0 (2876 interne)


*** module2 ***
44: seq_i	<=>	ris <- seq(da, a, incr)
da = 2
a = 4
incr = 1


tmp1_i (3 : 3): [ 2 3 4 ]
------------------------------ Fine seq_i


*** sampleB ***

***sample***
tmp1_i (3 : 3): [ 2 3 4 ]
k = 1, replace = 0


ris (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 5 (3186 interne); stringhe deallocate: 0 (2876 interne)


Stringhe allocate: 5 (3186 interne); stringhe deallocate: 0 (2876 interne)


*** mod2 ***
17: InitMatr_i
ris (3 x 3 : 3 x 3): [
	 79849120 1070176665 -1717986918
	 -1 -1717986918 1070176665
	 -1717986918 1070176665 -1717986918
 ]
val = 0


ris (3 x 3 : 3 x 3): [
	 0 0 0
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i


*** triangola ***
27: diag_i	<=>	ris <- diag(m)
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 0
	 1 0 0
 ]


Dmem (3 : 3): [ 0 0 0 ]
------------------------------ Fine diag_i

29: assegna1_s_diag_i	<=>	diag_i(m) <- s
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 0
	 1 0 0
 ]
val = 0


ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 0
	 1 0 0
 ]
------------------------------ Fine assegna1_s_diag_i

33: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 0
	 1 0 0
 ]
r = 1
val = 0


tmp1_i (0 : 9): [ ]
------------------------------ Fine which_m_rowindxne_i

34: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 0
	 1 0 0
 ]
c = 1, val = 0


tmp2_i (2 : 9): [ 2 3 ]
------------------------------ Fine which_m_colindxne_i

35: unione_i	<=>	ris <- union(v1, v2)
tmp1_i (0 : 9): [ ]
tmp2_i (2 : 9): [ 2 3 ]
4876: elimina_doppi_i	<=>	ris <- union(v, v)
ind (2 : 2): [ 2 3 ]


ris (2 : 2): [ 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 2 3 ]
------------------------------ Fine unione_i

33: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 0
	 1 0 0
 ]
r = 2
val = 0


tmp1_i (1 : 9): [ 1 ]
------------------------------ Fine which_m_rowindxne_i

34: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 0
	 1 0 0
 ]
c = 2, val = 0


tmp2_i (0 : 9): [ ]
------------------------------ Fine which_m_colindxne_i

35: unione_i	<=>	ris <- union(v1, v2)
tmp1_i (1 : 9): [ 1 ]
tmp2_i (0 : 9): [ ]
4876: elimina_doppi_i	<=>	ris <- union(v, v)
ind (1 : 1): [ 1 ]


ris (1 : 2): [ 1 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 2): [ 1 ]
------------------------------ Fine unione_i

33: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 0
	 1 0 0
 ]
r = 3
val = 0


tmp1_i (1 : 9): [ 1 ]
------------------------------ Fine which_m_rowindxne_i

34: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 0
	 1 0 0
 ]
c = 3, val = 0


tmp2_i (0 : 9): [ ]
------------------------------ Fine which_m_colindxne_i

35: unione_i	<=>	ris <- union(v1, v2)
tmp1_i (1 : 9): [ 1 ]
tmp2_i (0 : 9): [ ]
4876: elimina_doppi_i	<=>	ris <- union(v, v)
ind (1 : 1): [ 1 ]


ris (1 : 2): [ 1 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 2): [ 1 ]
------------------------------ Fine unione_i

152: assegna1_v_diag_i	<=>	diag(m) <- v
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 0
	 1 0 0
 ]
Dmem (3 : 3): [ 0 0 0 ]


ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 0
	 1 0 0
 ]
------------------------------ Fine assegna1_v_diag_i


Stringhe allocate: 5 (3231 interne); stringhe deallocate: 0 (2916 interne)


Stringhe allocate: 5 (3231 interne); stringhe deallocate: 0 (2916 interne)


*** probmod ***
46: InitMatr_i
checkOUT (3 x 4 : 3 x 4): [
	 79846424 0 0 0
	 0 0 0 0
	 0 0 0 -2147483648
 ]
val = 0


checkOUT (3 x 4 : 3 x 4): [
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

48: InitMatr_i
checkIN (3 x 4 : 3 x 4): [
	 79860064 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648 -2147483648
 ]
val = 0


checkIN (3 x 4 : 3 x 4): [
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

50: InitMatr_d
ris (3 x 4 : 3 x 4): [
	 8.958887433552144e+073 3.090960888979408e+169 7.132602692587957e-154 9.346058267001921e+252
	 3.674381495220622e+228 2.504801002165678e+262 7.265879749302409e+223 7.073209477334463e-077
	 9.503016981271393e-095 3.068361564727309e+257 7.73669824554305e+228 5.502742297645021e-311
 ]
val = 0


ris (3 x 4 : 3 x 4): [
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine InitMatr_d

52: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 0
	 1 0 0
 ]


M_in (3 : 3): [ 0 1 1 ]
------------------------------ Fine somma_righe_i

54: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 0
	 1 0 0
 ]


M_out (3 : 3): [ 2 0 0 ]
------------------------------ Fine somma_colonne_i

57: InitMatr_i
memory (3 x 3 : 3 x 3): [
	 79850752 1071644672 0
	 1071644672 0 1071644672
	 0 1071644672 0
 ]
val = -2147483648


memory (3 x 3 : 3 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (3 x 3 : 3 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


tmp_i1 (0 : 9): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (3 x 3 : 3 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


tmp_i2 (0 : 9): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 9): [ ]
tmp_i2 (0 : 9): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 1 0 0 0 0 ]
h (4 : 5): [ 2 3 4 5 ]


tmp_i1 (4 : 9): [ 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 9): [ 0 0 0 0 ]
s = 2


ind (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 9): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 2 2 2 2 ]
s = 1


tmp_i1 (4 : 4): [ 3 3 3 3 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (4 : 4): [ 3 3 3 3 ]


T2 (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 9): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


old1 (4 : 4): [ 4 4 4 4 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 2 2 2 2 ]
s = 1


tmp_i1 (4 : 4): [ 3 3 3 3 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 3 3 3 3 ]


old2 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (4 : 4): [ 4 4 4 4 ]
s = -1


new1 (4 : 4): [ 3 3 3 3 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (4 : 4): [ 0 0 0 0 ]
s = 1


new2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 9): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


toll1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 2 2 2 2 ]
s = 1


tmp_i1 (4 : 4): [ 3 3 3 3 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 3 3 3 3 ]


toll2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (4 : 4): [ 4 4 4 4 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (4 : 4): [ 3 3 3 3 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (4 : 4): [ 6.218345866837783e+175 5.387842123834802e-310 0 0 ]
val = 0


S1 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (4 : 4): [ 0 0 0 0 ]
T2 (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


a (4 : 4): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]


a (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (4 : 4): [ 1 1 1 1 ]
T2 (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


b (4 : 4): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


b (4 : 4): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
b (4 : 4): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


tmpm_d (4 x 2 : 4 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (4 x 2 : 4 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


m (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
complemento = 0


ind (0 : 4): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
ind (0 : 4): [ ]
val = 0


a (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (4 : 4): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
ind (0 : 4): [ ]
val = 0


b (4 : 4): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
b (4 : 4): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


tmpm_d (4 x 2 : 4 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (4 x 2 : 4 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


m (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
b (4 : 4): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
m (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
T2 (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


S2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
toll2 (4 : 4): [ 1 1 1 1 ]


tmp_d1 (4 : 4): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (4 : 4): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
val = 0

ind1 (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (4 : 4): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
toll2 (4 : 4): [ 1 1 1 1 ]


tmp_d1 (4 : 4): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (4 : 4): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
val = 0


ind2 (0 : 4): [ ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (4 : 4): [ 1 2 3 4 ]
ind2 (0 : 4): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
ind2 (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
tmp_i1 (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 4
ind2 (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 4
tmp_i1 (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (0 : 4): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 1 1 1 1 ]
tmp_i1 (0 : 4): [ ]
val = -1.#INF


S2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 1 1 1 1 ]
ind (0 : 4): [ ]
val = 0


S2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
val = 0


ind (0 : 4): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 1 1 1 1 ]
ind (0 : 4): [ ]
val = -1.#INF


S2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (4 : 4): [ 0 0 0 0 ]
S2 (4 : 4): [ 1 1 1 1 ]


ris (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (4 : 4): [ 1 1 1 1 ]
div = 2.000


ris (4 : 4): [ 0.5 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (3391 interne); stringhe deallocate: 0 (3016 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
ris (4 : 4): [ 0.5 0.5 0.5 0.5 ]
val = -1.#INF


indok (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (3 x 4 : 3 x 4): [
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
riga = 1
indok (4 : 4): [ 1 2 3 4 ]
val = 1


checkOUT (3 x 4 : 3 x 4): [
	 1 1 1 1
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 4
incr = 1


tmp_i1 (4 : 9): [ 1 2 3 4 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (4 : 9): [ 1 2 3 4 ]
indok (4 : 4): [ 1 2 3 4 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (4 : 9): [ 1 2 3 4 ]
st = 1
end = 4


indInf (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (4 : 4): [ 1 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 4): [ 1 2 3 4 ]
indx = 1


indInf (3 : 4): [ 2 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (3 : 4): [ 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 4): [ 2 3 4 ]
indx = 1


indInf (2 : 4): [ 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (2 : 4): [ 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 4): [ 3 4 ]
indx = 1


indInf (1 : 4): [ 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (1 : 4): [ 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 4): [ 4 ]
indx = 1


indInf (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 4): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
ris (4 : 4): [ 0.5 0.5 0.5 0.5 ]
indok (4 : 4): [ 1 2 3 4 ]


tmp_d1 (4 : 4): [ 0.5 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (4 : 4): [ 0.5 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (4 : 4): [ 0.5 0.5 0.5 0.5 ]
indInf (0 : 4): [ ]
val = -1


ris (4 : 4): [ 0.5 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

155: InitVett_d
S_in (4 : 4): [ 6.21834586683821e+175 5.387842123834802e-310 0 0 ]
val = 0


S_in (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

156: aggiungi_ms_riga_i	<=>	m[riga,] <- val # riga <= dim(m)[0] + 1
checkIN (3 x 4 : 3 x 4): [
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
riga = 1, val = 1


checkIN (3 x 4 : 3 x 4): [
	 1 1 1 1
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine aggiungi_ms_riga_i

159: somma_vv_d	<=>	ris <- v1 + v2
ris (4 : 4): [ 0.5 0.5 0.5 0.5 ]
S_in (4 : 4): [ 0 0 0 0 ]


tmp_d1 (4 : 4): [ 0.5 0.5 0.5 0.5 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (3 x 4 : 3 x 4): [
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
riga = 1
tmp_d1 (4 : 4): [ 0.5 0.5 0.5 0.5 ]


ris (3 x 4 : 3 x 4): [
	 0.5 0.5 0.5 0.5
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (3 x 3 : 3 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 9): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (3 x 3 : 3 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 9): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 9): [ ]
tmp_i2 (0 : 9): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

119: InitVett_d
ris (4 : 4): [ 0.5 0.5 0.5 0.5 ]
val = 0


ris (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

122: InitVett_i
tmp_i1 (4 : 9): [ 1 2 3 4 ]
val = 1


tmp_i1 (4 : 9): [ 1 1 1 1 ]
------------------------------ Fine InitVett_i

123: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
checkOUT (3 x 4 : 3 x 4): [
	 1 1 1 1
	 0 0 0 0
	 0 0 0 0
 ]
riga = 2
tmp_i1 (4 : 9): [ 1 1 1 1 ]


checkOUT (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_i

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 0 0 0 0 ]
h (4 : 5): [ 2 3 4 5 ]


tmp_i1 (4 : 9): [ 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 9): [ 0 0 0 0 ]
s = 1


ind (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 9): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 9): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


old1 (4 : 4): [ 4 4 4 4 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


old2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (4 : 4): [ 4 4 4 4 ]
s = -1


new1 (4 : 4): [ 3 3 3 3 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (4 : 4): [ 1 1 1 1 ]
s = 1


new2 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 9): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


toll1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


toll2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (4 : 4): [ 4 4 4 4 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (4 : 4): [ 3 3 3 3 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (4 : 4): [ 0.7867240994427656 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
val = 0


S1 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (4 : 4): [ 1 1 1 1 ]
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (4 : 4): [ 2 2 2 2 ]
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


tmpm_d (4 x 2 : 4 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (4 x 2 : 4 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (4 : 4): [ 6.218345866837783e+175 5.387842123834802e-310 2.121995791459338e-314 2.121995791459338e-314 ]
val = 0


S2 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 4): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 0 0 0 0 ]
ind (0 : 4): [ ]
val = -1.#INF


S2 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (4 : 4): [ 0 0 0 0 ]
S2 (4 : 4): [ 0 0 0 0 ]


S_in (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
S_in (4 : 4): [ 0 0 0 0 ]
div = 2.000


S_in (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (3496 interne); stringhe deallocate: 0 (3101 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
S_in (4 : 4): [ 0 0 0 0 ]
val = -1.#INF


indok (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (3 x 4 : 3 x 4): [
	 1 1 1 1
	 0 0 0 0
	 0 0 0 0
 ]
riga = 2
indok (4 : 4): [ 1 2 3 4 ]
val = 1


checkIN (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 4
incr = 1


tmp_i1 (4 : 9): [ 1 2 3 4 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (4 : 9): [ 1 2 3 4 ]
indok (4 : 4): [ 1 2 3 4 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (4 : 9): [ 1 2 3 4 ]
st = 1
end = 4


indInf (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (4 : 4): [ 1 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 4): [ 1 2 3 4 ]
indx = 1


indInf (3 : 4): [ 2 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (3 : 4): [ 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 4): [ 2 3 4 ]
indx = 1


indInf (2 : 4): [ 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (2 : 4): [ 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 4): [ 3 4 ]
indx = 1


indInf (1 : 4): [ 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (1 : 4): [ 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 4): [ 4 ]
indx = 1


indInf (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 4): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
S_in (4 : 4): [ 0 0 0 0 ]
indok (4 : 4): [ 1 2 3 4 ]


tmp_d1 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (4 : 4): [ 0 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
S_in (4 : 4): [ 0 0 0 0 ]
indInf (0 : 4): [ ]
val = -1


S_in (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
ris (4 : 4): [ 0 0 0 0 ]
S_in (4 : 4): [ 0 0 0 0 ]


tmp_d1 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (3 x 4 : 3 x 4): [
	 0.5 0.5 0.5 0.5
	 0 0 0 0
	 0 0 0 0
 ]
riga = 2
tmp_d1 (4 : 4): [ 0 0 0 0 ]


ris (3 x 4 : 3 x 4): [
	 0.5 0.5 0.5 0.5
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (3 x 3 : 3 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 9): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (3 x 3 : 3 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 9): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 9): [ ]
tmp_i2 (0 : 9): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

119: InitVett_d
ris (4 : 4): [ 0 0 0 0 ]
val = 0


ris (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

122: InitVett_i
tmp_i1 (4 : 9): [ 1 2 3 4 ]
val = 1


tmp_i1 (4 : 9): [ 1 1 1 1 ]
------------------------------ Fine InitVett_i

123: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
checkOUT (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 0 0 0 0
 ]
riga = 3
tmp_i1 (4 : 9): [ 1 1 1 1 ]


checkOUT (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
------------------------------ Fine aggiungi_mv_riga_i

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 0 0 0 0 ]
h (4 : 5): [ 2 3 4 5 ]


tmp_i1 (4 : 9): [ 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 9): [ 0 0 0 0 ]
s = 1


ind (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 9): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 9): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


old1 (4 : 4): [ 4 4 4 4 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


old2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (4 : 4): [ 4 4 4 4 ]
s = -1


new1 (4 : 4): [ 3 3 3 3 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (4 : 4): [ 1 1 1 1 ]
s = 1


new2 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 9): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


toll1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


toll2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (4 : 4): [ 4 4 4 4 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (4 : 4): [ 3 3 3 3 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


S1 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (4 : 4): [ 1 1 1 1 ]
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (4 : 4): [ 2 2 2 2 ]
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


tmpm_d (4 x 2 : 4 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (4 x 2 : 4 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (4 : 4): [ 6.218345866837783e+175 5.618966267453383e+303 1.#QNAN 1.#QNAN ]
val = 0


S2 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 4): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 0 0 0 0 ]
ind (0 : 4): [ ]
val = -1.#INF


S2 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (4 : 4): [ 0 0 0 0 ]
S2 (4 : 4): [ 0 0 0 0 ]


S_in (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
S_in (4 : 4): [ 0 0 0 0 ]
div = 2.000


S_in (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (3581 interne); stringhe deallocate: 0 (3186 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
S_in (4 : 4): [ 0 0 0 0 ]
val = -1.#INF


indok (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 0 0 0 0
 ]
riga = 3
indok (4 : 4): [ 1 2 3 4 ]
val = 1


checkIN (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 4
incr = 1


tmp_i1 (4 : 9): [ 1 2 3 4 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (4 : 9): [ 1 2 3 4 ]
indok (4 : 4): [ 1 2 3 4 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (4 : 9): [ 1 2 3 4 ]
st = 1
end = 4


indInf (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (4 : 4): [ 1 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 4): [ 1 2 3 4 ]
indx = 1


indInf (3 : 4): [ 2 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (3 : 4): [ 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 4): [ 2 3 4 ]
indx = 1


indInf (2 : 4): [ 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (2 : 4): [ 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 4): [ 3 4 ]
indx = 1


indInf (1 : 4): [ 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (1 : 4): [ 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 4): [ 4 ]
indx = 1


indInf (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 4): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
S_in (4 : 4): [ 0 0 0 0 ]
indok (4 : 4): [ 1 2 3 4 ]


tmp_d1 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (4 : 4): [ 0 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
S_in (4 : 4): [ 0 0 0 0 ]
indInf (0 : 4): [ ]
val = -1


S_in (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
ris (4 : 4): [ 0 0 0 0 ]
S_in (4 : 4): [ 0 0 0 0 ]


tmp_d1 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (3 x 4 : 3 x 4): [
	 0.5 0.5 0.5 0.5
	 0 0 0 0
	 0 0 0 0
 ]
riga = 3
tmp_d1 (4 : 4): [ 0 0 0 0 ]


ris (3 x 4 : 3 x 4): [
	 0.5 0.5 0.5 0.5
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

168: somma_m_d	<=>	ris <- sum(m)
ris (3 x 4 : 3 x 4): [
	 0.5 0.5 0.5 0.5
	 0 0 0 0
	 0 0 0 0
 ]


ris: 2
------------------------------ Fine somma_m_d

173: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkIN (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]


aus (4 : 4): [ 3 3 3 3 ]
------------------------------ Fine somma_colonne_i

175: which_v_indxne_i	<=>	ris <- which(v != val)
aus (4 : 4): [ 3 3 3 3 ]
val = 0


tmp_i1 (4 : 9): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxne_i

186: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkIN (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]


rs (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_righe_i

188: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (3 : 3): [ 4 4 4 ]
decr = 0


ord_ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine ordine_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
r = 1
val = 0


I_add (4 : 12): [ 1 2 3 4 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
I (0 : 0): [ ]
I_add (4 : 12): [ 1 2 3 4 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (4 : 4): [ 1 2 3 4 ]


ris (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine elimina_doppi_i



ris (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
r = 2
val = 0


I_add (4 : 12): [ 1 2 3 4 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (4 : 4): [ 1 2 3 4 ]
I_add (4 : 12): [ 1 2 3 4 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (8 : 8): [ 1 2 3 4 1 2 3 4 ]


ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine elimina_doppi_i



ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
r = 3
val = 0


I_add (4 : 12): [ 1 2 3 4 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (4 : 8): [ 1 2 3 4 ]
I_add (4 : 12): [ 1 2 3 4 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (8 : 8): [ 1 2 3 4 1 2 3 4 ]


ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine elimina_doppi_i



ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine unione1_i

216: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
checkOUT (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
checkOUT (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
val1 = 0
val2 = 0


checkOUT (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

218: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
checkOUT (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
checkOUT (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
val1 = 0
val2 = 1


checkOUT (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

220: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkOUT (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]


aus (4 : 4): [ 3 3 3 3 ]
------------------------------ Fine somma_colonne_i

222: which_v_indxne_i	<=>	ris <- which(v != val)
aus (4 : 4): [ 3 3 3 3 ]
val = 0


tmp_i1 (4 : 9): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxne_i

232: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkOUT (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]


rs (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_righe_i

234: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (3 : 3): [ 4 4 4 ]
decr = 0


ord_ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine ordine_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
r = 1
val = 0


I_add (4 : 12): [ 1 2 3 4 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 8): [ ]
I_add (4 : 12): [ 1 2 3 4 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (4 : 4): [ 1 2 3 4 ]


ris (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine elimina_doppi_i



ris (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
r = 2
val = 0


I_add (4 : 12): [ 1 2 3 4 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (4 : 4): [ 1 2 3 4 ]
I_add (4 : 12): [ 1 2 3 4 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (8 : 8): [ 1 2 3 4 1 2 3 4 ]


ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine elimina_doppi_i



ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (3 x 4 : 3 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
r = 3
val = 0


I_add (4 : 12): [ 1 2 3 4 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (4 : 8): [ 1 2 3 4 ]
I_add (4 : 12): [ 1 2 3 4 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (8 : 8): [ 1 2 3 4 1 2 3 4 ]


ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine elimina_doppi_i



ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine unione1_i


Stringhe allocate: 5 (3666 interne); stringhe deallocate: 0 (3346 interne)


Stringhe allocate: 5 (3671 interne); stringhe deallocate: 0 (3356 interne)


*** module3 ***
51: seq_i	<=>	ris <- seq(da, a, incr)
da = 2
a = 4
incr = 1


tmp1_i (3 : 3): [ 2 3 4 ]
------------------------------ Fine seq_i


*** sampleB ***

***sample***
tmp1_i (3 : 3): [ 2 3 4 ]
k = 1, replace = 0


ris (1 : 1): [ 4 ]
*****************************************


Stringhe allocate: 5 (3681 interne); stringhe deallocate: 0 (3356 interne)


Stringhe allocate: 5 (3681 interne); stringhe deallocate: 0 (3356 interne)

54: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


tmp1_i (3 : 3): [ 1 2 3 ]
------------------------------ Fine seq_i


*** sampleB ***

***sample***
tmp1_i (3 : 3): [ 1 2 3 ]
k = 1, replace = 0


ris (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 5 (3686 interne); stringhe deallocate: 0 (3356 interne)


Stringhe allocate: 5 (3686 interne); stringhe deallocate: 0 (3356 interne)


*** mod3 ***
33: InitMatr_i
ris (4 x 4 : 4 x 4): [
	 79847632 0 1954 0
	 79849488 281 0 173
	 0 30 0 1
	 173 4 222 2146959360
 ]
val = 0


ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

34: copia_v_d	<=>	ris[st:end] <- v[st:end]
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
st = 1
end = 7


STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
------------------------------ Fine copia_v_d

35: copia_v_d	<=>	ris[st:end] <- v[st:end]
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
st = 1
end = 7


STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
------------------------------ Fine copia_v_d

39: segmento_v_d	<=>	ris <- v[st:end]
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
start = 2
end = 2


tmp1_d (1 : 1): [ 3.614836360604185 ]
------------------------------ Fine segmento_v_d

40: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
tmp1_d (1 : 1): [ 3.614836360604185 ]
canc_NA = 1



ris: 3.614836360604185
------------------------------ Fine somma_v_d

43: segmento_v_d	<=>	ris <- v[st:end]
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
start = 2
end = 2


p (1 : 1): [ 3.614836360604185 ]
------------------------------ Fine segmento_v_d

44: dividi1_vs_d	<=>	v <- v / div
p (1 : 1): [ 3.614836360604185 ]
div = 3.615


p (1 : 1): [ 1 ]
------------------------------ Fine dividi1_vs_d

61: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


tmp1_i (1 : 1): [ 1 ]
------------------------------ Fine seq_i


*** sampleB_p ***
25: rep_v_i	<=>	ris <- rep(v, rip)
tmp1_i (1 : 1): [ 1 ]
rip = 3


ris (3 : 3): [ 1 1 1 ]
------------------------------ Fine rep_v_i

64: somma_v_i	<=>	ris <- sum(v, na.rm=canc_NA)
ris (3 : 3): [ 1 1 1 ]
canc_NA = 0



ris: 3
------------------------------ Fine somma_v_i

131: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


tmp1_i (1 : 1): [ 1 ]
------------------------------ Fine seq_i

133: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
tmp1_i (1 : 1): [ 1 ]
scalare_i (1 : 1): [ 2 ]
val = 1


ris (4 x 4 : 4 x 4): [
	 0 1 0 0
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

135: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


indS (1 : 1): [ 1 ]
------------------------------ Fine seq_i

137: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


tmp2_i (1 : 1): [ 1 ]
------------------------------ Fine seq_i

138: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp2_i (1 : 1): [ 1 ]
indS (1 : 1): [ 1 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp2_i (1 : 1): [ 1 ]
st = 1
end = 1


indBS (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indBS (1 : 1): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indBS (1 : 1): [ 1 ]
indx = 1


indBS (0 : 1): [ ]
------------------------------ Fine elimina1_indx_i



indBS (0 : 1): [ ]
------------------------------ Fine setdiff_i

150: segmento_v_d	<=>	ris <- v[st:end]
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
start = 1
end = 4


tmp1_d (4 : 6): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine segmento_v_d

151: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
tmp1_d (4 : 6): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
canc_NA = 1



ris: 0
------------------------------ Fine somma_v_d

153: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (4 x 4 : 4 x 4): [
	 0 1 0 0
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]


Sin (4 : 4): [ 1 0 0 0 ]
------------------------------ Fine somma_righe_i

206: InitVett_d
p_sc (1 : 1): [ 5.387751258462755e-310 ]
val = 1


p_sc (1 : 1): [ 1 ]
------------------------------ Fine InitVett_d

211: which_v_indxeq_i	<=>	ris <- which(v==val)
tmp1_i (1 : 1): [ 1 ]
val = 5


ind (0 : 1): [ ]
------------------------------ Fine which_v_indxeq_i

213: assegna1_vs_indx_d	<=>	v[indx] <- val
p_sc (1 : 1): [ 1 ]
ind (0 : 1): [ ]
val = 0


p_sc (1 : 1): [ 1 ]
------------------------------ Fine assegna1_vs_indx_d

215: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
p_sc (1 : 1): [ 1 ]
canc_NA = 0



ris: 1
------------------------------ Fine somma_v_d

215: dividi1_vs_d	<=>	v <- v / div
p_sc (1 : 1): [ 1 ]
div = 1.000


p_sc (1 : 1): [ 1 ]
------------------------------ Fine dividi1_vs_d


*** sampleB_p ***
25: rep_v_i	<=>	ris <- rep(v, rip)
indS (1 : 1): [ 1 ]
rip = 1


ris (1 : 1): [ 1 ]
------------------------------ Fine rep_v_i

233: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (4 x 4 : 4 x 4): [
	 0 1 0 0
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
ris (1 : 1): [ 1 ]
scalare_i (1 : 1): [ 3 ]
val = 1


ris (4 x 4 : 4 x 4): [
	 0 1 1 0
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

150: segmento_v_d	<=>	ris <- v[st:end]
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
start = 1
end = 4


tmp1_d (4 : 6): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine segmento_v_d

151: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
tmp1_d (4 : 6): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
canc_NA = 1



ris: 0
------------------------------ Fine somma_v_d

153: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (4 x 4 : 4 x 4): [
	 0 1 1 0
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]


Sin (4 : 4): [ 2 0 0 0 ]
------------------------------ Fine somma_righe_i

206: InitVett_d
p_sc (1 : 1): [ 1 ]
val = 1


p_sc (1 : 1): [ 1 ]
------------------------------ Fine InitVett_d

211: which_v_indxeq_i	<=>	ris <- which(v==val)
tmp1_i (1 : 1): [ 1 ]
val = 5


ind (0 : 1): [ ]
------------------------------ Fine which_v_indxeq_i

213: assegna1_vs_indx_d	<=>	v[indx] <- val
p_sc (1 : 1): [ 1 ]
ind (0 : 1): [ ]
val = 0


p_sc (1 : 1): [ 1 ]
------------------------------ Fine assegna1_vs_indx_d

215: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
p_sc (1 : 1): [ 1 ]
canc_NA = 0



ris: 1
------------------------------ Fine somma_v_d

215: dividi1_vs_d	<=>	v <- v / div
p_sc (1 : 1): [ 1 ]
div = 1.000


p_sc (1 : 1): [ 1 ]
------------------------------ Fine dividi1_vs_d


*** sampleB_p ***
25: rep_v_i	<=>	ris <- rep(v, rip)
indS (1 : 1): [ 1 ]
rip = 1


ris (1 : 1): [ 1 ]
------------------------------ Fine rep_v_i

233: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (4 x 4 : 4 x 4): [
	 0 1 1 0
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
ris (1 : 1): [ 1 ]
scalare_i (1 : 1): [ 4 ]
val = 1


ris (4 x 4 : 4 x 4): [
	 0 1 1 1
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i


*** triangola ***
27: diag_i	<=>	ris <- diag(m)
ris (4 x 4 : 4 x 4): [
	 0 1 1 1
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]


Dmem (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine diag_i

29: assegna1_s_diag_i	<=>	diag_i(m) <- s
ris (4 x 4 : 4 x 4): [
	 0 1 1 1
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
val = 0


ris (4 x 4 : 4 x 4): [
	 0 1 1 1
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine assegna1_s_diag_i

33: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
ris (4 x 4 : 4 x 4): [
	 0 1 1 1
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
r = 1
val = 0


tmp1_i (3 : 16): [ 2 3 4 ]
------------------------------ Fine which_m_rowindxne_i

34: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
ris (4 x 4 : 4 x 4): [
	 0 1 1 1
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
c = 1, val = 0


tmp2_i (0 : 16): [ ]
------------------------------ Fine which_m_colindxne_i

35: unione_i	<=>	ris <- union(v1, v2)
tmp1_i (3 : 16): [ 2 3 4 ]
tmp2_i (0 : 16): [ ]
4876: elimina_doppi_i	<=>	ris <- union(v, v)
ind (3 : 3): [ 2 3 4 ]


ris (3 : 3): [ 2 3 4 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 2 3 4 ]
------------------------------ Fine unione_i

55: InitMatr_i
coord (1 x 2 : 2 x 2): [
	 79845920 1819240302
 ]
val = 0


coord (1 x 2 : 2 x 2): [
	 0 0
 ]
------------------------------ Fine InitMatr_i

72: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 2, el2 = 3


tmp1_i (2 : 16): [ 2 3 ]
------------------------------ Fine vettore2s_i

73: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (1 x 2 : 2 x 2): [
	 0 0
 ]
riga = 2
tmp1_i (2 : 16): [ 2 3 ]


coord (2 x 2 : 2 x 2): [
	 0 0
	 2 3
 ]
------------------------------ Fine aggiungi_mv_riga_i

74: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 3, el2 = 2


tmp1_i (2 : 16): [ 3 2 ]
------------------------------ Fine vettore2s_i

76: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (2 x 2 : 2 x 2): [
	 0 0
	 2 3
 ]
riga = 3
tmp1_i (2 : 16): [ 3 2 ]


coord (3 x 2 : 3 x 2): [
	 0 0
	 2 3
	 3 2
 ]
------------------------------ Fine aggiungi_mv_riga_i

72: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 2, el2 = 4


tmp1_i (2 : 16): [ 2 4 ]
------------------------------ Fine vettore2s_i

73: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (3 x 2 : 3 x 2): [
	 0 0
	 2 3
	 3 2
 ]
riga = 4
tmp1_i (2 : 16): [ 2 4 ]


coord (4 x 2 : 4 x 2): [
	 0 0
	 2 3
	 3 2
	 2 4
 ]
------------------------------ Fine aggiungi_mv_riga_i

74: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 4, el2 = 2


tmp1_i (2 : 16): [ 4 2 ]
------------------------------ Fine vettore2s_i

76: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (4 x 2 : 4 x 2): [
	 0 0
	 2 3
	 3 2
	 2 4
 ]
riga = 5
tmp1_i (2 : 16): [ 4 2 ]


coord (5 x 2 : 5 x 2): [
	 0 0
	 2 3
	 3 2
	 2 4
	 4 2
 ]
------------------------------ Fine aggiungi_mv_riga_i

72: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 3, el2 = 4


tmp1_i (2 : 16): [ 3 4 ]
------------------------------ Fine vettore2s_i

73: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (5 x 2 : 5 x 2): [
	 0 0
	 2 3
	 3 2
	 2 4
	 4 2
 ]
riga = 6
tmp1_i (2 : 16): [ 3 4 ]


coord (6 x 2 : 6 x 2): [
	 0 0
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
 ]
------------------------------ Fine aggiungi_mv_riga_i

74: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 4, el2 = 3


tmp1_i (2 : 16): [ 4 3 ]
------------------------------ Fine vettore2s_i

76: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (6 x 2 : 6 x 2): [
	 0 0
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
 ]
riga = 7
tmp1_i (2 : 16): [ 4 3 ]


coord (7 x 2 : 7 x 2): [
	 0 0
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
	 4 3
 ]
------------------------------ Fine aggiungi_mv_riga_i

89: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (4 x 4 : 4 x 4): [
	 0 1 1 1
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]


M_in (4 : 4): [ 3 0 0 0 ]
------------------------------ Fine somma_righe_i

91: which_v_indxlt_i	<=>	ris <- which(v<val)
M_in (4 : 4): [ 3 0 0 0 ]
val = 5

ris (4 : 10): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxlt_i

95: which_m_colindxin_i	<=>	ris <- which(m[, c] %IN% v)
coord (7 x 2 : 7 x 2): [
	 0 0
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
	 4 3
 ]
c = 1
ris (4 : 10): [ 1 2 3 4 ]
3754: esiste_v_i	<=>	elem %IN% v
elem = 0
ris (4 : 10): [ 1 2 3 4 ]


indx = 0
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (4 : 10): [ 1 2 3 4 ]


indx = 2
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 3
ris (4 : 10): [ 1 2 3 4 ]


indx = 3
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (4 : 10): [ 1 2 3 4 ]


indx = 2
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 4
ris (4 : 10): [ 1 2 3 4 ]


indx = 4
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 3
ris (4 : 10): [ 1 2 3 4 ]


indx = 3
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 4
ris (4 : 10): [ 1 2 3 4 ]


indx = 4
------------------------------ Fine esiste_v_i



ind_aus (6 : 7): [ 2 3 4 5 6 7 ]
------------------------------ Fine which_m_colindxin_i

101: righe_i	<=>	ris <- m[indx,]
coord (7 x 2 : 7 x 2): [
	 0 0
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
	 4 3
 ]
ind_aus (6 : 7): [ 2 3 4 5 6 7 ]



tmp_coord1 (6 x 2 : 6 x 2): [
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
	 4 3
 ]
------------------------------ Fine righe_i

102: copia_m_i	<=>	ris <- da
tmp_coord1 (6 x 2 : 6 x 2): [
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
	 4 3
 ]


coord (6 x 2 : 7 x 2): [
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
	 4 3
 ]
------------------------------ Fine copia_m_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 6
incr = 1


tmp1_i (6 : 16): [ 1 2 3 4 5 6 ]
------------------------------ Fine seq_i


*** sampleB ***

***sample***
tmp1_i (6 : 16): [ 1 2 3 4 5 6 ]
k = 1, replace = 0


ris (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 5 (3851 interne); stringhe deallocate: 0 (3391 interne)


Stringhe allocate: 5 (3851 interne); stringhe deallocate: 0 (3391 interne)

107: riga_i	<=>	ris <- m[r,]
coord (6 x 2 : 7 x 2): [
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
	 4 3
 ]
r = 3

coord_ind (2 : 2): [ 2 4 ]
------------------------------ Fine riga_i

111: which_m_colneand2_i	<=>	ris <- which((m[, c] != val1) & (m[, c] != val2))
coord (6 x 2 : 7 x 2): [
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
	 4 3
 ]
c = 1, val1 = 2, val2 = 4


ris (2 : 32): [ 2 5 ]
------------------------------ Fine which_m_colneand2_i

114: righe_i	<=>	ris <- m[indx,]
coord (6 x 2 : 7 x 2): [
	 2 3
	 3 2
	 2 4
	 4 2
	 3 4
	 4 3
 ]
ris (2 : 32): [ 2 5 ]



tmp_coord1 (2 x 2 : 6 x 2): [
	 3 2
	 3 4
 ]
------------------------------ Fine righe_i

115: copia_m_i	<=>	ris <- da
tmp_coord1 (2 x 2 : 6 x 2): [
	 3 2
	 3 4
 ]


coord (2 x 2 : 7 x 2): [
	 3 2
	 3 4
 ]
------------------------------ Fine copia_m_i

33: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
ris (4 x 4 : 4 x 4): [
	 0 1 1 1
	 0 0 0 1
	 0 0 0 0
	 0 0 0 0
 ]
r = 2
val = 0


tmp1_i (1 : 16): [ 4 ]
------------------------------ Fine which_m_rowindxne_i

34: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
ris (4 x 4 : 4 x 4): [
	 0 1 1 1
	 0 0 0 1
	 0 0 0 0
	 0 0 0 0
 ]
c = 2, val = 0


tmp2_i (1 : 16): [ 1 ]
------------------------------ Fine which_m_colindxne_i

35: unione_i	<=>	ris <- union(v1, v2)
tmp1_i (1 : 16): [ 4 ]
tmp2_i (1 : 16): [ 1 ]
4876: elimina_doppi_i	<=>	ris <- union(v, v)
ind (2 : 2): [ 4 1 ]


ris (2 : 32): [ 4 1 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 32): [ 4 1 ]
------------------------------ Fine unione_i

33: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
ris (4 x 4 : 4 x 4): [
	 0 1 1 1
	 0 0 0 1
	 0 0 0 0
	 0 0 0 0
 ]
r = 3
val = 0


tmp1_i (0 : 16): [ ]
------------------------------ Fine which_m_rowindxne_i

34: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
ris (4 x 4 : 4 x 4): [
	 0 1 1 1
	 0 0 0 1
	 0 0 0 0
	 0 0 0 0
 ]
c = 3, val = 0


tmp2_i (1 : 16): [ 1 ]
------------------------------ Fine which_m_colindxne_i

35: unione_i	<=>	ris <- union(v1, v2)
tmp1_i (0 : 16): [ ]
tmp2_i (1 : 16): [ 1 ]
4876: elimina_doppi_i	<=>	ris <- union(v, v)
ind (1 : 1): [ 1 ]


ris (1 : 32): [ 1 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 32): [ 1 ]
------------------------------ Fine unione_i

33: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
ris (4 x 4 : 4 x 4): [
	 0 1 1 1
	 0 0 0 1
	 0 0 0 0
	 0 0 0 0
 ]
r = 4
val = 0


tmp1_i (0 : 16): [ ]
------------------------------ Fine which_m_rowindxne_i

34: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
ris (4 x 4 : 4 x 4): [
	 0 1 1 1
	 0 0 0 1
	 0 0 0 0
	 0 0 0 0
 ]
c = 4, val = 0


tmp2_i (2 : 16): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

35: unione_i	<=>	ris <- union(v1, v2)
tmp1_i (0 : 16): [ ]
tmp2_i (2 : 16): [ 1 2 ]
4876: elimina_doppi_i	<=>	ris <- union(v, v)
ind (2 : 2): [ 1 2 ]


ris (2 : 32): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 32): [ 1 2 ]
------------------------------ Fine unione_i

55: InitMatr_i
coord (1 x 2 : 7 x 2): [
	 3 3
 ]
val = 0


coord (1 x 2 : 7 x 2): [
	 0 0
 ]
------------------------------ Fine InitMatr_i

89: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (4 x 4 : 4 x 4): [
	 0 1 1 1
	 0 0 0 1
	 0 0 0 0
	 0 0 0 0
 ]


M_in (4 : 4): [ 3 1 0 0 ]
------------------------------ Fine somma_righe_i

91: which_v_indxlt_i	<=>	ris <- which(v<val)
M_in (4 : 4): [ 3 1 0 0 ]
val = 5

ris (4 : 32): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxlt_i

95: which_m_colindxin_i	<=>	ris <- which(m[, c] %IN% v)
coord (1 x 2 : 7 x 2): [
	 0 0
 ]
c = 1
ris (4 : 32): [ 1 2 3 4 ]
3754: esiste_v_i	<=>	elem %IN% v
elem = 0
ris (4 : 32): [ 1 2 3 4 ]


indx = 0
------------------------------ Fine esiste_v_i



ind_aus (0 : 7): [ ]
------------------------------ Fine which_m_colindxin_i

152: assegna1_v_diag_i	<=>	diag(m) <- v
ris (4 x 4 : 4 x 4): [
	 0 1 1 1
	 0 0 0 1
	 0 0 0 0
	 0 0 0 0
 ]
Dmem (4 : 4): [ 0 0 0 0 ]


ris (4 x 4 : 4 x 4): [
	 0 1 1 1
	 0 0 0 1
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine assegna1_v_diag_i


Stringhe allocate: 5 (3871 interne); stringhe deallocate: 0 (3461 interne)



*****************************************
*****************************************


Stringhe allocate: 5 (3871 interne); stringhe deallocate: 0 (3536 interne)


*** probmod ***
46: InitMatr_i
checkOUT (4 x 4 : 4 x 4): [
	 79850064 0 0 0
	 79849216 260 0 0
	 0 32 0 0
	 29 1 0 0
 ]
val = 0


checkOUT (4 x 4 : 4 x 4): [
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

48: InitMatr_i
checkIN (4 x 4 : 4 x 4): [
	 79851936 0 5 0
	 79862184 258 0 61
	 0 25 0 1
	 61 1 211 0
 ]
val = 0


checkIN (4 x 4 : 4 x 4): [
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

50: InitMatr_d
ris (4 x 4 : 4 x 4): [
	 1.#QNAN 2.504801002165678e+262 7.73669824554305e+228 0
	 1.#QNAN 3.068361564727309e+257 9.346058267001921e+252 0
	 1.#QNAN 7.132602692587957e-154 7.073209477334463e-077 0
	 1.#QNAN 7.265879749302409e+223 5.502742297645021e-311 0
 ]
val = 0


ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine InitMatr_d

52: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (4 x 4 : 4 x 4): [
	 0 1 1 1
	 0 0 0 1
	 0 0 0 0
	 0 0 0 0
 ]


M_in (4 : 4): [ 3 1 0 0 ]
------------------------------ Fine somma_righe_i

54: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (4 x 4 : 4 x 4): [
	 0 1 1 1
	 0 0 0 1
	 0 0 0 0
	 0 0 0 0
 ]


M_out (4 : 4): [ 0 1 1 2 ]
------------------------------ Fine somma_colonne_i

57: InitMatr_i
memory (4 x 3 : 4 x 3): [
	 79853248 3 4
	 3 4 2
	 2 3 4
	 4 2 3
 ]
val = -2147483648


memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 3


tmp_i1 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 12): [ ]
tmp_i2 (0 : 12): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

119: InitVett_d
S_out (4 : 4): [ 6.218345866837417e+175 2.048428433988699 3.614836360604185 3.614836360604185 ]
val = 0


S_out (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

122: InitVett_i
tmp_i1 (4 : 12): [ 79846424 0 0 0 ]
val = 1


tmp_i1 (4 : 12): [ 1 1 1 1 ]
------------------------------ Fine InitVett_i

123: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
checkOUT (4 x 4 : 4 x 4): [
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
riga = 1
tmp_i1 (4 : 12): [ 1 1 1 1 ]


checkOUT (4 x 4 : 4 x 4): [
	 1 1 1 1
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_i

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 0 0 0 0 ]
h (4 : 5): [ 2 3 4 5 ]


tmp_i1 (4 : 12): [ 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 12): [ 0 0 0 0 ]
s = 3


ind (4 : 4): [ 3 3 3 3 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 12): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 3 3 3 3 ]
s = 1


tmp_i1 (4 : 4): [ 4 4 4 4 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (4 : 4): [ 4 4 4 4 ]


T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 12): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


old1 (4 : 4): [ 4 4 4 4 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 3 3 3 3 ]
s = 1


tmp_i1 (4 : 4): [ 4 4 4 4 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 4 4 4 4 ]


old2 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (4 : 4): [ 4 4 4 4 ]
s = -1


new1 (4 : 4): [ 3 3 3 3 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (4 : 4): [ 0 0 0 0 ]
s = 1


new2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 12): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


toll1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 3 3 3 3 ]
s = 1


tmp_i1 (4 : 4): [ 4 4 4 4 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 4 4 4 4 ]


toll2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (4 : 4): [ 4 4 4 4 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (4 : 4): [ 3 3 3 3 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (4 : 4): [ 6.218345866838053e+175 5.387842123834802e-310 0 0 ]
val = 0


S1 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (4 : 4): [ 0 0 0 0 ]
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (4 : 4): [ 1 1 1 1 ]
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


tmpm_d (4 x 2 : 4 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (4 x 2 : 4 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (4 : 4): [ 4.283448885737703e-314 4.243991583906807e-314 0 1.000000017549791 ]
val = 0


S2 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 4): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 0 0 0 0 ]
ind (0 : 4): [ ]
val = -1.#INF


S2 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (4 : 4): [ 0 0 0 0 ]
S2 (4 : 4): [ 0 0 0 0 ]


ris (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (4 : 4): [ 0 0 0 0 ]
div = 2.000


ris (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (4021 interne); stringhe deallocate: 0 (3621 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
ris (4 : 4): [ 0 0 0 0 ]
val = -1.#INF


indok (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (4 x 4 : 4 x 4): [
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
riga = 1
indok (4 : 4): [ 1 2 3 4 ]
val = 1


checkIN (4 x 4 : 4 x 4): [
	 1 1 1 1
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 4
incr = 1


tmp_i1 (4 : 12): [ 1 2 3 4 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (4 : 12): [ 1 2 3 4 ]
indok (4 : 4): [ 1 2 3 4 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (4 : 12): [ 1 2 3 4 ]
st = 1
end = 4


indInf (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (4 : 4): [ 1 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 4): [ 1 2 3 4 ]
indx = 1


indInf (3 : 4): [ 2 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (3 : 4): [ 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 4): [ 2 3 4 ]
indx = 1


indInf (2 : 4): [ 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (2 : 4): [ 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 4): [ 3 4 ]
indx = 1


indInf (1 : 4): [ 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (1 : 4): [ 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 4): [ 4 ]
indx = 1


indInf (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 4): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
ris (4 : 4): [ 0 0 0 0 ]
indok (4 : 4): [ 1 2 3 4 ]


tmp_d1 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (4 : 4): [ 0 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (4 : 4): [ 0 0 0 0 ]
indInf (0 : 4): [ ]
val = -1


ris (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
S_out (4 : 4): [ 0 0 0 0 ]
ris (4 : 4): [ 0 0 0 0 ]


tmp_d1 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
riga = 1
tmp_d1 (4 : 4): [ 0 0 0 0 ]


ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 12): [ ]
tmp_i2 (0 : 12): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 1 0 0 0 0 ]
h (4 : 5): [ 2 3 4 5 ]


tmp_i1 (4 : 12): [ 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 12): [ 0 0 0 0 ]
s = 1


ind (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 12): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 12): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


old1 (4 : 4): [ 4 4 4 4 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


old2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (4 : 4): [ 4 4 4 4 ]
s = -1


new1 (4 : 4): [ 3 3 3 3 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (4 : 4): [ 1 1 1 1 ]
s = 1


new2 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 12): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


toll1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


toll2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (4 : 4): [ 4 4 4 4 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (4 : 4): [ 3 3 3 3 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (4 : 4): [ 6.21834586683821e+175 2.048428433988699 3 3 ]
val = 0


S1 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (4 : 4): [ 1 1 1 1 ]
T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


a (4 : 4): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (4 : 4): [ 2 2 2 2 ]
T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


b (4 : 4): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 -1.614836360604185 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 -1.614836360604185 ]


b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]


tmpm_d (4 x 2 : 4 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (4 x 2 : 4 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]


m (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


ind (0 : 4): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
ind (0 : 4): [ ]
val = 0


a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
ind (0 : 4): [ ]
val = 0


b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]


tmpm_d (4 x 2 : 4 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (4 x 2 : 4 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]


m (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
m (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
toll2 (4 : 4): [ 1 1 1 1 ]


tmp_d1 (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0

ind1 (0 : 4): [ ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
toll2 (4 : 4): [ 1 1 1 1 ]


tmp_d1 (4 : 4): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (4 : 4): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
val = 0


ind2 (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (0 : 4): [ ]
ind2 (4 : 4): [ 1 2 3 4 ]


tmp_i1 (0 : 4): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
tmp_i1 (0 : 4): [ ]
val = -1.#INF


S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
ind (0 : 4): [ ]
val = 0


S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
val = 0


ind (0 : 4): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
ind (0 : 4): [ ]
val = -1.#INF


S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (4 : 4): [ 0 0 0 0 ]
S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]


S_out (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
S_out (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
div = 2.000


S_out (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (4136 interne); stringhe deallocate: 0 (3721 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
S_out (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
val = -1.#INF


indok (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (4 x 4 : 4 x 4): [
	 1 1 1 1
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
riga = 2
indok (4 : 4): [ 1 2 3 4 ]
val = 1


checkOUT (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 4
incr = 1


tmp_i1 (4 : 12): [ 1 2 3 4 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (4 : 12): [ 1 2 3 4 ]
indok (4 : 4): [ 1 2 3 4 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (4 : 12): [ 1 2 3 4 ]
st = 1
end = 4


indInf (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (4 : 4): [ 1 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 4): [ 1 2 3 4 ]
indx = 1


indInf (3 : 4): [ 2 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (3 : 4): [ 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 4): [ 2 3 4 ]
indx = 1


indInf (2 : 4): [ 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (2 : 4): [ 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 4): [ 3 4 ]
indx = 1


indInf (1 : 4): [ 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (1 : 4): [ 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 4): [ 4 ]
indx = 1


indInf (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 4): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
S_out (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
indok (4 : 4): [ 1 2 3 4 ]


tmp_d1 (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]


min = 0.3616811523063164
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
S_out (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
indInf (0 : 4): [ ]
val = -1


S_out (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
------------------------------ Fine assegna1_vs_indx_d

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 0 0 0 0 ]
h (4 : 5): [ 2 3 4 5 ]


tmp_i1 (4 : 12): [ 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 12): [ 0 0 0 0 ]
s = 1


ind (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 12): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 12): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


old1 (4 : 4): [ 4 4 4 4 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


old2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (4 : 4): [ 4 4 4 4 ]
s = -1


new1 (4 : 4): [ 3 3 3 3 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (4 : 4): [ 1 1 1 1 ]
s = 1


new2 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 12): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


toll1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


toll2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (4 : 4): [ 4 4 4 4 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (4 : 4): [ 3 3 3 3 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (4 : 4): [ 4.00000007093275 4 4 4 ]
val = 0


S1 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (4 : 4): [ 1 1 1 1 ]
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (4 : 4): [ 2 2 2 2 ]
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


tmpm_d (4 x 2 : 4 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (4 x 2 : 4 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (4 : 4): [ 0.6148362248394559 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
val = 0


S2 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 4): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 0 0 0 0 ]
ind (0 : 4): [ ]
val = -1.#INF


S2 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (4 : 4): [ 0 0 0 0 ]
S2 (4 : 4): [ 0 0 0 0 ]


ris (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (4 : 4): [ 0 0 0 0 ]
div = 2.000


ris (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (4221 interne); stringhe deallocate: 0 (3806 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
ris (4 : 4): [ 0 0 0 0 ]
val = -1.#INF


indok (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (4 x 4 : 4 x 4): [
	 1 1 1 1
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
riga = 2
indok (4 : 4): [ 1 2 3 4 ]
val = 1


checkIN (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 4
incr = 1


tmp_i1 (4 : 12): [ 1 2 3 4 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (4 : 12): [ 1 2 3 4 ]
indok (4 : 4): [ 1 2 3 4 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (4 : 12): [ 1 2 3 4 ]
st = 1
end = 4


indInf (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (4 : 4): [ 1 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 4): [ 1 2 3 4 ]
indx = 1


indInf (3 : 4): [ 2 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (3 : 4): [ 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 4): [ 2 3 4 ]
indx = 1


indInf (2 : 4): [ 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (2 : 4): [ 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 4): [ 3 4 ]
indx = 1


indInf (1 : 4): [ 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (1 : 4): [ 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 4): [ 4 ]
indx = 1


indInf (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 4): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
ris (4 : 4): [ 0 0 0 0 ]
indok (4 : 4): [ 1 2 3 4 ]


tmp_d1 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (4 : 4): [ 0 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (4 : 4): [ 0 0 0 0 ]
indInf (0 : 4): [ ]
val = -1


ris (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
S_out (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
ris (4 : 4): [ 0 0 0 0 ]


tmp_d1 (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
riga = 2
tmp_d1 (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]


ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164
	 0 0 0 0
	 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


tmp_i1 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 12): [ ]
tmp_i2 (0 : 12): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 1 0 0 0 0 ]
h (4 : 5): [ 2 3 4 5 ]


tmp_i1 (4 : 12): [ 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 12): [ 0 0 0 0 ]
s = 1


ind (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 12): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 12): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


old1 (4 : 4): [ 4 4 4 4 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


old2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (4 : 4): [ 4 4 4 4 ]
s = -1


new1 (4 : 4): [ 3 3 3 3 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (4 : 4): [ 1 1 1 1 ]
s = 1


new2 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 12): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


toll1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 1 1 1 1 ]
s = 1


tmp_i1 (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 2 2 2 2 ]


toll2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (4 : 4): [ 4 4 4 4 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (4 : 4): [ 3 3 3 3 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


S1 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (4 : 4): [ 1 1 1 1 ]
T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


a (4 : 4): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ -2.614836360604185 -2.614836360604185 -2.614836360604185 -2.614836360604185 ]


a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (4 : 4): [ 2 2 2 2 ]
T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


b (4 : 4): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 -1.614836360604185 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ -1.614836360604185 -1.614836360604185 -1.614836360604185 -1.614836360604185 ]


b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]


tmpm_d (4 x 2 : 4 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (4 x 2 : 4 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]


m (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


ind (0 : 4): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
ind (0 : 4): [ ]
val = 0


a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
ind (0 : 4): [ ]
val = 0


b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]


tmpm_d (4 x 2 : 4 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (4 x 2 : 4 x 2): [
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
	 2.614836360604185 1.614836360604185
 ]


m (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
m (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]


S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (4 : 4): [ 2.614836360604185 2.614836360604185 2.614836360604185 2.614836360604185 ]
toll2 (4 : 4): [ 1 1 1 1 ]


tmp_d1 (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
val = 0

ind1 (0 : 4): [ ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (4 : 4): [ 1.614836360604185 1.614836360604185 1.614836360604185 1.614836360604185 ]
toll2 (4 : 4): [ 1 1 1 1 ]


tmp_d1 (4 : 4): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (4 : 4): [ 0.6148363606041851 0.6148363606041851 0.6148363606041851 0.6148363606041851 ]
val = 0


ind2 (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (0 : 4): [ ]
ind2 (4 : 4): [ 1 2 3 4 ]


tmp_i1 (0 : 4): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
tmp_i1 (0 : 4): [ ]
val = -1.#INF


S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
ind (0 : 4): [ ]
val = 0


S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (4 : 4): [ 3.614836360604185 3.614836360604185 3.614836360604185 3.614836360604185 ]
val = 0


ind (0 : 4): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
ind (0 : 4): [ ]
val = -1.#INF


S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (4 : 4): [ 0 0 0 0 ]
S2 (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]


S_out (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
S_out (4 : 4): [ 0.7233623046126327 0.7233623046126327 0.7233623046126327 0.7233623046126327 ]
div = 2.000


S_out (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (4321 interne); stringhe deallocate: 0 (3906 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
S_out (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
val = -1.#INF


indok (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 0 0 0 0
	 0 0 0 0
 ]
riga = 3
indok (4 : 4): [ 1 2 3 4 ]
val = 1


checkOUT (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 0 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 4
incr = 1


tmp_i1 (4 : 12): [ 1 2 3 4 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (4 : 12): [ 1 2 3 4 ]
indok (4 : 4): [ 1 2 3 4 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (4 : 12): [ 1 2 3 4 ]
st = 1
end = 4


indInf (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (4 : 4): [ 1 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 4): [ 1 2 3 4 ]
indx = 1


indInf (3 : 4): [ 2 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (3 : 4): [ 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 4): [ 2 3 4 ]
indx = 1


indInf (2 : 4): [ 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (2 : 4): [ 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 4): [ 3 4 ]
indx = 1


indInf (1 : 4): [ 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (1 : 4): [ 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 4): [ 4 ]
indx = 1


indInf (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 4): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
S_out (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
indok (4 : 4): [ 1 2 3 4 ]


tmp_d1 (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]


min = 0.3616811523063164
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
S_out (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
indInf (0 : 4): [ ]
val = -1


S_out (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
------------------------------ Fine assegna1_vs_indx_d

155: InitVett_d
ris (4 : 4): [ 0 0 0 0 ]
val = 0


ris (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

156: aggiungi_ms_riga_i	<=>	m[riga,] <- val # riga <= dim(m)[0] + 1
checkIN (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 0 0 0 0
	 0 0 0 0
 ]
riga = 3, val = 1


checkIN (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 0 0 0 0
 ]
------------------------------ Fine aggiungi_ms_riga_i

159: somma_vv_d	<=>	ris <- v1 + v2
S_out (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
ris (4 : 4): [ 0 0 0 0 ]


tmp_d1 (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164
	 0 0 0 0
	 0 0 0 0
 ]
riga = 3
tmp_d1 (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]


ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164
	 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164
	 0 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


tmp_i1 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


tmp_i2 (0 : 12): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 12): [ ]
tmp_i2 (0 : 12): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 1 0 0 0 0 ]
h (4 : 5): [ 2 3 4 5 ]


tmp_i1 (4 : 12): [ 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 12): [ 0 0 0 0 ]
s = 2


ind (4 : 4): [ 2 2 2 2 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 12): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 2 2 2 2 ]
s = 1


tmp_i1 (4 : 4): [ 3 3 3 3 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (4 : 4): [ 3 3 3 3 ]


T2 (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 12): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


old1 (4 : 4): [ 4 4 4 4 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 2 2 2 2 ]
s = 1


tmp_i1 (4 : 4): [ 3 3 3 3 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 4 1 0 0 0 0 0 ]
tmp_i1 (4 : 4): [ 3 3 3 3 ]


old2 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (4 : 4): [ 4 4 4 4 ]
s = -1


new1 (4 : 4): [ 3 3 3 3 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (4 : 4): [ 0 0 0 0 ]
s = 1


new2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (4 : 12): [ 0 0 0 0 ]
s = 1


tmp_i1 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 1 1 1 1 ]


toll1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (4 : 4): [ 2 2 2 2 ]
s = 1


tmp_i1 (4 : 4): [ 3 3 3 3 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (4 : 4): [ 3 3 3 3 ]


toll2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (4 : 4): [ 4 4 4 4 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


a (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (4 : 4): [ 3 3 3 3 ]
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]


b (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (4 : 4): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (4 : 4): [ 4.000000070930582 4 4 4 ]
val = 0


S1 (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (4 : 4): [ 0 0 0 0 ]
T2 (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


a (4 : 4): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (4 : 4): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]


a (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (4 : 4): [ 1 1 1 1 ]
T2 (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


b (4 : 4): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (4 : 4): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


b (4 : 4): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
b (4 : 4): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


tmpm_d (4 x 2 : 4 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (4 x 2 : 4 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


m (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
complemento = 0


ind (0 : 4): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
ind (0 : 4): [ ]
val = 0


a (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (4 : 4): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
ind (0 : 4): [ ]
val = 0


b (4 : 4): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
b (4 : 4): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


tmpm_d (4 x 2 : 4 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (4 x 2 : 4 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


m (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
b (4 : 4): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
m (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
T2 (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


S2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
toll2 (4 : 4): [ 1 1 1 1 ]


tmp_d1 (4 : 4): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (4 : 4): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
val = 0

ind1 (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (4 : 4): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
toll2 (4 : 4): [ 1 1 1 1 ]


tmp_d1 (4 : 4): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (4 : 4): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
val = 0


ind2 (0 : 4): [ ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (4 : 4): [ 1 2 3 4 ]
ind2 (0 : 4): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
ind2 (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
tmp_i1 (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 4
ind2 (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 4
tmp_i1 (0 : 4): [ ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (0 : 4): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 1 1 1 1 ]
tmp_i1 (0 : 4): [ ]
val = -1.#INF


S2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 1 1 1 1 ]
ind (0 : 4): [ ]
val = 0


S2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (4 : 4): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
val = 0


ind (0 : 4): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (4 : 4): [ 1 1 1 1 ]
ind (0 : 4): [ ]
val = -1.#INF


S2 (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (4 : 4): [ 0 0 0 0 ]
S2 (4 : 4): [ 1 1 1 1 ]


S_out (4 : 4): [ 1 1 1 1 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
S_out (4 : 4): [ 1 1 1 1 ]
div = 2.000


S_out (4 : 4): [ 0.5 0.5 0.5 0.5 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (4421 interne); stringhe deallocate: 0 (4006 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
S_out (4 : 4): [ 0.5 0.5 0.5 0.5 ]
val = -1.#INF


indok (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 0 0 0 0
 ]
riga = 4
indok (4 : 4): [ 1 2 3 4 ]
val = 1


checkOUT (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 4
incr = 1


tmp_i1 (4 : 12): [ 1 2 3 4 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (4 : 12): [ 1 2 3 4 ]
indok (4 : 4): [ 1 2 3 4 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (4 : 12): [ 1 2 3 4 ]
st = 1
end = 4


indInf (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (4 : 4): [ 1 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (4 : 4): [ 1 2 3 4 ]
indx = 1


indInf (3 : 4): [ 2 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (3 : 4): [ 2 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 4): [ 2 3 4 ]
indx = 1


indInf (2 : 4): [ 3 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (2 : 4): [ 3 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 4): [ 3 4 ]
indx = 1


indInf (1 : 4): [ 4 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 4
indInf (1 : 4): [ 4 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 4): [ 4 ]
indx = 1


indInf (0 : 4): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 4): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
S_out (4 : 4): [ 0.5 0.5 0.5 0.5 ]
indok (4 : 4): [ 1 2 3 4 ]


tmp_d1 (4 : 4): [ 0.5 0.5 0.5 0.5 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (4 : 4): [ 0.5 0.5 0.5 0.5 ]


min = 0.5
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
S_out (4 : 4): [ 0.5 0.5 0.5 0.5 ]
indInf (0 : 4): [ ]
val = -1


S_out (4 : 4): [ 0.5 0.5 0.5 0.5 ]
------------------------------ Fine assegna1_vs_indx_d

155: InitVett_d
ris (4 : 4): [ 0 0 0 0 ]
val = 0


ris (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine InitVett_d

156: aggiungi_ms_riga_i	<=>	m[riga,] <- val # riga <= dim(m)[0] + 1
checkIN (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 0 0 0 0
 ]
riga = 4, val = 1


checkIN (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
------------------------------ Fine aggiungi_ms_riga_i

159: somma_vv_d	<=>	ris <- v1 + v2
S_out (4 : 4): [ 0.5 0.5 0.5 0.5 ]
ris (4 : 4): [ 0 0 0 0 ]


tmp_d1 (4 : 4): [ 0.5 0.5 0.5 0.5 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164
	 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164
	 0 0 0 0
 ]
riga = 4
tmp_d1 (4 : 4): [ 0.5 0.5 0.5 0.5 ]


ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164
	 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164
	 0.5 0.5 0.5 0.5
 ]
------------------------------ Fine aggiungi_mv_riga_d

168: somma_m_d	<=>	ris <- sum(m)
ris (4 x 4 : 4 x 4): [
	 0 0 0 0
	 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164
	 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164
	 0.5 0.5 0.5 0.5
 ]


ris: 4.893449218450531
------------------------------ Fine somma_m_d

173: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkIN (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]


aus (4 : 4): [ 4 4 4 4 ]
------------------------------ Fine somma_colonne_i

175: which_v_indxne_i	<=>	ris <- which(v != val)
aus (4 : 4): [ 4 4 4 4 ]
val = 0


tmp_i1 (4 : 12): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxne_i

186: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkIN (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]


rs (4 : 4): [ 4 4 4 4 ]
------------------------------ Fine somma_righe_i

188: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (4 : 4): [ 4 4 4 4 ]
decr = 0


ord_ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine ordine_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
r = 1
val = 0


I_add (4 : 16): [ 1 2 3 4 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
I (0 : 0): [ ]
I_add (4 : 16): [ 1 2 3 4 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (4 : 4): [ 1 2 3 4 ]


ris (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine elimina_doppi_i



ris (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
r = 2
val = 0


I_add (4 : 16): [ 1 2 3 4 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (4 : 4): [ 1 2 3 4 ]
I_add (4 : 16): [ 1 2 3 4 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (8 : 8): [ 1 2 3 4 1 2 3 4 ]


ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine elimina_doppi_i



ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
r = 3
val = 0


I_add (4 : 16): [ 1 2 3 4 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (4 : 8): [ 1 2 3 4 ]
I_add (4 : 16): [ 1 2 3 4 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (8 : 8): [ 1 2 3 4 1 2 3 4 ]


ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine elimina_doppi_i



ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
r = 4
val = 0


I_add (4 : 16): [ 1 2 3 4 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (4 : 8): [ 1 2 3 4 ]
I_add (4 : 16): [ 1 2 3 4 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (8 : 8): [ 1 2 3 4 1 2 3 4 ]


ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine elimina_doppi_i



ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine unione1_i

216: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
checkOUT (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
checkOUT (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
val1 = 0
val2 = 0


checkOUT (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

218: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
checkOUT (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
checkOUT (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
val1 = 0
val2 = 1


checkOUT (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

220: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkOUT (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]


aus (4 : 4): [ 4 4 4 4 ]
------------------------------ Fine somma_colonne_i

222: which_v_indxne_i	<=>	ris <- which(v != val)
aus (4 : 4): [ 4 4 4 4 ]
val = 0


tmp_i1 (4 : 12): [ 1 2 3 4 ]
------------------------------ Fine which_v_indxne_i

232: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkOUT (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]


rs (4 : 4): [ 4 4 4 4 ]
------------------------------ Fine somma_righe_i

234: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (4 : 4): [ 4 4 4 4 ]
decr = 0


ord_ind (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine ordine_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
r = 1
val = 0


I_add (4 : 16): [ 1 2 3 4 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 8): [ ]
I_add (4 : 16): [ 1 2 3 4 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (4 : 4): [ 1 2 3 4 ]


ris (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine elimina_doppi_i



ris (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
r = 2
val = 0


I_add (4 : 16): [ 1 2 3 4 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (4 : 4): [ 1 2 3 4 ]
I_add (4 : 16): [ 1 2 3 4 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (8 : 8): [ 1 2 3 4 1 2 3 4 ]


ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine elimina_doppi_i



ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
r = 3
val = 0


I_add (4 : 16): [ 1 2 3 4 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (4 : 8): [ 1 2 3 4 ]
I_add (4 : 16): [ 1 2 3 4 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (8 : 8): [ 1 2 3 4 1 2 3 4 ]


ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine elimina_doppi_i



ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (4 x 4 : 4 x 4): [
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
	 1 1 1 1
 ]
r = 4
val = 0


I_add (4 : 16): [ 1 2 3 4 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (4 : 8): [ 1 2 3 4 ]
I_add (4 : 16): [ 1 2 3 4 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (8 : 8): [ 1 2 3 4 1 2 3 4 ]


ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine elimina_doppi_i



ris (4 : 8): [ 1 2 3 4 ]
------------------------------ Fine unione1_i


Stringhe allocate: 5 (4526 interne); stringhe deallocate: 0 (4186 interne)

90: seq_i	<=>	ris <- seq(da, a, incr)
da = 2
a = 4
incr = 1


ris->indices (3 : 3): [ 2 3 4 ]
------------------------------ Fine seq_i


Stringhe allocate: 5 (4531 interne); stringhe deallocate: 0 (4201 interne)

143: vettore3s_d		<=>	ris <- c(el1, el2, el3)
el1 = 1.446724609225266, el2 = 0.6666666666666666, el3 = 1.223362304612633


prob_mod (3 : 3): [ 1.446724609225266 0.6666666666666666 1.223362304612633 ]
------------------------------ Fine vettore3s_d

145: assegna1_v_indxeq_d	<=>	v[which(v==val1)] <- val2
prob_mod (3 : 3): [ 1.446724609225266 0.6666666666666666 1.223362304612633 ]
prob_mod (3 : 3): [ 1.446724609225266 0.6666666666666666 1.223362304612633 ]
val1 = 0
val2 = 1.#QNAN


prob_mod (3 : 3): [ 1.446724609225266 0.6666666666666666 1.223362304612633 ]
------------------------------ Fine assegna1_v_indxeq_d

147: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
prob_mod (3 : 3): [ 1.446724609225266 0.6666666666666666 1.223362304612633 ]
complemento = 1


ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

153: copia_v_indx_d	<=>	ris <- v[indx]
prob_mod (3 : 3): [ 1.446724609225266 0.6666666666666666 1.223362304612633 ]
ind (3 : 3): [ 1 2 3 ]


tmp1_d (3 : 16): [ 1.446724609225266 0.6666666666666666 1.223362304612633 ]
------------------------------ Fine copia_v_indx_d

154: min_v_d	<=>	ris <- min(v)
tmp1_d (3 : 16): [ 1.446724609225266 0.6666666666666666 1.223362304612633 ]


min = 0.6666666666666666
------------------------------ Fine min_v_d

160: assegna1_v_indxNA_d	<=>	v1[which(is.na(v2))] <- val oppure v1[which(!is.na(v2))] <- val
prob_mod (3 : 3): [ 1.446724609225266 0.6666666666666666 1.223362304612633 ]
prob_mod (3 : 3): [ 1.446724609225266 0.6666666666666666 1.223362304612633 ]
val = 0
complemento = 0


prob_mod (3 : 3): [ 1.446724609225266 0.6666666666666666 1.223362304612633 ]
------------------------------ Fine assegna1_v_indxNA_d

162: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
prob_mod (3 : 3): [ 1.446724609225266 0.6666666666666666 1.223362304612633 ]
canc_NA = 0



ris: 3.336753580504565
------------------------------ Fine somma_v_d

162: dividi1_vs_d	<=>	v <- v / div
prob_mod (3 : 3): [ 1.446724609225266 0.6666666666666666 1.223362304612633 ]
div = 3.337


prob_mod (3 : 3): [ 0.4335725052272215 0.1997949955195244 0.3666324992532541 ]
------------------------------ Fine dividi1_vs_d

164: vettore3s_i		<=>	ris <- c(el1, el2, el3)
el1 = 1, el2 = 2, el3 = 3


tmp1_i (3 : 3): [ 1 2 3 ]
------------------------------ Fine vettore3s_i


*** sampleB_p ***

*** sample_p ***
tmp1_i (3 : 3): [ 1 2 3 ]
k = 1, replace = 0
prob_mod (3 : 3): [ 0.4335725052272215 0.1997949955195244 0.3666324992532541 ]


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (4531 interne); stringhe deallocate: 0 (4201 interne)


*** assign_nodes ***
35: copia_v_i	<=>	ris[st:end] <- v[st:end]
h (4 : 5): [ 2 3 4 5 ]
st = 1
end = 4


or_h (4 : 4): [ 2 3 4 5 ]
------------------------------ Fine copia_v_i

37: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 4
incr = 1


aus_h (4 : 4): [ 1 2 3 4 ]
------------------------------ Fine seq_i

43: InitVett_i
index (2 : 2): [ 79856016 2130706532 ]
val = 0


index (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_i

45: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


M_in (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

47: ordine_i	<=>	ris <- order(v, decreasing=decr)
M_in (2 : 2): [ 1 1 ]
decr = 1


Ord (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

52: riga_d	<=>	ris <- m[r,]
ris (2 x 4 : 2 x 4): [
	 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164
	 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164
 ]
r = 1

p (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
------------------------------ Fine riga_d

54: which_v_indxle_d	<=>	ris <- which(v<=val)
p (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
val = 0


tmp_i (0 : 4): [ ]
------------------------------ Fine which_v_indxle_d

61: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 0 0 0 0 ]
h (4 : 5): [ 2 3 4 5 ]


Sin_h (4 : 4): [ 0 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i

66: which_v_indxgt_i	<=>	ris <- which(v > val)
Sin_h (4 : 4): [ 0 0 0 0 ]
val = 4


ind (0 : 4): [ ]
------------------------------ Fine which_v_indxgt_i

72: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
p (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
aus_h (4 : 4): [ 1 2 3 4 ]


tmp_d (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
------------------------------ Fine assegna_v_indxNA_d

73: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
tmp_d (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
canc_NA = 0



ris: 1.446724609225266
------------------------------ Fine somma_v_d

74: dividi_vs_d	ris <- v / div
tmp_d (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
div = 1.447


p (4 : 4): [ 0.25 0.25 0.25 0.25 ]
------------------------------ Fine dividi_vs_d


*** sampleB_p ***

*** sample_p ***
h (4 : 5): [ 2 3 4 5 ]
k = 1, replace = 0
p (4 : 4): [ 0.25 0.25 0.25 0.25 ]


ris (1 : 1): [ 4 ]
*****************************************


Stringhe allocate: 5 (4586 interne); stringhe deallocate: 0 (4201 interne)

81: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
h (4 : 5): [ 2 3 4 5 ]
ris (1 : 1): [ 4 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 4
h (4 : 5): [ 2 3 4 5 ]


indx = 3
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
h (4 : 5): [ 2 3 4 5 ]
indx = 3


h (3 : 5): [ 2 3 5 ]
------------------------------ Fine elimina1_indx_i



h (3 : 5): [ 2 3 5 ]
------------------------------ Fine setdiff1_i

83: which_vv_eq_i	<=>	ris <- which(v1 == v2)
or_h (4 : 4): [ 2 3 4 5 ]
ris (1 : 1): [ 4 ]
2017: esiste_v_i	<=>	elem %IN% v
elem = 4
or_h (4 : 4): [ 2 3 4 5 ]


indx = 3
------------------------------ Fine esiste_v_i



tmp_i (1 : 4): [ 4 ]
------------------------------ Fine which_vv_eq_i

84: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
aus_h (4 : 4): [ 1 2 3 4 ]
tmp_i (1 : 4): [ 4 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 4
aus_h (4 : 4): [ 1 2 3 4 ]


indx = 4
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
aus_h (4 : 4): [ 1 2 3 4 ]
indx = 4


aus_h (3 : 4): [ 1 2 3 ]
------------------------------ Fine elimina1_indx_i



aus_h (3 : 4): [ 1 2 3 ]
------------------------------ Fine setdiff1_i

52: riga_d	<=>	ris <- m[r,]
ris (2 x 4 : 2 x 4): [
	 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164
	 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164
 ]
r = 2

p (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
------------------------------ Fine riga_d

54: which_v_indxle_d	<=>	ris <- which(v<=val)
p (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
val = 0


tmp_i (0 : 4): [ ]
------------------------------ Fine which_v_indxle_d

61: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 0 0 0 0 ]
h (3 : 5): [ 2 3 5 ]


Sin_h (3 : 4): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_i

66: which_v_indxgt_i	<=>	ris <- which(v > val)
Sin_h (3 : 4): [ 0 0 0 ]
val = 4


ind (0 : 4): [ ]
------------------------------ Fine which_v_indxgt_i

72: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
p (4 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
aus_h (3 : 4): [ 1 2 3 ]


tmp_d (3 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
------------------------------ Fine assegna_v_indxNA_d

73: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
tmp_d (3 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
canc_NA = 0



ris: 1.085043456918949
------------------------------ Fine somma_v_d

74: dividi_vs_d	ris <- v / div
tmp_d (3 : 4): [ 0.3616811523063164 0.3616811523063164 0.3616811523063164 ]
div = 1.085


p (3 : 4): [ 0.3333333333333333 0.3333333333333333 0.3333333333333333 ]
------------------------------ Fine dividi_vs_d


*** sampleB_p ***

*** sample_p ***
h (3 : 5): [ 2 3 5 ]
k = 1, replace = 0
p (3 : 4): [ 0.3333333333333333 0.3333333333333333 0.3333333333333333 ]


ris (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 5 (4586 interne); stringhe deallocate: 0 (4201 interne)

81: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
h (3 : 5): [ 2 3 5 ]
ris (1 : 1): [ 3 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 3
h (3 : 5): [ 2 3 5 ]


indx = 2
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
h (3 : 5): [ 2 3 5 ]
indx = 2


h (2 : 5): [ 2 5 ]
------------------------------ Fine elimina1_indx_i



h (2 : 5): [ 2 5 ]
------------------------------ Fine setdiff1_i

83: which_vv_eq_i	<=>	ris <- which(v1 == v2)
or_h (4 : 4): [ 2 3 4 5 ]
ris (1 : 1): [ 3 ]
2017: esiste_v_i	<=>	elem %IN% v
elem = 3
or_h (4 : 4): [ 2 3 4 5 ]


indx = 2
------------------------------ Fine esiste_v_i



tmp_i (1 : 4): [ 3 ]
------------------------------ Fine which_vv_eq_i

84: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
aus_h (3 : 4): [ 1 2 3 ]
tmp_i (1 : 4): [ 3 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 3
aus_h (3 : 4): [ 1 2 3 ]


indx = 3
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
aus_h (3 : 4): [ 1 2 3 ]
indx = 3


aus_h (2 : 4): [ 1 2 ]
------------------------------ Fine elimina1_indx_i



aus_h (2 : 4): [ 1 2 ]
------------------------------ Fine setdiff1_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
ris (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 1
val = 1


ind (1 : 4): [ 2 ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
index (2 : 2): [ 4 3 ]
ind (1 : 4): [ 2 ]


co (1 : 1): [ 3 ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
ri (1 : 1): [ 4 ]
co (1 : 1): [ 3 ]
val = 1


Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

107: esiste_v_i	<=>	elem %IN% v
elem = 1
ris->indices (1 : 1): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

109: accoda1_vv_i	<=>	v1 <- c(v1, v2)
ris (0 : 1): [ ]
ri (1 : 1): [ 4 ]


ris (1 : 1): [ 4 ]
------------------------------ Fine accoda_vv_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
ris (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 2
val = 1


ind (1 : 4): [ 1 ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
index (2 : 2): [ 4 3 ]
ind (1 : 4): [ 1 ]


co (1 : 1): [ 4 ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]
ri (1 : 1): [ 3 ]
co (1 : 1): [ 4 ]
val = 1


Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

107: esiste_v_i	<=>	elem %IN% v
elem = 2
ris->indices (1 : 1): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 5 (4596 interne); stringhe deallocate: 0 (4266 interne)

332: accoda1_vv_i	<=>	v1 <- c(v1, v2)
h_new (1 : 2): [ 1 ]
ris (1 : 1): [ 4 ]


h_new (2 : 2): [ 1 4 ]
------------------------------ Fine accoda_vv_i

334: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]


Sout (5 : 5): [ 1 0 1 1 0 ]
------------------------------ Fine somma_colonne_i

336: max_v_i		<=>	ris <- max(v)
Sout (5 : 5): [ 1 0 1 1 0 ]


max = 1
------------------------------ Fine max_v_i

338: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 2
incr = 1


tmp2_i (3 : 3): [ 0 1 2 ]
------------------------------ Fine seq_i


*** hist1 ***
Sout (5 : 5): [ 1 0 1 1 0 ]
tmp2_i (3 : 3): [ 0 1 2 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
tmp1_i (2 : 3): [ 1 2 ]
val = 0


tmp1_i (2 : 3): [ 0 0 ]
------------------------------ Fine InitVett_i



tmp1_i (2 : 3): [ 2 3 ]

Stringhe allocate: 5 (4596 interne); stringhe deallocate: 0 (4266 interne)

340: promuovi_i	(implicita)
tmp1_i (2 : 3): [ 2 3 ]
ATTENZIONE (promuovi_i, linea connectivity_modular.c # 340): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

tmp1_d (2 : 16): [ 2 3 ]
------------------------------ Fine promuovi_i

341: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
Freq_out (7 : 7): [ 4 1 0 0 0 0 0 ]
start = 1
end = 2
tmp1_d (2 : 16): [ 2 3 ]


Freq_out (7 : 7): [ 2 3 0 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

343: somma_righe_i	<=>	ris <- apply(m, 1, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]


Sin (5 : 5): [ 1 0 1 1 0 ]
------------------------------ Fine somma_righe_i

345: max_v_i		<=>	ris <- max(v)
Sin (5 : 5): [ 1 0 1 1 0 ]


max = 1
------------------------------ Fine max_v_i

347: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 2
incr = 1


tmp2_i (3 : 3): [ 0 1 2 ]
------------------------------ Fine seq_i


*** hist1 ***
Sin (5 : 5): [ 1 0 1 1 0 ]
tmp2_i (3 : 3): [ 0 1 2 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
tmp1_i (2 : 3): [ 2 3 ]
val = 0


tmp1_i (2 : 3): [ 0 0 ]
------------------------------ Fine InitVett_i



tmp1_i (2 : 3): [ 2 3 ]

Stringhe allocate: 5 (4597 interne); stringhe deallocate: 0 (4267 interne)

349: promuovi_i	(implicita)
tmp1_i (2 : 3): [ 2 3 ]
ATTENZIONE (promuovi_i, linea connectivity_modular.c # 349): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

tmp1_d (2 : 16): [ 2 3 ]
------------------------------ Fine promuovi_i

350: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
Freq_in (7 : 7): [ 4 1 0 0 0 0 0 ]
start = 1
end = 2
tmp1_d (2 : 16): [ 2 3 ]


Freq_in (7 : 7): [ 2 3 0 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

110: somma_righe_i	<=>	ris <- apply(m, 1, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]


Sin (5 : 5): [ 1 0 1 1 0 ]
------------------------------ Fine somma_righe_i

112: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]


Sout (5 : 5): [ 1 0 1 1 0 ]
------------------------------ Fine somma_colonne_i


*** cluster_coeff ***
19: trasponi_i	<=>	ris <- t(m)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]


tmpm_i (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine trasponi_i

20: somma1_m_i	<=>	m1 <- m1 + m2
tmpm_i (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]


tmpm_i (5 x 5 : 5 x 5): [
	 2 0 0 0 0
	 0 0 0 0 0
	 0 0 0 2 0
	 0 0 2 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine somma1_m_i

22: which_m_indxne_i	<=>	ris <- which(m!=val)
tmpm_i (5 x 5 : 5 x 5): [
	 2 0 0 0 0
	 0 0 0 0 0
	 0 0 0 2 0
	 0 0 2 0 0
	 0 0 0 0 0
 ]
val = 0


ind (3 : 25): [ 1 14 18 ]
------------------------------ Fine which_m_indxne_i

24: assegna1_ms_indx_i	<=>	m[indx] = val
tmpm_i (5 x 5 : 5 x 5): [
	 2 0 0 0 0
	 0 0 0 0 0
	 0 0 0 2 0
	 0 0 2 0 0
	 0 0 0 0 0
 ]
ind (3 : 25): [ 1 14 18 ]
val = 1


tmpm_i (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_ms_indx_i

26: assegna1_s_diag_i	<=>	diag_i(m) <- s
tmpm_i (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]
val = 0


tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_s_diag_i

31: InitVett_d
ris (5 : 5): [ 0 0 0 0 0 ]
val = 0


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]
riga = 1


ris: 0
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]
r = 1
val = 0


neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]
riga = 2


ris: 0
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]
r = 2
val = 0


neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]
riga = 3


ris: 1
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]
r = 3
val = 0


neighbours (1 : 25): [ 4 ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]
riga = 4


ris: 1
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]
r = 4
val = 0


neighbours (1 : 25): [ 3 ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]
riga = 5


ris: 0
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]
r = 5
val = 0


neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

69: media_v_d	<=>	ris <- mean(v)
ris (5 : 5): [ 0 0 0 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 5 (4613 interne); stringhe deallocate: 0 (4283 interne)


*** module1 ***
44: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp1_i (2 : 2): [ 1 2 ]
------------------------------ Fine seq_i


*** sampleB ***

***sample***
tmp1_i (2 : 2): [ 1 2 ]
k = 1, replace = 0


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 5 (4628 interne); stringhe deallocate: 0 (4283 interne)


Stringhe allocate: 5 (4628 interne); stringhe deallocate: 0 (4283 interne)


*** mod1 ***
18: InitMatr_i
ris (2 x 2 : 2 x 2): [
	 79849464 1936024687
	 1851747943 25390
 ]
val = 0


ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i

21: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


x (1 : 1): [ 1 ]
------------------------------ Fine seq_i

23: somma_vs_i	<=>	ris <- v + s
x (1 : 1): [ 1 ]
s = 1


tmp1_i (1 : 1): [ 2 ]
------------------------------ Fine somma_vs_i

24: cbind2v_i	<=>	ris <- cbind(v1, v2)
x (1 : 1): [ 1 ]
tmp1_i (1 : 1): [ 2 ]


ind (1 x 2 : 1 x 2): [
	 1 2
 ]
------------------------------ Fine cbind2v_i

26: assegna1_ms_indx2_i	<=>	m[indxm] <- val
ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
ind (1 x 2 : 1 x 2): [
	 1 2
 ]
val = 1


ris (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
------------------------------ Fine assegna1_ms_indx2_i

29: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 1, el2 = -1


tmp1_i (2 : 4): [ 1 -1 ]
------------------------------ Fine vettore2s_i


*** sampleB ***

***sample***
tmp1_i (2 : 4): [ 1 -1 ]
k = 1, replace = 0


ris (1 : 1): [ -1 ]
*****************************************


Stringhe allocate: 5 (4653 interne); stringhe deallocate: 0 (4283 interne)


Stringhe allocate: 5 (4653 interne); stringhe deallocate: 0 (4283 interne)


Stringhe allocate: 5 (4653 interne); stringhe deallocate: 0 (4303 interne)


*** probmod ***
46: InitMatr_i
checkOUT (2 x 2 : 2 x 2): [
	 79864080 1936024687
	 1845519150 25390
 ]
val = 0


checkOUT (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i

48: InitMatr_i
checkIN (2 x 2 : 2 x 2): [
	 79853472 1936024687
	 1851747943 25390
 ]
val = 0


checkIN (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i

50: InitMatr_d
ris (2 x 2 : 2 x 2): [
	 4.544630548250291e+223 0
	 5.387842965589561e-310 0.786724099350586
 ]
val = 0


ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_d

52: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


M_in (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

54: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


M_out (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

57: InitMatr_i
memory (2 x 3 : 2 x 3): [
	 79849248 0 79037616
	 4 0 3
 ]
val = -2147483648


memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 1 0 1 1 0 ]
h (2 : 5): [ 2 5 ]


tmp_i1 (2 : 6): [ 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


ind (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (2 : 2): [ 1 1 ]


T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 2 3 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 1 1 ]


old1 (2 : 2): [ 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 2 3 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


old2 (2 : 2): [ 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (2 : 2): [ 2 2 ]
s = -1


new1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (2 : 2): [ 3 3 ]
s = 1


new2 (2 : 2): [ 4 4 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 1 1 ]


toll1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (2 : 2): [ 2 2 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (2 : 2): [ 1 1 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (2 : 2): [ 6.218345866832272e+175 5.387842123834802e-310 ]
val = 0


S1 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (2 : 2): [ 3 3 ]
T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]


a (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]


a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (2 : 2): [ 4 4 ]
T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]


b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]


b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.6148363606041851 0.3851636393958149
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.6148363606041851 0.3851636393958149
 ]


m (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]
complemento = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
ind (0 : 2): [ ]
val = 0


a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
ind (0 : 2): [ ]
val = 0


b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.6148363606041851 0.3851636393958149
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.6148363606041851 0.3851636393958149
 ]


m (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
m (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]


S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
toll2 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.3851636393958149 -0.3851636393958149 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (2 : 2): [ -0.3851636393958149 -0.3851636393958149 ]
val = 0

ind1 (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
toll2 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]
val = 0


ind2 (0 : 2): [ ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (2 : 2): [ 1 2 ]
ind2 (0 : 2): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (0 : 2): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
tmp_i1 (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
ind (0 : 2): [ ]
val = 0


S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]
val = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
ind (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (2 : 2): [ 0 0 ]
S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]


ris (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
div = 2.000


ris (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (4813 interne); stringhe deallocate: 0 (4403 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
ris (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
val = -1.#INF


indok (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
indok (2 : 2): [ 1 2 ]
val = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (2 : 6): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (2 : 6): [ 1 2 ]
st = 1
end = 2


indInf (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 2): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
ris (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]


min = 0.08504345691894905
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
indInf (0 : 2): [ ]
val = -1


ris (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine assegna1_vs_indx_d

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 0 1 1 0 ]
h (2 : 5): [ 2 5 ]


tmp_i1 (2 : 6): [ 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


ind (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (2 : 2): [ 1 1 ]


T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 2 3 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 1 1 ]


old1 (2 : 2): [ 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 2 3 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


old2 (2 : 2): [ 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (2 : 2): [ 2 2 ]
s = -1


new1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (2 : 2): [ 3 3 ]
s = 1


new2 (2 : 2): [ 4 4 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 1 1 ]


toll1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (2 : 2): [ 2 2 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (2 : 2): [ 1 1 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (2 : 2): [ 6.218345866840505e+175 5.387842123834802e-310 ]
val = 0


S1 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (2 : 2): [ 3 3 ]
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (2 : 2): [ 4 4 ]
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (2 : 2): [ 5.842414621812633e-308 0 ]
val = 0


S2 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0 0 ]
ind (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (2 : 2): [ 0 0 ]
S2 (2 : 2): [ 0 0 ]


ris (2 : 2): [ 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (2 : 2): [ 0 0 ]
div = 2.000


ris (2 : 2): [ 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (4918 interne); stringhe deallocate: 0 (4488 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
ris (2 : 2): [ 0 0 ]
val = -1.#INF


indok (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
indok (2 : 2): [ 1 2 ]
val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (2 : 6): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (2 : 6): [ 1 2 ]
st = 1
end = 2


indInf (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 2): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
ris (2 : 2): [ 0 0 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 2): [ 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (2 : 2): [ 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (2 : 2): [ 0 0 ]
indInf (0 : 2): [ ]
val = -1


ris (2 : 2): [ 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
ris (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
ris (2 : 2): [ 0 0 ]


tmp_d1 (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
tmp_d1 (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]


ris (2 x 2 : 2 x 2): [
	 0.08504345691894905 0.08504345691894905
	 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 1 0 1 1 0 ]
h (2 : 5): [ 2 5 ]


tmp_i1 (2 : 6): [ 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


ind (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (2 : 2): [ 1 1 ]


T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 2 3 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 1 1 ]


old1 (2 : 2): [ 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 2 3 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


old2 (2 : 2): [ 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (2 : 2): [ 2 2 ]
s = -1


new1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (2 : 2): [ 3 3 ]
s = 1


new2 (2 : 2): [ 4 4 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 1 1 ]


toll1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (2 : 2): [ 2 2 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (2 : 2): [ 1 1 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (2 : 2): [ 6.218345866833171e+175 3.125653738386077e-005 ]
val = 0


S1 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (2 : 2): [ 3 3 ]
T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]


a (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]


a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (2 : 2): [ 4 4 ]
T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]


b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]


b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.6148363606041851 0.3851636393958149
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.6148363606041851 0.3851636393958149
 ]


m (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]
complemento = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
ind (0 : 2): [ ]
val = 0


a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
ind (0 : 2): [ ]
val = 0


b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.6148363606041851 0.3851636393958149
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.6148363606041851 0.3851636393958149
 ]


m (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
m (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]


S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
toll2 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.3851636393958149 -0.3851636393958149 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (2 : 2): [ -0.3851636393958149 -0.3851636393958149 ]
val = 0

ind1 (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
toll2 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]
val = 0


ind2 (0 : 2): [ ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (2 : 2): [ 1 2 ]
ind2 (0 : 2): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (0 : 2): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
tmp_i1 (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
ind (0 : 2): [ ]
val = 0


S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]
val = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
ind (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (2 : 2): [ 0 0 ]
S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]


ris (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
div = 2.000


ris (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (5018 interne); stringhe deallocate: 0 (4588 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
ris (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
val = -1.#INF


indok (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2
indok (2 : 2): [ 1 2 ]
val = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (2 : 6): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (2 : 6): [ 1 2 ]
st = 1
end = 2


indInf (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 2): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
ris (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]


min = 0.08504345691894905
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
indInf (0 : 2): [ ]
val = -1


ris (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine assegna1_vs_indx_d

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 0 1 1 0 ]
h (2 : 5): [ 2 5 ]


tmp_i1 (2 : 6): [ 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


ind (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (2 : 2): [ 1 1 ]


T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 2 3 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 1 1 ]


old1 (2 : 2): [ 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 2 3 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


old2 (2 : 2): [ 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (2 : 2): [ 2 2 ]
s = -1


new1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (2 : 2): [ 3 3 ]
s = 1


new2 (2 : 2): [ 4 4 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 1 1 ]


toll1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (2 : 2): [ 2 2 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (2 : 2): [ 1 1 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (2 : 2): [ 6.218345866840887e+175 -3.125653738386077e-005 ]
val = 0


S1 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (2 : 2): [ 3 3 ]
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (2 : 2): [ 4 4 ]
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (2 : 2): [ 6.218345866841472e+175 5.387842123834802e-310 ]
val = 0


S2 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0 0 ]
ind (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (2 : 2): [ 0 0 ]
S2 (2 : 2): [ 0 0 ]


ris (2 : 2): [ 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (2 : 2): [ 0 0 ]
div = 2.000


ris (2 : 2): [ 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (5103 interne); stringhe deallocate: 0 (4673 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
ris (2 : 2): [ 0 0 ]
val = -1.#INF


indok (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2
indok (2 : 2): [ 1 2 ]
val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (2 : 6): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (2 : 6): [ 1 2 ]
st = 1
end = 2


indInf (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 2): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
ris (2 : 2): [ 0 0 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 2): [ 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (2 : 2): [ 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (2 : 2): [ 0 0 ]
indInf (0 : 2): [ ]
val = -1


ris (2 : 2): [ 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
ris (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
ris (2 : 2): [ 0 0 ]


tmp_d1 (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 2 : 2 x 2): [
	 0.08504345691894905 0.08504345691894905
	 0 0
 ]
riga = 2
tmp_d1 (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]


ris (2 x 2 : 2 x 2): [
	 0.08504345691894905 0.08504345691894905
	 0.08504345691894905 0.08504345691894905
 ]
------------------------------ Fine aggiungi_mv_riga_d

168: somma_m_d	<=>	ris <- sum(m)
ris (2 x 2 : 2 x 2): [
	 0.08504345691894905 0.08504345691894905
	 0.08504345691894905 0.08504345691894905
 ]


ris: 0.3401738276757962
------------------------------ Fine somma_m_d

173: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


aus (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

175: which_v_indxne_i	<=>	ris <- which(v != val)
aus (2 : 2): [ 2 2 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine which_v_indxne_i

186: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


rs (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

188: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (2 : 2): [ 2 2 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 1
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
I (0 : 0): [ ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 2
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 2 ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i

216: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
val1 = 0
val2 = 0


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

218: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
val1 = 0
val2 = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

220: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


aus (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

222: which_v_indxne_i	<=>	ris <- which(v != val)
aus (2 : 2): [ 2 2 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine which_v_indxne_i

232: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


rs (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

234: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (2 : 2): [ 2 2 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 1
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 4): [ ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 2
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 2 ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i


Stringhe allocate: 5 (5168 interne); stringhe deallocate: 0 (4813 interne)


Stringhe allocate: 5 (5173 interne); stringhe deallocate: 0 (4828 interne)


*** module2 ***
44: seq_i	<=>	ris <- seq(da, a, incr)
da = 2
a = 2
incr = 1


tmp1_i (1 : 1): [ 2 ]
------------------------------ Fine seq_i


*** sampleB ***
58: rep_v_i	<=>	ris <- rep(v, rip)
tmp1_i (1 : 1): [ 2 ]
rip = 1


ris (1 : 1): [ 2 ]
------------------------------ Fine rep_v_i


Stringhe allocate: 5 (5183 interne); stringhe deallocate: 0 (4828 interne)


*** mod2 ***
17: InitMatr_i
ris (2 x 2 : 2 x 2): [
	 79865952 99
	 778334061 0
 ]
val = 0


ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i


Stringhe allocate: 5 (5188 interne); stringhe deallocate: 0 (4828 interne)


*** probmod ***
46: InitMatr_i
checkOUT (2 x 2 : 2 x 2): [
	 79852928 1918959715
	 778657656 25390
 ]
val = 0


checkOUT (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i

48: InitMatr_i
checkIN (2 x 2 : 2 x 2): [
	 79866264 1918959715
	 778334061 25390
 ]
val = 0


checkIN (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i

50: InitMatr_d
ris (2 x 2 : 2 x 2): [
	 6.218345866837839e+175 0
	 5.387842123834802e-310 0
 ]
val = 0


ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_d

52: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (2 x 2 : 2 x 2): [
	 0 0
	 1 0
 ]


M_in (2 : 2): [ 0 1 ]
------------------------------ Fine somma_righe_i

54: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (2 x 2 : 2 x 2): [
	 0 0
	 1 0
 ]


M_out (2 : 2): [ 1 0 ]
------------------------------ Fine somma_colonne_i

57: InitMatr_i
memory (2 x 3 : 2 x 3): [
	 79858440 0 79038208
	 2 0 0
 ]
val = -2147483648


memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 1 0 1 1 0 ]
h (2 : 5): [ 2 5 ]


tmp_i1 (2 : 6): [ 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


ind (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (2 : 2): [ 1 1 ]


T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 2 3 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 1 1 ]


old1 (2 : 2): [ 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 2 3 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


old2 (2 : 2): [ 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (2 : 2): [ 2 2 ]
s = -1


new1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (2 : 2): [ 3 3 ]
s = 1


new2 (2 : 2): [ 4 4 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 1 1 ]


toll1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (2 : 2): [ 2 2 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (2 : 2): [ 1 1 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (2 : 2): [ 6.218345866827362e+175 5.387842123834802e-310 ]
val = 0


S1 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (2 : 2): [ 3 3 ]
T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]


a (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]


a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (2 : 2): [ 4 4 ]
T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]


b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]


b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.6148363606041851 0.3851636393958149
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.6148363606041851 0.3851636393958149
 ]


m (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]
complemento = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
ind (0 : 2): [ ]
val = 0


a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
ind (0 : 2): [ ]
val = 0


b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.6148363606041851 0.3851636393958149
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.6148363606041851 0.3851636393958149
 ]


m (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
m (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]


S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
toll2 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.3851636393958149 -0.3851636393958149 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (2 : 2): [ -0.3851636393958149 -0.3851636393958149 ]
val = 0

ind1 (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
toll2 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]
val = 0


ind2 (0 : 2): [ ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (2 : 2): [ 1 2 ]
ind2 (0 : 2): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (0 : 2): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
tmp_i1 (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
ind (0 : 2): [ ]
val = 0


S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]
val = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
ind (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (2 : 2): [ 0 0 ]
S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]


ris (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
div = 2.000


ris (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (5348 interne); stringhe deallocate: 0 (4928 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
ris (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
val = -1.#INF


indok (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
indok (2 : 2): [ 1 2 ]
val = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (2 : 6): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (2 : 6): [ 1 2 ]
st = 1
end = 2


indInf (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 2): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
ris (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]


min = 0.08504345691894905
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
indInf (0 : 2): [ ]
val = -1


ris (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine assegna1_vs_indx_d

155: InitVett_d
S_in (2 : 2): [ 6.218345866838919e+175 2.048428433988699 ]
val = 0


S_in (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

156: aggiungi_ms_riga_i	<=>	m[riga,] <- val # riga <= dim(m)[0] + 1
checkIN (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1, val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
------------------------------ Fine aggiungi_ms_riga_i

159: somma_vv_d	<=>	ris <- v1 + v2
ris (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
S_in (2 : 2): [ 0 0 ]


tmp_d1 (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
tmp_d1 (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]


ris (2 x 2 : 2 x 2): [
	 0.08504345691894905 0.08504345691894905
	 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

119: InitVett_d
ris (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
val = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

122: InitVett_i
tmp_i1 (2 : 6): [ 1 2 ]
val = 1


tmp_i1 (2 : 6): [ 1 1 ]
------------------------------ Fine InitVett_i

123: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2
tmp_i1 (2 : 6): [ 1 1 ]


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine aggiungi_mv_riga_i

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 0 1 1 0 ]
h (2 : 5): [ 2 5 ]


tmp_i1 (2 : 6): [ 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


ind (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (2 : 2): [ 1 1 ]


T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 2 3 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 1 1 ]


old1 (2 : 2): [ 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 2 3 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


old2 (2 : 2): [ 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (2 : 2): [ 2 2 ]
s = -1


new1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (2 : 2): [ 3 3 ]
s = 1


new2 (2 : 2): [ 4 4 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 1 1 ]


toll1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (2 : 2): [ 2 2 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (2 : 2): [ 1 1 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (2 : 2): [ 6.218345866833357e+175 3.125653738386077e-005 ]
val = 0


S1 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (2 : 2): [ 3 3 ]
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (2 : 2): [ 4 4 ]
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (2 : 2): [ 5.842414621812633e-308 0 ]
val = 0


S2 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0 0 ]
ind (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (2 : 2): [ 0 0 ]
S2 (2 : 2): [ 0 0 ]


S_in (2 : 2): [ 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
S_in (2 : 2): [ 0 0 ]
div = 2.000


S_in (2 : 2): [ 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (5453 interne); stringhe deallocate: 0 (5013 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
S_in (2 : 2): [ 0 0 ]
val = -1.#INF


indok (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2
indok (2 : 2): [ 1 2 ]
val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (2 : 6): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (2 : 6): [ 1 2 ]
st = 1
end = 2


indInf (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 2): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
S_in (2 : 2): [ 0 0 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 2): [ 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (2 : 2): [ 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
S_in (2 : 2): [ 0 0 ]
indInf (0 : 2): [ ]
val = -1


S_in (2 : 2): [ 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
ris (2 : 2): [ 0 0 ]
S_in (2 : 2): [ 0 0 ]


tmp_d1 (2 : 2): [ 0 0 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 2 : 2 x 2): [
	 0.08504345691894905 0.08504345691894905
	 0 0
 ]
riga = 2
tmp_d1 (2 : 2): [ 0 0 ]


ris (2 x 2 : 2 x 2): [
	 0.08504345691894905 0.08504345691894905
	 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

168: somma_m_d	<=>	ris <- sum(m)
ris (2 x 2 : 2 x 2): [
	 0.08504345691894905 0.08504345691894905
	 0 0
 ]


ris: 0.1700869138378981
------------------------------ Fine somma_m_d

173: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


aus (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

175: which_v_indxne_i	<=>	ris <- which(v != val)
aus (2 : 2): [ 2 2 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine which_v_indxne_i

186: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


rs (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

188: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (2 : 2): [ 2 2 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 1
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
I (0 : 0): [ ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 2
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 2 ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i

216: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
val1 = 0
val2 = 0


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

218: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
val1 = 0
val2 = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

220: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


aus (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

222: which_v_indxne_i	<=>	ris <- which(v != val)
aus (2 : 2): [ 2 2 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine which_v_indxne_i

232: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


rs (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

234: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (2 : 2): [ 2 2 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 1
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 4): [ ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 2
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 2 ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i


Stringhe allocate: 5 (5518 interne); stringhe deallocate: 0 (5153 interne)


Stringhe allocate: 5 (5523 interne); stringhe deallocate: 0 (5163 interne)


*** module3 ***
51: seq_i	<=>	ris <- seq(da, a, incr)
da = 2
a = 2
incr = 1


tmp1_i (1 : 1): [ 2 ]
------------------------------ Fine seq_i


*** sampleB ***
58: rep_v_i	<=>	ris <- rep(v, rip)
tmp1_i (1 : 1): [ 2 ]
rip = 1


ris (1 : 1): [ 2 ]
------------------------------ Fine rep_v_i


Stringhe allocate: 5 (5533 interne); stringhe deallocate: 0 (5163 interne)

54: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


tmp1_i (1 : 1): [ 1 ]
------------------------------ Fine seq_i


*** sampleB ***
58: rep_v_i	<=>	ris <- rep(v, rip)
tmp1_i (1 : 1): [ 1 ]
rip = 1


ris (1 : 1): [ 1 ]
------------------------------ Fine rep_v_i


Stringhe allocate: 5 (5538 interne); stringhe deallocate: 0 (5163 interne)


*** mod3 ***
33: InitMatr_i
ris (2 x 2 : 2 x 2): [
	 79864248 1918959715
	 778334061 25390
 ]
val = 0


ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i

34: copia_v_d	<=>	ris[st:end] <- v[st:end]
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
st = 1
end = 7


STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
------------------------------ Fine copia_v_d

35: copia_v_d	<=>	ris[st:end] <- v[st:end]
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
st = 1
end = 7


STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
------------------------------ Fine copia_v_d

39: segmento_v_d	<=>	ris <- v[st:end]
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
start = 2
end = 2


tmp1_d (1 : 1): [ 3.614836360604185 ]
------------------------------ Fine segmento_v_d

40: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
tmp1_d (1 : 1): [ 3.614836360604185 ]
canc_NA = 1



ris: 3.614836360604185
------------------------------ Fine somma_v_d

43: segmento_v_d	<=>	ris <- v[st:end]
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
start = 2
end = 2


p (1 : 1): [ 3.614836360604185 ]
------------------------------ Fine segmento_v_d

44: dividi1_vs_d	<=>	v <- v / div
p (1 : 1): [ 3.614836360604185 ]
div = 3.615


p (1 : 1): [ 1 ]
------------------------------ Fine dividi1_vs_d

61: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


tmp1_i (1 : 1): [ 1 ]
------------------------------ Fine seq_i


*** sampleB_p ***
25: rep_v_i	<=>	ris <- rep(v, rip)
tmp1_i (1 : 1): [ 1 ]
rip = 1


ris (1 : 1): [ 1 ]
------------------------------ Fine rep_v_i

64: somma_v_i	<=>	ris <- sum(v, na.rm=canc_NA)
ris (1 : 1): [ 1 ]
canc_NA = 0



ris: 1
------------------------------ Fine somma_v_i

131: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


tmp1_i (1 : 1): [ 1 ]
------------------------------ Fine seq_i

133: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
tmp1_i (1 : 1): [ 1 ]
scalare_i (1 : 1): [ 2 ]
val = 1


ris (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

135: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


indS (1 : 1): [ 1 ]
------------------------------ Fine seq_i

137: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


tmp2_i (1 : 1): [ 1 ]
------------------------------ Fine seq_i

138: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp2_i (1 : 1): [ 1 ]
indS (1 : 1): [ 1 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp2_i (1 : 1): [ 1 ]
st = 1
end = 1


indBS (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indBS (1 : 1): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indBS (1 : 1): [ 1 ]
indx = 1


indBS (0 : 1): [ ]
------------------------------ Fine elimina1_indx_i



indBS (0 : 1): [ ]
------------------------------ Fine setdiff_i



*****************************************
*****************************************


Stringhe allocate: 5 (5598 interne); stringhe deallocate: 0 (5218 interne)


*** probmod ***
46: InitMatr_i
checkOUT (2 x 2 : 2 x 2): [
	 79866624 1918959715
	 771777326 1056989998
 ]
val = 0


checkOUT (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i

48: InitMatr_i
checkIN (2 x 2 : 2 x 2): [
	 79866576 1918959715
	 771777326 25390
 ]
val = 0


checkIN (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i

50: InitMatr_d
ris (2 x 2 : 2 x 2): [
	 6.218345866837586e+175 0.7867244574868211
	 3.125653738386077e-005 0.7867244574868211
 ]
val = 0


ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_d

52: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


M_in (2 : 2): [ 1 0 ]
------------------------------ Fine somma_righe_i

54: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


M_out (2 : 2): [ 0 1 ]
------------------------------ Fine somma_colonne_i

57: InitMatr_i
memory (2 x 3 : 2 x 3): [
	 79849488 0 79038320
	 1 0 2
 ]
val = -2147483648


memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

119: InitVett_d
S_out (2 : 2): [ 3.28723948460916e-085 5.38784212246792e-310 ]
val = 0


S_out (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

122: InitVett_i
tmp_i1 (2 : 6): [ 79858440 1 ]
val = 1


tmp_i1 (2 : 6): [ 1 1 ]
------------------------------ Fine InitVett_i

123: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
checkOUT (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
tmp_i1 (2 : 6): [ 1 1 ]


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_i

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 0 1 1 0 ]
h (2 : 5): [ 2 5 ]


tmp_i1 (2 : 6): [ 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


ind (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (2 : 2): [ 1 1 ]


T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 2 3 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 1 1 ]


old1 (2 : 2): [ 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 2 3 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


old2 (2 : 2): [ 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (2 : 2): [ 2 2 ]
s = -1


new1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (2 : 2): [ 3 3 ]
s = 1


new2 (2 : 2): [ 4 4 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 1 1 ]


toll1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (2 : 2): [ 2 2 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (2 : 2): [ 1 1 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (2 : 2): [ 6.218345866839622e+175 5.387842123834802e-310 ]
val = 0


S1 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (2 : 2): [ 3 3 ]
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (2 : 2): [ 4 4 ]
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (2 : 2): [ 3.088571301762875e-005 0.6148363606041851 ]
val = 0


S2 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0 0 ]
ind (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (2 : 2): [ 0 0 ]
S2 (2 : 2): [ 0 0 ]


ris (2 : 2): [ 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (2 : 2): [ 0 0 ]
div = 2.000


ris (2 : 2): [ 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (5748 interne); stringhe deallocate: 0 (5303 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
ris (2 : 2): [ 0 0 ]
val = -1.#INF


indok (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
indok (2 : 2): [ 1 2 ]
val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (2 : 6): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (2 : 6): [ 1 2 ]
st = 1
end = 2


indInf (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 2): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
ris (2 : 2): [ 0 0 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 2): [ 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (2 : 2): [ 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (2 : 2): [ 0 0 ]
indInf (0 : 2): [ ]
val = -1


ris (2 : 2): [ 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
S_out (2 : 2): [ 0 0 ]
ris (2 : 2): [ 0 0 ]


tmp_d1 (2 : 2): [ 0 0 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
tmp_d1 (2 : 2): [ 0 0 ]


ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 1 0 1 1 0 ]
h (2 : 5): [ 2 5 ]


tmp_i1 (2 : 6): [ 0 0 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


ind (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (2 : 2): [ 1 1 ]


T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 2 3 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 1 1 ]


old1 (2 : 2): [ 2 2 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 2 3 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


old2 (2 : 2): [ 3 3 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (2 : 2): [ 2 2 ]
s = -1


new1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (2 : 2): [ 3 3 ]
s = 1


new2 (2 : 2): [ 4 4 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 0 0 ]
s = 1


tmp_i1 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 1 1 ]


toll1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (2 : 2): [ 2 2 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (2 : 2): [ 1 1 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (2 : 2): [ 6.218345866829471e+175 5.387842123834802e-310 ]
val = 0


S1 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (2 : 2): [ 3 3 ]
T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]


a (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]


a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (2 : 2): [ 4 4 ]
T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]


b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]


b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.6148363606041851 0.3851636393958149
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.6148363606041851 0.3851636393958149
 ]


m (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]
complemento = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
ind (0 : 2): [ ]
val = 0


a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
ind (0 : 2): [ ]
val = 0


b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.6148363606041851 0.3851636393958149
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.6148363606041851 0.3851636393958149
	 0.6148363606041851 0.3851636393958149
 ]


m (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
m (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]


S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (2 : 2): [ 0.6148363606041851 0.6148363606041851 ]
toll2 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.3851636393958149 -0.3851636393958149 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (2 : 2): [ -0.3851636393958149 -0.3851636393958149 ]
val = 0

ind1 (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
toll2 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]
val = 0


ind2 (0 : 2): [ ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (2 : 2): [ 1 2 ]
ind2 (0 : 2): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (0 : 2): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
tmp_i1 (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
ind (0 : 2): [ ]
val = 0


S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (2 : 2): [ 3.614836360604185 3.614836360604185 ]
val = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
ind (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (2 : 2): [ 0 0 ]
S2 (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]


S_out (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
S_out (2 : 2): [ 0.1700869138378981 0.1700869138378981 ]
div = 2.000


S_out (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (5863 interne); stringhe deallocate: 0 (5403 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
S_out (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
val = -1.#INF


indok (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2
indok (2 : 2): [ 1 2 ]
val = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (2 : 6): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (2 : 6): [ 1 2 ]
st = 1
end = 2


indInf (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 2): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
S_out (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]


min = 0.08504345691894905
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
S_out (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
indInf (0 : 2): [ ]
val = -1


S_out (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine assegna1_vs_indx_d

155: InitVett_d
ris (2 : 2): [ 0 0 ]
val = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

156: aggiungi_ms_riga_i	<=>	m[riga,] <- val # riga <= dim(m)[0] + 1
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2, val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine aggiungi_ms_riga_i

159: somma_vv_d	<=>	ris <- v1 + v2
S_out (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
ris (2 : 2): [ 0 0 ]


tmp_d1 (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 2
tmp_d1 (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]


ris (2 x 2 : 2 x 2): [
	 0 0
	 0.08504345691894905 0.08504345691894905
 ]
------------------------------ Fine aggiungi_mv_riga_d

168: somma_m_d	<=>	ris <- sum(m)
ris (2 x 2 : 2 x 2): [
	 0 0
	 0.08504345691894905 0.08504345691894905
 ]


ris: 0.1700869138378981
------------------------------ Fine somma_m_d

173: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


aus (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

175: which_v_indxne_i	<=>	ris <- which(v != val)
aus (2 : 2): [ 2 2 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine which_v_indxne_i

186: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


rs (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

188: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (2 : 2): [ 2 2 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 1
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
I (0 : 0): [ ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 2
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 2 ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i

216: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
val1 = 0
val2 = 0


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

218: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
val1 = 0
val2 = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

220: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


aus (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

222: which_v_indxne_i	<=>	ris <- which(v != val)
aus (2 : 2): [ 2 2 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine which_v_indxne_i

232: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


rs (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

234: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (2 : 2): [ 2 2 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 1
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 4): [ ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 2
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 2 ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i


Stringhe allocate: 5 (5928 interne); stringhe deallocate: 0 (5543 interne)

90: seq_i	<=>	ris <- seq(da, a, incr)
da = 2
a = 2
incr = 1


ris->indices (1 : 1): [ 2 ]
------------------------------ Fine seq_i


Stringhe allocate: 5 (5933 interne); stringhe deallocate: 0 (5558 interne)

143: vettore3s_d		<=>	ris <- c(el1, el2, el3)
el1 = 0.1700869138378981, el2 = 0.08504345691894905, el3 = 0.08504345691894905


prob_mod (3 : 3): [ 0.1700869138378981 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine vettore3s_d

145: assegna1_v_indxeq_d	<=>	v[which(v==val1)] <- val2
prob_mod (3 : 3): [ 0.1700869138378981 0.08504345691894905 0.08504345691894905 ]
prob_mod (3 : 3): [ 0.1700869138378981 0.08504345691894905 0.08504345691894905 ]
val1 = 0
val2 = 1.#QNAN


prob_mod (3 : 3): [ 0.1700869138378981 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine assegna1_v_indxeq_d

147: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
prob_mod (3 : 3): [ 0.1700869138378981 0.08504345691894905 0.08504345691894905 ]
complemento = 1


ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

153: copia_v_indx_d	<=>	ris <- v[indx]
prob_mod (3 : 3): [ 0.1700869138378981 0.08504345691894905 0.08504345691894905 ]
ind (3 : 3): [ 1 2 3 ]


tmp1_d (3 : 16): [ 0.1700869138378981 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine copia_v_indx_d

154: min_v_d	<=>	ris <- min(v)
tmp1_d (3 : 16): [ 0.1700869138378981 0.08504345691894905 0.08504345691894905 ]


min = 0.08504345691894905
------------------------------ Fine min_v_d

160: assegna1_v_indxNA_d	<=>	v1[which(is.na(v2))] <- val oppure v1[which(!is.na(v2))] <- val
prob_mod (3 : 3): [ 0.1700869138378981 0.08504345691894905 0.08504345691894905 ]
prob_mod (3 : 3): [ 0.1700869138378981 0.08504345691894905 0.08504345691894905 ]
val = 0
complemento = 0


prob_mod (3 : 3): [ 0.1700869138378981 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine assegna1_v_indxNA_d

162: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
prob_mod (3 : 3): [ 0.1700869138378981 0.08504345691894905 0.08504345691894905 ]
canc_NA = 0



ris: 0.3401738276757962
------------------------------ Fine somma_v_d

162: dividi1_vs_d	<=>	v <- v / div
prob_mod (3 : 3): [ 0.1700869138378981 0.08504345691894905 0.08504345691894905 ]
div = 0.340


prob_mod (3 : 3): [ 0.5 0.25 0.25 ]
------------------------------ Fine dividi1_vs_d

164: vettore3s_i		<=>	ris <- c(el1, el2, el3)
el1 = 1, el2 = 2, el3 = 3


tmp1_i (3 : 3): [ 1 2 3 ]
------------------------------ Fine vettore3s_i


*** sampleB_p ***

*** sample_p ***
tmp1_i (3 : 3): [ 1 2 3 ]
k = 1, replace = 0
prob_mod (3 : 3): [ 0.5 0.25 0.25 ]


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (5933 interne); stringhe deallocate: 0 (5558 interne)


*** assign_nodes ***
35: copia_v_i	<=>	ris[st:end] <- v[st:end]
h (2 : 5): [ 2 5 ]
st = 1
end = 2


or_h (2 : 2): [ 2 5 ]
------------------------------ Fine copia_v_i

37: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


aus_h (2 : 2): [ 1 2 ]
------------------------------ Fine seq_i

43: InitVett_i
index (2 : 2): [ 79867104 1056989998 ]
val = 0


index (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_i

45: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


M_in (2 : 2): [ 1 1 ]
------------------------------ Fine somma_righe_i

47: ordine_i	<=>	ris <- order(v, decreasing=decr)
M_in (2 : 2): [ 1 1 ]
decr = 1


Ord (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

52: riga_d	<=>	ris <- m[r,]
ris (2 x 2 : 2 x 2): [
	 0.08504345691894905 0.08504345691894905
	 0.08504345691894905 0.08504345691894905
 ]
r = 1

p (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine riga_d

54: which_v_indxle_d	<=>	ris <- which(v<=val)
p (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
val = 0


tmp_i (0 : 2): [ ]
------------------------------ Fine which_v_indxle_d

61: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 0 1 1 0 ]
h (2 : 5): [ 2 5 ]


Sin_h (2 : 2): [ 0 0 ]
------------------------------ Fine assegna_v_indxNA_i

66: which_v_indxgt_i	<=>	ris <- which(v > val)
Sin_h (2 : 2): [ 0 0 ]
val = 4


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxgt_i

72: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
p (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
aus_h (2 : 2): [ 1 2 ]


tmp_d (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine assegna_v_indxNA_d

73: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
tmp_d (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
canc_NA = 0



ris: 0.1700869138378981
------------------------------ Fine somma_v_d

74: dividi_vs_d	ris <- v / div
tmp_d (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
div = 0.170


p (2 : 2): [ 0.5 0.5 ]
------------------------------ Fine dividi_vs_d


*** sampleB_p ***

*** sample_p ***
h (2 : 5): [ 2 5 ]
k = 1, replace = 0
p (2 : 2): [ 0.5 0.5 ]


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 5 (5988 interne); stringhe deallocate: 0 (5558 interne)

81: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
h (2 : 5): [ 2 5 ]
ris (1 : 1): [ 2 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 2
h (2 : 5): [ 2 5 ]


indx = 1
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
h (2 : 5): [ 2 5 ]
indx = 1


h (1 : 5): [ 5 ]
------------------------------ Fine elimina1_indx_i



h (1 : 5): [ 5 ]
------------------------------ Fine setdiff1_i

83: which_vv_eq_i	<=>	ris <- which(v1 == v2)
or_h (2 : 2): [ 2 5 ]
ris (1 : 1): [ 2 ]
2017: esiste_v_i	<=>	elem %IN% v
elem = 2
or_h (2 : 2): [ 2 5 ]


indx = 1
------------------------------ Fine esiste_v_i



tmp_i (1 : 2): [ 2 ]
------------------------------ Fine which_vv_eq_i

84: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
aus_h (2 : 2): [ 1 2 ]
tmp_i (1 : 2): [ 2 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 2
aus_h (2 : 2): [ 1 2 ]


indx = 2
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
aus_h (2 : 2): [ 1 2 ]
indx = 2


aus_h (1 : 2): [ 1 ]
------------------------------ Fine elimina1_indx_i



aus_h (1 : 2): [ 1 ]
------------------------------ Fine setdiff1_i

52: riga_d	<=>	ris <- m[r,]
ris (2 x 2 : 2 x 2): [
	 0.08504345691894905 0.08504345691894905
	 0.08504345691894905 0.08504345691894905
 ]
r = 2

p (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
------------------------------ Fine riga_d

54: which_v_indxle_d	<=>	ris <- which(v<=val)
p (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
val = 0


tmp_i (0 : 2): [ ]
------------------------------ Fine which_v_indxle_d

61: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 0 1 1 0 ]
h (1 : 5): [ 5 ]


Sin_h (1 : 2): [ 0 ]
------------------------------ Fine assegna_v_indxNA_i

66: which_v_indxgt_i	<=>	ris <- which(v > val)
Sin_h (1 : 2): [ 0 ]
val = 4


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxgt_i

72: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
p (2 : 2): [ 0.08504345691894905 0.08504345691894905 ]
aus_h (1 : 2): [ 1 ]


tmp_d (1 : 2): [ 0.08504345691894905 ]
------------------------------ Fine assegna_v_indxNA_d

73: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
tmp_d (1 : 2): [ 0.08504345691894905 ]
canc_NA = 0



ris: 0.08504345691894905
------------------------------ Fine somma_v_d

74: dividi_vs_d	ris <- v / div
tmp_d (1 : 2): [ 0.08504345691894905 ]
div = 0.085


p (1 : 2): [ 1 ]
------------------------------ Fine dividi_vs_d


*** sampleB_p ***
25: rep_v_i	<=>	ris <- rep(v, rip)
h (1 : 5): [ 5 ]
rip = 1


ris (1 : 1): [ 5 ]
------------------------------ Fine rep_v_i

81: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
h (1 : 5): [ 5 ]
ris (1 : 1): [ 5 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 5
h (1 : 5): [ 5 ]


indx = 1
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
h (1 : 5): [ 5 ]
indx = 1


h (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



h (0 : 5): [ ]
------------------------------ Fine setdiff1_i

83: which_vv_eq_i	<=>	ris <- which(v1 == v2)
or_h (2 : 2): [ 2 5 ]
ris (1 : 1): [ 5 ]
2017: esiste_v_i	<=>	elem %IN% v
elem = 5
or_h (2 : 2): [ 2 5 ]


indx = 2
------------------------------ Fine esiste_v_i



tmp_i (1 : 2): [ 5 ]
------------------------------ Fine which_vv_eq_i

84: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
aus_h (1 : 2): [ 1 ]
tmp_i (1 : 2): [ 5 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 5
aus_h (1 : 2): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i



aus_h (1 : 2): [ 1 ]
------------------------------ Fine setdiff1_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
ris (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 1
val = 1


ind (1 : 8): [ 2 ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
index (2 : 2): [ 2 5 ]
ind (1 : 8): [ 2 ]


co (1 : 1): [ 5 ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 0
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]
ri (1 : 1): [ 2 ]
co (1 : 1): [ 5 ]
val = 1


Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

107: esiste_v_i	<=>	elem %IN% v
elem = 1
ris->indices (1 : 1): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

109: accoda1_vv_i	<=>	v1 <- c(v1, v2)
ris (0 : 1): [ ]
ri (1 : 1): [ 2 ]


ris (1 : 1): [ 2 ]
------------------------------ Fine accoda_vv_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
ris (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 2
val = 1


ind (1 : 8): [ 1 ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
index (2 : 2): [ 2 5 ]
ind (1 : 8): [ 1 ]


co (1 : 1): [ 2 ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 0 0 0 0
 ]
ri (1 : 1): [ 5 ]
co (1 : 1): [ 2 ]
val = 1


Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

107: esiste_v_i	<=>	elem %IN% v
elem = 2
ris->indices (1 : 1): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 5 (5998 interne); stringhe deallocate: 0 (5623 interne)

332: accoda1_vv_i	<=>	v1 <- c(v1, v2)
h_new (2 : 2): [ 1 4 ]
ris (1 : 1): [ 2 ]
ATTENZIONE (accoda_vv_i, linea connectivity_modular.c # 332): ingrandito il vettore da 2 a 3!


h_new (3 : 6): [ 1 4 2 ]
------------------------------ Fine accoda_vv_i

334: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]


Sout (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_colonne_i

336: max_v_i		<=>	ris <- max(v)
Sout (5 : 5): [ 1 1 1 1 1 ]


max = 1
------------------------------ Fine max_v_i

338: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 2
incr = 1


tmp2_i (3 : 3): [ 0 1 2 ]
------------------------------ Fine seq_i


*** hist1 ***
Sout (5 : 5): [ 1 1 1 1 1 ]
tmp2_i (3 : 3): [ 0 1 2 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
tmp1_i (2 : 3): [ 1 2 ]
val = 0


tmp1_i (2 : 3): [ 0 0 ]
------------------------------ Fine InitVett_i



tmp1_i (2 : 3): [ 0 5 ]

Stringhe allocate: 5 (6004 interne); stringhe deallocate: 0 (5629 interne)

340: promuovi_i	(implicita)
tmp1_i (2 : 3): [ 0 5 ]
ATTENZIONE (promuovi_i, linea connectivity_modular.c # 340): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

tmp1_d (2 : 16): [ 0 5 ]
------------------------------ Fine promuovi_i

341: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
Freq_out (7 : 7): [ 2 3 0 0 0 0 0 ]
start = 1
end = 2
tmp1_d (2 : 16): [ 0 5 ]


Freq_out (7 : 7): [ 0 5 0 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

343: somma_righe_i	<=>	ris <- apply(m, 1, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]


Sin (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_righe_i

345: max_v_i		<=>	ris <- max(v)
Sin (5 : 5): [ 1 1 1 1 1 ]


max = 1
------------------------------ Fine max_v_i

347: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 2
incr = 1


tmp2_i (3 : 3): [ 0 1 2 ]
------------------------------ Fine seq_i


*** hist1 ***
Sin (5 : 5): [ 1 1 1 1 1 ]
tmp2_i (3 : 3): [ 0 1 2 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
tmp1_i (2 : 3): [ 0 5 ]
val = 0


tmp1_i (2 : 3): [ 0 0 ]
------------------------------ Fine InitVett_i



tmp1_i (2 : 3): [ 0 5 ]

Stringhe allocate: 5 (6005 interne); stringhe deallocate: 0 (5630 interne)

349: promuovi_i	(implicita)
tmp1_i (2 : 3): [ 0 5 ]
ATTENZIONE (promuovi_i, linea connectivity_modular.c # 349): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

tmp1_d (2 : 16): [ 0 5 ]
------------------------------ Fine promuovi_i

350: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
Freq_in (7 : 7): [ 2 3 0 0 0 0 0 ]
start = 1
end = 2
tmp1_d (2 : 16): [ 0 5 ]


Freq_in (7 : 7): [ 0 5 0 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

362: copia_v_i	<=>	ris[st:end] <- v[st:end]
h_new (3 : 6): [ 1 4 2 ]
st = 1
end = 3


h (3 : 5): [ 1 4 2 ]
------------------------------ Fine copia_v_i

368: copia_v_indx_i	<=>	ris <- v[indx]
Sin (5 : 5): [ 1 1 1 1 1 ]
h (3 : 5): [ 1 4 2 ]


tmp1_i (3 : 3): [ 1 1 1 ]
------------------------------ Fine copia_v_indx_i

369: which_v_indxne_i	<=>	ris <- which(v != val)
tmp1_i (3 : 3): [ 1 1 1 ]
val = 5


tmp2_i (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

370: copia_v_indx_i	<=>	ris <- v[indx]
h (3 : 5): [ 1 4 2 ]
tmp2_i (3 : 3): [ 1 2 3 ]


h (3 : 5): [ 1 4 2 ]
------------------------------ Fine copia_v_indx_i

110: somma_righe_i	<=>	ris <- apply(m, 1, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]


Sin (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_righe_i

112: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]


Sout (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_colonne_i


*** cluster_coeff ***
19: trasponi_i	<=>	ris <- t(m)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]


tmpm_i (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
------------------------------ Fine trasponi_i

20: somma1_m_i	<=>	m1 <- m1 + m2
tmpm_i (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]


tmpm_i (5 x 5 : 5 x 5): [
	 2 0 0 0 0
	 0 0 0 0 2
	 0 0 0 2 0
	 0 0 2 0 0
	 0 2 0 0 0
 ]
------------------------------ Fine somma1_m_i

22: which_m_indxne_i	<=>	ris <- which(m!=val)
tmpm_i (5 x 5 : 5 x 5): [
	 2 0 0 0 0
	 0 0 0 0 2
	 0 0 0 2 0
	 0 0 2 0 0
	 0 2 0 0 0
 ]
val = 0


ind (5 : 25): [ 1 10 14 18 22 ]
------------------------------ Fine which_m_indxne_i

24: assegna1_ms_indx_i	<=>	m[indx] = val
tmpm_i (5 x 5 : 5 x 5): [
	 2 0 0 0 0
	 0 0 0 0 2
	 0 0 0 2 0
	 0 0 2 0 0
	 0 2 0 0 0
 ]
ind (5 : 25): [ 1 10 14 18 22 ]
val = 1


tmpm_i (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_ms_indx_i

26: assegna1_s_diag_i	<=>	diag_i(m) <- s
tmpm_i (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
val = 0


tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_s_diag_i

31: InitVett_d
ris (5 : 5): [ 0 0 0 0 0 ]
val = 0


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
riga = 1


ris: 0
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
r = 1
val = 0


neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
riga = 2


ris: 1
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
r = 2
val = 0


neighbours (1 : 25): [ 5 ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
riga = 3


ris: 1
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
r = 3
val = 0


neighbours (1 : 25): [ 4 ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
riga = 4


ris: 1
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
r = 4
val = 0


neighbours (1 : 25): [ 3 ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
riga = 5


ris: 1
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
r = 5
val = 0


neighbours (1 : 25): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

69: media_v_d	<=>	ris <- mean(v)
ris (5 : 5): [ 0 0 0 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 5 (6021 interne); stringhe deallocate: 0 (5646 interne)


*** module1 ***
44: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


tmp1_i (3 : 3): [ 1 2 3 ]
------------------------------ Fine seq_i


*** sampleB ***

***sample***
tmp1_i (3 : 3): [ 1 2 3 ]
k = 1, replace = 0


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (6036 interne); stringhe deallocate: 0 (5646 interne)


Stringhe allocate: 5 (6036 interne); stringhe deallocate: 0 (5646 interne)


*** mod1 ***
18: InitMatr_i
ris (1 x 1 : 1 x 1): [
	 79867232
 ]
val = 0


ris (1 x 1 : 1 x 1): [
	 0
 ]
------------------------------ Fine InitMatr_i


Stringhe allocate: 5 (6041 interne); stringhe deallocate: 0 (5646 interne)


*** probmod ***
46: InitMatr_i
checkOUT (1 x 3 : 1 x 3): [
	 79864200 1851747943 1936024687
 ]
val = 0


checkOUT (1 x 3 : 1 x 3): [
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

48: InitMatr_i
checkIN (1 x 3 : 1 x 3): [
	 79863360 1851747943 1936024687
 ]
val = 0


checkIN (1 x 3 : 1 x 3): [
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

50: InitMatr_d
ris (1 x 3 : 1 x 3): [
	 4.283442352213603e-314 0 3.905033205336612e-316
 ]
val = 0


ris (1 x 3 : 1 x 3): [
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

52: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (1 x 1 : 1 x 1): [
	 1
 ]


M_in (1 : 1): [ 1 ]
------------------------------ Fine somma_righe_i

54: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (1 x 1 : 1 x 1): [
	 1
 ]


M_out (1 : 1): [ 1 ]
------------------------------ Fine somma_colonne_i

57: InitMatr_i
memory (1 x 3 : 1 x 3): [
	 79864720 778334061 99
 ]
val = -2147483648


memory (1 x 3 : 1 x 3): [
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (1 x 3 : 1 x 3): [
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 3): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (1 x 3 : 1 x 3): [
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 3): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 3): [ ]
tmp_i2 (0 : 3): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 1 1 1 1 1 ]
h (3 : 5): [ 1 4 2 ]


tmp_i1 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 3): [ 1 1 1 ]
s = 1


ind (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 3): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 2 2 2 ]
s = 1


tmp_i1 (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (3 : 3): [ 3 3 3 ]


T2 (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 3): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


old1 (3 : 3): [ 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 2 2 2 ]
s = 1


tmp_i1 (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (3 : 3): [ 3 3 3 ]


old2 (3 : 3): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (3 : 3): [ 5 5 5 ]
s = -1


new1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (3 : 3): [ 0 0 0 ]
s = 1


new2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 3): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


toll1 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 2 2 2 ]
s = 1


tmp_i1 (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (3 : 3): [ 3 3 3 ]


toll2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (3 : 3): [ 5 5 5 ]
T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]


a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (3 : 3): [ 4 4 4 ]
T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]


b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


ind (0 : 3): [ ]
------------------------------ Fine which_v_indxNA_d

68: assegna1_vs_indx_d	<=>	v[indx] <- val
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
ind (0 : 3): [ ]
val = 0


a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
------------------------------ Fine assegna1_vs_indx_d

70: assegna1_vs_indx_d	<=>	v[indx] <- val
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
ind (0 : 3): [ ]
val = 0


b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine assegna1_vs_indx_d

78: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]


tmpm_d (3 x 2 : 3 x 2): [
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
 ]
------------------------------ Fine cbind2v_d

79: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (3 x 2 : 3 x 2): [
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
 ]


m (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
------------------------------ Fine max_righe_d

81: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
m (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine f_aux_d

83: diff_vv_d	<=>	ris <- v1 - v2
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
toll1 (3 : 3): [ 1 1 1 ]


tmp_d1 (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine diff_vv_d

84: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
val = 0

ind1 (0 : 3): [ ]
------------------------------ Fine which_v_indxlt_d

86: diff_vv_d	<=>	ris <- v1 - v2
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
toll1 (3 : 3): [ 1 1 1 ]


tmp_d1 (3 : 3): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

87: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (3 : 3): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 ]
val = 0


ind2 (0 : 3): [ ]
------------------------------ Fine which_v_indxgt_d

89: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (0 : 3): [ ]
ind2 (0 : 3): [ ]


tmp_i1 (0 : 3): [ ]
------------------------------ Fine interseca_i

91: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
tmp_i1 (0 : 3): [ ]
val = -1.#INF


S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine assegna1_vs_indx_d

93: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
ind (0 : 3): [ ]
val = 0


S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine assegna1_vs_indx_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (3 : 3): [ 0 0 0 ]
T2 (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


a (3 : 3): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (3 : 3): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]


a (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (3 : 3): [ 1 1 1 ]
T2 (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


tmpm_d (3 x 2 : 3 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (3 x 2 : 3 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


m (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
complemento = 0


ind (0 : 3): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
ind (0 : 3): [ ]
val = 0


a (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
ind (0 : 3): [ ]
val = 0


b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


tmpm_d (3 x 2 : 3 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (3 x 2 : 3 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


m (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
m (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
T2 (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


S2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
toll2 (3 : 3): [ 1 1 1 ]


tmp_d1 (3 : 3): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (3 : 3): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
val = 0

ind1 (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
toll2 (3 : 3): [ 1 1 1 ]


tmp_d1 (3 : 3): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (3 : 3): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
val = 0


ind2 (0 : 3): [ ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (3 : 3): [ 1 2 3 ]
ind2 (0 : 3): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
ind2 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
tmp_i1 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (0 : 3): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (3 : 3): [ 1 1 1 ]
tmp_i1 (0 : 3): [ ]
val = -1.#INF


S2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (3 : 3): [ 1 1 1 ]
ind (0 : 3): [ ]
val = 0


S2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
val = 0


ind (0 : 3): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (3 : 3): [ 1 1 1 ]
ind (0 : 3): [ ]
val = -1.#INF


S2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
S2 (3 : 3): [ 1 1 1 ]


ris (3 : 3): [ 1.383188476936837 1.383188476936837 1.383188476936837 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (3 : 3): [ 1.383188476936837 1.383188476936837 1.383188476936837 ]
div = 2.000


ris (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (6201 interne); stringhe deallocate: 0 (5746 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
ris (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
val = -1.#INF


indok (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (1 x 3 : 1 x 3): [
	 0 0 0
 ]
riga = 1
indok (3 : 3): [ 1 2 3 ]
val = 1


checkOUT (1 x 3 : 1 x 3): [
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


tmp_i1 (3 : 3): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (3 : 3): [ 1 2 3 ]
indok (3 : 3): [ 1 2 3 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (3 : 3): [ 1 2 3 ]
st = 1
end = 3


indInf (3 : 3): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (3 : 3): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 3): [ 1 2 3 ]
indx = 1


indInf (2 : 3): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (2 : 3): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 3): [ 2 3 ]
indx = 1


indInf (1 : 3): [ 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (1 : 3): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 3): [ 3 ]
indx = 1


indInf (0 : 3): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 3): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
ris (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
indok (3 : 3): [ 1 2 3 ]


tmp_d1 (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]


min = 0.6915942384684183
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
indInf (0 : 3): [ ]
val = -1


ris (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine assegna1_vs_indx_d

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 1 1 1 1 ]
h (3 : 5): [ 1 4 2 ]


tmp_i1 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 3): [ 1 1 1 ]
s = 1


ind (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 3): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


T1 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 2 2 2 ]
s = 1


tmp_i1 (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (3 : 3): [ 3 3 3 ]


T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 3): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


old1 (3 : 3): [ 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 2 2 2 ]
s = 1


tmp_i1 (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (3 : 3): [ 3 3 3 ]


old2 (3 : 3): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (3 : 3): [ 5 5 5 ]
s = -1


new1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (3 : 3): [ 0 0 0 ]
s = 1


new2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 3): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


toll1 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 2 2 2 ]
s = 1


tmp_i1 (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (3 : 3): [ 3 3 3 ]


toll2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (3 : 3): [ 5 5 5 ]
T1 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (3 : 3): [ 4 4 4 ]
T1 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (3 : 3): [ 3.614835774604856 3.614836360604185 3.614836360604185 ]
val = 0


S1 (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (3 : 3): [ 0 0 0 ]
T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (3 : 3): [ 1 1 1 ]
T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


tmpm_d (3 x 2 : 3 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (3 x 2 : 3 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (3 : 3): [ 2.121995790965272e-314 0 2.089302240861799e-308 ]
val = 0


S2 (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 3): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (3 : 3): [ 0 0 0 ]
ind (0 : 3): [ ]
val = -1.#INF


S2 (3 : 3): [ 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (3 : 3): [ 0 0 0 ]
S2 (3 : 3): [ 0 0 0 ]


ris (3 : 3): [ 0 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (3 : 3): [ 0 0 0 ]
div = 2.000


ris (3 : 3): [ 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (6306 interne); stringhe deallocate: 0 (5831 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
ris (3 : 3): [ 0 0 0 ]
val = -1.#INF


indok (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (1 x 3 : 1 x 3): [
	 0 0 0
 ]
riga = 1
indok (3 : 3): [ 1 2 3 ]
val = 1


checkIN (1 x 3 : 1 x 3): [
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


tmp_i1 (3 : 3): [ 1 2 3 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (3 : 3): [ 1 2 3 ]
indok (3 : 3): [ 1 2 3 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (3 : 3): [ 1 2 3 ]
st = 1
end = 3


indInf (3 : 3): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (3 : 3): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 3): [ 1 2 3 ]
indx = 1


indInf (2 : 3): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (2 : 3): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 3): [ 2 3 ]
indx = 1


indInf (1 : 3): [ 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (1 : 3): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 3): [ 3 ]
indx = 1


indInf (0 : 3): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 3): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
ris (3 : 3): [ 0 0 0 ]
indok (3 : 3): [ 1 2 3 ]


tmp_d1 (3 : 3): [ 0 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (3 : 3): [ 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (3 : 3): [ 0 0 0 ]
indInf (0 : 3): [ ]
val = -1


ris (3 : 3): [ 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
ris (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
ris (3 : 3): [ 0 0 0 ]


tmp_d1 (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (1 x 3 : 1 x 3): [
	 0 0 0
 ]
riga = 1
tmp_d1 (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]


ris (1 x 3 : 1 x 3): [
	 0.6915942384684183 0.6915942384684183 0.6915942384684183
 ]
------------------------------ Fine aggiungi_mv_riga_d

168: somma_m_d	<=>	ris <- sum(m)
ris (1 x 3 : 1 x 3): [
	 0.6915942384684183 0.6915942384684183 0.6915942384684183
 ]


ris: 2.074782715405255
------------------------------ Fine somma_m_d

173: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkIN (1 x 3 : 1 x 3): [
	 1 1 1
 ]


aus (3 : 3): [ 1 1 1 ]
------------------------------ Fine somma_colonne_i

175: which_v_indxne_i	<=>	ris <- which(v != val)
aus (3 : 3): [ 1 1 1 ]
val = 0


tmp_i1 (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

186: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkIN (1 x 3 : 1 x 3): [
	 1 1 1
 ]


rs (1 : 1): [ 3 ]
------------------------------ Fine somma_righe_i

188: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (1 : 1): [ 3 ]
decr = 0


ord_ind (1 : 1): [ 1 ]
------------------------------ Fine ordine_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (1 x 3 : 1 x 3): [
	 1 1 1
 ]
r = 1
val = 0


I_add (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
I (0 : 0): [ ]
I_add (3 : 3): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

216: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
checkOUT (1 x 3 : 1 x 3): [
	 1 1 1
 ]
checkOUT (1 x 3 : 1 x 3): [
	 1 1 1
 ]
val1 = 0
val2 = 0


checkOUT (1 x 3 : 1 x 3): [
	 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

218: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
checkOUT (1 x 3 : 1 x 3): [
	 1 1 1
 ]
checkOUT (1 x 3 : 1 x 3): [
	 1 1 1
 ]
val1 = 0
val2 = 1


checkOUT (1 x 3 : 1 x 3): [
	 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

220: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkOUT (1 x 3 : 1 x 3): [
	 1 1 1
 ]


aus (3 : 3): [ 1 1 1 ]
------------------------------ Fine somma_colonne_i

222: which_v_indxne_i	<=>	ris <- which(v != val)
aus (3 : 3): [ 1 1 1 ]
val = 0


tmp_i1 (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

232: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkOUT (1 x 3 : 1 x 3): [
	 1 1 1
 ]


rs (1 : 1): [ 3 ]
------------------------------ Fine somma_righe_i

234: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (1 : 1): [ 3 ]
decr = 0


ord_ind (1 : 1): [ 1 ]
------------------------------ Fine ordine_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (1 x 3 : 1 x 3): [
	 1 1 1
 ]
r = 1
val = 0


I_add (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 3): [ ]
I_add (3 : 3): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i


Stringhe allocate: 5 (6351 interne); stringhe deallocate: 0 (5951 interne)


Stringhe allocate: 5 (6356 interne); stringhe deallocate: 0 (5966 interne)


*** module2 ***
44: seq_i	<=>	ris <- seq(da, a, incr)
da = 2
a = 3
incr = 1


tmp1_i (2 : 2): [ 2 3 ]
------------------------------ Fine seq_i


*** sampleB ***

***sample***
tmp1_i (2 : 2): [ 2 3 ]
k = 1, replace = 0


ris (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 5 (6366 interne); stringhe deallocate: 0 (5966 interne)


Stringhe allocate: 5 (6366 interne); stringhe deallocate: 0 (5966 interne)


*** mod2 ***
17: InitMatr_i
ris (3 x 3 : 3 x 3): [
	 79849120 2 3
	 -1 4 2
	 3 0 4
 ]
val = 0


ris (3 x 3 : 3 x 3): [
	 0 0 0
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i


*** triangola ***
27: diag_i	<=>	ris <- diag(m)
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 0
	 1 0 0
 ]


Dmem (3 : 3): [ 0 0 0 ]
------------------------------ Fine diag_i

29: assegna1_s_diag_i	<=>	diag_i(m) <- s
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 0
	 1 0 0
 ]
val = 0


ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 0
	 1 0 0
 ]
------------------------------ Fine assegna1_s_diag_i

33: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 0
	 1 0 0
 ]
r = 1
val = 0


tmp1_i (0 : 9): [ ]
------------------------------ Fine which_m_rowindxne_i

34: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 0
	 1 0 0
 ]
c = 1, val = 0


tmp2_i (2 : 9): [ 2 3 ]
------------------------------ Fine which_m_colindxne_i

35: unione_i	<=>	ris <- union(v1, v2)
tmp1_i (0 : 9): [ ]
tmp2_i (2 : 9): [ 2 3 ]
4876: elimina_doppi_i	<=>	ris <- union(v, v)
ind (2 : 2): [ 2 3 ]


ris (2 : 2): [ 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 2 3 ]
------------------------------ Fine unione_i

55: InitMatr_i
coord (1 x 2 : 2 x 2): [
	 79865952 1819240302
 ]
val = 0


coord (1 x 2 : 2 x 2): [
	 0 0
 ]
------------------------------ Fine InitMatr_i

72: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 2, el2 = 3


tmp1_i (2 : 9): [ 2 3 ]
------------------------------ Fine vettore2s_i

73: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (1 x 2 : 2 x 2): [
	 0 0
 ]
riga = 2
tmp1_i (2 : 9): [ 2 3 ]


coord (2 x 2 : 2 x 2): [
	 0 0
	 2 3
 ]
------------------------------ Fine aggiungi_mv_riga_i

74: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 3, el2 = 2


tmp1_i (2 : 9): [ 3 2 ]
------------------------------ Fine vettore2s_i

76: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (2 x 2 : 2 x 2): [
	 0 0
	 2 3
 ]
riga = 3
tmp1_i (2 : 9): [ 3 2 ]


coord (3 x 2 : 3 x 2): [
	 0 0
	 2 3
	 3 2
 ]
------------------------------ Fine aggiungi_mv_riga_i

89: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 0
	 1 0 0
 ]


M_in (3 : 3): [ 0 1 1 ]
------------------------------ Fine somma_righe_i

91: which_v_indxlt_i	<=>	ris <- which(v<val)
M_in (3 : 3): [ 0 1 1 ]
val = 5

ris (3 : 7): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_i

95: which_m_colindxin_i	<=>	ris <- which(m[, c] %IN% v)
coord (3 x 2 : 3 x 2): [
	 0 0
	 2 3
	 3 2
 ]
c = 1
ris (3 : 7): [ 1 2 3 ]
3754: esiste_v_i	<=>	elem %IN% v
elem = 0
ris (3 : 7): [ 1 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (3 : 7): [ 1 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 3
ris (3 : 7): [ 1 2 3 ]


indx = 3
------------------------------ Fine esiste_v_i



ind_aus (2 : 3): [ 2 3 ]
------------------------------ Fine which_m_colindxin_i

101: righe_i	<=>	ris <- m[indx,]
coord (3 x 2 : 3 x 2): [
	 0 0
	 2 3
	 3 2
 ]
ind_aus (2 : 3): [ 2 3 ]



tmp_coord1 (2 x 2 : 2 x 2): [
	 2 3
	 3 2
 ]
------------------------------ Fine righe_i

102: copia_m_i	<=>	ris <- da
tmp_coord1 (2 x 2 : 2 x 2): [
	 2 3
	 3 2
 ]


coord (2 x 2 : 3 x 2): [
	 2 3
	 3 2
 ]
------------------------------ Fine copia_m_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp1_i (2 : 9): [ 1 2 ]
------------------------------ Fine seq_i


*** sampleB ***

***sample***
tmp1_i (2 : 9): [ 1 2 ]
k = 1, replace = 0


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (6436 interne); stringhe deallocate: 0 (5981 interne)


Stringhe allocate: 5 (6436 interne); stringhe deallocate: 0 (5981 interne)

107: riga_i	<=>	ris <- m[r,]
coord (2 x 2 : 3 x 2): [
	 2 3
	 3 2
 ]
r = 1

coord_ind (2 : 2): [ 2 3 ]
------------------------------ Fine riga_i

111: which_m_colneand2_i	<=>	ris <- which((m[, c] != val1) & (m[, c] != val2))
coord (2 x 2 : 3 x 2): [
	 2 3
	 3 2
 ]
c = 1, val1 = 2, val2 = 3


ris (0 : 7): [ ]
------------------------------ Fine which_m_colneand2_i

33: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 1
	 1 0 0
 ]
r = 2
val = 0


tmp1_i (2 : 9): [ 1 3 ]
------------------------------ Fine which_m_rowindxne_i

34: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 1
	 1 0 0
 ]
c = 2, val = 0


tmp2_i (0 : 9): [ ]
------------------------------ Fine which_m_colindxne_i

35: unione_i	<=>	ris <- union(v1, v2)
tmp1_i (2 : 9): [ 1 3 ]
tmp2_i (0 : 9): [ ]
4876: elimina_doppi_i	<=>	ris <- union(v, v)
ind (2 : 2): [ 1 3 ]


ris (2 : 7): [ 1 3 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 7): [ 1 3 ]
------------------------------ Fine unione_i

55: InitMatr_i
coord (1 x 2 : 3 x 2): [
	 2 3
 ]
val = 0


coord (1 x 2 : 3 x 2): [
	 0 0
 ]
------------------------------ Fine InitMatr_i

33: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 1
	 1 0 0
 ]
r = 3
val = 0


tmp1_i (1 : 9): [ 1 ]
------------------------------ Fine which_m_rowindxne_i

34: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 1
	 1 0 0
 ]
c = 3, val = 0


tmp2_i (1 : 9): [ 2 ]
------------------------------ Fine which_m_colindxne_i

35: unione_i	<=>	ris <- union(v1, v2)
tmp1_i (1 : 9): [ 1 ]
tmp2_i (1 : 9): [ 2 ]
4876: elimina_doppi_i	<=>	ris <- union(v, v)
ind (2 : 2): [ 1 2 ]


ris (2 : 7): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 7): [ 1 2 ]
------------------------------ Fine unione_i

55: InitMatr_i
coord (1 x 2 : 3 x 2): [
	 0 0
 ]
val = 0


coord (1 x 2 : 3 x 2): [
	 0 0
 ]
------------------------------ Fine InitMatr_i

152: assegna1_v_diag_i	<=>	diag(m) <- v
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 1
	 1 0 0
 ]
Dmem (3 : 3): [ 0 0 0 ]


ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 1
	 1 0 0
 ]
------------------------------ Fine assegna1_v_diag_i


Stringhe allocate: 5 (6451 interne); stringhe deallocate: 0 (6046 interne)


Stringhe allocate: 5 (6451 interne); stringhe deallocate: 0 (6046 interne)


*** probmod ***
46: InitMatr_i
checkOUT (3 x 3 : 3 x 3): [
	 79849120 1072017084 1697891336
	 3 1697891336 1072017084
	 1697891336 1072017084 1697891336
 ]
val = 0


checkOUT (3 x 3 : 3 x 3): [
	 0 0 0
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

48: InitMatr_i
checkIN (3 x 3 : 3 x 3): [
	 79848800 -2147483648 -2147483648
	 3 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = 0


checkIN (3 x 3 : 3 x 3): [
	 0 0 0
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

50: InitMatr_d
ris (3 x 3 : 3 x 3): [
	 4.243991581930545e-314 0 0
	 1.48219693752374e-323 0 0
	 0 0 0
 ]
val = 0


ris (3 x 3 : 3 x 3): [
	 0 0 0
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

52: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 1
	 1 0 0
 ]


M_in (3 : 3): [ 0 2 1 ]
------------------------------ Fine somma_righe_i

54: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 1 0 1
	 1 0 0
 ]


M_out (3 : 3): [ 2 0 1 ]
------------------------------ Fine somma_colonne_i

57: InitMatr_i
memory (3 x 3 : 3 x 3): [
	 79852360 1070899847 899184624
	 1070899847 899184624 1070899847
	 899184624 1070899847 899184624
 ]
val = -2147483648


memory (3 x 3 : 3 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (3 x 3 : 3 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


tmp_i1 (0 : 9): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (3 x 3 : 3 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


tmp_i2 (0 : 9): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 9): [ ]
tmp_i2 (0 : 9): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 1 1 1 1 1 ]
h (3 : 5): [ 1 4 2 ]


tmp_i1 (3 : 9): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 2


ind (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 3 3 3 ]
s = 1


tmp_i1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (3 : 3): [ 4 4 4 ]


T2 (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


old1 (3 : 3): [ 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 3 3 3 ]
s = 1


tmp_i1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (3 : 3): [ 4 4 4 ]


old2 (3 : 3): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (3 : 3): [ 5 5 5 ]
s = -1


new1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (3 : 3): [ 0 0 0 ]
s = 1


new2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


toll1 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 3 3 3 ]
s = 1


tmp_i1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (3 : 3): [ 4 4 4 ]


toll2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (3 : 3): [ 5 5 5 ]
T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]


a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (3 : 3): [ 4 4 4 ]
T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]


b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


ind (0 : 3): [ ]
------------------------------ Fine which_v_indxNA_d

68: assegna1_vs_indx_d	<=>	v[indx] <- val
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
ind (0 : 3): [ ]
val = 0


a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
------------------------------ Fine assegna1_vs_indx_d

70: assegna1_vs_indx_d	<=>	v[indx] <- val
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
ind (0 : 3): [ ]
val = 0


b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine assegna1_vs_indx_d

78: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]


tmpm_d (3 x 2 : 3 x 2): [
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
 ]
------------------------------ Fine cbind2v_d

79: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (3 x 2 : 3 x 2): [
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
 ]


m (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
------------------------------ Fine max_righe_d

81: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
m (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine f_aux_d

83: diff_vv_d	<=>	ris <- v1 - v2
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
toll1 (3 : 3): [ 1 1 1 ]


tmp_d1 (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine diff_vv_d

84: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
val = 0

ind1 (0 : 3): [ ]
------------------------------ Fine which_v_indxlt_d

86: diff_vv_d	<=>	ris <- v1 - v2
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
toll1 (3 : 3): [ 1 1 1 ]


tmp_d1 (3 : 3): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

87: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (3 : 3): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 ]
val = 0


ind2 (0 : 3): [ ]
------------------------------ Fine which_v_indxgt_d

89: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (0 : 3): [ ]
ind2 (0 : 3): [ ]


tmp_i1 (0 : 3): [ ]
------------------------------ Fine interseca_i

91: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
tmp_i1 (0 : 3): [ ]
val = -1.#INF


S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine assegna1_vs_indx_d

93: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
ind (0 : 3): [ ]
val = 0


S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine assegna1_vs_indx_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (3 : 3): [ 0 0 0 ]
T2 (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]


a (3 : 3): [ -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (3 : 3): [ -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 ]


a (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (3 : 3): [ 1 1 1 ]
T2 (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]


b (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]


b (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
b (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]


tmpm_d (3 x 2 : 3 x 2): [
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (3 x 2 : 3 x 2): [
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
 ]


m (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
complemento = 0


ind (0 : 3): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
ind (0 : 3): [ ]
val = 0


a (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
ind (0 : 3): [ ]
val = 0


b (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
b (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]


tmpm_d (3 x 2 : 3 x 2): [
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (3 x 2 : 3 x 2): [
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
 ]


m (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
b (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
m (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
T2 (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]


S2 (3 : 3): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
toll2 (3 : 3): [ 1 1 1 ]


tmp_d1 (3 : 3): [ -0.6775800682645476 -0.6775800682645476 -0.6775800682645476 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (3 : 3): [ -0.6775800682645476 -0.6775800682645476 -0.6775800682645476 ]
val = 0

ind1 (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
toll2 (3 : 3): [ 1 1 1 ]


tmp_d1 (3 : 3): [ -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (3 : 3): [ -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 ]
val = 0


ind2 (0 : 3): [ ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (3 : 3): [ 1 2 3 ]
ind2 (0 : 3): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
ind2 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
tmp_i1 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (0 : 3): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (3 : 3): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
tmp_i1 (0 : 3): [ ]
val = -1.#INF


S2 (3 : 3): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (3 : 3): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
ind (0 : 3): [ ]
val = 0


S2 (3 : 3): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
val = 0


ind (0 : 3): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (3 : 3): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
ind (0 : 3): [ ]
val = -1.#INF


S2 (3 : 3): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
S2 (3 : 3): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 ]


ris (3 : 3): [ -1.718356748934951 -1.718356748934951 -1.718356748934951 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (3 : 3): [ -1.718356748934951 -1.718356748934951 -1.718356748934951 ]
div = 2.000


ris (3 : 3): [ -0.8591783744674756 -0.8591783744674756 -0.8591783744674756 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (6611 interne); stringhe deallocate: 0 (6146 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
ris (3 : 3): [ -0.8591783744674756 -0.8591783744674756 -0.8591783744674756 ]
val = -1.#INF


indok (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (3 x 3 : 3 x 3): [
	 0 0 0
	 0 0 0
	 0 0 0
 ]
riga = 1
indok (3 : 3): [ 1 2 3 ]
val = 1


checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


tmp_i1 (3 : 9): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (3 : 9): [ 1 2 3 ]
indok (3 : 3): [ 1 2 3 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (3 : 9): [ 1 2 3 ]
st = 1
end = 3


indInf (3 : 3): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (3 : 3): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 3): [ 1 2 3 ]
indx = 1


indInf (2 : 3): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (2 : 3): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 3): [ 2 3 ]
indx = 1


indInf (1 : 3): [ 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (1 : 3): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 3): [ 3 ]
indx = 1


indInf (0 : 3): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 3): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
ris (3 : 3): [ -0.8591783744674756 -0.8591783744674756 -0.8591783744674756 ]
indok (3 : 3): [ 1 2 3 ]


tmp_d1 (3 : 3): [ -0.8591783744674756 -0.8591783744674756 -0.8591783744674756 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (3 : 3): [ -0.8591783744674756 -0.8591783744674756 -0.8591783744674756 ]


min = -0.8591783744674756
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (3 : 3): [ -0.8591783744674756 -0.8591783744674756 -0.8591783744674756 ]
indInf (0 : 3): [ ]
val = -1.859178374467476


ris (3 : 3): [ -0.8591783744674756 -0.8591783744674756 -0.8591783744674756 ]
------------------------------ Fine assegna1_vs_indx_d

155: InitVett_d
S_in (3 : 3): [ 0.3831882521129413 0.3831884769368366 0.3831884769368366 ]
val = 0


S_in (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

156: aggiungi_ms_riga_i	<=>	m[riga,] <- val # riga <= dim(m)[0] + 1
checkIN (3 x 3 : 3 x 3): [
	 0 0 0
	 0 0 0
	 0 0 0
 ]
riga = 1, val = 1


checkIN (3 x 3 : 3 x 3): [
	 1 1 1
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine aggiungi_ms_riga_i

159: somma_vv_d	<=>	ris <- v1 + v2
ris (3 : 3): [ -0.8591783744674756 -0.8591783744674756 -0.8591783744674756 ]
S_in (3 : 3): [ 0 0 0 ]


tmp_d1 (3 : 3): [ -0.8591783744674756 -0.8591783744674756 -0.8591783744674756 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 0 0 0
	 0 0 0
 ]
riga = 1
tmp_d1 (3 : 3): [ -0.8591783744674756 -0.8591783744674756 -0.8591783744674756 ]


ris (3 x 3 : 3 x 3): [
	 -0.8591783744674756 -0.8591783744674756 -0.8591783744674756
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (3 x 3 : 3 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 2


tmp_i1 (0 : 9): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (3 x 3 : 3 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 9): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 9): [ ]
tmp_i2 (0 : 9): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

119: InitVett_d
ris (3 : 3): [ -0.8591783744674756 -0.8591783744674756 -0.8591783744674756 ]
val = 0


ris (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

122: InitVett_i
tmp_i1 (3 : 9): [ 1 2 3 ]
val = 1


tmp_i1 (3 : 9): [ 1 1 1 ]
------------------------------ Fine InitVett_i

123: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 0 0 0
	 0 0 0
 ]
riga = 2
tmp_i1 (3 : 9): [ 1 1 1 ]


checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_i

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 1 1 1 1 ]
h (3 : 5): [ 1 4 2 ]


tmp_i1 (3 : 9): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 2


ind (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


T1 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 3 3 3 ]
s = 1


tmp_i1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (3 : 3): [ 4 4 4 ]


T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


old1 (3 : 3): [ 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 3 3 3 ]
s = 1


tmp_i1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (3 : 3): [ 4 4 4 ]


old2 (3 : 3): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (3 : 3): [ 5 5 5 ]
s = -1


new1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (3 : 3): [ 0 0 0 ]
s = 1


new2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


toll1 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 3 3 3 ]
s = 1


tmp_i1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (3 : 3): [ 4 4 4 ]


toll2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (3 : 3): [ 5 5 5 ]
T1 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (3 : 3): [ 4 4 4 ]
T1 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (3 : 3): [ -0.3224198862543179 -0.3224199317354524 -0.3224199317354524 ]
val = 0


S1 (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (3 : 3): [ 0 0 0 ]
T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (3 : 3): [ 1 1 1 ]
T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


tmpm_d (3 x 2 : 3 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (3 x 2 : 3 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (3 : 3): [ 2.121995790965272e-314 0 3.904934392207443e-316 ]
val = 0


S2 (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 3): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (3 : 3): [ 0 0 0 ]
ind (0 : 3): [ ]
val = -1.#INF


S2 (3 : 3): [ 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (3 : 3): [ 0 0 0 ]
S2 (3 : 3): [ 0 0 0 ]


S_in (3 : 3): [ 0 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
S_in (3 : 3): [ 0 0 0 ]
div = 2.000


S_in (3 : 3): [ 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (6716 interne); stringhe deallocate: 0 (6231 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
S_in (3 : 3): [ 0 0 0 ]
val = -1.#INF


indok (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (3 x 3 : 3 x 3): [
	 1 1 1
	 0 0 0
	 0 0 0
 ]
riga = 2
indok (3 : 3): [ 1 2 3 ]
val = 1


checkIN (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


tmp_i1 (3 : 9): [ 1 2 3 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (3 : 9): [ 1 2 3 ]
indok (3 : 3): [ 1 2 3 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (3 : 9): [ 1 2 3 ]
st = 1
end = 3


indInf (3 : 3): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (3 : 3): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 3): [ 1 2 3 ]
indx = 1


indInf (2 : 3): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (2 : 3): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 3): [ 2 3 ]
indx = 1


indInf (1 : 3): [ 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (1 : 3): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 3): [ 3 ]
indx = 1


indInf (0 : 3): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 3): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
S_in (3 : 3): [ 0 0 0 ]
indok (3 : 3): [ 1 2 3 ]


tmp_d1 (3 : 3): [ 0 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (3 : 3): [ 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
S_in (3 : 3): [ 0 0 0 ]
indInf (0 : 3): [ ]
val = -1


S_in (3 : 3): [ 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
ris (3 : 3): [ 0 0 0 ]
S_in (3 : 3): [ 0 0 0 ]


tmp_d1 (3 : 3): [ 0 0 0 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (3 x 3 : 3 x 3): [
	 -0.8591783744674756 -0.8591783744674756 -0.8591783744674756
	 0 0 0
	 0 0 0
 ]
riga = 2
tmp_d1 (3 : 3): [ 0 0 0 ]


ris (3 x 3 : 3 x 3): [
	 -0.8591783744674756 -0.8591783744674756 -0.8591783744674756
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (3 x 3 : 3 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 9): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (3 x 3 : 3 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 9): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 9): [ ]
tmp_i2 (0 : 9): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 1 1 1 1 1 ]
h (3 : 5): [ 1 4 2 ]


tmp_i1 (3 : 9): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


ind (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 2 2 2 ]
s = 1


tmp_i1 (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (3 : 3): [ 3 3 3 ]


T2 (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


old1 (3 : 3): [ 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 2 2 2 ]
s = 1


tmp_i1 (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (3 : 3): [ 3 3 3 ]


old2 (3 : 3): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (3 : 3): [ 5 5 5 ]
s = -1


new1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (3 : 3): [ 0 0 0 ]
s = 1


new2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


toll1 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 2 2 2 ]
s = 1


tmp_i1 (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (3 : 3): [ 3 3 3 ]


toll2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (3 : 3): [ 5 5 5 ]
T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]


a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (3 : 3): [ 4 4 4 ]
T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]


b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


ind (0 : 3): [ ]
------------------------------ Fine which_v_indxNA_d

68: assegna1_vs_indx_d	<=>	v[indx] <- val
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
ind (0 : 3): [ ]
val = 0


a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
------------------------------ Fine assegna1_vs_indx_d

70: assegna1_vs_indx_d	<=>	v[indx] <- val
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
ind (0 : 3): [ ]
val = 0


b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine assegna1_vs_indx_d

78: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]


tmpm_d (3 x 2 : 3 x 2): [
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
 ]
------------------------------ Fine cbind2v_d

79: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (3 x 2 : 3 x 2): [
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
 ]


m (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
------------------------------ Fine max_righe_d

81: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
m (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine f_aux_d

83: diff_vv_d	<=>	ris <- v1 - v2
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
toll1 (3 : 3): [ 1 1 1 ]


tmp_d1 (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine diff_vv_d

84: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
val = 0

ind1 (0 : 3): [ ]
------------------------------ Fine which_v_indxlt_d

86: diff_vv_d	<=>	ris <- v1 - v2
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
toll1 (3 : 3): [ 1 1 1 ]


tmp_d1 (3 : 3): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

87: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (3 : 3): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 ]
val = 0


ind2 (0 : 3): [ ]
------------------------------ Fine which_v_indxgt_d

89: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (0 : 3): [ ]
ind2 (0 : 3): [ ]


tmp_i1 (0 : 3): [ ]
------------------------------ Fine interseca_i

91: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
tmp_i1 (0 : 3): [ ]
val = -1.#INF


S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine assegna1_vs_indx_d

93: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
ind (0 : 3): [ ]
val = 0


S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine assegna1_vs_indx_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (3 : 3): [ 0 0 0 ]
T2 (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


a (3 : 3): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (3 : 3): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]


a (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (3 : 3): [ 1 1 1 ]
T2 (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


tmpm_d (3 x 2 : 3 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (3 x 2 : 3 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


m (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
complemento = 0


ind (0 : 3): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
ind (0 : 3): [ ]
val = 0


a (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
ind (0 : 3): [ ]
val = 0


b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


tmpm_d (3 x 2 : 3 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (3 x 2 : 3 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


m (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
m (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
T2 (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


S2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
toll2 (3 : 3): [ 1 1 1 ]


tmp_d1 (3 : 3): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (3 : 3): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
val = 0

ind1 (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
toll2 (3 : 3): [ 1 1 1 ]


tmp_d1 (3 : 3): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (3 : 3): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
val = 0


ind2 (0 : 3): [ ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (3 : 3): [ 1 2 3 ]
ind2 (0 : 3): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
ind2 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
tmp_i1 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (0 : 3): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (3 : 3): [ 1 1 1 ]
tmp_i1 (0 : 3): [ ]
val = -1.#INF


S2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (3 : 3): [ 1 1 1 ]
ind (0 : 3): [ ]
val = 0


S2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
val = 0


ind (0 : 3): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (3 : 3): [ 1 1 1 ]
ind (0 : 3): [ ]
val = -1.#INF


S2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
S2 (3 : 3): [ 1 1 1 ]


ris (3 : 3): [ 1.383188476936837 1.383188476936837 1.383188476936837 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (3 : 3): [ 1.383188476936837 1.383188476936837 1.383188476936837 ]
div = 2.000


ris (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (6816 interne); stringhe deallocate: 0 (6331 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
ris (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
val = -1.#INF


indok (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 0 0 0
 ]
riga = 3
indok (3 : 3): [ 1 2 3 ]
val = 1


checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


tmp_i1 (3 : 9): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (3 : 9): [ 1 2 3 ]
indok (3 : 3): [ 1 2 3 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (3 : 9): [ 1 2 3 ]
st = 1
end = 3


indInf (3 : 3): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (3 : 3): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 3): [ 1 2 3 ]
indx = 1


indInf (2 : 3): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (2 : 3): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 3): [ 2 3 ]
indx = 1


indInf (1 : 3): [ 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (1 : 3): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 3): [ 3 ]
indx = 1


indInf (0 : 3): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 3): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
ris (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
indok (3 : 3): [ 1 2 3 ]


tmp_d1 (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]


min = 0.6915942384684183
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
indInf (0 : 3): [ ]
val = -1


ris (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine assegna1_vs_indx_d

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 1 1 1 1 ]
h (3 : 5): [ 1 4 2 ]


tmp_i1 (3 : 9): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


ind (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


T1 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 2 2 2 ]
s = 1


tmp_i1 (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (3 : 3): [ 3 3 3 ]


T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


old1 (3 : 3): [ 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 2 2 2 ]
s = 1


tmp_i1 (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (3 : 3): [ 3 3 3 ]


old2 (3 : 3): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (3 : 3): [ 5 5 5 ]
s = -1


new1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (3 : 3): [ 0 0 0 ]
s = 1


new2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


toll1 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 2 2 2 ]
s = 1


tmp_i1 (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (3 : 3): [ 3 3 3 ]


toll2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (3 : 3): [ 5 5 5 ]
T1 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (3 : 3): [ 4 4 4 ]
T1 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (3 : 3): [ 5.000000070938341 5 5 ]
val = 0


S1 (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (3 : 3): [ 0 0 0 ]
T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (3 : 3): [ 1 1 1 ]
T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


tmpm_d (3 x 2 : 3 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (3 x 2 : 3 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (3 : 3): [ 3.614835774599502 3.614836360604185 3.614836360604185 ]
val = 0


S2 (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 3): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (3 : 3): [ 0 0 0 ]
ind (0 : 3): [ ]
val = -1.#INF


S2 (3 : 3): [ 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (3 : 3): [ 0 0 0 ]
S2 (3 : 3): [ 0 0 0 ]


S_in (3 : 3): [ 0 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
S_in (3 : 3): [ 0 0 0 ]
div = 2.000


S_in (3 : 3): [ 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (6901 interne); stringhe deallocate: 0 (6416 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
S_in (3 : 3): [ 0 0 0 ]
val = -1.#INF


indok (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 0 0 0
 ]
riga = 3
indok (3 : 3): [ 1 2 3 ]
val = 1


checkIN (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


tmp_i1 (3 : 9): [ 1 2 3 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (3 : 9): [ 1 2 3 ]
indok (3 : 3): [ 1 2 3 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (3 : 9): [ 1 2 3 ]
st = 1
end = 3


indInf (3 : 3): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (3 : 3): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 3): [ 1 2 3 ]
indx = 1


indInf (2 : 3): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (2 : 3): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 3): [ 2 3 ]
indx = 1


indInf (1 : 3): [ 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (1 : 3): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 3): [ 3 ]
indx = 1


indInf (0 : 3): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 3): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
S_in (3 : 3): [ 0 0 0 ]
indok (3 : 3): [ 1 2 3 ]


tmp_d1 (3 : 3): [ 0 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (3 : 3): [ 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
S_in (3 : 3): [ 0 0 0 ]
indInf (0 : 3): [ ]
val = -1


S_in (3 : 3): [ 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
ris (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
S_in (3 : 3): [ 0 0 0 ]


tmp_d1 (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (3 x 3 : 3 x 3): [
	 -0.8591783744674756 -0.8591783744674756 -0.8591783744674756
	 0 0 0
	 0 0 0
 ]
riga = 3
tmp_d1 (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]


ris (3 x 3 : 3 x 3): [
	 -0.8591783744674756 -0.8591783744674756 -0.8591783744674756
	 0 0 0
	 0.6915942384684183 0.6915942384684183 0.6915942384684183
 ]
------------------------------ Fine aggiungi_mv_riga_d

168: somma_m_d	<=>	ris <- sum(m)
ris (3 x 3 : 3 x 3): [
	 -0.8591783744674756 -0.8591783744674756 -0.8591783744674756
	 0 0 0
	 0.6915942384684183 0.6915942384684183 0.6915942384684183
 ]


ris: -0.502752407997172
------------------------------ Fine somma_m_d

173: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkIN (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]


aus (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_colonne_i

175: which_v_indxne_i	<=>	ris <- which(v != val)
aus (3 : 3): [ 3 3 3 ]
val = 0


tmp_i1 (3 : 9): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

186: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkIN (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]


rs (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_righe_i

188: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (3 : 3): [ 3 3 3 ]
decr = 0


ord_ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine ordine_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


I_add (3 : 9): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
I (0 : 0): [ ]
I_add (3 : 9): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


I_add (3 : 9): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
I_add (3 : 9): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
r = 3
val = 0


I_add (3 : 9): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 6): [ 1 2 3 ]
I_add (3 : 9): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i

216: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 0


checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

218: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 1


checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

220: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]


aus (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_colonne_i

222: which_v_indxne_i	<=>	ris <- which(v != val)
aus (3 : 3): [ 3 3 3 ]
val = 0


tmp_i1 (3 : 9): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

232: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]


rs (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_righe_i

234: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (3 : 3): [ 3 3 3 ]
decr = 0


ord_ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine ordine_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


I_add (3 : 9): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
I_add (3 : 9): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


I_add (3 : 9): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
I_add (3 : 9): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
r = 3
val = 0


I_add (3 : 9): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 6): [ 1 2 3 ]
I_add (3 : 9): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i


Stringhe allocate: 5 (6986 interne); stringhe deallocate: 0 (6576 interne)


Stringhe allocate: 5 (6991 interne); stringhe deallocate: 0 (6586 interne)


*** module3 ***
51: seq_i	<=>	ris <- seq(da, a, incr)
da = 2
a = 3
incr = 1


tmp1_i (2 : 2): [ 2 3 ]
------------------------------ Fine seq_i


*** sampleB ***

***sample***
tmp1_i (2 : 2): [ 2 3 ]
k = 1, replace = 0


ris (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 5 (7001 interne); stringhe deallocate: 0 (6586 interne)


Stringhe allocate: 5 (7001 interne); stringhe deallocate: 0 (6586 interne)

54: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp1_i (2 : 2): [ 1 2 ]
------------------------------ Fine seq_i


*** sampleB ***

***sample***
tmp1_i (2 : 2): [ 1 2 ]
k = 1, replace = 0


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (7006 interne); stringhe deallocate: 0 (6586 interne)


Stringhe allocate: 5 (7006 interne); stringhe deallocate: 0 (6586 interne)


*** mod3 ***
33: InitMatr_i
ris (3 x 3 : 3 x 3): [
	 79852360 1072693248 0
	 2 0 1072693248
	 3 1072693248 0
 ]
val = 0


ris (3 x 3 : 3 x 3): [
	 0 0 0
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

34: copia_v_d	<=>	ris[st:end] <- v[st:end]
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
st = 1
end = 7


STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
------------------------------ Fine copia_v_d

35: copia_v_d	<=>	ris[st:end] <- v[st:end]
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
st = 1
end = 7


STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
------------------------------ Fine copia_v_d

39: segmento_v_d	<=>	ris <- v[st:end]
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
start = 2
end = 3


tmp1_d (2 : 2): [ 3.614836360604185 0.7867244574868211 ]
------------------------------ Fine segmento_v_d

40: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
tmp1_d (2 : 2): [ 3.614836360604185 0.7867244574868211 ]
canc_NA = 1



ris: 4.401560818091006
------------------------------ Fine somma_v_d

43: segmento_v_d	<=>	ris <- v[st:end]
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
start = 2
end = 3


p (2 : 2): [ 3.614836360604185 0.7867244574868211 ]
------------------------------ Fine segmento_v_d

44: dividi1_vs_d	<=>	v <- v / div
p (2 : 2): [ 3.614836360604185 0.7867244574868211 ]
div = 4.402


p (2 : 2): [ 0.8212623907743639 0.178737609225636 ]
------------------------------ Fine dividi1_vs_d

61: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp1_i (2 : 2): [ 1 2 ]
------------------------------ Fine seq_i


*** sampleB_p ***

*** sample_p ***
tmp1_i (2 : 2): [ 1 2 ]
k = 1, replace = 1
p (2 : 2): [ 0.8212623907743639 0.178737609225636 ]


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 5 (7051 interne); stringhe deallocate: 0 (6586 interne)

64: somma_v_i	<=>	ris <- sum(v, na.rm=canc_NA)
ris (1 : 1): [ 2 ]
canc_NA = 0



ris: 2
------------------------------ Fine somma_v_i

131: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp1_i (2 : 2): [ 1 2 ]
------------------------------ Fine seq_i

133: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 0 0 0
	 0 0 0
 ]
tmp1_i (2 : 2): [ 1 2 ]
scalare_i (1 : 1): [ 3 ]
val = 1


ris (3 x 3 : 3 x 3): [
	 0 0 1
	 0 0 1
	 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

135: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


indS (2 : 2): [ 1 2 ]
------------------------------ Fine seq_i

137: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp2_i (2 : 2): [ 1 2 ]
------------------------------ Fine seq_i

138: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp2_i (2 : 2): [ 1 2 ]
indS (2 : 2): [ 1 2 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp2_i (2 : 2): [ 1 2 ]
st = 1
end = 2


indBS (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indBS (2 : 2): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indBS (2 : 2): [ 1 2 ]
indx = 1


indBS (1 : 2): [ 2 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indBS (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indBS (1 : 2): [ 2 ]
indx = 1


indBS (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



indBS (0 : 2): [ ]
------------------------------ Fine setdiff_i


*** triangola ***
27: diag_i	<=>	ris <- diag(m)
ris (3 x 3 : 3 x 3): [
	 0 0 1
	 0 0 1
	 0 0 0
 ]


Dmem (3 : 3): [ 0 0 0 ]
------------------------------ Fine diag_i

29: assegna1_s_diag_i	<=>	diag_i(m) <- s
ris (3 x 3 : 3 x 3): [
	 0 0 1
	 0 0 1
	 0 0 0
 ]
val = 0


ris (3 x 3 : 3 x 3): [
	 0 0 1
	 0 0 1
	 0 0 0
 ]
------------------------------ Fine assegna1_s_diag_i

33: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
ris (3 x 3 : 3 x 3): [
	 0 0 1
	 0 0 1
	 0 0 0
 ]
r = 1
val = 0


tmp1_i (1 : 9): [ 3 ]
------------------------------ Fine which_m_rowindxne_i

34: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
ris (3 x 3 : 3 x 3): [
	 0 0 1
	 0 0 1
	 0 0 0
 ]
c = 1, val = 0


tmp2_i (0 : 9): [ ]
------------------------------ Fine which_m_colindxne_i

35: unione_i	<=>	ris <- union(v1, v2)
tmp1_i (1 : 9): [ 3 ]
tmp2_i (0 : 9): [ ]
4876: elimina_doppi_i	<=>	ris <- union(v, v)
ind (1 : 1): [ 3 ]


ris (1 : 1): [ 3 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 3 ]
------------------------------ Fine unione_i

33: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
ris (3 x 3 : 3 x 3): [
	 0 0 1
	 0 0 1
	 0 0 0
 ]
r = 2
val = 0


tmp1_i (1 : 9): [ 3 ]
------------------------------ Fine which_m_rowindxne_i

34: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
ris (3 x 3 : 3 x 3): [
	 0 0 1
	 0 0 1
	 0 0 0
 ]
c = 2, val = 0


tmp2_i (0 : 9): [ ]
------------------------------ Fine which_m_colindxne_i

35: unione_i	<=>	ris <- union(v1, v2)
tmp1_i (1 : 9): [ 3 ]
tmp2_i (0 : 9): [ ]
4876: elimina_doppi_i	<=>	ris <- union(v, v)
ind (1 : 1): [ 3 ]


ris (1 : 1): [ 3 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 3 ]
------------------------------ Fine unione_i

33: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
ris (3 x 3 : 3 x 3): [
	 0 0 1
	 0 0 1
	 0 0 0
 ]
r = 3
val = 0


tmp1_i (0 : 9): [ ]
------------------------------ Fine which_m_rowindxne_i

34: which_m_colindxne_i	<=>	ris <- which(m[, c] != val)
ris (3 x 3 : 3 x 3): [
	 0 0 1
	 0 0 1
	 0 0 0
 ]
c = 3, val = 0


tmp2_i (2 : 9): [ 1 2 ]
------------------------------ Fine which_m_colindxne_i

35: unione_i	<=>	ris <- union(v1, v2)
tmp1_i (0 : 9): [ ]
tmp2_i (2 : 9): [ 1 2 ]
4876: elimina_doppi_i	<=>	ris <- union(v, v)
ind (2 : 2): [ 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione_i

55: InitMatr_i
coord (1 x 2 : 2 x 2): [
	 79854280 1819240302
 ]
val = 0


coord (1 x 2 : 2 x 2): [
	 0 0
 ]
------------------------------ Fine InitMatr_i

72: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 2


tmp1_i (2 : 9): [ 1 2 ]
------------------------------ Fine vettore2s_i

73: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (1 x 2 : 2 x 2): [
	 0 0
 ]
riga = 2
tmp1_i (2 : 9): [ 1 2 ]


coord (2 x 2 : 2 x 2): [
	 0 0
	 1 2
 ]
------------------------------ Fine aggiungi_mv_riga_i

74: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 2, el2 = 1


tmp1_i (2 : 9): [ 2 1 ]
------------------------------ Fine vettore2s_i

76: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
coord (2 x 2 : 2 x 2): [
	 0 0
	 1 2
 ]
riga = 3
tmp1_i (2 : 9): [ 2 1 ]


coord (3 x 2 : 3 x 2): [
	 0 0
	 1 2
	 2 1
 ]
------------------------------ Fine aggiungi_mv_riga_i

89: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (3 x 3 : 3 x 3): [
	 0 0 1
	 0 0 1
	 0 0 0
 ]


M_in (3 : 3): [ 1 1 0 ]
------------------------------ Fine somma_righe_i

91: which_v_indxlt_i	<=>	ris <- which(v<val)
M_in (3 : 3): [ 1 1 0 ]
val = 5

ris (3 : 4): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_i

95: which_m_colindxin_i	<=>	ris <- which(m[, c] %IN% v)
coord (3 x 2 : 3 x 2): [
	 0 0
	 1 2
	 2 1
 ]
c = 1
ris (3 : 4): [ 1 2 3 ]
3754: esiste_v_i	<=>	elem %IN% v
elem = 0
ris (3 : 4): [ 1 2 3 ]


indx = 0
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 1
ris (3 : 4): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3754: esiste_v_i	<=>	elem %IN% v
elem = 2
ris (3 : 4): [ 1 2 3 ]


indx = 2
------------------------------ Fine esiste_v_i



ind_aus (2 : 3): [ 2 3 ]
------------------------------ Fine which_m_colindxin_i

101: righe_i	<=>	ris <- m[indx,]
coord (3 x 2 : 3 x 2): [
	 0 0
	 1 2
	 2 1
 ]
ind_aus (2 : 3): [ 2 3 ]



tmp_coord1 (2 x 2 : 2 x 2): [
	 1 2
	 2 1
 ]
------------------------------ Fine righe_i

102: copia_m_i	<=>	ris <- da
tmp_coord1 (2 x 2 : 2 x 2): [
	 1 2
	 2 1
 ]


coord (2 x 2 : 3 x 2): [
	 1 2
	 2 1
 ]
------------------------------ Fine copia_m_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp1_i (2 : 9): [ 1 2 ]
------------------------------ Fine seq_i


*** sampleB ***

***sample***
tmp1_i (2 : 9): [ 1 2 ]
k = 1, replace = 0


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (7141 interne); stringhe deallocate: 0 (6611 interne)


Stringhe allocate: 5 (7141 interne); stringhe deallocate: 0 (6611 interne)

107: riga_i	<=>	ris <- m[r,]
coord (2 x 2 : 3 x 2): [
	 1 2
	 2 1
 ]
r = 1

coord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine riga_i

111: which_m_colneand2_i	<=>	ris <- which((m[, c] != val1) & (m[, c] != val2))
coord (2 x 2 : 3 x 2): [
	 1 2
	 2 1
 ]
c = 1, val1 = 1, val2 = 2


ris (0 : 4): [ ]
------------------------------ Fine which_m_colneand2_i

152: assegna1_v_diag_i	<=>	diag(m) <- v
ris (3 x 3 : 3 x 3): [
	 0 1 1
	 0 0 1
	 0 0 0
 ]
Dmem (3 : 3): [ 0 0 0 ]


ris (3 x 3 : 3 x 3): [
	 0 1 1
	 0 0 1
	 0 0 0
 ]
------------------------------ Fine assegna1_v_diag_i


Stringhe allocate: 5 (7146 interne); stringhe deallocate: 0 (6666 interne)



*****************************************
*****************************************


Stringhe allocate: 5 (7146 interne); stringhe deallocate: 0 (6721 interne)


*** probmod ***
46: InitMatr_i
checkOUT (3 x 3 : 3 x 3): [
	 79852360 -2147483648 -2147483648
	 2 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
val = 0


checkOUT (3 x 3 : 3 x 3): [
	 0 0 0
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

48: InitMatr_i
checkIN (3 x 3 : 3 x 3): [
	 79849120 1072693248 0
	 2 0 1072693248
	 3 1072693248 0
 ]
val = 0


checkIN (3 x 3 : 3 x 3): [
	 0 0 0
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

50: InitMatr_d
ris (3 x 3 : 3 x 3): [
	 5.842414621812633e-308 0 0
	 3.250818551911025e-318 0 0
	 0 0 0
 ]
val = 0


ris (3 x 3 : 3 x 3): [
	 0 0 0
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_d

52: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (3 x 3 : 3 x 3): [
	 0 1 1
	 0 0 1
	 0 0 0
 ]


M_in (3 : 3): [ 2 1 0 ]
------------------------------ Fine somma_righe_i

54: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (3 x 3 : 3 x 3): [
	 0 1 1
	 0 0 1
	 0 0 0
 ]


M_out (3 : 3): [ 0 1 2 ]
------------------------------ Fine somma_colonne_i

57: InitMatr_i
memory (3 x 3 : 3 x 3): [
	 79851296 1 1
	 1 1 1
	 1 1 1
 ]
val = -2147483648


memory (3 x 3 : 3 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (3 x 3 : 3 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 2


tmp_i1 (0 : 9): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (3 x 3 : 3 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 9): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 9): [ ]
tmp_i2 (0 : 9): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

119: InitVett_d
S_out (3 : 3): [ 4.283441371987361e-314 0 1.#QNAN ]
val = 0


S_out (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

122: InitVett_i
tmp_i1 (3 : 9): [ 79851808 1074790400 0 ]
val = 1


tmp_i1 (3 : 9): [ 1 1 1 ]
------------------------------ Fine InitVett_i

123: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
checkOUT (3 x 3 : 3 x 3): [
	 0 0 0
	 0 0 0
	 0 0 0
 ]
riga = 1
tmp_i1 (3 : 9): [ 1 1 1 ]


checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_i

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 1 1 1 1 ]
h (3 : 5): [ 1 4 2 ]


tmp_i1 (3 : 9): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 2


ind (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


T1 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 3 3 3 ]
s = 1


tmp_i1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (3 : 3): [ 4 4 4 ]


T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


old1 (3 : 3): [ 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 3 3 3 ]
s = 1


tmp_i1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (3 : 3): [ 4 4 4 ]


old2 (3 : 3): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (3 : 3): [ 5 5 5 ]
s = -1


new1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (3 : 3): [ 0 0 0 ]
s = 1


new2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


toll1 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 3 3 3 ]
s = 1


tmp_i1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (3 : 3): [ 4 4 4 ]


toll2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (3 : 3): [ 5 5 5 ]
T1 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (3 : 3): [ 4 4 4 ]
T1 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (3 : 3): [ 6.405448040301892e-314 0 0.7867240993512557 ]
val = 0


S1 (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (3 : 3): [ 0 0 0 ]
T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (3 : 3): [ 1 1 1 ]
T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


tmpm_d (3 x 2 : 3 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (3 x 2 : 3 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (3 : 3): [ 6.405445245866599e-314 0 1.00000001754945 ]
val = 0


S2 (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 3): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (3 : 3): [ 0 0 0 ]
ind (0 : 3): [ ]
val = -1.#INF


S2 (3 : 3): [ 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (3 : 3): [ 0 0 0 ]
S2 (3 : 3): [ 0 0 0 ]


ris (3 : 3): [ 0 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (3 : 3): [ 0 0 0 ]
div = 2.000


ris (3 : 3): [ 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (7296 interne); stringhe deallocate: 0 (6806 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
ris (3 : 3): [ 0 0 0 ]
val = -1.#INF


indok (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (3 x 3 : 3 x 3): [
	 0 0 0
	 0 0 0
	 0 0 0
 ]
riga = 1
indok (3 : 3): [ 1 2 3 ]
val = 1


checkIN (3 x 3 : 3 x 3): [
	 1 1 1
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


tmp_i1 (3 : 9): [ 1 2 3 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (3 : 9): [ 1 2 3 ]
indok (3 : 3): [ 1 2 3 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (3 : 9): [ 1 2 3 ]
st = 1
end = 3


indInf (3 : 3): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (3 : 3): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 3): [ 1 2 3 ]
indx = 1


indInf (2 : 3): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (2 : 3): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 3): [ 2 3 ]
indx = 1


indInf (1 : 3): [ 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (1 : 3): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 3): [ 3 ]
indx = 1


indInf (0 : 3): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 3): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
ris (3 : 3): [ 0 0 0 ]
indok (3 : 3): [ 1 2 3 ]


tmp_d1 (3 : 3): [ 0 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (3 : 3): [ 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (3 : 3): [ 0 0 0 ]
indInf (0 : 3): [ ]
val = -1


ris (3 : 3): [ 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
S_out (3 : 3): [ 0 0 0 ]
ris (3 : 3): [ 0 0 0 ]


tmp_d1 (3 : 3): [ 0 0 0 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 0 0 0
	 0 0 0
 ]
riga = 1
tmp_d1 (3 : 3): [ 0 0 0 ]


ris (3 x 3 : 3 x 3): [
	 0 0 0
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (3 x 3 : 3 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 9): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (3 x 3 : 3 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 9): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 9): [ ]
tmp_i2 (0 : 9): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 1 1 1 1 1 ]
h (3 : 5): [ 1 4 2 ]


tmp_i1 (3 : 9): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


ind (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 2 2 2 ]
s = 1


tmp_i1 (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (3 : 3): [ 3 3 3 ]


T2 (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


old1 (3 : 3): [ 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 2 2 2 ]
s = 1


tmp_i1 (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (3 : 3): [ 3 3 3 ]


old2 (3 : 3): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (3 : 3): [ 5 5 5 ]
s = -1


new1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (3 : 3): [ 0 0 0 ]
s = 1


new2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


toll1 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 2 2 2 ]
s = 1


tmp_i1 (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (3 : 3): [ 3 3 3 ]


toll2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (3 : 3): [ 5 5 5 ]
T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]


a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (3 : 3): [ 4 4 4 ]
T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]


b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


ind (0 : 3): [ ]
------------------------------ Fine which_v_indxNA_d

68: assegna1_vs_indx_d	<=>	v[indx] <- val
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
ind (0 : 3): [ ]
val = 0


a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
------------------------------ Fine assegna1_vs_indx_d

70: assegna1_vs_indx_d	<=>	v[indx] <- val
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
ind (0 : 3): [ ]
val = 0


b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine assegna1_vs_indx_d

78: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]


tmpm_d (3 x 2 : 3 x 2): [
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
 ]
------------------------------ Fine cbind2v_d

79: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (3 x 2 : 3 x 2): [
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
 ]


m (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
------------------------------ Fine max_righe_d

81: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
m (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine f_aux_d

83: diff_vv_d	<=>	ris <- v1 - v2
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
toll1 (3 : 3): [ 1 1 1 ]


tmp_d1 (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine diff_vv_d

84: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
val = 0

ind1 (0 : 3): [ ]
------------------------------ Fine which_v_indxlt_d

86: diff_vv_d	<=>	ris <- v1 - v2
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
toll1 (3 : 3): [ 1 1 1 ]


tmp_d1 (3 : 3): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

87: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (3 : 3): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 ]
val = 0


ind2 (0 : 3): [ ]
------------------------------ Fine which_v_indxgt_d

89: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (0 : 3): [ ]
ind2 (0 : 3): [ ]


tmp_i1 (0 : 3): [ ]
------------------------------ Fine interseca_i

91: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
tmp_i1 (0 : 3): [ ]
val = -1.#INF


S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine assegna1_vs_indx_d

93: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
ind (0 : 3): [ ]
val = 0


S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine assegna1_vs_indx_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (3 : 3): [ 0 0 0 ]
T2 (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


a (3 : 3): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (3 : 3): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]


a (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (3 : 3): [ 1 1 1 ]
T2 (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


tmpm_d (3 x 2 : 3 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (3 x 2 : 3 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


m (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
complemento = 0


ind (0 : 3): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
ind (0 : 3): [ ]
val = 0


a (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
ind (0 : 3): [ ]
val = 0


b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]


tmpm_d (3 x 2 : 3 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (3 x 2 : 3 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


m (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
m (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
T2 (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]


S2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
toll2 (3 : 3): [ 1 1 1 ]


tmp_d1 (3 : 3): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (3 : 3): [ -0.2132755425131789 -0.2132755425131789 -0.2132755425131789 ]
val = 0

ind1 (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (3 : 3): [ 0.2132755425131789 0.2132755425131789 0.2132755425131789 ]
toll2 (3 : 3): [ 1 1 1 ]


tmp_d1 (3 : 3): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (3 : 3): [ -0.7867244574868211 -0.7867244574868211 -0.7867244574868211 ]
val = 0


ind2 (0 : 3): [ ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (3 : 3): [ 1 2 3 ]
ind2 (0 : 3): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
ind2 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
tmp_i1 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (0 : 3): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (3 : 3): [ 1 1 1 ]
tmp_i1 (0 : 3): [ ]
val = -1.#INF


S2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (3 : 3): [ 1 1 1 ]
ind (0 : 3): [ ]
val = 0


S2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (3 : 3): [ 0.7867244574868211 0.7867244574868211 0.7867244574868211 ]
val = 0


ind (0 : 3): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (3 : 3): [ 1 1 1 ]
ind (0 : 3): [ ]
val = -1.#INF


S2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
S2 (3 : 3): [ 1 1 1 ]


S_out (3 : 3): [ 1.383188476936837 1.383188476936837 1.383188476936837 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
S_out (3 : 3): [ 1.383188476936837 1.383188476936837 1.383188476936837 ]
div = 2.000


S_out (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (7411 interne); stringhe deallocate: 0 (6906 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
S_out (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
val = -1.#INF


indok (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 0 0 0
	 0 0 0
 ]
riga = 2
indok (3 : 3): [ 1 2 3 ]
val = 1


checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


tmp_i1 (3 : 9): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (3 : 9): [ 1 2 3 ]
indok (3 : 3): [ 1 2 3 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (3 : 9): [ 1 2 3 ]
st = 1
end = 3


indInf (3 : 3): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (3 : 3): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 3): [ 1 2 3 ]
indx = 1


indInf (2 : 3): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (2 : 3): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 3): [ 2 3 ]
indx = 1


indInf (1 : 3): [ 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (1 : 3): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 3): [ 3 ]
indx = 1


indInf (0 : 3): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 3): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
S_out (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
indok (3 : 3): [ 1 2 3 ]


tmp_d1 (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]


min = 0.6915942384684183
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
S_out (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
indInf (0 : 3): [ ]
val = -1


S_out (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine assegna1_vs_indx_d

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 1 1 1 1 ]
h (3 : 5): [ 1 4 2 ]


tmp_i1 (3 : 9): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


ind (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


T1 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 2 2 2 ]
s = 1


tmp_i1 (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (3 : 3): [ 3 3 3 ]


T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


old1 (3 : 3): [ 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 2 2 2 ]
s = 1


tmp_i1 (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (3 : 3): [ 3 3 3 ]


old2 (3 : 3): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (3 : 3): [ 5 5 5 ]
s = -1


new1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (3 : 3): [ 0 0 0 ]
s = 1


new2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


toll1 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 2 2 2 ]
s = 1


tmp_i1 (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (3 : 3): [ 3 3 3 ]


toll2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (3 : 3): [ 5 5 5 ]
T1 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (3 : 3): [ 4 4 4 ]
T1 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (3 : 3): [ 5.000000070938199 5 5 ]
val = 0


S1 (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (3 : 3): [ 0 0 0 ]
T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (3 : 3): [ 1 1 1 ]
T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
b (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]


tmpm_d (3 x 2 : 3 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (3 x 2 : 3 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
complemento = 0


ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (3 : 3): [ 3.61483577459396 3.614836360604185 3.614836360604185 ]
val = 0


S2 (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (3 : 3): [ 1.#QNAN 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 3): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (3 : 3): [ 0 0 0 ]
ind (0 : 3): [ ]
val = -1.#INF


S2 (3 : 3): [ 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (3 : 3): [ 0 0 0 ]
S2 (3 : 3): [ 0 0 0 ]


ris (3 : 3): [ 0 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (3 : 3): [ 0 0 0 ]
div = 2.000


ris (3 : 3): [ 0 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (7496 interne); stringhe deallocate: 0 (6991 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
ris (3 : 3): [ 0 0 0 ]
val = -1.#INF


indok (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (3 x 3 : 3 x 3): [
	 1 1 1
	 0 0 0
	 0 0 0
 ]
riga = 2
indok (3 : 3): [ 1 2 3 ]
val = 1


checkIN (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 0 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


tmp_i1 (3 : 9): [ 1 2 3 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (3 : 9): [ 1 2 3 ]
indok (3 : 3): [ 1 2 3 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (3 : 9): [ 1 2 3 ]
st = 1
end = 3


indInf (3 : 3): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (3 : 3): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 3): [ 1 2 3 ]
indx = 1


indInf (2 : 3): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (2 : 3): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 3): [ 2 3 ]
indx = 1


indInf (1 : 3): [ 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (1 : 3): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 3): [ 3 ]
indx = 1


indInf (0 : 3): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 3): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
ris (3 : 3): [ 0 0 0 ]
indok (3 : 3): [ 1 2 3 ]


tmp_d1 (3 : 3): [ 0 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (3 : 3): [ 0 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (3 : 3): [ 0 0 0 ]
indInf (0 : 3): [ ]
val = -1


ris (3 : 3): [ 0 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
S_out (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
ris (3 : 3): [ 0 0 0 ]


tmp_d1 (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 0 0 0
	 0 0 0
 ]
riga = 2
tmp_d1 (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]


ris (3 x 3 : 3 x 3): [
	 0 0 0
	 0.6915942384684183 0.6915942384684183 0.6915942384684183
	 0 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (3 x 3 : 3 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


tmp_i1 (0 : 9): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (3 x 3 : 3 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


tmp_i2 (0 : 9): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 9): [ ]
tmp_i2 (0 : 9): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 1 1 1 1 1 ]
h (3 : 5): [ 1 4 2 ]


tmp_i1 (3 : 9): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 2


ind (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 3 3 3 ]
s = 1


tmp_i1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (3 : 3): [ 4 4 4 ]


T2 (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


old1 (3 : 3): [ 5 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 3 3 3 ]
s = 1


tmp_i1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (3 : 3): [ 4 4 4 ]


old2 (3 : 3): [ 0 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (3 : 3): [ 5 5 5 ]
s = -1


new1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (3 : 3): [ 0 0 0 ]
s = 1


new2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (3 : 9): [ 1 1 1 ]
s = 1


tmp_i1 (3 : 3): [ 2 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (3 : 3): [ 2 2 2 ]


toll1 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (3 : 3): [ 3 3 3 ]
s = 1


tmp_i1 (3 : 3): [ 4 4 4 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (3 : 3): [ 4 4 4 ]


toll2 (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (3 : 3): [ 5 5 5 ]
T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]


a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (3 : 3): [ 4 4 4 ]
T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]


b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]
complemento = 0


ind (0 : 3): [ ]
------------------------------ Fine which_v_indxNA_d

68: assegna1_vs_indx_d	<=>	v[indx] <- val
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
ind (0 : 3): [ ]
val = 0


a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
------------------------------ Fine assegna1_vs_indx_d

70: assegna1_vs_indx_d	<=>	v[indx] <- val
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
ind (0 : 3): [ ]
val = 0


b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine assegna1_vs_indx_d

78: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]


tmpm_d (3 x 2 : 3 x 2): [
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
 ]
------------------------------ Fine cbind2v_d

79: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (3 x 2 : 3 x 2): [
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
 ]


m (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
------------------------------ Fine max_righe_d

81: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
m (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
T1 (3 : 3): [ 3.614836360604185 3.614836360604185 3.614836360604185 ]


S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine f_aux_d

83: diff_vv_d	<=>	ris <- v1 - v2
a (3 : 3): [ 1.385163639395815 1.385163639395815 1.385163639395815 ]
toll1 (3 : 3): [ 1 1 1 ]


tmp_d1 (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine diff_vv_d

84: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
val = 0

ind1 (0 : 3): [ ]
------------------------------ Fine which_v_indxlt_d

86: diff_vv_d	<=>	ris <- v1 - v2
b (3 : 3): [ 0.3851636393958149 0.3851636393958149 0.3851636393958149 ]
toll1 (3 : 3): [ 1 1 1 ]


tmp_d1 (3 : 3): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

87: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (3 : 3): [ -0.6148363606041851 -0.6148363606041851 -0.6148363606041851 ]
val = 0


ind2 (0 : 3): [ ]
------------------------------ Fine which_v_indxgt_d

89: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (0 : 3): [ ]
ind2 (0 : 3): [ ]


tmp_i1 (0 : 3): [ ]
------------------------------ Fine interseca_i

91: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
tmp_i1 (0 : 3): [ ]
val = -1.#INF


S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine assegna1_vs_indx_d

93: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
ind (0 : 3): [ ]
val = 0


S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine assegna1_vs_indx_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (3 : 3): [ 0 0 0 ]
T2 (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]


a (3 : 3): [ -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (3 : 3): [ -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 ]


a (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (3 : 3): [ 1 1 1 ]
T2 (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]


b (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]


b (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
b (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]


tmpm_d (3 x 2 : 3 x 2): [
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (3 x 2 : 3 x 2): [
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
 ]


m (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
complemento = 0


ind (0 : 3): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
ind (0 : 3): [ ]
val = 0


a (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
ind (0 : 3): [ ]
val = 0


b (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
b (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]


tmpm_d (3 x 2 : 3 x 2): [
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (3 x 2 : 3 x 2): [
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
	 0.3224199317354524 0.6775800682645476
 ]


m (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
b (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
m (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
T2 (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]


S2 (3 : 3): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
toll2 (3 : 3): [ 1 1 1 ]


tmp_d1 (3 : 3): [ -0.6775800682645476 -0.6775800682645476 -0.6775800682645476 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (3 : 3): [ -0.6775800682645476 -0.6775800682645476 -0.6775800682645476 ]
val = 0

ind1 (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (3 : 3): [ 0.6775800682645476 0.6775800682645476 0.6775800682645476 ]
toll2 (3 : 3): [ 1 1 1 ]


tmp_d1 (3 : 3): [ -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (3 : 3): [ -0.3224199317354524 -0.3224199317354524 -0.3224199317354524 ]
val = 0


ind2 (0 : 3): [ ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (3 : 3): [ 1 2 3 ]
ind2 (0 : 3): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 3
ind2 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 3
tmp_i1 (0 : 3): [ ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (0 : 3): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (3 : 3): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
tmp_i1 (0 : 3): [ ]
val = -1.#INF


S2 (3 : 3): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (3 : 3): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
ind (0 : 3): [ ]
val = 0


S2 (3 : 3): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (3 : 3): [ 0.3224199317354524 0.3224199317354524 0.3224199317354524 ]
val = 0


ind (0 : 3): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (3 : 3): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
ind (0 : 3): [ ]
val = -1.#INF


S2 (3 : 3): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (3 : 3): [ 0.3831884769368366 0.3831884769368366 0.3831884769368366 ]
S2 (3 : 3): [ -2.101545225871788 -2.101545225871788 -2.101545225871788 ]


S_out (3 : 3): [ -1.718356748934951 -1.718356748934951 -1.718356748934951 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
S_out (3 : 3): [ -1.718356748934951 -1.718356748934951 -1.718356748934951 ]
div = 2.000


S_out (3 : 3): [ -0.8591783744674756 -0.8591783744674756 -0.8591783744674756 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (7596 interne); stringhe deallocate: 0 (7091 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
S_out (3 : 3): [ -0.8591783744674756 -0.8591783744674756 -0.8591783744674756 ]
val = -1.#INF


indok (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 0 0 0
 ]
riga = 3
indok (3 : 3): [ 1 2 3 ]
val = 1


checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


tmp_i1 (3 : 9): [ 1 2 3 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (3 : 9): [ 1 2 3 ]
indok (3 : 3): [ 1 2 3 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (3 : 9): [ 1 2 3 ]
st = 1
end = 3


indInf (3 : 3): [ 1 2 3 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (3 : 3): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (3 : 3): [ 1 2 3 ]
indx = 1


indInf (2 : 3): [ 2 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (2 : 3): [ 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 3): [ 2 3 ]
indx = 1


indInf (1 : 3): [ 3 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 3
indInf (1 : 3): [ 3 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 3): [ 3 ]
indx = 1


indInf (0 : 3): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 3): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
S_out (3 : 3): [ -0.8591783744674756 -0.8591783744674756 -0.8591783744674756 ]
indok (3 : 3): [ 1 2 3 ]


tmp_d1 (3 : 3): [ -0.8591783744674756 -0.8591783744674756 -0.8591783744674756 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (3 : 3): [ -0.8591783744674756 -0.8591783744674756 -0.8591783744674756 ]


min = -0.8591783744674756
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
S_out (3 : 3): [ -0.8591783744674756 -0.8591783744674756 -0.8591783744674756 ]
indInf (0 : 3): [ ]
val = -1.859178374467476


S_out (3 : 3): [ -0.8591783744674756 -0.8591783744674756 -0.8591783744674756 ]
------------------------------ Fine assegna1_vs_indx_d

155: InitVett_d
ris (3 : 3): [ 0 0 0 ]
val = 0


ris (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

156: aggiungi_ms_riga_i	<=>	m[riga,] <- val # riga <= dim(m)[0] + 1
checkIN (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 0 0 0
 ]
riga = 3, val = 1


checkIN (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine aggiungi_ms_riga_i

159: somma_vv_d	<=>	ris <- v1 + v2
S_out (3 : 3): [ -0.8591783744674756 -0.8591783744674756 -0.8591783744674756 ]
ris (3 : 3): [ 0 0 0 ]


tmp_d1 (3 : 3): [ -0.8591783744674756 -0.8591783744674756 -0.8591783744674756 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 0.6915942384684183 0.6915942384684183 0.6915942384684183
	 0 0 0
 ]
riga = 3
tmp_d1 (3 : 3): [ -0.8591783744674756 -0.8591783744674756 -0.8591783744674756 ]


ris (3 x 3 : 3 x 3): [
	 0 0 0
	 0.6915942384684183 0.6915942384684183 0.6915942384684183
	 -0.8591783744674756 -0.8591783744674756 -0.8591783744674756
 ]
------------------------------ Fine aggiungi_mv_riga_d

168: somma_m_d	<=>	ris <- sum(m)
ris (3 x 3 : 3 x 3): [
	 0 0 0
	 0.6915942384684183 0.6915942384684183 0.6915942384684183
	 -0.8591783744674756 -0.8591783744674756 -0.8591783744674756
 ]


ris: -0.5027524079971719
------------------------------ Fine somma_m_d

173: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkIN (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]


aus (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_colonne_i

175: which_v_indxne_i	<=>	ris <- which(v != val)
aus (3 : 3): [ 3 3 3 ]
val = 0


tmp_i1 (3 : 9): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

186: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkIN (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]


rs (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_righe_i

188: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (3 : 3): [ 3 3 3 ]
decr = 0


ord_ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine ordine_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


I_add (3 : 9): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
I (0 : 0): [ ]
I_add (3 : 9): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


I_add (3 : 9): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
I_add (3 : 9): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
r = 3
val = 0


I_add (3 : 9): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 6): [ 1 2 3 ]
I_add (3 : 9): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i

216: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 0


checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

218: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
val1 = 0
val2 = 1


checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

220: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]


aus (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_colonne_i

222: which_v_indxne_i	<=>	ris <- which(v != val)
aus (3 : 3): [ 3 3 3 ]
val = 0


tmp_i1 (3 : 9): [ 1 2 3 ]
------------------------------ Fine which_v_indxne_i

232: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]


rs (3 : 3): [ 3 3 3 ]
------------------------------ Fine somma_righe_i

234: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (3 : 3): [ 3 3 3 ]
decr = 0


ord_ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine ordine_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
r = 1
val = 0


I_add (3 : 9): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 6): [ ]
I_add (3 : 9): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (3 : 3): [ 1 2 3 ]


ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 3): [ 1 2 3 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
r = 2
val = 0


I_add (3 : 9): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 3): [ 1 2 3 ]
I_add (3 : 9): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (3 x 3 : 3 x 3): [
	 1 1 1
	 1 1 1
	 1 1 1
 ]
r = 3
val = 0


I_add (3 : 9): [ 1 2 3 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (3 : 6): [ 1 2 3 ]
I_add (3 : 9): [ 1 2 3 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (6 : 6): [ 1 2 3 1 2 3 ]


ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine elimina_doppi_i



ris (3 : 6): [ 1 2 3 ]
------------------------------ Fine unione1_i


Stringhe allocate: 5 (7681 interne); stringhe deallocate: 0 (7251 interne)

90: seq_i	<=>	ris <- seq(da, a, incr)
da = 3
a = 3
incr = 1


ris->indices (1 : 1): [ 3 ]
------------------------------ Fine seq_i


Stringhe allocate: 5 (7686 interne); stringhe deallocate: 0 (7266 interne)

143: vettore3s_d		<=>	ris <- c(el1, el2, el3)
el1 = 2.074782715405255, el2 = -0.1675841359990573, el3 = -0.1675841359990573


prob_mod (3 : 3): [ 2.074782715405255 -0.1675841359990573 -0.1675841359990573 ]
------------------------------ Fine vettore3s_d

145: assegna1_v_indxeq_d	<=>	v[which(v==val1)] <- val2
prob_mod (3 : 3): [ 2.074782715405255 -0.1675841359990573 -0.1675841359990573 ]
prob_mod (3 : 3): [ 2.074782715405255 -0.1675841359990573 -0.1675841359990573 ]
val1 = 0
val2 = 1.#QNAN


prob_mod (3 : 3): [ 2.074782715405255 -0.1675841359990573 -0.1675841359990573 ]
------------------------------ Fine assegna1_v_indxeq_d

147: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
prob_mod (3 : 3): [ 2.074782715405255 -0.1675841359990573 -0.1675841359990573 ]
complemento = 1


ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

153: copia_v_indx_d	<=>	ris <- v[indx]
prob_mod (3 : 3): [ 2.074782715405255 -0.1675841359990573 -0.1675841359990573 ]
ind (3 : 3): [ 1 2 3 ]


tmp1_d (3 : 16): [ 2.074782715405255 -0.1675841359990573 -0.1675841359990573 ]
------------------------------ Fine copia_v_indx_d

154: min_v_d	<=>	ris <- min(v)
tmp1_d (3 : 16): [ 2.074782715405255 -0.1675841359990573 -0.1675841359990573 ]


min = -0.1675841359990573
------------------------------ Fine min_v_d

157: somma1_vs_d	<=>	v <- v + s
prob_mod (3 : 3): [ 2.074782715405255 -0.1675841359990573 -0.1675841359990573 ]
s = 0.2786952471101685


prob_mod (3 : 3): [ 2.353477962515424 0.1111111111111111 0.1111111111111112 ]
------------------------------ Fine somma1_vs_d

160: assegna1_v_indxNA_d	<=>	v1[which(is.na(v2))] <- val oppure v1[which(!is.na(v2))] <- val
prob_mod (3 : 3): [ 2.353477962515424 0.1111111111111111 0.1111111111111112 ]
prob_mod (3 : 3): [ 2.353477962515424 0.1111111111111111 0.1111111111111112 ]
val = 0
complemento = 0


prob_mod (3 : 3): [ 2.353477962515424 0.1111111111111111 0.1111111111111112 ]
------------------------------ Fine assegna1_v_indxNA_d

162: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
prob_mod (3 : 3): [ 2.353477962515424 0.1111111111111111 0.1111111111111112 ]
canc_NA = 0



ris: 2.575700184737646
------------------------------ Fine somma_v_d

162: dividi1_vs_d	<=>	v <- v / div
prob_mod (3 : 3): [ 2.353477962515424 0.1111111111111111 0.1111111111111112 ]
div = 2.576


prob_mod (3 : 3): [ 0.9137235678519559 0.04313821607402207 0.04313821607402208 ]
------------------------------ Fine dividi1_vs_d

164: vettore3s_i		<=>	ris <- c(el1, el2, el3)
el1 = 1, el2 = 2, el3 = 3


tmp1_i (3 : 3): [ 1 2 3 ]
------------------------------ Fine vettore3s_i


*** sampleB_p ***

*** sample_p ***
tmp1_i (3 : 3): [ 1 2 3 ]
k = 1, replace = 0
prob_mod (3 : 3): [ 0.9137235678519559 0.04313821607402207 0.04313821607402208 ]


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (7686 interne); stringhe deallocate: 0 (7266 interne)


*** assign_nodes ***
35: copia_v_i	<=>	ris[st:end] <- v[st:end]
h (3 : 5): [ 1 4 2 ]
st = 1
end = 3


or_h (3 : 3): [ 1 4 2 ]
------------------------------ Fine copia_v_i

37: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 3
incr = 1


aus_h (3 : 3): [ 1 2 3 ]
------------------------------ Fine seq_i

43: InitVett_i
index (1 : 1): [ 79871488 ]
val = 0


index (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i

45: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (1 x 1 : 1 x 1): [
	 1
 ]


M_in (1 : 1): [ 1 ]
------------------------------ Fine somma_righe_i

47: ordine_i	<=>	ris <- order(v, decreasing=decr)
M_in (1 : 1): [ 1 ]
decr = 1


Ord (1 : 1): [ 1 ]
------------------------------ Fine ordine_i

52: riga_d	<=>	ris <- m[r,]
ris (1 x 3 : 1 x 3): [
	 0.6915942384684183 0.6915942384684183 0.6915942384684183
 ]
r = 1

p (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine riga_d

54: which_v_indxle_d	<=>	ris <- which(v<=val)
p (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
val = 0


tmp_i (0 : 3): [ ]
------------------------------ Fine which_v_indxle_d

61: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 1 1 1 1 ]
h (3 : 5): [ 1 4 2 ]


Sin_h (3 : 3): [ 1 1 1 ]
------------------------------ Fine assegna_v_indxNA_i

66: which_v_indxgt_i	<=>	ris <- which(v > val)
Sin_h (3 : 3): [ 1 1 1 ]
val = 4


ind (0 : 3): [ ]
------------------------------ Fine which_v_indxgt_i

72: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
p (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
aus_h (3 : 3): [ 1 2 3 ]


tmp_d (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine assegna_v_indxNA_d

73: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
tmp_d (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
canc_NA = 0



ris: 2.074782715405255
------------------------------ Fine somma_v_d

74: dividi_vs_d	ris <- v / div
tmp_d (3 : 3): [ 0.6915942384684183 0.6915942384684183 0.6915942384684183 ]
div = 2.075


p (3 : 3): [ 0.3333333333333333 0.3333333333333333 0.3333333333333333 ]
------------------------------ Fine dividi_vs_d


*** sampleB_p ***

*** sample_p ***
h (3 : 5): [ 1 4 2 ]
k = 1, replace = 0
p (3 : 3): [ 0.3333333333333333 0.3333333333333333 0.3333333333333333 ]


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (7741 interne); stringhe deallocate: 0 (7266 interne)

81: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
h (3 : 5): [ 1 4 2 ]
ris (1 : 1): [ 1 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 1
h (3 : 5): [ 1 4 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
h (3 : 5): [ 1 4 2 ]
indx = 1


h (2 : 5): [ 4 2 ]
------------------------------ Fine elimina1_indx_i



h (2 : 5): [ 4 2 ]
------------------------------ Fine setdiff1_i

83: which_vv_eq_i	<=>	ris <- which(v1 == v2)
or_h (3 : 3): [ 1 4 2 ]
ris (1 : 1): [ 1 ]
2017: esiste_v_i	<=>	elem %IN% v
elem = 1
or_h (3 : 3): [ 1 4 2 ]


indx = 1
------------------------------ Fine esiste_v_i



tmp_i (1 : 3): [ 1 ]
------------------------------ Fine which_vv_eq_i

84: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
aus_h (3 : 3): [ 1 2 3 ]
tmp_i (1 : 3): [ 1 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 1
aus_h (3 : 3): [ 1 2 3 ]


indx = 1
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
aus_h (3 : 3): [ 1 2 3 ]
indx = 1


aus_h (2 : 3): [ 2 3 ]
------------------------------ Fine elimina1_indx_i



aus_h (2 : 3): [ 2 3 ]
------------------------------ Fine setdiff1_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
ris (1 x 1 : 1 x 1): [
	 1
 ]
riga = 1
val = 1


ind (1 : 3): [ 1 ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
index (1 : 1): [ 1 ]
ind (1 : 3): [ 1 ]


co (1 : 1): [ 1 ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
ri (1 : 1): [ 1 ]
co (1 : 1): [ 1 ]
val = 1


Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

107: esiste_v_i	<=>	elem %IN% v
elem = 1
ris->indices (1 : 1): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

109: accoda1_vv_i	<=>	v1 <- c(v1, v2)
ris (0 : 1): [ ]
ri (1 : 1): [ 1 ]


ris (1 : 1): [ 1 ]
------------------------------ Fine accoda_vv_i


Stringhe allocate: 5 (7751 interne); stringhe deallocate: 0 (7331 interne)

332: accoda1_vv_i	<=>	v1 <- c(v1, v2)
h_new (0 : 6): [ ]
ris (1 : 1): [ 1 ]


h_new (1 : 6): [ 1 ]
------------------------------ Fine accoda_vv_i

334: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]


Sout (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_colonne_i

336: max_v_i		<=>	ris <- max(v)
Sout (5 : 5): [ 1 1 1 1 1 ]


max = 1
------------------------------ Fine max_v_i

338: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 2
incr = 1


tmp2_i (3 : 3): [ 0 1 2 ]
------------------------------ Fine seq_i


*** hist1 ***
Sout (5 : 5): [ 1 1 1 1 1 ]
tmp2_i (3 : 3): [ 0 1 2 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
tmp1_i (2 : 3): [ 1 2 ]
val = 0


tmp1_i (2 : 3): [ 0 0 ]
------------------------------ Fine InitVett_i



tmp1_i (2 : 3): [ 0 5 ]

Stringhe allocate: 5 (7751 interne); stringhe deallocate: 0 (7331 interne)

340: promuovi_i	(implicita)
tmp1_i (2 : 3): [ 0 5 ]
ATTENZIONE (promuovi_i, linea connectivity_modular.c # 340): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

tmp1_d (2 : 16): [ 0 5 ]
------------------------------ Fine promuovi_i

341: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
Freq_out (7 : 7): [ 0 5 0 0 0 0 0 ]
start = 1
end = 2
tmp1_d (2 : 16): [ 0 5 ]


Freq_out (7 : 7): [ 0 5 0 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

343: somma_righe_i	<=>	ris <- apply(m, 1, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]


Sin (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_righe_i

345: max_v_i		<=>	ris <- max(v)
Sin (5 : 5): [ 1 1 1 1 1 ]


max = 1
------------------------------ Fine max_v_i

347: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 2
incr = 1


tmp2_i (3 : 3): [ 0 1 2 ]
------------------------------ Fine seq_i


*** hist1 ***
Sin (5 : 5): [ 1 1 1 1 1 ]
tmp2_i (3 : 3): [ 0 1 2 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
tmp1_i (2 : 3): [ 0 5 ]
val = 0


tmp1_i (2 : 3): [ 0 0 ]
------------------------------ Fine InitVett_i



tmp1_i (2 : 3): [ 0 5 ]

Stringhe allocate: 5 (7752 interne); stringhe deallocate: 0 (7332 interne)

349: promuovi_i	(implicita)
tmp1_i (2 : 3): [ 0 5 ]
ATTENZIONE (promuovi_i, linea connectivity_modular.c # 349): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

tmp1_d (2 : 16): [ 0 5 ]
------------------------------ Fine promuovi_i

350: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
Freq_in (7 : 7): [ 0 5 0 0 0 0 0 ]
start = 1
end = 2
tmp1_d (2 : 16): [ 0 5 ]


Freq_in (7 : 7): [ 0 5 0 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

110: somma_righe_i	<=>	ris <- apply(m, 1, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]


Sin (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_righe_i

112: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]


Sout (5 : 5): [ 1 1 1 1 1 ]
------------------------------ Fine somma_colonne_i


*** cluster_coeff ***
19: trasponi_i	<=>	ris <- t(m)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]


tmpm_i (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
------------------------------ Fine trasponi_i

20: somma1_m_i	<=>	m1 <- m1 + m2
tmpm_i (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]


tmpm_i (5 x 5 : 5 x 5): [
	 2 0 0 0 0
	 0 0 0 0 2
	 0 0 0 2 0
	 0 0 2 0 0
	 0 2 0 0 0
 ]
------------------------------ Fine somma1_m_i

22: which_m_indxne_i	<=>	ris <- which(m!=val)
tmpm_i (5 x 5 : 5 x 5): [
	 2 0 0 0 0
	 0 0 0 0 2
	 0 0 0 2 0
	 0 0 2 0 0
	 0 2 0 0 0
 ]
val = 0


ind (5 : 25): [ 1 10 14 18 22 ]
------------------------------ Fine which_m_indxne_i

24: assegna1_ms_indx_i	<=>	m[indx] = val
tmpm_i (5 x 5 : 5 x 5): [
	 2 0 0 0 0
	 0 0 0 0 2
	 0 0 0 2 0
	 0 0 2 0 0
	 0 2 0 0 0
 ]
ind (5 : 25): [ 1 10 14 18 22 ]
val = 1


tmpm_i (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_ms_indx_i

26: assegna1_s_diag_i	<=>	diag_i(m) <- s
tmpm_i (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
val = 0


tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_s_diag_i

31: InitVett_d
ris (5 : 5): [ 0 0 0 0 0 ]
val = 0


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
riga = 1


ris: 0
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
r = 1
val = 0


neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
riga = 2


ris: 1
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
r = 2
val = 0


neighbours (1 : 25): [ 5 ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
riga = 3


ris: 1
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
r = 3
val = 0


neighbours (1 : 25): [ 4 ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
riga = 4


ris: 1
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
r = 4
val = 0


neighbours (1 : 25): [ 3 ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
riga = 5


ris: 1
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
r = 5
val = 0


neighbours (1 : 25): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

69: media_v_d	<=>	ris <- mean(v)
ris (5 : 5): [ 0 0 0 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 5 (7768 interne); stringhe deallocate: 0 (7348 interne)


*** module1 ***
44: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp1_i (2 : 2): [ 1 2 ]
------------------------------ Fine seq_i


*** sampleB ***

***sample***
tmp1_i (2 : 2): [ 1 2 ]
k = 1, replace = 0


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (7783 interne); stringhe deallocate: 0 (7348 interne)


Stringhe allocate: 5 (7783 interne); stringhe deallocate: 0 (7348 interne)


*** mod1 ***
18: InitMatr_i
ris (1 x 1 : 1 x 1): [
	 79870024
 ]
val = 0


ris (1 x 1 : 1 x 1): [
	 0
 ]
------------------------------ Fine InitMatr_i


Stringhe allocate: 5 (7788 interne); stringhe deallocate: 0 (7348 interne)


*** probmod ***
46: InitMatr_i
checkOUT (1 x 2 : 1 x 2): [
	 79855152 25344
 ]
val = 0


checkOUT (1 x 2 : 1 x 2): [
	 0 0
 ]
------------------------------ Fine InitMatr_i

48: InitMatr_i
checkIN (1 x 2 : 1 x 2): [
	 79867400 0
 ]
val = 0


checkIN (1 x 2 : 1 x 2): [
	 0 0
 ]
------------------------------ Fine InitMatr_i

50: InitMatr_d
ris (1 x 2 : 1 x 2): [
	 3.28723948461044e-085 3.125653738367329e-005
 ]
val = 0


ris (1 x 2 : 1 x 2): [
	 0 0
 ]
------------------------------ Fine InitMatr_d

52: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (1 x 1 : 1 x 1): [
	 1
 ]


M_in (1 : 1): [ 1 ]
------------------------------ Fine somma_righe_i

54: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (1 x 1 : 1 x 1): [
	 1
 ]


M_out (1 : 1): [ 1 ]
------------------------------ Fine somma_colonne_i

57: InitMatr_i
memory (1 x 3 : 1 x 3): [
	 79869856 778334061 1918959715
 ]
val = -2147483648


memory (1 x 3 : 1 x 3): [
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (1 x 3 : 1 x 3): [
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 3): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (1 x 3 : 1 x 3): [
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 3): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 3): [ ]
tmp_i2 (0 : 3): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 1 1 1 1 1 ]
h (2 : 5): [ 4 2 ]


tmp_i1 (2 : 3): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 3): [ 1 1 ]
s = 1


ind (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 3): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 3): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (2 : 2): [ 5 5 ]
s = -1


new1 (2 : 2): [ 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (2 : 2): [ 0 0 ]
s = 1


new2 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 3): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (2 : 2): [ 5 5 ]
T1 (2 : 2): [ 3.614836360604185 3.614836360604185 ]


a (2 : 2): [ 1.385163639395815 1.385163639395815 ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.385163639395815 1.385163639395815 ]


a (2 : 2): [ 1.385163639395815 1.385163639395815 ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (2 : 2): [ 4 4 ]
T1 (2 : 2): [ 3.614836360604185 3.614836360604185 ]


b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]


b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (2 : 2): [ 3.614836360604185 3.614836360604185 ]
complemento = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxNA_d

68: assegna1_vs_indx_d	<=>	v[indx] <- val
a (2 : 2): [ 1.385163639395815 1.385163639395815 ]
ind (0 : 2): [ ]
val = 0


a (2 : 2): [ 1.385163639395815 1.385163639395815 ]
------------------------------ Fine assegna1_vs_indx_d

70: assegna1_vs_indx_d	<=>	v[indx] <- val
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
ind (0 : 2): [ ]
val = 0


b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine assegna1_vs_indx_d

78: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 1.385163639395815 1.385163639395815 ]
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
 ]
------------------------------ Fine cbind2v_d

79: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
 ]


m (2 : 2): [ 1.385163639395815 1.385163639395815 ]
------------------------------ Fine max_righe_d

81: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (2 : 2): [ 1.385163639395815 1.385163639395815 ]
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
m (2 : 2): [ 1.385163639395815 1.385163639395815 ]
T1 (2 : 2): [ 3.614836360604185 3.614836360604185 ]


S1 (2 : 2): [ 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine f_aux_d

83: diff_vv_d	<=>	ris <- v1 - v2
a (2 : 2): [ 1.385163639395815 1.385163639395815 ]
toll1 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine diff_vv_d

84: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
val = 0

ind1 (0 : 2): [ ]
------------------------------ Fine which_v_indxlt_d

86: diff_vv_d	<=>	ris <- v1 - v2
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
toll1 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

87: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]
val = 0


ind2 (0 : 2): [ ]
------------------------------ Fine which_v_indxgt_d

89: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (0 : 2): [ ]
ind2 (0 : 2): [ ]


tmp_i1 (0 : 2): [ ]
------------------------------ Fine interseca_i

91: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (2 : 2): [ 0.3831884769368366 0.3831884769368366 ]
tmp_i1 (0 : 2): [ ]
val = -1.#INF


S1 (2 : 2): [ 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine assegna1_vs_indx_d

93: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (2 : 2): [ 0.3831884769368366 0.3831884769368366 ]
ind (0 : 2): [ ]
val = 0


S1 (2 : 2): [ 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine assegna1_vs_indx_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (2 : 2): [ 0 0 ]
T2 (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]


a (2 : 2): [ -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ -0.7867244574868211 -0.7867244574868211 ]


a (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (2 : 2): [ 1 1 ]
T2 (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]


b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]


b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


m (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
complemento = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
ind (0 : 2): [ ]
val = 0


a (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]
ind (0 : 2): [ ]
val = 0


b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


m (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]
m (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
T2 (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]


S2 (2 : 2): [ 1 1 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
toll2 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.2132755425131789 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (2 : 2): [ -0.2132755425131789 -0.2132755425131789 ]
val = 0

ind1 (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]
toll2 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (2 : 2): [ -0.7867244574868211 -0.7867244574868211 ]
val = 0


ind2 (0 : 2): [ ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (2 : 2): [ 1 2 ]
ind2 (0 : 2): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (0 : 2): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 1 1 ]
tmp_i1 (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 1 1 ]
ind (0 : 2): [ ]
val = 0


S2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
val = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 1 1 ]
ind (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (2 : 2): [ 0.3831884769368366 0.3831884769368366 ]
S2 (2 : 2): [ 1 1 ]


ris (2 : 2): [ 1.383188476936837 1.383188476936837 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (2 : 2): [ 1.383188476936837 1.383188476936837 ]
div = 2.000


ris (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (7948 interne); stringhe deallocate: 0 (7448 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
ris (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
val = -1.#INF


indok (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (1 x 2 : 1 x 2): [
	 0 0
 ]
riga = 1
indok (2 : 2): [ 1 2 ]
val = 1


checkOUT (1 x 2 : 1 x 2): [
	 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp_i1 (2 : 3): [ 1 2 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (2 : 3): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (2 : 3): [ 1 2 ]
st = 1
end = 2


indInf (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 2): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
ris (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]


min = 0.6915942384684183
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
indInf (0 : 2): [ ]
val = -1


ris (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine assegna1_vs_indx_d

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 1 1 1 1 ]
h (2 : 5): [ 4 2 ]


tmp_i1 (2 : 3): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 3): [ 1 1 ]
s = 1


ind (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 3): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 3): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (2 : 2): [ 5 5 ]
s = -1


new1 (2 : 2): [ 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (2 : 2): [ 0 0 ]
s = 1


new2 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 3): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (2 : 2): [ 5 5 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (2 : 2): [ 4 4 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (2 : 2): [ 6.21834586683857e+175 5.387842123834802e-310 ]
val = 0


S1 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (2 : 2): [ 0 0 ]
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (2 : 2): [ 1 1 ]
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (2 : 2): [ 5.842414621812633e-308 0 ]
val = 0


S2 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0 0 ]
ind (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (2 : 2): [ 0 0 ]
S2 (2 : 2): [ 0 0 ]


ris (2 : 2): [ 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (2 : 2): [ 0 0 ]
div = 2.000


ris (2 : 2): [ 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (8053 interne); stringhe deallocate: 0 (7533 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
ris (2 : 2): [ 0 0 ]
val = -1.#INF


indok (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (1 x 2 : 1 x 2): [
	 0 0
 ]
riga = 1
indok (2 : 2): [ 1 2 ]
val = 1


checkIN (1 x 2 : 1 x 2): [
	 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp_i1 (2 : 3): [ 1 2 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (2 : 3): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (2 : 3): [ 1 2 ]
st = 1
end = 2


indInf (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 2): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
ris (2 : 2): [ 0 0 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 2): [ 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (2 : 2): [ 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (2 : 2): [ 0 0 ]
indInf (0 : 2): [ ]
val = -1


ris (2 : 2): [ 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
ris (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
ris (2 : 2): [ 0 0 ]


tmp_d1 (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (1 x 2 : 1 x 2): [
	 0 0
 ]
riga = 1
tmp_d1 (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]


ris (1 x 2 : 1 x 2): [
	 0.6915942384684183 0.6915942384684183
 ]
------------------------------ Fine aggiungi_mv_riga_d

168: somma_m_d	<=>	ris <- sum(m)
ris (1 x 2 : 1 x 2): [
	 0.6915942384684183 0.6915942384684183
 ]


ris: 1.383188476936837
------------------------------ Fine somma_m_d

173: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkIN (1 x 2 : 1 x 2): [
	 1 1
 ]


aus (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

175: which_v_indxne_i	<=>	ris <- which(v != val)
aus (2 : 2): [ 1 1 ]
val = 0


tmp_i1 (2 : 3): [ 1 2 ]
------------------------------ Fine which_v_indxne_i

186: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkIN (1 x 2 : 1 x 2): [
	 1 1
 ]


rs (1 : 1): [ 2 ]
------------------------------ Fine somma_righe_i

188: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (1 : 1): [ 2 ]
decr = 0


ord_ind (1 : 1): [ 1 ]
------------------------------ Fine ordine_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (1 x 2 : 1 x 2): [
	 1 1
 ]
r = 1
val = 0


I_add (2 : 2): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
I (0 : 0): [ ]
I_add (2 : 2): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

216: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
checkOUT (1 x 2 : 1 x 2): [
	 1 1
 ]
checkOUT (1 x 2 : 1 x 2): [
	 1 1
 ]
val1 = 0
val2 = 0


checkOUT (1 x 2 : 1 x 2): [
	 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

218: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
checkOUT (1 x 2 : 1 x 2): [
	 1 1
 ]
checkOUT (1 x 2 : 1 x 2): [
	 1 1
 ]
val1 = 0
val2 = 1


checkOUT (1 x 2 : 1 x 2): [
	 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

220: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkOUT (1 x 2 : 1 x 2): [
	 1 1
 ]


aus (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

222: which_v_indxne_i	<=>	ris <- which(v != val)
aus (2 : 2): [ 1 1 ]
val = 0


tmp_i1 (2 : 3): [ 1 2 ]
------------------------------ Fine which_v_indxne_i

232: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkOUT (1 x 2 : 1 x 2): [
	 1 1
 ]


rs (1 : 1): [ 2 ]
------------------------------ Fine somma_righe_i

234: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (1 : 1): [ 2 ]
decr = 0


ord_ind (1 : 1): [ 1 ]
------------------------------ Fine ordine_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (1 x 2 : 1 x 2): [
	 1 1
 ]
r = 1
val = 0


I_add (2 : 2): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 2): [ ]
I_add (2 : 2): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i


Stringhe allocate: 5 (8098 interne); stringhe deallocate: 0 (7653 interne)


Stringhe allocate: 5 (8103 interne); stringhe deallocate: 0 (7668 interne)


*** module2 ***
44: seq_i	<=>	ris <- seq(da, a, incr)
da = 2
a = 2
incr = 1


tmp1_i (1 : 1): [ 2 ]
------------------------------ Fine seq_i


*** sampleB ***
58: rep_v_i	<=>	ris <- rep(v, rip)
tmp1_i (1 : 1): [ 2 ]
rip = 1


ris (1 : 1): [ 2 ]
------------------------------ Fine rep_v_i


Stringhe allocate: 5 (8113 interne); stringhe deallocate: 0 (7668 interne)


*** mod2 ***
17: InitMatr_i
ris (2 x 2 : 2 x 2): [
	 79849440 -165085085
	 778334061 1071154728
 ]
val = 0


ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i


Stringhe allocate: 5 (8118 interne); stringhe deallocate: 0 (7668 interne)


*** probmod ***
46: InitMatr_i
checkOUT (2 x 2 : 2 x 2): [
	 79866784 1935999081
	 1600483937 25390
 ]
val = 0


checkOUT (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i

48: InitMatr_i
checkIN (2 x 2 : 2 x 2): [
	 79867152 1918959715
	 778334061 25390
 ]
val = 0


checkIN (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i

50: InitMatr_d
ris (2 x 2 : 2 x 2): [
	 6.218345866839189e+175 0
	 5.387842123834802e-310 0
 ]
val = 0


ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_d

52: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (2 x 2 : 2 x 2): [
	 0 0
	 1 0
 ]


M_in (2 : 2): [ 0 1 ]
------------------------------ Fine somma_righe_i

54: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (2 x 2 : 2 x 2): [
	 0 0
	 1 0
 ]


M_out (2 : 2): [ 1 0 ]
------------------------------ Fine somma_colonne_i

57: InitMatr_i
memory (2 x 3 : 2 x 3): [
	 79858776 0 79039408
	 1 0 1072245976
 ]
val = -2147483648


memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 1 1 1 1 1 ]
h (2 : 5): [ 4 2 ]


tmp_i1 (2 : 6): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


ind (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (2 : 2): [ 5 5 ]
s = -1


new1 (2 : 2): [ 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (2 : 2): [ 0 0 ]
s = 1


new2 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (2 : 2): [ 5 5 ]
T1 (2 : 2): [ 3.614836360604185 3.614836360604185 ]


a (2 : 2): [ 1.385163639395815 1.385163639395815 ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.385163639395815 1.385163639395815 ]


a (2 : 2): [ 1.385163639395815 1.385163639395815 ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (2 : 2): [ 4 4 ]
T1 (2 : 2): [ 3.614836360604185 3.614836360604185 ]


b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]


b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (2 : 2): [ 3.614836360604185 3.614836360604185 ]
complemento = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxNA_d

68: assegna1_vs_indx_d	<=>	v[indx] <- val
a (2 : 2): [ 1.385163639395815 1.385163639395815 ]
ind (0 : 2): [ ]
val = 0


a (2 : 2): [ 1.385163639395815 1.385163639395815 ]
------------------------------ Fine assegna1_vs_indx_d

70: assegna1_vs_indx_d	<=>	v[indx] <- val
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
ind (0 : 2): [ ]
val = 0


b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine assegna1_vs_indx_d

78: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 1.385163639395815 1.385163639395815 ]
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
 ]
------------------------------ Fine cbind2v_d

79: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
 ]


m (2 : 2): [ 1.385163639395815 1.385163639395815 ]
------------------------------ Fine max_righe_d

81: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (2 : 2): [ 1.385163639395815 1.385163639395815 ]
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
m (2 : 2): [ 1.385163639395815 1.385163639395815 ]
T1 (2 : 2): [ 3.614836360604185 3.614836360604185 ]


S1 (2 : 2): [ 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine f_aux_d

83: diff_vv_d	<=>	ris <- v1 - v2
a (2 : 2): [ 1.385163639395815 1.385163639395815 ]
toll1 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine diff_vv_d

84: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
val = 0

ind1 (0 : 2): [ ]
------------------------------ Fine which_v_indxlt_d

86: diff_vv_d	<=>	ris <- v1 - v2
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
toll1 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

87: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]
val = 0


ind2 (0 : 2): [ ]
------------------------------ Fine which_v_indxgt_d

89: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (0 : 2): [ ]
ind2 (0 : 2): [ ]


tmp_i1 (0 : 2): [ ]
------------------------------ Fine interseca_i

91: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (2 : 2): [ 0.3831884769368366 0.3831884769368366 ]
tmp_i1 (0 : 2): [ ]
val = -1.#INF


S1 (2 : 2): [ 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine assegna1_vs_indx_d

93: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (2 : 2): [ 0.3831884769368366 0.3831884769368366 ]
ind (0 : 2): [ ]
val = 0


S1 (2 : 2): [ 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine assegna1_vs_indx_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (2 : 2): [ 0 0 ]
T2 (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]


a (2 : 2): [ -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ -0.7867244574868211 -0.7867244574868211 ]


a (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (2 : 2): [ 1 1 ]
T2 (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]


b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]


b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


m (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
complemento = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
ind (0 : 2): [ ]
val = 0


a (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]
ind (0 : 2): [ ]
val = 0


b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


m (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]
m (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
T2 (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]


S2 (2 : 2): [ 1 1 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
toll2 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.2132755425131789 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (2 : 2): [ -0.2132755425131789 -0.2132755425131789 ]
val = 0

ind1 (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]
toll2 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (2 : 2): [ -0.7867244574868211 -0.7867244574868211 ]
val = 0


ind2 (0 : 2): [ ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (2 : 2): [ 1 2 ]
ind2 (0 : 2): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (0 : 2): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 1 1 ]
tmp_i1 (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 1 1 ]
ind (0 : 2): [ ]
val = 0


S2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
val = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 1 1 ]
ind (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (2 : 2): [ 0.3831884769368366 0.3831884769368366 ]
S2 (2 : 2): [ 1 1 ]


ris (2 : 2): [ 1.383188476936837 1.383188476936837 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (2 : 2): [ 1.383188476936837 1.383188476936837 ]
div = 2.000


ris (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (8278 interne); stringhe deallocate: 0 (7768 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
ris (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
val = -1.#INF


indok (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
indok (2 : 2): [ 1 2 ]
val = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (2 : 6): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (2 : 6): [ 1 2 ]
st = 1
end = 2


indInf (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 2): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
ris (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]


min = 0.6915942384684183
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
indInf (0 : 2): [ ]
val = -1


ris (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine assegna1_vs_indx_d

155: InitVett_d
S_in (2 : 2): [ 6.218345866841438e+175 5.387842123834802e-310 ]
val = 0


S_in (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

156: aggiungi_ms_riga_i	<=>	m[riga,] <- val # riga <= dim(m)[0] + 1
checkIN (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1, val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
------------------------------ Fine aggiungi_ms_riga_i

159: somma_vv_d	<=>	ris <- v1 + v2
ris (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
S_in (2 : 2): [ 0 0 ]


tmp_d1 (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
tmp_d1 (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]


ris (2 x 2 : 2 x 2): [
	 0.6915942384684183 0.6915942384684183
	 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

119: InitVett_d
ris (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
val = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

122: InitVett_i
tmp_i1 (2 : 6): [ 1 2 ]
val = 1


tmp_i1 (2 : 6): [ 1 1 ]
------------------------------ Fine InitVett_i

123: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2
tmp_i1 (2 : 6): [ 1 1 ]


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine aggiungi_mv_riga_i

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 1 1 1 1 ]
h (2 : 5): [ 4 2 ]


tmp_i1 (2 : 6): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


ind (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (2 : 2): [ 5 5 ]
s = -1


new1 (2 : 2): [ 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (2 : 2): [ 0 0 ]
s = 1


new2 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (2 : 2): [ 5 5 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (2 : 2): [ 4 4 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (2 : 2): [ 6.218345866839065e+175 2.048428433988699 ]
val = 0


S1 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (2 : 2): [ 0 0 ]
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (2 : 2): [ 1 1 ]
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (2 : 2): [ 5.842414621812633e-308 0 ]
val = 0


S2 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0 0 ]
ind (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (2 : 2): [ 0 0 ]
S2 (2 : 2): [ 0 0 ]


S_in (2 : 2): [ 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
S_in (2 : 2): [ 0 0 ]
div = 2.000


S_in (2 : 2): [ 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (8383 interne); stringhe deallocate: 0 (7853 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
S_in (2 : 2): [ 0 0 ]
val = -1.#INF


indok (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2
indok (2 : 2): [ 1 2 ]
val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (2 : 6): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (2 : 6): [ 1 2 ]
st = 1
end = 2


indInf (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 2): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
S_in (2 : 2): [ 0 0 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 2): [ 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (2 : 2): [ 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
S_in (2 : 2): [ 0 0 ]
indInf (0 : 2): [ ]
val = -1


S_in (2 : 2): [ 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
ris (2 : 2): [ 0 0 ]
S_in (2 : 2): [ 0 0 ]


tmp_d1 (2 : 2): [ 0 0 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 2 : 2 x 2): [
	 0.6915942384684183 0.6915942384684183
	 0 0
 ]
riga = 2
tmp_d1 (2 : 2): [ 0 0 ]


ris (2 x 2 : 2 x 2): [
	 0.6915942384684183 0.6915942384684183
	 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

168: somma_m_d	<=>	ris <- sum(m)
ris (2 x 2 : 2 x 2): [
	 0.6915942384684183 0.6915942384684183
	 0 0
 ]


ris: 1.383188476936837
------------------------------ Fine somma_m_d

173: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


aus (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

175: which_v_indxne_i	<=>	ris <- which(v != val)
aus (2 : 2): [ 2 2 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine which_v_indxne_i

186: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


rs (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

188: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (2 : 2): [ 2 2 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 1
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
I (0 : 0): [ ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 2
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 2 ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i

216: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
val1 = 0
val2 = 0


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

218: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
val1 = 0
val2 = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

220: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


aus (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

222: which_v_indxne_i	<=>	ris <- which(v != val)
aus (2 : 2): [ 2 2 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine which_v_indxne_i

232: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


rs (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

234: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (2 : 2): [ 2 2 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 1
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 4): [ ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 2
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 2 ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i


Stringhe allocate: 5 (8448 interne); stringhe deallocate: 0 (7993 interne)


Stringhe allocate: 5 (8453 interne); stringhe deallocate: 0 (8003 interne)


*** module3 ***
51: seq_i	<=>	ris <- seq(da, a, incr)
da = 2
a = 2
incr = 1


tmp1_i (1 : 1): [ 2 ]
------------------------------ Fine seq_i


*** sampleB ***
58: rep_v_i	<=>	ris <- rep(v, rip)
tmp1_i (1 : 1): [ 2 ]
rip = 1


ris (1 : 1): [ 2 ]
------------------------------ Fine rep_v_i


Stringhe allocate: 5 (8463 interne); stringhe deallocate: 0 (8003 interne)

54: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


tmp1_i (1 : 1): [ 1 ]
------------------------------ Fine seq_i


*** sampleB ***
58: rep_v_i	<=>	ris <- rep(v, rip)
tmp1_i (1 : 1): [ 1 ]
rip = 1


ris (1 : 1): [ 1 ]
------------------------------ Fine rep_v_i


Stringhe allocate: 5 (8468 interne); stringhe deallocate: 0 (8003 interne)


*** mod3 ***
33: InitMatr_i
ris (2 x 2 : 2 x 2): [
	 79863360 1918959715
	 778334061 25390
 ]
val = 0


ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i

34: copia_v_d	<=>	ris[st:end] <- v[st:end]
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
st = 1
end = 7


STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
------------------------------ Fine copia_v_d

35: copia_v_d	<=>	ris[st:end] <- v[st:end]
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
st = 1
end = 7


STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
------------------------------ Fine copia_v_d

39: segmento_v_d	<=>	ris <- v[st:end]
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
start = 2
end = 2


tmp1_d (1 : 1): [ 3.614836360604185 ]
------------------------------ Fine segmento_v_d

40: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
tmp1_d (1 : 1): [ 3.614836360604185 ]
canc_NA = 1



ris: 3.614836360604185
------------------------------ Fine somma_v_d

43: segmento_v_d	<=>	ris <- v[st:end]
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
start = 2
end = 2


p (1 : 1): [ 3.614836360604185 ]
------------------------------ Fine segmento_v_d

44: dividi1_vs_d	<=>	v <- v / div
p (1 : 1): [ 3.614836360604185 ]
div = 3.615


p (1 : 1): [ 1 ]
------------------------------ Fine dividi1_vs_d

61: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


tmp1_i (1 : 1): [ 1 ]
------------------------------ Fine seq_i


*** sampleB_p ***
25: rep_v_i	<=>	ris <- rep(v, rip)
tmp1_i (1 : 1): [ 1 ]
rip = 1


ris (1 : 1): [ 1 ]
------------------------------ Fine rep_v_i

64: somma_v_i	<=>	ris <- sum(v, na.rm=canc_NA)
ris (1 : 1): [ 1 ]
canc_NA = 0



ris: 1
------------------------------ Fine somma_v_i

131: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


tmp1_i (1 : 1): [ 1 ]
------------------------------ Fine seq_i

133: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
tmp1_i (1 : 1): [ 1 ]
scalare_i (1 : 1): [ 2 ]
val = 1


ris (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

135: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


indS (1 : 1): [ 1 ]
------------------------------ Fine seq_i

137: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


tmp2_i (1 : 1): [ 1 ]
------------------------------ Fine seq_i

138: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp2_i (1 : 1): [ 1 ]
indS (1 : 1): [ 1 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp2_i (1 : 1): [ 1 ]
st = 1
end = 1


indBS (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indBS (1 : 1): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indBS (1 : 1): [ 1 ]
indx = 1


indBS (0 : 1): [ ]
------------------------------ Fine elimina1_indx_i



indBS (0 : 1): [ ]
------------------------------ Fine setdiff_i



*****************************************
*****************************************


Stringhe allocate: 5 (8528 interne); stringhe deallocate: 0 (8058 interne)


*** probmod ***
46: InitMatr_i
checkOUT (2 x 2 : 2 x 2): [
	 79862912 99
	 771777326 2146959360
 ]
val = 0


checkOUT (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i

48: InitMatr_i
checkIN (2 x 2 : 2 x 2): [
	 79854280 99
	 771777326 1072693248
 ]
val = 0


checkIN (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i

50: InitMatr_d
ris (2 x 2 : 2 x 2): [
	 6.218345866837614e+175 1
	 3.125653738386077e-005 1
 ]
val = 0


ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_d

52: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


M_in (2 : 2): [ 1 0 ]
------------------------------ Fine somma_righe_i

54: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


M_out (2 : 2): [ 0 1 ]
------------------------------ Fine somma_colonne_i

57: InitMatr_i
memory (2 x 3 : 2 x 3): [
	 79851632 0 79032848
	 1 0 -1075237672
 ]
val = -2147483648


memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

119: InitVett_d
S_out (2 : 2): [ 3.287239484612895e-085 5.618966267419681e+303 ]
val = 0


S_out (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

122: InitVett_i
tmp_i1 (2 : 6): [ 79858776 1 ]
val = 1


tmp_i1 (2 : 6): [ 1 1 ]
------------------------------ Fine InitVett_i

123: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
checkOUT (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
tmp_i1 (2 : 6): [ 1 1 ]


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_i

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 1 1 1 1 ]
h (2 : 5): [ 4 2 ]


tmp_i1 (2 : 6): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


ind (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (2 : 2): [ 5 5 ]
s = -1


new1 (2 : 2): [ 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (2 : 2): [ 0 0 ]
s = 1


new2 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (2 : 2): [ 5 5 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (2 : 2): [ 4 4 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (2 : 2): [ 5.000000070941034 5 ]
val = 0


S1 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (2 : 2): [ 0 0 ]
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (2 : 2): [ 1 1 ]
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (2 : 2): [ 6.218345866833171e+175 5.618966267453383e+303 ]
val = 0


S2 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0 0 ]
ind (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (2 : 2): [ 0 0 ]
S2 (2 : 2): [ 0 0 ]


ris (2 : 2): [ 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (2 : 2): [ 0 0 ]
div = 2.000


ris (2 : 2): [ 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (8678 interne); stringhe deallocate: 0 (8143 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
ris (2 : 2): [ 0 0 ]
val = -1.#INF


indok (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
indok (2 : 2): [ 1 2 ]
val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (2 : 6): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (2 : 6): [ 1 2 ]
st = 1
end = 2


indInf (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 2): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
ris (2 : 2): [ 0 0 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 2): [ 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (2 : 2): [ 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (2 : 2): [ 0 0 ]
indInf (0 : 2): [ ]
val = -1


ris (2 : 2): [ 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
S_out (2 : 2): [ 0 0 ]
ris (2 : 2): [ 0 0 ]


tmp_d1 (2 : 2): [ 0 0 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
tmp_d1 (2 : 2): [ 0 0 ]


ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 1 1 1 1 1 ]
h (2 : 5): [ 4 2 ]


tmp_i1 (2 : 6): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


ind (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 3.614836360604185 3.614836360604185 ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 5 5 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 5 0 0 0 0 0 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 0 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (2 : 2): [ 5 5 ]
s = -1


new1 (2 : 2): [ 4 4 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (2 : 2): [ 0 0 ]
s = 1


new2 (2 : 2): [ 1 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (2 : 2): [ 5 5 ]
T1 (2 : 2): [ 3.614836360604185 3.614836360604185 ]


a (2 : 2): [ 1.385163639395815 1.385163639395815 ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.385163639395815 1.385163639395815 ]


a (2 : 2): [ 1.385163639395815 1.385163639395815 ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (2 : 2): [ 4 4 ]
T1 (2 : 2): [ 3.614836360604185 3.614836360604185 ]


b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]


b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (2 : 2): [ 3.614836360604185 3.614836360604185 ]
complemento = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxNA_d

68: assegna1_vs_indx_d	<=>	v[indx] <- val
a (2 : 2): [ 1.385163639395815 1.385163639395815 ]
ind (0 : 2): [ ]
val = 0


a (2 : 2): [ 1.385163639395815 1.385163639395815 ]
------------------------------ Fine assegna1_vs_indx_d

70: assegna1_vs_indx_d	<=>	v[indx] <- val
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
ind (0 : 2): [ ]
val = 0


b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine assegna1_vs_indx_d

78: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 1.385163639395815 1.385163639395815 ]
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
 ]
------------------------------ Fine cbind2v_d

79: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 1.385163639395815 0.3851636393958149
	 1.385163639395815 0.3851636393958149
 ]


m (2 : 2): [ 1.385163639395815 1.385163639395815 ]
------------------------------ Fine max_righe_d

81: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (2 : 2): [ 1.385163639395815 1.385163639395815 ]
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
m (2 : 2): [ 1.385163639395815 1.385163639395815 ]
T1 (2 : 2): [ 3.614836360604185 3.614836360604185 ]


S1 (2 : 2): [ 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine f_aux_d

83: diff_vv_d	<=>	ris <- v1 - v2
a (2 : 2): [ 1.385163639395815 1.385163639395815 ]
toll1 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
------------------------------ Fine diff_vv_d

84: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
val = 0

ind1 (0 : 2): [ ]
------------------------------ Fine which_v_indxlt_d

86: diff_vv_d	<=>	ris <- v1 - v2
b (2 : 2): [ 0.3851636393958149 0.3851636393958149 ]
toll1 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]
------------------------------ Fine diff_vv_d

87: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (2 : 2): [ -0.6148363606041851 -0.6148363606041851 ]
val = 0


ind2 (0 : 2): [ ]
------------------------------ Fine which_v_indxgt_d

89: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (0 : 2): [ ]
ind2 (0 : 2): [ ]


tmp_i1 (0 : 2): [ ]
------------------------------ Fine interseca_i

91: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (2 : 2): [ 0.3831884769368366 0.3831884769368366 ]
tmp_i1 (0 : 2): [ ]
val = -1.#INF


S1 (2 : 2): [ 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine assegna1_vs_indx_d

93: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (2 : 2): [ 0.3831884769368366 0.3831884769368366 ]
ind (0 : 2): [ ]
val = 0


S1 (2 : 2): [ 0.3831884769368366 0.3831884769368366 ]
------------------------------ Fine assegna1_vs_indx_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (2 : 2): [ 0 0 ]
T2 (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]


a (2 : 2): [ -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ -0.7867244574868211 -0.7867244574868211 ]


a (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (2 : 2): [ 1 1 ]
T2 (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]


b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]


b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


m (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
complemento = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
ind (0 : 2): [ ]
val = 0


a (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]
ind (0 : 2): [ ]
val = 0


b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.7867244574868211 0.2132755425131789
	 0.7867244574868211 0.2132755425131789
 ]


m (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]
m (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
T2 (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]


S2 (2 : 2): [ 1 1 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
toll2 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.2132755425131789 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (2 : 2): [ -0.2132755425131789 -0.2132755425131789 ]
val = 0

ind1 (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (2 : 2): [ 0.2132755425131789 0.2132755425131789 ]
toll2 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.7867244574868211 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (2 : 2): [ -0.7867244574868211 -0.7867244574868211 ]
val = 0


ind2 (0 : 2): [ ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (2 : 2): [ 1 2 ]
ind2 (0 : 2): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (0 : 2): [ ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 1 1 ]
tmp_i1 (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 1 1 ]
ind (0 : 2): [ ]
val = 0


S2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (2 : 2): [ 0.7867244574868211 0.7867244574868211 ]
val = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 1 1 ]
ind (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (2 : 2): [ 0.3831884769368366 0.3831884769368366 ]
S2 (2 : 2): [ 1 1 ]


S_out (2 : 2): [ 1.383188476936837 1.383188476936837 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
S_out (2 : 2): [ 1.383188476936837 1.383188476936837 ]
div = 2.000


S_out (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (8793 interne); stringhe deallocate: 0 (8243 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
S_out (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
val = -1.#INF


indok (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2
indok (2 : 2): [ 1 2 ]
val = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (2 : 6): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (2 : 6): [ 1 2 ]
st = 1
end = 2


indInf (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 2): [ ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
S_out (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]


min = 0.6915942384684183
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
S_out (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
indInf (0 : 2): [ ]
val = -1


S_out (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine assegna1_vs_indx_d

155: InitVett_d
ris (2 : 2): [ 0 0 ]
val = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

156: aggiungi_ms_riga_i	<=>	m[riga,] <- val # riga <= dim(m)[0] + 1
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2, val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine aggiungi_ms_riga_i

159: somma_vv_d	<=>	ris <- v1 + v2
S_out (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
ris (2 : 2): [ 0 0 ]


tmp_d1 (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 2
tmp_d1 (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]


ris (2 x 2 : 2 x 2): [
	 0 0
	 0.6915942384684183 0.6915942384684183
 ]
------------------------------ Fine aggiungi_mv_riga_d

168: somma_m_d	<=>	ris <- sum(m)
ris (2 x 2 : 2 x 2): [
	 0 0
	 0.6915942384684183 0.6915942384684183
 ]


ris: 1.383188476936837
------------------------------ Fine somma_m_d

173: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


aus (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

175: which_v_indxne_i	<=>	ris <- which(v != val)
aus (2 : 2): [ 2 2 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine which_v_indxne_i

186: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


rs (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

188: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (2 : 2): [ 2 2 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 1
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
I (0 : 0): [ ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 2
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 2 ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i

216: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
val1 = 0
val2 = 0


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

218: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
val1 = 0
val2 = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

220: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


aus (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

222: which_v_indxne_i	<=>	ris <- which(v != val)
aus (2 : 2): [ 2 2 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine which_v_indxne_i

232: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


rs (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

234: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (2 : 2): [ 2 2 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 1
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 4): [ ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 2
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 2 ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i


Stringhe allocate: 5 (8858 interne); stringhe deallocate: 0 (8383 interne)

90: seq_i	<=>	ris <- seq(da, a, incr)
da = 2
a = 2
incr = 1


ris->indices (1 : 1): [ 2 ]
------------------------------ Fine seq_i


Stringhe allocate: 5 (8863 interne); stringhe deallocate: 0 (8398 interne)

143: vettore3s_d		<=>	ris <- c(el1, el2, el3)
el1 = 1.383188476936837, el2 = 0.6915942384684183, el3 = 0.6915942384684183


prob_mod (3 : 3): [ 1.383188476936837 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine vettore3s_d

145: assegna1_v_indxeq_d	<=>	v[which(v==val1)] <- val2
prob_mod (3 : 3): [ 1.383188476936837 0.6915942384684183 0.6915942384684183 ]
prob_mod (3 : 3): [ 1.383188476936837 0.6915942384684183 0.6915942384684183 ]
val1 = 0
val2 = 1.#QNAN


prob_mod (3 : 3): [ 1.383188476936837 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine assegna1_v_indxeq_d

147: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
prob_mod (3 : 3): [ 1.383188476936837 0.6915942384684183 0.6915942384684183 ]
complemento = 1


ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

153: copia_v_indx_d	<=>	ris <- v[indx]
prob_mod (3 : 3): [ 1.383188476936837 0.6915942384684183 0.6915942384684183 ]
ind (3 : 3): [ 1 2 3 ]


tmp1_d (3 : 16): [ 1.383188476936837 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine copia_v_indx_d

154: min_v_d	<=>	ris <- min(v)
tmp1_d (3 : 16): [ 1.383188476936837 0.6915942384684183 0.6915942384684183 ]


min = 0.6915942384684183
------------------------------ Fine min_v_d

160: assegna1_v_indxNA_d	<=>	v1[which(is.na(v2))] <- val oppure v1[which(!is.na(v2))] <- val
prob_mod (3 : 3): [ 1.383188476936837 0.6915942384684183 0.6915942384684183 ]
prob_mod (3 : 3): [ 1.383188476936837 0.6915942384684183 0.6915942384684183 ]
val = 0
complemento = 0


prob_mod (3 : 3): [ 1.383188476936837 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine assegna1_v_indxNA_d

162: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
prob_mod (3 : 3): [ 1.383188476936837 0.6915942384684183 0.6915942384684183 ]
canc_NA = 0



ris: 2.766376953873673
------------------------------ Fine somma_v_d

162: dividi1_vs_d	<=>	v <- v / div
prob_mod (3 : 3): [ 1.383188476936837 0.6915942384684183 0.6915942384684183 ]
div = 2.766


prob_mod (3 : 3): [ 0.5 0.25 0.25 ]
------------------------------ Fine dividi1_vs_d

164: vettore3s_i		<=>	ris <- c(el1, el2, el3)
el1 = 1, el2 = 2, el3 = 3


tmp1_i (3 : 3): [ 1 2 3 ]
------------------------------ Fine vettore3s_i


*** sampleB_p ***

*** sample_p ***
tmp1_i (3 : 3): [ 1 2 3 ]
k = 1, replace = 0
prob_mod (3 : 3): [ 0.5 0.25 0.25 ]


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 5 (8863 interne); stringhe deallocate: 0 (8398 interne)


*** assign_nodes ***
35: copia_v_i	<=>	ris[st:end] <- v[st:end]
h (2 : 5): [ 4 2 ]
st = 1
end = 2


or_h (2 : 2): [ 4 2 ]
------------------------------ Fine copia_v_i

37: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


aus_h (2 : 2): [ 1 2 ]
------------------------------ Fine seq_i

43: InitVett_i
index (2 : 2): [ 79866976 25390 ]
val = 0


index (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_i

45: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (2 x 2 : 2 x 2): [
	 0 0
	 1 0
 ]


M_in (2 : 2): [ 0 1 ]
------------------------------ Fine somma_righe_i

47: ordine_i	<=>	ris <- order(v, decreasing=decr)
M_in (2 : 2): [ 0 1 ]
decr = 1


Ord (2 : 2): [ 2 1 ]
------------------------------ Fine ordine_i

52: riga_d	<=>	ris <- m[r,]
ris (2 x 2 : 2 x 2): [
	 0.6915942384684183 0.6915942384684183
	 0 0
 ]
r = 2

p (2 : 2): [ 0 0 ]
------------------------------ Fine riga_d

54: which_v_indxle_d	<=>	ris <- which(v<=val)
p (2 : 2): [ 0 0 ]
val = 0


tmp_i (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxle_d

57: min_v_d	<=>	ris <- min(v)
p (2 : 2): [ 0 0 ]


min = 0
------------------------------ Fine min_v_d

58: somma1_vs_d	<=>	v <- v + s
p (2 : 2): [ 0 0 ]
s = 0.25


p (2 : 2): [ 0.25 0.25 ]
------------------------------ Fine somma1_vs_d

61: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 1 1 1 1 ]
h (2 : 5): [ 4 2 ]


Sin_h (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_i

66: which_v_indxgt_i	<=>	ris <- which(v > val)
Sin_h (2 : 2): [ 1 1 ]
val = 4


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxgt_i

72: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
p (2 : 2): [ 0.25 0.25 ]
aus_h (2 : 2): [ 1 2 ]


tmp_d (2 : 2): [ 0.25 0.25 ]
------------------------------ Fine assegna_v_indxNA_d

73: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
tmp_d (2 : 2): [ 0.25 0.25 ]
canc_NA = 0



ris: 0.5
------------------------------ Fine somma_v_d

74: dividi_vs_d	ris <- v / div
tmp_d (2 : 2): [ 0.25 0.25 ]
div = 0.500


p (2 : 2): [ 0.5 0.5 ]
------------------------------ Fine dividi_vs_d


*** sampleB_p ***

*** sample_p ***
h (2 : 5): [ 4 2 ]
k = 1, replace = 0
p (2 : 2): [ 0.5 0.5 ]


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 5 (8918 interne); stringhe deallocate: 0 (8398 interne)

81: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
h (2 : 5): [ 4 2 ]
ris (1 : 1): [ 2 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 2
h (2 : 5): [ 4 2 ]


indx = 2
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
h (2 : 5): [ 4 2 ]
indx = 2


h (1 : 5): [ 4 ]
------------------------------ Fine elimina1_indx_i



h (1 : 5): [ 4 ]
------------------------------ Fine setdiff1_i

83: which_vv_eq_i	<=>	ris <- which(v1 == v2)
or_h (2 : 2): [ 4 2 ]
ris (1 : 1): [ 2 ]
2017: esiste_v_i	<=>	elem %IN% v
elem = 2
or_h (2 : 2): [ 4 2 ]


indx = 2
------------------------------ Fine esiste_v_i



tmp_i (1 : 2): [ 2 ]
------------------------------ Fine which_vv_eq_i

84: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
aus_h (2 : 2): [ 1 2 ]
tmp_i (1 : 2): [ 2 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 2
aus_h (2 : 2): [ 1 2 ]


indx = 2
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
aus_h (2 : 2): [ 1 2 ]
indx = 2


aus_h (1 : 2): [ 1 ]
------------------------------ Fine elimina1_indx_i



aus_h (1 : 2): [ 1 ]
------------------------------ Fine setdiff1_i

52: riga_d	<=>	ris <- m[r,]
ris (2 x 2 : 2 x 2): [
	 0.6915942384684183 0.6915942384684183
	 0 0
 ]
r = 1

p (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
------------------------------ Fine riga_d

54: which_v_indxle_d	<=>	ris <- which(v<=val)
p (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
val = 0


tmp_i (0 : 2): [ ]
------------------------------ Fine which_v_indxle_d

61: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 1 1 1 1 ]
h (1 : 5): [ 4 ]


Sin_h (1 : 2): [ 1 ]
------------------------------ Fine assegna_v_indxNA_i

66: which_v_indxgt_i	<=>	ris <- which(v > val)
Sin_h (1 : 2): [ 1 ]
val = 5


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxgt_i

72: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
p (2 : 2): [ 0.6915942384684183 0.6915942384684183 ]
aus_h (1 : 2): [ 1 ]


tmp_d (1 : 2): [ 0.6915942384684183 ]
------------------------------ Fine assegna_v_indxNA_d

73: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
tmp_d (1 : 2): [ 0.6915942384684183 ]
canc_NA = 0



ris: 0.6915942384684183
------------------------------ Fine somma_v_d

74: dividi_vs_d	ris <- v / div
tmp_d (1 : 2): [ 0.6915942384684183 ]
div = 0.692


p (1 : 2): [ 1 ]
------------------------------ Fine dividi_vs_d


*** sampleB_p ***
25: rep_v_i	<=>	ris <- rep(v, rip)
h (1 : 5): [ 4 ]
rip = 1


ris (1 : 1): [ 4 ]
------------------------------ Fine rep_v_i

81: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
h (1 : 5): [ 4 ]
ris (1 : 1): [ 4 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 4
h (1 : 5): [ 4 ]


indx = 1
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
h (1 : 5): [ 4 ]
indx = 1


h (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



h (0 : 5): [ ]
------------------------------ Fine setdiff1_i

83: which_vv_eq_i	<=>	ris <- which(v1 == v2)
or_h (2 : 2): [ 4 2 ]
ris (1 : 1): [ 4 ]
2017: esiste_v_i	<=>	elem %IN% v
elem = 4
or_h (2 : 2): [ 4 2 ]


indx = 1
------------------------------ Fine esiste_v_i



tmp_i (1 : 2): [ 4 ]
------------------------------ Fine which_vv_eq_i

84: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
aus_h (1 : 2): [ 1 ]
tmp_i (1 : 2): [ 4 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 4
aus_h (1 : 2): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i



aus_h (1 : 2): [ 1 ]
------------------------------ Fine setdiff1_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
ris (2 x 2 : 2 x 2): [
	 0 0
	 1 0
 ]
riga = 1
val = 1


ind (0 : 8): [ ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
index (2 : 2): [ 4 2 ]
ind (0 : 8): [ ]


co (0 : 0): [ ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
ri (1 : 1): [ 4 ]
co (0 : 0): [ ]
val = 1


Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

107: esiste_v_i	<=>	elem %IN% v
elem = 1
ris->indices (1 : 1): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

109: accoda1_vv_i	<=>	v1 <- c(v1, v2)
ris (0 : 1): [ ]
ri (1 : 1): [ 4 ]


ris (1 : 1): [ 4 ]
------------------------------ Fine accoda_vv_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
ris (2 x 2 : 2 x 2): [
	 0 0
	 1 0
 ]
riga = 2
val = 1


ind (1 : 8): [ 1 ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
index (2 : 2): [ 4 2 ]
ind (1 : 8): [ 1 ]


co (1 : 1): [ 4 ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
ri (1 : 1): [ 2 ]
co (1 : 1): [ 4 ]
val = 1


Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

107: esiste_v_i	<=>	elem %IN% v
elem = 2
ris->indices (1 : 1): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i


Stringhe allocate: 5 (8928 interne); stringhe deallocate: 0 (8463 interne)

332: accoda1_vv_i	<=>	v1 <- c(v1, v2)
h_new (1 : 6): [ 1 ]
ris (1 : 1): [ 4 ]


h_new (2 : 6): [ 1 4 ]
------------------------------ Fine accoda_vv_i

334: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]


Sout (5 : 5): [ 1 1 1 2 1 ]
------------------------------ Fine somma_colonne_i

336: max_v_i		<=>	ris <- max(v)
Sout (5 : 5): [ 1 1 1 2 1 ]


max = 2
------------------------------ Fine max_v_i

338: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 3
incr = 1


tmp2_i (4 : 10): [ 0 1 2 3 ]
------------------------------ Fine seq_i


*** hist1 ***
Sout (5 : 5): [ 1 1 1 2 1 ]
tmp2_i (4 : 10): [ 0 1 2 3 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
tmp1_i (3 : 3): [ 1 2 3 ]
val = 0


tmp1_i (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i



tmp1_i (3 : 3): [ 0 4 1 ]

Stringhe allocate: 5 (8928 interne); stringhe deallocate: 0 (8463 interne)

340: promuovi_i	(implicita)
tmp1_i (3 : 3): [ 0 4 1 ]
ATTENZIONE (promuovi_i, linea connectivity_modular.c # 340): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

tmp1_d (3 : 16): [ 0 4 1 ]
------------------------------ Fine promuovi_i

341: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
Freq_out (7 : 7): [ 0 5 0 0 0 0 0 ]
start = 1
end = 3
tmp1_d (3 : 16): [ 0 4 1 ]


Freq_out (7 : 7): [ 0 4 1 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

343: somma_righe_i	<=>	ris <- apply(m, 1, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]


Sin (5 : 5): [ 1 2 1 1 1 ]
------------------------------ Fine somma_righe_i

345: max_v_i		<=>	ris <- max(v)
Sin (5 : 5): [ 1 2 1 1 1 ]


max = 2
------------------------------ Fine max_v_i

347: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 3
incr = 1


tmp2_i (4 : 10): [ 0 1 2 3 ]
------------------------------ Fine seq_i


*** hist1 ***
Sin (5 : 5): [ 1 2 1 1 1 ]
tmp2_i (4 : 10): [ 0 1 2 3 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
tmp1_i (3 : 3): [ 0 4 1 ]
val = 0


tmp1_i (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i



tmp1_i (3 : 3): [ 0 4 1 ]

Stringhe allocate: 5 (8929 interne); stringhe deallocate: 0 (8464 interne)

349: promuovi_i	(implicita)
tmp1_i (3 : 3): [ 0 4 1 ]
ATTENZIONE (promuovi_i, linea connectivity_modular.c # 349): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

tmp1_d (3 : 16): [ 0 4 1 ]
------------------------------ Fine promuovi_i

350: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
Freq_in (7 : 7): [ 0 5 0 0 0 0 0 ]
start = 1
end = 3
tmp1_d (3 : 16): [ 0 4 1 ]


Freq_in (7 : 7): [ 0 4 1 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

362: copia_v_i	<=>	ris[st:end] <- v[st:end]
h_new (2 : 6): [ 1 4 ]
st = 1
end = 2


h (2 : 5): [ 1 4 ]
------------------------------ Fine copia_v_i

368: copia_v_indx_i	<=>	ris <- v[indx]
Sin (5 : 5): [ 1 2 1 1 1 ]
h (2 : 5): [ 1 4 ]


tmp1_i (2 : 3): [ 1 1 ]
------------------------------ Fine copia_v_indx_i

369: which_v_indxne_i	<=>	ris <- which(v != val)
tmp1_i (2 : 3): [ 1 1 ]
val = 5


tmp2_i (2 : 10): [ 1 2 ]
------------------------------ Fine which_v_indxne_i

370: copia_v_indx_i	<=>	ris <- v[indx]
h (2 : 5): [ 1 4 ]
tmp2_i (2 : 10): [ 1 2 ]


h (2 : 5): [ 1 4 ]
------------------------------ Fine copia_v_indx_i

110: somma_righe_i	<=>	ris <- apply(m, 1, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]


Sin (5 : 5): [ 1 2 1 1 1 ]
------------------------------ Fine somma_righe_i

112: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]


Sout (5 : 5): [ 1 1 1 2 1 ]
------------------------------ Fine somma_colonne_i


*** cluster_coeff ***
19: trasponi_i	<=>	ris <- t(m)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]


tmpm_i (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 1 1 0 0
	 0 1 0 0 0
 ]
------------------------------ Fine trasponi_i

20: somma1_m_i	<=>	m1 <- m1 + m2
tmpm_i (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 0 1
	 0 0 0 1 0
	 0 1 1 0 0
	 0 1 0 0 0
 ]
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]


tmpm_i (5 x 5 : 5 x 5): [
	 2 0 0 0 0
	 0 0 0 1 2
	 0 0 0 2 0
	 0 1 2 0 0
	 0 2 0 0 0
 ]
------------------------------ Fine somma1_m_i

22: which_m_indxne_i	<=>	ris <- which(m!=val)
tmpm_i (5 x 5 : 5 x 5): [
	 2 0 0 0 0
	 0 0 0 1 2
	 0 0 0 2 0
	 0 1 2 0 0
	 0 2 0 0 0
 ]
val = 0


ind (7 : 25): [ 1 9 10 14 17 18 22 ]
------------------------------ Fine which_m_indxne_i

24: assegna1_ms_indx_i	<=>	m[indx] = val
tmpm_i (5 x 5 : 5 x 5): [
	 2 0 0 0 0
	 0 0 0 1 2
	 0 0 0 2 0
	 0 1 2 0 0
	 0 2 0 0 0
 ]
ind (7 : 25): [ 1 9 10 14 17 18 22 ]
val = 1


tmpm_i (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 1 1 0 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_ms_indx_i

26: assegna1_s_diag_i	<=>	diag_i(m) <- s
tmpm_i (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 1 1 0 0
	 0 1 0 0 0
 ]
val = 0


tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 1 1 0 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_s_diag_i

31: InitVett_d
ris (5 : 5): [ 0 0 0 0 0 ]
val = 0


ris (5 : 5): [ 0 0 0 0 0 ]
------------------------------ Fine InitVett_d

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 1 1 0 0
	 0 1 0 0 0
 ]
riga = 1


ris: 0
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 1 1 0 0
	 0 1 0 0 0
 ]
r = 1
val = 0


neighbours (0 : 25): [ ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 1 1 0 0
	 0 1 0 0 0
 ]
riga = 2


ris: 2
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 1 1 0 0
	 0 1 0 0 0
 ]
r = 2
val = 0


neighbours (2 : 25): [ 4 5 ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 1 1 0 0
	 0 1 0 0 0
 ]
riga = 3


ris: 1
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 1 1 0 0
	 0 1 0 0 0
 ]
r = 3
val = 0


neighbours (1 : 25): [ 4 ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 1 1 0 0
	 0 1 0 0 0
 ]
riga = 4


ris: 2
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 1 1 0 0
	 0 1 0 0 0
 ]
r = 4
val = 0


neighbours (2 : 25): [ 2 3 ]
------------------------------ Fine which_m_rowindxne_i

35: somma_riga_i	<=>	ris <- sum(m[riga, ])
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 1 1 0 0
	 0 1 0 0 0
 ]
riga = 5


ris: 1
------------------------------ Fine somma_riga_i

37: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 1 1 0 0
	 0 1 0 0 0
 ]
r = 5
val = 0


neighbours (1 : 25): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

69: media_v_d	<=>	ris <- mean(v)
ris (5 : 5): [ 0 0 0 0 0 ]


media = 0.000
------------------------------ Fine media_v_d


Stringhe allocate: 5 (8945 interne); stringhe deallocate: 0 (8480 interne)


*** module1 ***
44: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp1_i (2 : 2): [ 1 2 ]
------------------------------ Fine seq_i


*** sampleB ***

***sample***
tmp1_i (2 : 2): [ 1 2 ]
k = 1, replace = 0


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (8960 interne); stringhe deallocate: 0 (8480 interne)


Stringhe allocate: 5 (8960 interne); stringhe deallocate: 0 (8480 interne)


*** mod1 ***
18: InitMatr_i
ris (1 x 1 : 1 x 1): [
	 79872112
 ]
val = 0


ris (1 x 1 : 1 x 1): [
	 0
 ]
------------------------------ Fine InitMatr_i


Stringhe allocate: 5 (8965 interne); stringhe deallocate: 0 (8480 interne)


*** probmod ***
46: InitMatr_i
checkOUT (1 x 2 : 1 x 2): [
	 79873280 2424932
 ]
val = 0


checkOUT (1 x 2 : 1 x 2): [
	 0 0
 ]
------------------------------ Fine InitMatr_i

48: InitMatr_i
checkIN (1 x 2 : 1 x 2): [
	 79939680 105
 ]
val = 0


checkIN (1 x 2 : 1 x 2): [
	 0 0
 ]
------------------------------ Fine InitMatr_i

50: InitMatr_d
ris (1 x 2 : 1 x 2): [
	 4.544630548256266e+223 5.387842965589561e-310
 ]
val = 0


ris (1 x 2 : 1 x 2): [
	 0 0
 ]
------------------------------ Fine InitMatr_d

52: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (1 x 1 : 1 x 1): [
	 1
 ]


M_in (1 : 1): [ 1 ]
------------------------------ Fine somma_righe_i

54: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (1 x 1 : 1 x 1): [
	 1
 ]


M_out (1 : 1): [ 1 ]
------------------------------ Fine somma_colonne_i

57: InitMatr_i
memory (1 x 3 : 1 x 3): [
	 79872504 778334061 1918959715
 ]
val = -2147483648


memory (1 x 3 : 1 x 3): [
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (1 x 3 : 1 x 3): [
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 3): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (1 x 3 : 1 x 3): [
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 3): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 3): [ ]
tmp_i2 (0 : 3): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 1 1 1 2 1 ]
h (2 : 5): [ 1 4 ]


tmp_i1 (2 : 3): [ 1 2 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 3): [ 1 2 ]
s = 1


ind (2 : 2): [ 2 3 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 3): [ 1 2 ]
s = 1


tmp_i1 (2 : 2): [ 2 3 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (2 : 2): [ 2 3 ]


T1 (2 : 2): [ 3.614836360604185 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 3 ]
s = 1


tmp_i1 (2 : 2): [ 3 4 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (2 : 2): [ 3 4 ]


T2 (2 : 2): [ 0.7867244574868211 0.3224199317354524 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 3): [ 1 2 ]
s = 1


tmp_i1 (2 : 2): [ 2 3 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 4 1 0 0 0 0 ]
tmp_i1 (2 : 2): [ 2 3 ]


old1 (2 : 2): [ 4 1 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 3 ]
s = 1


tmp_i1 (2 : 2): [ 3 4 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 4 1 0 0 0 0 ]
tmp_i1 (2 : 2): [ 3 4 ]


old2 (2 : 2): [ 1 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (2 : 2): [ 4 1 ]
s = -1


new1 (2 : 2): [ 3 0 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (2 : 2): [ 1 0 ]
s = 1


new2 (2 : 2): [ 2 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 3): [ 1 2 ]
s = 1


tmp_i1 (2 : 2): [ 2 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 2 3 ]


toll1 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 3 ]
s = 1


tmp_i1 (2 : 2): [ 3 4 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 3 4 ]


toll2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (2 : 2): [ 4 1 ]
T1 (2 : 2): [ 3.614836360604185 0.7867244574868211 ]


a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]


a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (2 : 2): [ 3 0 ]
T1 (2 : 2): [ 3.614836360604185 0.7867244574868211 ]


b (2 : 2): [ -0.6148363606041851 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ -0.6148363606041851 -0.7867244574868211 ]


b (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (2 : 2): [ 3.614836360604185 0.7867244574868211 ]
complemento = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxNA_d

68: assegna1_vs_indx_d	<=>	v[indx] <- val
a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]
ind (0 : 2): [ ]
val = 0


a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

70: assegna1_vs_indx_d	<=>	v[indx] <- val
b (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]
ind (0 : 2): [ ]
val = 0


b (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

78: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]
b (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.3851636393958149 0.6148363606041851
	 0.2132755425131789 0.7867244574868211
 ]
------------------------------ Fine cbind2v_d

79: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.3851636393958149 0.6148363606041851
	 0.2132755425131789 0.7867244574868211
 ]


m (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]
------------------------------ Fine max_righe_d

81: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]
b (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]
m (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]
T1 (2 : 2): [ 3.614836360604185 0.7867244574868211 ]


S1 (2 : 2): [ -0.1700869138378981 -1 ]
------------------------------ Fine f_aux_d

83: diff_vv_d	<=>	ris <- v1 - v2
a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]
toll1 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.6148363606041851 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

84: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (2 : 2): [ -0.6148363606041851 -0.7867244574868211 ]
val = 0

ind1 (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxlt_d

86: diff_vv_d	<=>	ris <- v1 - v2
b (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]
toll1 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.3851636393958149 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

87: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (2 : 2): [ -0.3851636393958149 -0.2132755425131789 ]
val = 0


ind2 (0 : 2): [ ]
------------------------------ Fine which_v_indxgt_d

89: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (2 : 2): [ 1 2 ]
ind2 (0 : 2): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (0 : 2): [ ]
------------------------------ Fine interseca_i

91: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (2 : 2): [ -0.1700869138378981 -1 ]
tmp_i1 (0 : 2): [ ]
val = -1.#INF


S1 (2 : 2): [ -0.1700869138378981 -1 ]
------------------------------ Fine assegna1_vs_indx_d

93: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (2 : 2): [ -0.1700869138378981 -1 ]
ind (0 : 2): [ ]
val = 0


S1 (2 : 2): [ -0.1700869138378981 -1 ]
------------------------------ Fine assegna1_vs_indx_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (2 : 2): [ 1 0 ]
T2 (2 : 2): [ 0.7867244574868211 0.3224199317354524 ]


a (2 : 2): [ 0.2132755425131789 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 0.2132755425131789 -0.3224199317354524 ]


a (2 : 2): [ 0.2132755425131789 0.3224199317354524 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (2 : 2): [ 2 1 ]
T2 (2 : 2): [ 0.7867244574868211 0.3224199317354524 ]


b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]


b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.2132755425131789 0.3224199317354524 ]
b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
 ]


m (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (2 : 2): [ 0.7867244574868211 0.3224199317354524 ]
complemento = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (2 : 2): [ 0.2132755425131789 0.3224199317354524 ]
ind (0 : 2): [ ]
val = 0


a (2 : 2): [ 0.2132755425131789 0.3224199317354524 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
ind (0 : 2): [ ]
val = 0


b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.2132755425131789 0.3224199317354524 ]
b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
 ]


m (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (2 : 2): [ 0.2132755425131789 0.3224199317354524 ]
b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
m (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
T2 (2 : 2): [ 0.7867244574868211 0.3224199317354524 ]


S2 (2 : 2): [ -1.542186124973118 -2.101545225871788 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (2 : 2): [ 0.2132755425131789 0.3224199317354524 ]
toll2 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.7867244574868211 -0.6775800682645476 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (2 : 2): [ -0.7867244574868211 -0.6775800682645476 ]
val = 0

ind1 (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
toll2 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ 0.2132755425131789 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (2 : 2): [ 0.2132755425131789 -0.3224199317354524 ]
val = 0


ind2 (1 : 2): [ 1 ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (2 : 2): [ 1 2 ]
ind2 (1 : 2): [ 1 ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (1 : 2): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (1 : 2): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (1 : 2): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (1 : 2): [ 1 ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ -1.542186124973118 -2.101545225871788 ]
tmp_i1 (1 : 2): [ 1 ]
val = -1.#INF


S2 (2 : 2): [ -1.#INF -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ -1.#INF -2.101545225871788 ]
ind (0 : 2): [ ]
val = 0


S2 (2 : 2): [ -1.#INF -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (2 : 2): [ 0.7867244574868211 0.3224199317354524 ]
val = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ -1.#INF -2.101545225871788 ]
ind (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ -1.#INF -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (2 : 2): [ -0.1700869138378981 -1 ]
S2 (2 : 2): [ -1.#INF -2.101545225871788 ]


ris (2 : 2): [ -1.#INF -3.101545225871788 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (2 : 2): [ -1.#INF -3.101545225871788 ]
div = 2.000


ris (2 : 2): [ -1.#INF -1.550772612935894 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (9125 interne); stringhe deallocate: 0 (8580 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
ris (2 : 2): [ -1.#INF -1.550772612935894 ]
val = -1.#INF


indok (1 : 2): [ 2 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (1 x 2 : 1 x 2): [
	 0 0
 ]
riga = 1
indok (1 : 2): [ 2 ]
val = 1


checkOUT (1 x 2 : 1 x 2): [
	 0 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp_i1 (2 : 3): [ 1 2 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (2 : 3): [ 1 2 ]
indok (1 : 2): [ 2 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (2 : 3): [ 1 2 ]
st = 1
end = 2


indInf (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (2 : 2): [ 1 2 ]


indx = 2
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 2): [ 1 2 ]
indx = 2


indInf (1 : 2): [ 1 ]
------------------------------ Fine elimina1_indx_i



indInf (1 : 2): [ 1 ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
ris (2 : 2): [ -1.#INF -1.550772612935894 ]
indok (1 : 2): [ 2 ]


tmp_d1 (1 : 1): [ -1.550772612935894 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (1 : 1): [ -1.550772612935894 ]


min = -1.550772612935894
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (2 : 2): [ -1.#INF -1.550772612935894 ]
indInf (1 : 2): [ 1 ]
val = -2.550772612935894


ris (2 : 2): [ -2.550772612935894 -1.550772612935894 ]
------------------------------ Fine assegna1_vs_indx_d

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 2 1 1 1 ]
h (2 : 5): [ 1 4 ]


tmp_i1 (2 : 3): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 3): [ 1 1 ]
s = 1


ind (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 3): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 3): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 4 1 0 0 0 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 4 4 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 4 1 0 0 0 0 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (2 : 2): [ 4 4 ]
s = -1


new1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (2 : 2): [ 1 1 ]
s = 1


new2 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 3): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (2 : 2): [ 4 4 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (2 : 2): [ 3 3 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (2 : 2): [ 6.218345866841747e+175 5.387842123834802e-310 ]
val = 0


S1 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (2 : 2): [ 1 1 ]
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (2 : 2): [ 2 2 ]
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (2 : 2): [ 5.067823072825009e+173 5.387842123834802e-310 ]
val = 0


S2 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0 0 ]
ind (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (2 : 2): [ 0 0 ]
S2 (2 : 2): [ 0 0 ]


ris (2 : 2): [ 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (2 : 2): [ 0 0 ]
div = 2.000


ris (2 : 2): [ 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (9230 interne); stringhe deallocate: 0 (8665 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
ris (2 : 2): [ 0 0 ]
val = -1.#INF


indok (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (1 x 2 : 1 x 2): [
	 0 0
 ]
riga = 1
indok (2 : 2): [ 1 2 ]
val = 1


checkIN (1 x 2 : 1 x 2): [
	 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp_i1 (2 : 3): [ 1 2 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (2 : 3): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (2 : 3): [ 1 2 ]
st = 1
end = 2


indInf (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 2): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
ris (2 : 2): [ 0 0 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 4): [ 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (2 : 4): [ 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (2 : 2): [ 0 0 ]
indInf (0 : 2): [ ]
val = -1


ris (2 : 2): [ 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
ris (2 : 2): [ -2.550772612935894 -1.550772612935894 ]
ris (2 : 2): [ 0 0 ]


tmp_d1 (2 : 4): [ -2.550772612935894 -1.550772612935894 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (1 x 2 : 1 x 2): [
	 0 0
 ]
riga = 1
tmp_d1 (2 : 4): [ -2.550772612935894 -1.550772612935894 ]


ris (1 x 2 : 1 x 2): [
	 -2.550772612935894 -1.550772612935894
 ]
------------------------------ Fine aggiungi_mv_riga_d

168: somma_m_d	<=>	ris <- sum(m)
ris (1 x 2 : 1 x 2): [
	 -2.550772612935894 -1.550772612935894
 ]


ris: -4.101545225871788
------------------------------ Fine somma_m_d

173: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkIN (1 x 2 : 1 x 2): [
	 1 1
 ]


aus (2 : 2): [ 1 1 ]
------------------------------ Fine somma_colonne_i

175: which_v_indxne_i	<=>	ris <- which(v != val)
aus (2 : 2): [ 1 1 ]
val = 0


tmp_i1 (2 : 3): [ 1 2 ]
------------------------------ Fine which_v_indxne_i

186: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkIN (1 x 2 : 1 x 2): [
	 1 1
 ]


rs (1 : 1): [ 2 ]
------------------------------ Fine somma_righe_i

188: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (1 : 1): [ 2 ]
decr = 0


ord_ind (1 : 1): [ 1 ]
------------------------------ Fine ordine_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (1 x 2 : 1 x 2): [
	 1 1
 ]
r = 1
val = 0


I_add (2 : 2): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
I (0 : 0): [ ]
I_add (2 : 2): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

216: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
checkOUT (1 x 2 : 1 x 2): [
	 0 1
 ]
checkOUT (1 x 2 : 1 x 2): [
	 0 1
 ]
val1 = 0
val2 = 0


checkOUT (1 x 2 : 1 x 2): [
	 0 1
 ]
------------------------------ Fine assegna1_mindxlt_i

218: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
checkOUT (1 x 2 : 1 x 2): [
	 0 1
 ]
checkOUT (1 x 2 : 1 x 2): [
	 0 1
 ]
val1 = 0
val2 = 1


checkOUT (1 x 2 : 1 x 2): [
	 0 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

220: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkOUT (1 x 2 : 1 x 2): [
	 0 1
 ]


aus (2 : 2): [ 0 1 ]
------------------------------ Fine somma_colonne_i

222: which_v_indxne_i	<=>	ris <- which(v != val)
aus (2 : 2): [ 0 1 ]
val = 0


tmp_i1 (1 : 3): [ 2 ]
------------------------------ Fine which_v_indxne_i

232: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkOUT (1 x 2 : 1 x 2): [
	 0 1
 ]


rs (1 : 1): [ 1 ]
------------------------------ Fine somma_righe_i

234: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (1 : 1): [ 1 ]
decr = 0


ord_ind (1 : 1): [ 1 ]
------------------------------ Fine ordine_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (1 x 2 : 1 x 2): [
	 0 1
 ]
r = 1
val = 0


I_add (1 : 2): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 2): [ ]
I_add (1 : 2): [ 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (1 : 1): [ 2 ]


ris (1 : 1): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 2 ]
------------------------------ Fine unione1_i


Stringhe allocate: 5 (9275 interne); stringhe deallocate: 0 (8785 interne)


Stringhe allocate: 5 (9280 interne); stringhe deallocate: 0 (8800 interne)


*** module2 ***
44: seq_i	<=>	ris <- seq(da, a, incr)
da = 2
a = 2
incr = 1


tmp1_i (1 : 1): [ 2 ]
------------------------------ Fine seq_i


*** sampleB ***
58: rep_v_i	<=>	ris <- rep(v, rip)
tmp1_i (1 : 1): [ 2 ]
rip = 1


ris (1 : 1): [ 2 ]
------------------------------ Fine rep_v_i


Stringhe allocate: 5 (9290 interne); stringhe deallocate: 0 (8800 interne)


*** mod2 ***
17: InitMatr_i
ris (2 x 2 : 2 x 2): [
	 79939744 1918959715
	 778334061 25390
 ]
val = 0


ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i


Stringhe allocate: 5 (9295 interne); stringhe deallocate: 0 (8800 interne)


*** probmod ***
46: InitMatr_i
checkOUT (2 x 2 : 2 x 2): [
	 79867176 1918959715
	 778334061 25390
 ]
val = 0


checkOUT (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i

48: InitMatr_i
checkIN (2 x 2 : 2 x 2): [
	 79940616 99
	 778334061 2146959360
 ]
val = 0


checkIN (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i

50: InitMatr_d
ris (2 x 2 : 2 x 2): [
	 6.218345866838722e+175 1.516941458858676e-152
	 1.527787722416657e-154 1.875407042780531e-152
 ]
val = 0


ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_d

52: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (2 x 2 : 2 x 2): [
	 0 0
	 1 0
 ]


M_in (2 : 2): [ 0 1 ]
------------------------------ Fine somma_righe_i

54: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (2 x 2 : 2 x 2): [
	 0 0
	 1 0
 ]


M_out (2 : 2): [ 1 0 ]
------------------------------ Fine somma_colonne_i

57: InitMatr_i
memory (2 x 3 : 2 x 3): [
	 79869600 0 79039504
	 1 0 1075052544
 ]
val = -2147483648


memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 1 1 1 2 1 ]
h (2 : 5): [ 1 4 ]


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 2 ]
s = 1


ind (2 : 2): [ 2 3 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 2 ]
s = 1


tmp_i1 (2 : 2): [ 2 3 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (2 : 2): [ 2 3 ]


T1 (2 : 2): [ 3.614836360604185 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 3 ]
s = 1


tmp_i1 (2 : 2): [ 3 4 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (2 : 2): [ 3 4 ]


T2 (2 : 2): [ 0.7867244574868211 0.3224199317354524 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 2 ]
s = 1


tmp_i1 (2 : 2): [ 2 3 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 4 1 0 0 0 0 ]
tmp_i1 (2 : 2): [ 2 3 ]


old1 (2 : 2): [ 4 1 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 3 ]
s = 1


tmp_i1 (2 : 2): [ 3 4 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 4 1 0 0 0 0 ]
tmp_i1 (2 : 2): [ 3 4 ]


old2 (2 : 2): [ 1 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (2 : 2): [ 4 1 ]
s = -1


new1 (2 : 2): [ 3 0 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (2 : 2): [ 1 0 ]
s = 1


new2 (2 : 2): [ 2 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 2 ]
s = 1


tmp_i1 (2 : 2): [ 2 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 2 3 ]


toll1 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 3 ]
s = 1


tmp_i1 (2 : 2): [ 3 4 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 3 4 ]


toll2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (2 : 2): [ 4 1 ]
T1 (2 : 2): [ 3.614836360604185 0.7867244574868211 ]


a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]


a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (2 : 2): [ 3 0 ]
T1 (2 : 2): [ 3.614836360604185 0.7867244574868211 ]


b (2 : 2): [ -0.6148363606041851 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ -0.6148363606041851 -0.7867244574868211 ]


b (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (2 : 2): [ 3.614836360604185 0.7867244574868211 ]
complemento = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxNA_d

68: assegna1_vs_indx_d	<=>	v[indx] <- val
a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]
ind (0 : 2): [ ]
val = 0


a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

70: assegna1_vs_indx_d	<=>	v[indx] <- val
b (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]
ind (0 : 2): [ ]
val = 0


b (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

78: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]
b (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.3851636393958149 0.6148363606041851
	 0.2132755425131789 0.7867244574868211
 ]
------------------------------ Fine cbind2v_d

79: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.3851636393958149 0.6148363606041851
	 0.2132755425131789 0.7867244574868211
 ]


m (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]
------------------------------ Fine max_righe_d

81: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]
b (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]
m (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]
T1 (2 : 2): [ 3.614836360604185 0.7867244574868211 ]


S1 (2 : 2): [ -0.1700869138378981 -1 ]
------------------------------ Fine f_aux_d

83: diff_vv_d	<=>	ris <- v1 - v2
a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]
toll1 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.6148363606041851 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

84: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (2 : 2): [ -0.6148363606041851 -0.7867244574868211 ]
val = 0

ind1 (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxlt_d

86: diff_vv_d	<=>	ris <- v1 - v2
b (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]
toll1 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.3851636393958149 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

87: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (2 : 2): [ -0.3851636393958149 -0.2132755425131789 ]
val = 0


ind2 (0 : 2): [ ]
------------------------------ Fine which_v_indxgt_d

89: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (2 : 2): [ 1 2 ]
ind2 (0 : 2): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (0 : 2): [ ]
------------------------------ Fine interseca_i

91: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (2 : 2): [ -0.1700869138378981 -1 ]
tmp_i1 (0 : 2): [ ]
val = -1.#INF


S1 (2 : 2): [ -0.1700869138378981 -1 ]
------------------------------ Fine assegna1_vs_indx_d

93: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (2 : 2): [ -0.1700869138378981 -1 ]
ind (0 : 2): [ ]
val = 0


S1 (2 : 2): [ -0.1700869138378981 -1 ]
------------------------------ Fine assegna1_vs_indx_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (2 : 2): [ 1 0 ]
T2 (2 : 2): [ 0.7867244574868211 0.3224199317354524 ]


a (2 : 2): [ 0.2132755425131789 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 0.2132755425131789 -0.3224199317354524 ]


a (2 : 2): [ 0.2132755425131789 0.3224199317354524 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (2 : 2): [ 2 1 ]
T2 (2 : 2): [ 0.7867244574868211 0.3224199317354524 ]


b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]


b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.2132755425131789 0.3224199317354524 ]
b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
 ]


m (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (2 : 2): [ 0.7867244574868211 0.3224199317354524 ]
complemento = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (2 : 2): [ 0.2132755425131789 0.3224199317354524 ]
ind (0 : 2): [ ]
val = 0


a (2 : 2): [ 0.2132755425131789 0.3224199317354524 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
ind (0 : 2): [ ]
val = 0


b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.2132755425131789 0.3224199317354524 ]
b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
 ]


m (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (2 : 2): [ 0.2132755425131789 0.3224199317354524 ]
b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
m (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
T2 (2 : 2): [ 0.7867244574868211 0.3224199317354524 ]


S2 (2 : 2): [ -1.542186124973118 -2.101545225871788 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (2 : 2): [ 0.2132755425131789 0.3224199317354524 ]
toll2 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.7867244574868211 -0.6775800682645476 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (2 : 2): [ -0.7867244574868211 -0.6775800682645476 ]
val = 0

ind1 (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
toll2 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ 0.2132755425131789 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (2 : 2): [ 0.2132755425131789 -0.3224199317354524 ]
val = 0


ind2 (1 : 2): [ 1 ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (2 : 2): [ 1 2 ]
ind2 (1 : 2): [ 1 ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (1 : 2): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (1 : 2): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (1 : 2): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (1 : 2): [ 1 ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ -1.542186124973118 -2.101545225871788 ]
tmp_i1 (1 : 2): [ 1 ]
val = -1.#INF


S2 (2 : 2): [ -1.#INF -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ -1.#INF -2.101545225871788 ]
ind (0 : 2): [ ]
val = 0


S2 (2 : 2): [ -1.#INF -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (2 : 2): [ 0.7867244574868211 0.3224199317354524 ]
val = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ -1.#INF -2.101545225871788 ]
ind (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ -1.#INF -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (2 : 2): [ -0.1700869138378981 -1 ]
S2 (2 : 2): [ -1.#INF -2.101545225871788 ]


ris (2 : 2): [ -1.#INF -3.101545225871788 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (2 : 2): [ -1.#INF -3.101545225871788 ]
div = 2.000


ris (2 : 2): [ -1.#INF -1.550772612935894 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (9455 interne); stringhe deallocate: 0 (8900 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
ris (2 : 2): [ -1.#INF -1.550772612935894 ]
val = -1.#INF


indok (1 : 2): [ 2 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
indok (1 : 2): [ 2 ]
val = 1


checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (2 : 6): [ 1 2 ]
indok (1 : 2): [ 2 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (2 : 6): [ 1 2 ]
st = 1
end = 2


indInf (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (2 : 2): [ 1 2 ]


indx = 2
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 2): [ 1 2 ]
indx = 2


indInf (1 : 2): [ 1 ]
------------------------------ Fine elimina1_indx_i



indInf (1 : 2): [ 1 ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
ris (2 : 2): [ -1.#INF -1.550772612935894 ]
indok (1 : 2): [ 2 ]


tmp_d1 (1 : 1): [ -1.550772612935894 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (1 : 1): [ -1.550772612935894 ]


min = -1.550772612935894
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (2 : 2): [ -1.#INF -1.550772612935894 ]
indInf (1 : 2): [ 1 ]
val = -2.550772612935894


ris (2 : 2): [ -2.550772612935894 -1.550772612935894 ]
------------------------------ Fine assegna1_vs_indx_d

155: InitVett_d
S_in (2 : 2): [ 6.218345866840718e+175 5.618966267453383e+303 ]
val = 0


S_in (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

156: aggiungi_ms_riga_i	<=>	m[riga,] <- val # riga <= dim(m)[0] + 1
checkIN (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1, val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
------------------------------ Fine aggiungi_ms_riga_i

159: somma_vv_d	<=>	ris <- v1 + v2
ris (2 : 2): [ -2.550772612935894 -1.550772612935894 ]
S_in (2 : 2): [ 0 0 ]


tmp_d1 (2 : 4): [ -2.550772612935894 -1.550772612935894 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
tmp_d1 (2 : 4): [ -2.550772612935894 -1.550772612935894 ]


ris (2 x 2 : 2 x 2): [
	 -2.550772612935894 -1.550772612935894
	 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

119: InitVett_d
ris (2 : 2): [ -2.550772612935894 -1.550772612935894 ]
val = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

122: InitVett_i
tmp_i1 (2 : 6): [ 1 2 ]
val = 1


tmp_i1 (2 : 6): [ 1 1 ]
------------------------------ Fine InitVett_i

123: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
riga = 2
tmp_i1 (2 : 6): [ 1 1 ]


checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine aggiungi_mv_riga_i

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 2 1 1 1 ]
h (2 : 5): [ 1 4 ]


tmp_i1 (2 : 6): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


ind (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 4 1 0 0 0 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 4 4 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 4 1 0 0 0 0 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (2 : 2): [ 4 4 ]
s = -1


new1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (2 : 2): [ 1 1 ]
s = 1


new2 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (2 : 2): [ 4 4 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (2 : 2): [ 3 3 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (2 : 2): [ 6.21834586684443e+175 2.048428433988699 ]
val = 0


S1 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (2 : 2): [ 1 1 ]
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (2 : 2): [ 2 2 ]
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (2 : 2): [ 5.842414621812633e-308 0 ]
val = 0


S2 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0 0 ]
ind (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (2 : 2): [ 0 0 ]
S2 (2 : 2): [ 0 0 ]


S_in (2 : 2): [ 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
S_in (2 : 2): [ 0 0 ]
div = 2.000


S_in (2 : 2): [ 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (9560 interne); stringhe deallocate: 0 (8985 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
S_in (2 : 2): [ 0 0 ]
val = -1.#INF


indok (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2
indok (2 : 2): [ 1 2 ]
val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (2 : 6): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (2 : 6): [ 1 2 ]
st = 1
end = 2


indInf (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 2): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
S_in (2 : 2): [ 0 0 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 4): [ 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (2 : 4): [ 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
S_in (2 : 2): [ 0 0 ]
indInf (0 : 2): [ ]
val = -1


S_in (2 : 2): [ 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
ris (2 : 2): [ 0 0 ]
S_in (2 : 2): [ 0 0 ]


tmp_d1 (2 : 4): [ 0 0 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 2 : 2 x 2): [
	 -2.550772612935894 -1.550772612935894
	 0 0
 ]
riga = 2
tmp_d1 (2 : 4): [ 0 0 ]


ris (2 x 2 : 2 x 2): [
	 -2.550772612935894 -1.550772612935894
	 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

168: somma_m_d	<=>	ris <- sum(m)
ris (2 x 2 : 2 x 2): [
	 -2.550772612935894 -1.550772612935894
	 0 0
 ]


ris: -4.101545225871788
------------------------------ Fine somma_m_d

173: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


aus (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

175: which_v_indxne_i	<=>	ris <- which(v != val)
aus (2 : 2): [ 2 2 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine which_v_indxne_i

186: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


rs (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

188: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (2 : 2): [ 2 2 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 1
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
I (0 : 0): [ ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 2
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 2 ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i

216: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
val1 = 0
val2 = 0


checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine assegna1_mindxlt_i

218: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
val1 = 0
val2 = 1


checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

220: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


aus (2 : 2): [ 1 2 ]
------------------------------ Fine somma_colonne_i

222: which_v_indxne_i	<=>	ris <- which(v != val)
aus (2 : 2): [ 1 2 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine which_v_indxne_i

232: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]


rs (2 : 2): [ 1 2 ]
------------------------------ Fine somma_righe_i

234: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (2 : 2): [ 1 2 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
r = 1
val = 0


I_add (1 : 4): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 4): [ ]
I_add (1 : 4): [ 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (1 : 1): [ 2 ]


ris (1 : 1): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 2 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 1 1
 ]
r = 2
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 2 ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (3 : 3): [ 2 1 2 ]


ris (2 : 3): [ 2 1 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 3): [ 2 1 ]
------------------------------ Fine unione1_i


Stringhe allocate: 5 (9625 interne); stringhe deallocate: 0 (9125 interne)


Stringhe allocate: 5 (9630 interne); stringhe deallocate: 0 (9135 interne)


*** module3 ***
51: seq_i	<=>	ris <- seq(da, a, incr)
da = 2
a = 2
incr = 1


tmp1_i (1 : 1): [ 2 ]
------------------------------ Fine seq_i


*** sampleB ***
58: rep_v_i	<=>	ris <- rep(v, rip)
tmp1_i (1 : 1): [ 2 ]
rip = 1


ris (1 : 1): [ 2 ]
------------------------------ Fine rep_v_i


Stringhe allocate: 5 (9640 interne); stringhe deallocate: 0 (9135 interne)

54: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


tmp1_i (1 : 1): [ 1 ]
------------------------------ Fine seq_i


*** sampleB ***
58: rep_v_i	<=>	ris <- rep(v, rip)
tmp1_i (1 : 1): [ 1 ]
rip = 1


ris (1 : 1): [ 1 ]
------------------------------ Fine rep_v_i


Stringhe allocate: 5 (9645 interne); stringhe deallocate: 0 (9135 interne)


*** mod3 ***
33: InitMatr_i
ris (2 x 2 : 2 x 2): [
	 79864128 1918959715
	 778334061 25390
 ]
val = 0


ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i

34: copia_v_d	<=>	ris[st:end] <- v[st:end]
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
st = 1
end = 7


STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
------------------------------ Fine copia_v_d

35: copia_v_d	<=>	ris[st:end] <- v[st:end]
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
st = 1
end = 7


STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
------------------------------ Fine copia_v_d

39: segmento_v_d	<=>	ris <- v[st:end]
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
start = 2
end = 2


tmp1_d (1 : 1): [ 3.614836360604185 ]
------------------------------ Fine segmento_v_d

40: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
tmp1_d (1 : 1): [ 3.614836360604185 ]
canc_NA = 1



ris: 3.614836360604185
------------------------------ Fine somma_v_d

43: segmento_v_d	<=>	ris <- v[st:end]
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
start = 2
end = 2


p (1 : 1): [ 3.614836360604185 ]
------------------------------ Fine segmento_v_d

44: dividi1_vs_d	<=>	v <- v / div
p (1 : 1): [ 3.614836360604185 ]
div = 3.615


p (1 : 1): [ 1 ]
------------------------------ Fine dividi1_vs_d

61: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


tmp1_i (1 : 1): [ 1 ]
------------------------------ Fine seq_i


*** sampleB_p ***
25: rep_v_i	<=>	ris <- rep(v, rip)
tmp1_i (1 : 1): [ 1 ]
rip = 1


ris (1 : 1): [ 1 ]
------------------------------ Fine rep_v_i

64: somma_v_i	<=>	ris <- sum(v, na.rm=canc_NA)
ris (1 : 1): [ 1 ]
canc_NA = 0



ris: 1
------------------------------ Fine somma_v_i

131: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


tmp1_i (1 : 1): [ 1 ]
------------------------------ Fine seq_i

133: assegna1_m_vv_i	<=>	m[vr, vc] <- val
ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
tmp1_i (1 : 1): [ 1 ]
scalare_i (1 : 1): [ 2 ]
val = 1


ris (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

135: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


indS (1 : 1): [ 1 ]
------------------------------ Fine seq_i

137: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 1
incr = 1


tmp2_i (1 : 1): [ 1 ]
------------------------------ Fine seq_i

138: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp2_i (1 : 1): [ 1 ]
indS (1 : 1): [ 1 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp2_i (1 : 1): [ 1 ]
st = 1
end = 1


indBS (1 : 1): [ 1 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indBS (1 : 1): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indBS (1 : 1): [ 1 ]
indx = 1


indBS (0 : 1): [ ]
------------------------------ Fine elimina1_indx_i



indBS (0 : 1): [ ]
------------------------------ Fine setdiff_i



*****************************************
*****************************************


Stringhe allocate: 5 (9705 interne); stringhe deallocate: 0 (9190 interne)


*** probmod ***
46: InitMatr_i
checkOUT (2 x 2 : 2 x 2): [
	 79873448 1918959715
	 771777326 1056989998
 ]
val = 0


checkOUT (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i

48: InitMatr_i
checkIN (2 x 2 : 2 x 2): [
	 79939560 1918959715
	 771777326 2130731822
 ]
val = 0


checkIN (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_i

50: InitMatr_d
ris (2 x 2 : 2 x 2): [
	 6.21834586683753e+175 0.5
	 3.125653738386077e-005 0.5
 ]
val = 0


ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine InitMatr_d

52: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


M_in (2 : 2): [ 1 0 ]
------------------------------ Fine somma_righe_i

54: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
ris (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


M_out (2 : 2): [ 0 1 ]
------------------------------ Fine somma_colonne_i

57: InitMatr_i
memory (2 x 3 : 2 x 3): [
	 79858776 0 79033840
	 1 0 2146959360
 ]
val = -2147483648


memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
------------------------------ Fine InitMatr_i

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

119: InitVett_d
S_out (2 : 2): [ 3.287239484599792e-085 4.247197160373463e-314 ]
val = 0


S_out (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

122: InitVett_i
tmp_i1 (2 : 6): [ 79869600 1 ]
val = 1


tmp_i1 (2 : 6): [ 1 1 ]
------------------------------ Fine InitVett_i

123: aggiungi_mv_riga_i	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
checkOUT (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
tmp_i1 (2 : 6): [ 1 1 ]


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_i

128: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 2 1 1 1 ]
h (2 : 5): [ 1 4 ]


tmp_i1 (2 : 6): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


ind (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STin (7 : 7): [ 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 1.#QNAN 0 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 4 1 0 0 0 0 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 4 4 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_in (7 : 7): [ 0 4 1 0 0 0 0 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (2 : 2): [ 4 4 ]
s = -1


new1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (2 : 2): [ 1 1 ]
s = 1


new2 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 1 ]
s = 1


tmp_i1 (2 : 2): [ 2 2 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 2 ]
s = 1


tmp_i1 (2 : 2): [ 3 3 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (2 : 2): [ 4 4 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (2 : 2): [ 3 3 ]
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

99: InitVett_d
S1 (2 : 2): [ 6.218345866840207e+175 -3.125653738386077e-005 ]
val = 0


S1 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (2 : 2): [ 1 1 ]
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]


a (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (2 : 2): [ 2 2 ]
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


b (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 1.#QNAN 1.#QNAN ]
b (2 : 2): [ 1.#QNAN 1.#QNAN ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 1.#QNAN 1.#QNAN
	 1.#QNAN 1.#QNAN
 ]


m (2 : 2): [ 1.#QNAN 1.#QNAN ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
complemento = 0


ind (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxNA_d

140: InitVett_d
S2 (2 : 2): [ 6.218345866843778e+175 3.125653738386077e-005 ]
val = 0


S2 (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (2 : 2): [ 1.#QNAN 1.#QNAN ]
val = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ 0 0 ]
ind (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (2 : 2): [ 0 0 ]
S2 (2 : 2): [ 0 0 ]


ris (2 : 2): [ 0 0 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
ris (2 : 2): [ 0 0 ]
div = 2.000


ris (2 : 2): [ 0 0 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (9855 interne); stringhe deallocate: 0 (9275 interne)

131: which_v_indxne_d	<=>	ris <- which(v != val)
ris (2 : 2): [ 0 0 ]
val = -1.#INF


indok (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxne_d

133: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkIN (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
indok (2 : 2): [ 1 2 ]
val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
------------------------------ Fine aggiungi_riga_indx_i

141: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine seq_i

142: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (2 : 6): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (2 : 6): [ 1 2 ]
st = 1
end = 2


indInf (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
------------------------------ Fine elimina1_indx_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (1 : 2): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
------------------------------ Fine elimina1_indx_i



indInf (0 : 2): [ ]
------------------------------ Fine setdiff_i

144: copia_v_indx_d	<=>	ris <- v[indx]
ris (2 : 2): [ 0 0 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 2): [ 0 0 ]
------------------------------ Fine copia_v_indx_d

148: min_v_d	<=>	ris <- min(v)
tmp_d1 (2 : 2): [ 0 0 ]


min = 0
------------------------------ Fine min_v_d

149: assegna1_vs_indx_d	<=>	v[indx] <- val
ris (2 : 2): [ 0 0 ]
indInf (0 : 2): [ ]
val = -1


ris (2 : 2): [ 0 0 ]
------------------------------ Fine assegna1_vs_indx_d

159: somma_vv_d	<=>	ris <- v1 + v2
S_out (2 : 2): [ 0 0 ]
ris (2 : 2): [ 0 0 ]


tmp_d1 (2 : 2): [ 0 0 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
tmp_d1 (2 : 2): [ 0 0 ]


ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
------------------------------ Fine aggiungi_mv_riga_d

73: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


tmp_i1 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

74: which_m_colindxeq_i	<=>	ris <- which(m[, c] == val)
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 6): [ ]
------------------------------ Fine which_m_colindxeq_i

75: interseca_i	<=>	ris <- intersect(v1, v2)
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
------------------------------ Fine interseca_i

92: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sout (5 : 5): [ 1 1 1 2 1 ]
h (2 : 5): [ 1 4 ]


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine assegna_v_indxNA_i


***score***
31: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 2 ]
s = 1


ind (2 : 2): [ 2 3 ]
------------------------------ Fine somma_vs_i

33: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 2 ]
s = 1


tmp_i1 (2 : 2): [ 2 3 ]
------------------------------ Fine somma_vs_i

35: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (2 : 2): [ 2 3 ]


T1 (2 : 2): [ 3.614836360604185 0.7867244574868211 ]
------------------------------ Fine assegna_v_indxNA_d

37: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 3 ]
s = 1


tmp_i1 (2 : 2): [ 3 4 ]
------------------------------ Fine somma_vs_i

38: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
STout (7 : 7): [ 1.#QNAN 3.614836360604185 0.7867244574868211 0.3224199317354524 0.1712208549059974 0.1047983952675442 0 ]
tmp_i1 (2 : 2): [ 3 4 ]


T2 (2 : 2): [ 0.7867244574868211 0.3224199317354524 ]
------------------------------ Fine assegna_v_indxNA_d

40: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 2 ]
s = 1


tmp_i1 (2 : 2): [ 2 3 ]
------------------------------ Fine somma_vs_i

41: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 4 1 0 0 0 0 ]
tmp_i1 (2 : 2): [ 2 3 ]


old1 (2 : 2): [ 4 1 ]
------------------------------ Fine assegna_v_indxNA_d

43: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 3 ]
s = 1


tmp_i1 (2 : 2): [ 3 4 ]
------------------------------ Fine somma_vs_i

44: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
Freq_out (7 : 7): [ 0 4 1 0 0 0 0 ]
tmp_i1 (2 : 2): [ 3 4 ]


old2 (2 : 2): [ 1 0 ]
------------------------------ Fine assegna_v_indxNA_d

46: somma_vs_d	<=>	ris <- v + s
old1 (2 : 2): [ 4 1 ]
s = -1


new1 (2 : 2): [ 3 0 ]
------------------------------ Fine somma_vs_d

48: somma_vs_d	<=>	ris <- v + s
old2 (2 : 2): [ 1 0 ]
s = 1


new2 (2 : 2): [ 2 1 ]
------------------------------ Fine somma_vs_d

50: somma_vs_i	<=>	ris <- v + s
tmp_i1 (2 : 6): [ 1 2 ]
s = 1


tmp_i1 (2 : 2): [ 2 3 ]
------------------------------ Fine somma_vs_i

52: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 2 3 ]


toll1 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

54: somma_vs_i	<=>	ris <- v + s
ind (2 : 2): [ 2 3 ]
s = 1


tmp_i1 (2 : 2): [ 3 4 ]
------------------------------ Fine somma_vs_i

56: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
toll (7 : 7): [ 1.#QNAN 1 1 1 1 1 1 ]
tmp_i1 (2 : 2): [ 3 4 ]


toll2 (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_d

58: diff_vv_d	<=>	ris <- v1 - v2
old1 (2 : 2): [ 4 1 ]
T1 (2 : 2): [ 3.614836360604185 0.7867244574868211 ]


a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]
------------------------------ Fine diff_vv_d

59: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]


a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]
------------------------------ Fine abs1_v_d

61: diff_vv_d	<=>	ris <- v1 - v2
new1 (2 : 2): [ 3 0 ]
T1 (2 : 2): [ 3.614836360604185 0.7867244574868211 ]


b (2 : 2): [ -0.6148363606041851 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

62: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ -0.6148363606041851 -0.7867244574868211 ]


b (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]
------------------------------ Fine abs1_v_d

64: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T1 (2 : 2): [ 3.614836360604185 0.7867244574868211 ]
complemento = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxNA_d

68: assegna1_vs_indx_d	<=>	v[indx] <- val
a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]
ind (0 : 2): [ ]
val = 0


a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]
------------------------------ Fine assegna1_vs_indx_d

70: assegna1_vs_indx_d	<=>	v[indx] <- val
b (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]
ind (0 : 2): [ ]
val = 0


b (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]
------------------------------ Fine assegna1_vs_indx_d

78: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]
b (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.3851636393958149 0.6148363606041851
	 0.2132755425131789 0.7867244574868211
 ]
------------------------------ Fine cbind2v_d

79: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.3851636393958149 0.6148363606041851
	 0.2132755425131789 0.7867244574868211
 ]


m (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]
------------------------------ Fine max_righe_d

81: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]
b (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]
m (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]
T1 (2 : 2): [ 3.614836360604185 0.7867244574868211 ]


S1 (2 : 2): [ -0.1700869138378981 -1 ]
------------------------------ Fine f_aux_d

83: diff_vv_d	<=>	ris <- v1 - v2
a (2 : 2): [ 0.3851636393958149 0.2132755425131789 ]
toll1 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.6148363606041851 -0.7867244574868211 ]
------------------------------ Fine diff_vv_d

84: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (2 : 2): [ -0.6148363606041851 -0.7867244574868211 ]
val = 0

ind1 (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxlt_d

86: diff_vv_d	<=>	ris <- v1 - v2
b (2 : 2): [ 0.6148363606041851 0.7867244574868211 ]
toll1 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.3851636393958149 -0.2132755425131789 ]
------------------------------ Fine diff_vv_d

87: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (2 : 2): [ -0.3851636393958149 -0.2132755425131789 ]
val = 0


ind2 (0 : 2): [ ]
------------------------------ Fine which_v_indxgt_d

89: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (2 : 2): [ 1 2 ]
ind2 (0 : 2): [ ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (0 : 2): [ ]
------------------------------ Fine interseca_i

91: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (2 : 2): [ -0.1700869138378981 -1 ]
tmp_i1 (0 : 2): [ ]
val = -1.#INF


S1 (2 : 2): [ -0.1700869138378981 -1 ]
------------------------------ Fine assegna1_vs_indx_d

93: assegna1_vs_indx_d	<=>	v[indx] <- val
S1 (2 : 2): [ -0.1700869138378981 -1 ]
ind (0 : 2): [ ]
val = 0


S1 (2 : 2): [ -0.1700869138378981 -1 ]
------------------------------ Fine assegna1_vs_indx_d

102: diff_vv_d	<=>	ris <- v1 - v2
old2 (2 : 2): [ 1 0 ]
T2 (2 : 2): [ 0.7867244574868211 0.3224199317354524 ]


a (2 : 2): [ 0.2132755425131789 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

103: abs1_v_d	<=>	v <- abs(v)
a (2 : 2): [ 0.2132755425131789 -0.3224199317354524 ]


a (2 : 2): [ 0.2132755425131789 0.3224199317354524 ]
------------------------------ Fine abs1_v_d

105: diff_vv_d	<=>	ris <- v1 - v2
new2 (2 : 2): [ 2 1 ]
T2 (2 : 2): [ 0.7867244574868211 0.3224199317354524 ]


b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine diff_vv_d

106: abs1_v_d	<=>	v <- abs(v)
b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]


b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine abs1_v_d

108: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.2132755425131789 0.3224199317354524 ]
b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
 ]
------------------------------ Fine cbind2v_d

109: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
 ]


m (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine max_righe_d

111: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
T2 (2 : 2): [ 0.7867244574868211 0.3224199317354524 ]
complemento = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxNA_d

115: assegna1_vs_indx_d	<=>	v[indx] <- val
a (2 : 2): [ 0.2132755425131789 0.3224199317354524 ]
ind (0 : 2): [ ]
val = 0


a (2 : 2): [ 0.2132755425131789 0.3224199317354524 ]
------------------------------ Fine assegna1_vs_indx_d

117: assegna1_vs_indx_d	<=>	v[indx] <- val
b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
ind (0 : 2): [ ]
val = 0


b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine assegna1_vs_indx_d

119: cbind2v_d	<=>	ris <- cbind(v1, v2)
a (2 : 2): [ 0.2132755425131789 0.3224199317354524 ]
b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
 ]
------------------------------ Fine cbind2v_d

120: max_righe_d	<=>	ris <- apply(m, 1, max)
tmpm_d (2 x 2 : 2 x 2): [
	 0.2132755425131789 1.213275542513179
	 0.3224199317354524 0.6775800682645476
 ]


m (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
------------------------------ Fine max_righe_d

122: f_aux_d	<=>	ris <- (sign(a - b)) * m / t
a (2 : 2): [ 0.2132755425131789 0.3224199317354524 ]
b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
m (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
T2 (2 : 2): [ 0.7867244574868211 0.3224199317354524 ]


S2 (2 : 2): [ -1.542186124973118 -2.101545225871788 ]
------------------------------ Fine f_aux_d

124: diff_vv_d	<=>	ris <- v1 - v2
a (2 : 2): [ 0.2132755425131789 0.3224199317354524 ]
toll2 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ -0.7867244574868211 -0.6775800682645476 ]
------------------------------ Fine diff_vv_d

125: which_v_indxlt_d	<=>	ris <- which(v<val)
tmp_d1 (2 : 2): [ -0.7867244574868211 -0.6775800682645476 ]
val = 0

ind1 (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxlt_d

127: diff_vv_d	<=>	ris <- v1 - v2
b (2 : 2): [ 1.213275542513179 0.6775800682645476 ]
toll2 (2 : 2): [ 1 1 ]


tmp_d1 (2 : 2): [ 0.2132755425131789 -0.3224199317354524 ]
------------------------------ Fine diff_vv_d

128: which_v_indxgt_d	<=>	ris <- which(v > val)
tmp_d1 (2 : 2): [ 0.2132755425131789 -0.3224199317354524 ]
val = 0


ind2 (1 : 2): [ 1 ]
------------------------------ Fine which_v_indxgt_d

130: interseca_i	<=>	ris <- intersect(v1, v2)
ind1 (2 : 2): [ 1 2 ]
ind2 (1 : 2): [ 1 ]
2459: esiste_v_i	<=>	elem %IN% v
elem = 1
ind2 (1 : 2): [ 1 ]


indx = 1
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 1
tmp_i1 (0 : 2): [ ]


indx = 0
------------------------------ Fine esiste_v_i

2459: esiste_v_i	<=>	elem %IN% v
elem = 2
ind2 (1 : 2): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i

2460: esiste_v_i	<=>	elem %IN% v
elem = 2
tmp_i1 (1 : 2): [ 1 ]


indx = 0
------------------------------ Fine esiste_v_i



tmp_i1 (1 : 2): [ 1 ]
------------------------------ Fine interseca_i

132: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ -1.542186124973118 -2.101545225871788 ]
tmp_i1 (1 : 2): [ 1 ]
val = -1.#INF


S2 (2 : 2): [ -1.#INF -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

134: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ -1.#INF -2.101545225871788 ]
ind (0 : 2): [ ]
val = 0


S2 (2 : 2): [ -1.#INF -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

143: which_v_indxeq_d	<=>	ris <- which(v==val)
T2 (2 : 2): [ 0.7867244574868211 0.3224199317354524 ]
val = 0


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxeq_d

145: assegna1_vs_indx_d	<=>	v[indx] <- val
S2 (2 : 2): [ -1.#INF -2.101545225871788 ]
ind (0 : 2): [ ]
val = -1.#INF


S2 (2 : 2): [ -1.#INF -2.101545225871788 ]
------------------------------ Fine assegna1_vs_indx_d

147: somma_vv_d	<=>	ris <- v1 + v2
S1 (2 : 2): [ -0.1700869138378981 -1 ]
S2 (2 : 2): [ -1.#INF -2.101545225871788 ]


S_out (2 : 2): [ -1.#INF -3.101545225871788 ]
------------------------------ Fine somma_vv_d

148: dividi1_vs_d	<=>	v <- v / div
S_out (2 : 2): [ -1.#INF -3.101545225871788 ]
div = 2.000


S_out (2 : 2): [ -1.#INF -1.550772612935894 ]
------------------------------ Fine dividi1_vs_d


Stringhe allocate: 5 (9970 interne); stringhe deallocate: 0 (9375 interne)

95: which_v_indxne_d	<=>	ris <- which(v != val)
S_out (2 : 2): [ -1.#INF -1.550772612935894 ]
val = -1.#INF


indok (1 : 2): [ 2 ]
------------------------------ Fine which_v_indxne_d

97: aggiungi_ms_rigaindx_i	<=>	m[riga, indx] <- val # con riga <= dim(m)[0] + 1
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2
indok (1 : 2): [ 2 ]
val = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
------------------------------ Fine aggiungi_riga_indx_i

104: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine seq_i

105: setdiff_i	<=>	ris <- setdiff(v1, v2)
tmp_i1 (2 : 6): [ 1 2 ]
indok (1 : 2): [ 2 ]
3091: copia_v_i	<=>	ris[st:end] <- v[st:end]
tmp_i1 (2 : 6): [ 1 2 ]
st = 1
end = 2


indInf (2 : 2): [ 1 2 ]
------------------------------ Fine copia_v_i

3093: esiste_v_i	<=>	elem %IN% v
elem = 2
indInf (2 : 2): [ 1 2 ]


indx = 2
------------------------------ Fine esiste_v_i

3095: elimina1_indx_i	<=>	v <- v[-indx]
indInf (2 : 2): [ 1 2 ]
indx = 2


indInf (1 : 2): [ 1 ]
------------------------------ Fine elimina1_indx_i



indInf (1 : 2): [ 1 ]
------------------------------ Fine setdiff_i

107: copia_v_indx_d	<=>	ris <- v[indx]
S_out (2 : 2): [ -1.#INF -1.550772612935894 ]
indok (1 : 2): [ 2 ]


tmp_d1 (1 : 2): [ -1.550772612935894 ]
------------------------------ Fine copia_v_indx_d

111: min_v_d	<=>	ris <- min(v)
tmp_d1 (1 : 2): [ -1.550772612935894 ]


min = -1.550772612935894
------------------------------ Fine min_v_d

112: assegna1_vs_indx_d	<=>	v[indx] <- val
S_out (2 : 2): [ -1.#INF -1.550772612935894 ]
indInf (1 : 2): [ 1 ]
val = -2.550772612935894


S_out (2 : 2): [ -2.550772612935894 -1.550772612935894 ]
------------------------------ Fine assegna1_vs_indx_d

155: InitVett_d
ris (2 : 2): [ 0 0 ]
val = 0


ris (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

156: aggiungi_ms_riga_i	<=>	m[riga,] <- val # riga <= dim(m)[0] + 1
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2, val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
------------------------------ Fine aggiungi_ms_riga_i

159: somma_vv_d	<=>	ris <- v1 + v2
S_out (2 : 2): [ -2.550772612935894 -1.550772612935894 ]
ris (2 : 2): [ 0 0 ]


tmp_d1 (2 : 2): [ -2.550772612935894 -1.550772612935894 ]
------------------------------ Fine somma_vv_d

160: aggiungi_mv_riga_d	<=>	m[riga,] <- v # riga <= dim(m)[0] + 1
ris (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 2
tmp_d1 (2 : 2): [ -2.550772612935894 -1.550772612935894 ]


ris (2 x 2 : 2 x 2): [
	 0 0
	 -2.550772612935894 -1.550772612935894
 ]
------------------------------ Fine aggiungi_mv_riga_d

168: somma_m_d	<=>	ris <- sum(m)
ris (2 x 2 : 2 x 2): [
	 0 0
	 -2.550772612935894 -1.550772612935894
 ]


ris: -4.101545225871788
------------------------------ Fine somma_m_d

173: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


aus (2 : 2): [ 2 2 ]
------------------------------ Fine somma_colonne_i

175: which_v_indxne_i	<=>	ris <- which(v != val)
aus (2 : 2): [ 2 2 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine which_v_indxne_i

186: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


rs (2 : 2): [ 2 2 ]
------------------------------ Fine somma_righe_i

188: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (2 : 2): [ 2 2 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 1
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
I (0 : 0): [ ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 2): [ 1 2 ]
------------------------------ Fine unione1_i

201: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
r = 2
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

203: unione1_i	<=>	v1 <- union(v1, v2)
ris (2 : 2): [ 1 2 ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 4): [ 1 2 ]
------------------------------ Fine unione1_i

216: assegna1_mindxlt_i	<=>	m1[which(m2<val1)] <- val2
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
val1 = 0
val2 = 0


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
------------------------------ Fine assegna1_mindxlt_i

218: assegna1_m_indxgt_i	<=>	m1[which(m2>val1)] <- val2
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
val1 = 0
val2 = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
------------------------------ Fine assegna1_m_indxgt_i

220: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


aus (2 : 2): [ 1 2 ]
------------------------------ Fine somma_colonne_i

222: which_v_indxne_i	<=>	ris <- which(v != val)
aus (2 : 2): [ 1 2 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
------------------------------ Fine which_v_indxne_i

232: somma_righe_i	<=>	ris <- apply(m, 1, sum)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]


rs (2 : 2): [ 2 1 ]
------------------------------ Fine somma_righe_i

234: ordine_i	<=>	ris <- order(v, decreasing=decr)
rs (2 : 2): [ 2 1 ]
decr = 0


ord_ind (2 : 2): [ 2 1 ]
------------------------------ Fine ordine_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
r = 2
val = 0


I_add (1 : 4): [ 2 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (0 : 4): [ ]
I_add (1 : 4): [ 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (1 : 1): [ 2 ]


ris (1 : 1): [ 2 ]
------------------------------ Fine elimina_doppi_i



ris (1 : 1): [ 2 ]
------------------------------ Fine unione1_i

246: which_m_rowindxne_i	<=>	ris <- which(m[r, ] != val)
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 1
 ]
r = 1
val = 0


I_add (2 : 4): [ 1 2 ]
------------------------------ Fine which_m_rowindxne_i

248: unione1_i	<=>	v1 <- union(v1, v2)
ris (1 : 1): [ 2 ]
I_add (2 : 4): [ 1 2 ]
3003: elimina_doppi_i	<=>	ris <- union(v, v)
I (3 : 3): [ 2 1 2 ]


ris (2 : 3): [ 2 1 ]
------------------------------ Fine elimina_doppi_i



ris (2 : 3): [ 2 1 ]
------------------------------ Fine unione1_i


Stringhe allocate: 5 (10035 interne); stringhe deallocate: 0 (9515 interne)

90: seq_i	<=>	ris <- seq(da, a, incr)
da = 2
a = 2
incr = 1


ris->indices (1 : 1): [ 2 ]
------------------------------ Fine seq_i


Stringhe allocate: 5 (10040 interne); stringhe deallocate: 0 (9530 interne)

143: vettore3s_d		<=>	ris <- c(el1, el2, el3)
el1 = -4.101545225871788, el2 = -2.050772612935894, el3 = -2.050772612935894


prob_mod (3 : 3): [ -4.101545225871788 -2.050772612935894 -2.050772612935894 ]
------------------------------ Fine vettore3s_d

145: assegna1_v_indxeq_d	<=>	v[which(v==val1)] <- val2
prob_mod (3 : 3): [ -4.101545225871788 -2.050772612935894 -2.050772612935894 ]
prob_mod (3 : 3): [ -4.101545225871788 -2.050772612935894 -2.050772612935894 ]
val1 = 0
val2 = 1.#QNAN


prob_mod (3 : 3): [ -4.101545225871788 -2.050772612935894 -2.050772612935894 ]
------------------------------ Fine assegna1_v_indxeq_d

147: which_v_indxNA_d	<=>	ris <- which(is_na(v)) oppure which(!is_na(v))
prob_mod (3 : 3): [ -4.101545225871788 -2.050772612935894 -2.050772612935894 ]
complemento = 1


ind (3 : 3): [ 1 2 3 ]
------------------------------ Fine which_v_indxNA_d

153: copia_v_indx_d	<=>	ris <- v[indx]
prob_mod (3 : 3): [ -4.101545225871788 -2.050772612935894 -2.050772612935894 ]
ind (3 : 3): [ 1 2 3 ]


tmp1_d (3 : 16): [ -4.101545225871788 -2.050772612935894 -2.050772612935894 ]
------------------------------ Fine copia_v_indx_d

154: min_v_d	<=>	ris <- min(v)
tmp1_d (3 : 16): [ -4.101545225871788 -2.050772612935894 -2.050772612935894 ]


min = -4.101545225871788
------------------------------ Fine min_v_d

157: somma1_vs_d	<=>	v <- v + s
prob_mod (3 : 3): [ -4.101545225871788 -2.050772612935894 -2.050772612935894 ]
s = 4.212656336982898


prob_mod (3 : 3): [ 0.1111111111111107 2.161883724047005 2.161883724047005 ]
------------------------------ Fine somma1_vs_d

160: assegna1_v_indxNA_d	<=>	v1[which(is.na(v2))] <- val oppure v1[which(!is.na(v2))] <- val
prob_mod (3 : 3): [ 0.1111111111111107 2.161883724047005 2.161883724047005 ]
prob_mod (3 : 3): [ 0.1111111111111107 2.161883724047005 2.161883724047005 ]
val = 0
complemento = 0


prob_mod (3 : 3): [ 0.1111111111111107 2.161883724047005 2.161883724047005 ]
------------------------------ Fine assegna1_v_indxNA_d

162: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
prob_mod (3 : 3): [ 0.1111111111111107 2.161883724047005 2.161883724047005 ]
canc_NA = 0



ris: 4.43487855920512
------------------------------ Fine somma_v_d

162: dividi1_vs_d	<=>	v <- v / div
prob_mod (3 : 3): [ 0.1111111111111107 2.161883724047005 2.161883724047005 ]
div = 4.435


prob_mod (3 : 3): [ 0.02505392416675905 0.4874730379166205 0.4874730379166205 ]
------------------------------ Fine dividi1_vs_d

164: vettore3s_i		<=>	ris <- c(el1, el2, el3)
el1 = 1, el2 = 2, el3 = 3


tmp1_i (3 : 3): [ 1 2 3 ]
------------------------------ Fine vettore3s_i


*** sampleB_p ***

*** sample_p ***
tmp1_i (3 : 3): [ 1 2 3 ]
k = 1, replace = 0
prob_mod (3 : 3): [ 0.02505392416675905 0.4874730379166205 0.4874730379166205 ]


ris (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 5 (10040 interne); stringhe deallocate: 0 (9530 interne)


*** assign_nodes ***
35: copia_v_i	<=>	ris[st:end] <- v[st:end]
h (2 : 5): [ 1 4 ]
st = 1
end = 2


or_h (2 : 2): [ 1 4 ]
------------------------------ Fine copia_v_i

37: seq_i	<=>	ris <- seq(da, a, incr)
da = 1
a = 2
incr = 1


aus_h (2 : 2): [ 1 2 ]
------------------------------ Fine seq_i

43: InitVett_i
index (2 : 2): [ 79873432 25390 ]
val = 0


index (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_i

45: somma_righe_i	<=>	ris <- apply(m, 1, sum)
ris (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


M_in (2 : 2): [ 1 0 ]
------------------------------ Fine somma_righe_i

47: ordine_i	<=>	ris <- order(v, decreasing=decr)
M_in (2 : 2): [ 1 0 ]
decr = 1


Ord (2 : 2): [ 1 2 ]
------------------------------ Fine ordine_i

52: riga_d	<=>	ris <- m[r,]
ris (2 x 2 : 2 x 2): [
	 0 0
	 -2.550772612935894 -1.550772612935894
 ]
r = 1

p (2 : 2): [ 0 0 ]
------------------------------ Fine riga_d

54: which_v_indxle_d	<=>	ris <- which(v<=val)
p (2 : 2): [ 0 0 ]
val = 0


tmp_i (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxle_d

57: min_v_d	<=>	ris <- min(v)
p (2 : 2): [ 0 0 ]


min = 0
------------------------------ Fine min_v_d

58: somma1_vs_d	<=>	v <- v + s
p (2 : 2): [ 0 0 ]
s = 0.25


p (2 : 2): [ 0.25 0.25 ]
------------------------------ Fine somma1_vs_d

61: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 2 1 1 1 ]
h (2 : 5): [ 1 4 ]


Sin_h (2 : 2): [ 1 1 ]
------------------------------ Fine assegna_v_indxNA_i

66: which_v_indxgt_i	<=>	ris <- which(v > val)
Sin_h (2 : 2): [ 1 1 ]
val = 4


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxgt_i

72: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
p (2 : 2): [ 0.25 0.25 ]
aus_h (2 : 2): [ 1 2 ]


tmp_d (2 : 2): [ 0.25 0.25 ]
------------------------------ Fine assegna_v_indxNA_d

73: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
tmp_d (2 : 2): [ 0.25 0.25 ]
canc_NA = 0



ris: 0.5
------------------------------ Fine somma_v_d

74: dividi_vs_d	ris <- v / div
tmp_d (2 : 2): [ 0.25 0.25 ]
div = 0.500


p (2 : 2): [ 0.5 0.5 ]
------------------------------ Fine dividi_vs_d


*** sampleB_p ***

*** sample_p ***
h (2 : 5): [ 1 4 ]
k = 1, replace = 0
p (2 : 2): [ 0.5 0.5 ]


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (10095 interne); stringhe deallocate: 0 (9530 interne)

81: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
h (2 : 5): [ 1 4 ]
ris (1 : 1): [ 1 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 1
h (2 : 5): [ 1 4 ]


indx = 1
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
h (2 : 5): [ 1 4 ]
indx = 1


h (1 : 5): [ 4 ]
------------------------------ Fine elimina1_indx_i



h (1 : 5): [ 4 ]
------------------------------ Fine setdiff1_i

83: which_vv_eq_i	<=>	ris <- which(v1 == v2)
or_h (2 : 2): [ 1 4 ]
ris (1 : 1): [ 1 ]
2017: esiste_v_i	<=>	elem %IN% v
elem = 1
or_h (2 : 2): [ 1 4 ]


indx = 1
------------------------------ Fine esiste_v_i



tmp_i (1 : 2): [ 1 ]
------------------------------ Fine which_vv_eq_i

84: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
aus_h (2 : 2): [ 1 2 ]
tmp_i (1 : 2): [ 1 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 1
aus_h (2 : 2): [ 1 2 ]


indx = 1
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
aus_h (2 : 2): [ 1 2 ]
indx = 1


aus_h (1 : 2): [ 2 ]
------------------------------ Fine elimina1_indx_i



aus_h (1 : 2): [ 2 ]
------------------------------ Fine setdiff1_i

52: riga_d	<=>	ris <- m[r,]
ris (2 x 2 : 2 x 2): [
	 0 0
	 -2.550772612935894 -1.550772612935894
 ]
r = 2

p (2 : 2): [ -2.550772612935894 -1.550772612935894 ]
------------------------------ Fine riga_d

54: which_v_indxle_d	<=>	ris <- which(v<=val)
p (2 : 2): [ -2.550772612935894 -1.550772612935894 ]
val = 0


tmp_i (2 : 2): [ 1 2 ]
------------------------------ Fine which_v_indxle_d

57: min_v_d	<=>	ris <- min(v)
p (2 : 2): [ -2.550772612935894 -1.550772612935894 ]


min = -2.550772612935894
------------------------------ Fine min_v_d

58: somma1_vs_d	<=>	v <- v + s
p (2 : 2): [ -2.550772612935894 -1.550772612935894 ]
s = 2.800772612935894


p (2 : 2): [ 0.25 1.25 ]
------------------------------ Fine somma1_vs_d

61: assegna_v_indxNA_i	<=>	ris <-v[indx] # con sforamento dei limiti
Sin (5 : 5): [ 1 2 1 1 1 ]
h (1 : 5): [ 4 ]


Sin_h (1 : 2): [ 1 ]
------------------------------ Fine assegna_v_indxNA_i

66: which_v_indxgt_i	<=>	ris <- which(v > val)
Sin_h (1 : 2): [ 1 ]
val = 5


ind (0 : 2): [ ]
------------------------------ Fine which_v_indxgt_i

72: assegna_v_indxNA_d	<=>	ris <-v[indx] # con sforamento dei limiti
p (2 : 2): [ 0.25 1.25 ]
aus_h (1 : 2): [ 2 ]


tmp_d (1 : 2): [ 1.25 ]
------------------------------ Fine assegna_v_indxNA_d

73: somma_v_d	<=>	ris <- sum(v, na.rm=canc_NA)
tmp_d (1 : 2): [ 1.25 ]
canc_NA = 0



ris: 1.25
------------------------------ Fine somma_v_d

74: dividi_vs_d	ris <- v / div
tmp_d (1 : 2): [ 1.25 ]
div = 1.250


p (1 : 2): [ 1 ]
------------------------------ Fine dividi_vs_d


*** sampleB_p ***
25: rep_v_i	<=>	ris <- rep(v, rip)
h (1 : 5): [ 4 ]
rip = 1


ris (1 : 1): [ 4 ]
------------------------------ Fine rep_v_i

81: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
h (1 : 5): [ 4 ]
ris (1 : 1): [ 4 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 4
h (1 : 5): [ 4 ]


indx = 1
------------------------------ Fine esiste_v_i

2050: elimina1_indx_i	<=>	v <- v[-indx]
h (1 : 5): [ 4 ]
indx = 1


h (0 : 5): [ ]
------------------------------ Fine elimina1_indx_i



h (0 : 5): [ ]
------------------------------ Fine setdiff1_i

83: which_vv_eq_i	<=>	ris <- which(v1 == v2)
or_h (2 : 2): [ 1 4 ]
ris (1 : 1): [ 4 ]
2017: esiste_v_i	<=>	elem %IN% v
elem = 4
or_h (2 : 2): [ 1 4 ]


indx = 2
------------------------------ Fine esiste_v_i



tmp_i (1 : 2): [ 4 ]
------------------------------ Fine which_vv_eq_i

84: setdiff1_i	<=>	v1 <- setdiff(v1, v2)
aus_h (1 : 2): [ 2 ]
tmp_i (1 : 2): [ 4 ]
2048: esiste_v_i	<=>	elem %IN% v
elem = 4
aus_h (1 : 2): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i



aus_h (1 : 2): [ 2 ]
------------------------------ Fine setdiff1_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
ris (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
riga = 1
val = 1


ind (1 : 8): [ 2 ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
index (2 : 2): [ 1 4 ]
ind (1 : 8): [ 2 ]


co (1 : 1): [ 4 ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 0 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
ri (1 : 1): [ 1 ]
co (1 : 1): [ 4 ]
val = 1


Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 1 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

107: esiste_v_i	<=>	elem %IN% v
elem = 1
ris->indices (1 : 1): [ 2 ]


indx = 0
------------------------------ Fine esiste_v_i

101: which_m_rowindxeq_i	<=>	ris <- which(m[r,] == val)
ris (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
riga = 2
val = 1


ind (0 : 8): [ ]
------------------------------ Fine which_m_rowindxeq_i

103: copia_v_indx_i	<=>	ris <- v[indx]
index (2 : 2): [ 1 4 ]
ind (0 : 8): [ ]


co (0 : 1): [ ]
------------------------------ Fine copia_v_indx_i

105: assegna1_m_vv_i	<=>	m[vr, vc] <- val
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 1 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
ri (1 : 1): [ 4 ]
co (0 : 1): [ ]
val = 1


Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 1 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_m_vv_i

107: esiste_v_i	<=>	elem %IN% v
elem = 2
ris->indices (1 : 1): [ 2 ]


indx = 1
------------------------------ Fine esiste_v_i

109: accoda1_vv_i	<=>	v1 <- c(v1, v2)
ris (0 : 1): [ ]
ri (1 : 1): [ 4 ]


ris (1 : 1): [ 4 ]
------------------------------ Fine accoda_vv_i


Stringhe allocate: 5 (10105 interne); stringhe deallocate: 0 (9595 interne)

332: accoda1_vv_i	<=>	v1 <- c(v1, v2)
h_new (0 : 6): [ ]
ris (1 : 1): [ 4 ]


h_new (1 : 6): [ 4 ]
------------------------------ Fine accoda_vv_i

334: somma_colonne_i	<=>	ris <- apply(m, 2, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 1 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]


Sout (5 : 5): [ 1 1 1 3 1 ]
------------------------------ Fine somma_colonne_i

336: max_v_i		<=>	ris <- max(v)
Sout (5 : 5): [ 1 1 1 3 1 ]


max = 3
------------------------------ Fine max_v_i

338: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 4
incr = 1


tmp2_i (5 : 10): [ 0 1 2 3 4 ]
------------------------------ Fine seq_i


*** hist1 ***
Sout (5 : 5): [ 1 1 1 3 1 ]
tmp2_i (5 : 10): [ 0 1 2 3 4 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
tmp1_i (4 : 10): [ 79856048 2 1653488298 0 ]
val = 0


tmp1_i (4 : 10): [ 0 0 0 0 ]
------------------------------ Fine InitVett_i



tmp1_i (4 : 10): [ 0 4 0 1 ]

Stringhe allocate: 5 (10105 interne); stringhe deallocate: 0 (9595 interne)

340: promuovi_i	(implicita)
tmp1_i (4 : 10): [ 0 4 0 1 ]
ATTENZIONE (promuovi_i, linea connectivity_modular.c # 340): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

tmp1_d (4 : 16): [ 0 4 0 1 ]
------------------------------ Fine promuovi_i

341: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
Freq_out (7 : 7): [ 0 4 1 0 0 0 0 ]
start = 1
end = 4
tmp1_d (4 : 16): [ 0 4 0 1 ]


Freq_out (7 : 7): [ 0 4 0 1 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

343: somma_righe_i	<=>	ris <- apply(m, 1, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 1 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]


Sin (5 : 5): [ 2 2 1 1 1 ]
------------------------------ Fine somma_righe_i

345: max_v_i		<=>	ris <- max(v)
Sin (5 : 5): [ 2 2 1 1 1 ]


max = 2
------------------------------ Fine max_v_i

347: seq_i	<=>	ris <- seq(da, a, incr)
da = 0
a = 3
incr = 1


tmp2_i (4 : 10): [ 0 1 2 3 ]
------------------------------ Fine seq_i


*** hist1 ***
Sin (5 : 5): [ 2 2 1 1 1 ]
tmp2_i (4 : 10): [ 0 1 2 3 ]
right = 0
include_border = 1
naok = 0
29: InitVett_i
tmp1_i (3 : 10): [ 0 4 0 ]
val = 0


tmp1_i (3 : 10): [ 0 0 0 ]
------------------------------ Fine InitVett_i



tmp1_i (3 : 10): [ 0 3 2 ]

Stringhe allocate: 5 (10106 interne); stringhe deallocate: 0 (9596 interne)

349: promuovi_i	(implicita)
tmp1_i (3 : 10): [ 0 3 2 ]
ATTENZIONE (promuovi_i, linea connectivity_modular.c # 349): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

tmp1_d (3 : 16): [ 0 3 2 ]
------------------------------ Fine promuovi_i

350: assegna1_v_segmv_d	<=>	v1[st:end] <- v2
Freq_in (7 : 7): [ 0 4 1 0 0 0 0 ]
start = 1
end = 3
tmp1_d (3 : 16): [ 0 3 2 ]


Freq_in (7 : 7): [ 0 3 2 0 0 0 0 ]
------------------------------ Fine assegna1_v_segmv_d

362: copia_v_i	<=>	ris[st:end] <- v[st:end]
h_new (1 : 6): [ 4 ]
st = 1
end = 1


h (1 : 5): [ 4 ]
------------------------------ Fine copia_v_i

368: copia_v_indx_i	<=>	ris <- v[indx]
Sin (5 : 5): [ 2 2 1 1 1 ]
h (1 : 5): [ 4 ]


tmp1_i (1 : 10): [ 1 ]
------------------------------ Fine copia_v_indx_i

369: which_v_indxne_i	<=>	ris <- which(v != val)
tmp1_i (1 : 10): [ 1 ]
val = 5


tmp2_i (1 : 10): [ 1 ]
------------------------------ Fine which_v_indxne_i

370: copia_v_indx_i	<=>	ris <- v[indx]
h (1 : 5): [ 4 ]
tmp2_i (1 : 10): [ 1 ]


h (1 : 5): [ 4 ]
------------------------------ Fine copia_v_indx_i

381: somma_righe_i	<=>	ris <- apply(m, 1, sum)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 1 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]


Sr (5 : 5): [ 2 2 1 1 1 ]
------------------------------ Fine somma_righe_i

383: which_v_indxeq_i	<=>	ris <- which(v==val)
Sr (5 : 5): [ 2 2 1 1 1 ]
val = 0


ind (0 : 11): [ ]
------------------------------ Fine which_v_indxeq_i

453: which_m_indxeq_i	<=>	ris <- which(m == val)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 1 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
val = 1


ind (7 : 47): [ 1 10 14 16 17 18 22 ]
------------------------------ Fine which_m_indxeq_i

459: abs_v_d	<=>	ris <- abs(v)
tmp1_d (7 : 16): [ 1 1 1 1 1 1 1 ]


tmp2_d (7 : 16): [ 1 1 1 1 1 1 1 ]
------------------------------ Fine abs_v_d

463: InitMatr_d
M (5 x 5 : 5 x 5): [
	 5.842414621812633e-308 0 0 0 0
	 1.39620771542575e-308 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


M (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_d

465: assegna1_mv_indx_d	<=>	m[indx] <- v
M (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
ind (7 : 47): [ 1 10 14 16 17 18 22 ]
tmp2_d (7 : 16): [ 1 1 1 1 1 1 1 ]


M (5 x 5 : 5 x 5): [
	 1 0 0 1 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
------------------------------ Fine assegna1_mv_indx_d


Stringhe allocate: 5 (10122 interne); stringhe deallocate: 0 (9757 interne)


*** createRules ***
Controllo la funzione f_pr_and definita come '1 / (1 + e ^ (-10 * (x - 0.5)))' ... ok
50: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
M (5 x 5 : 5 x 5): [
	 1 0 0 1 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
r = 1
val = 0


op (2 : 25): [ 1 4 ]
------------------------------ Fine which_m_rowindxne_d


*** create_logicRule ***
50: op_ss_seqdiv_d	<=>	ris <- (da:a) / div
da = 1
a = 2
div = 2.000


x (2 : 2): [ 0.5 1 ]
------------------------------ Fine op_ss_seqdiv_d

Calcolo la funzione f_pr_and in 5.00000e-001: 1.00000e+000
Calcolo la funzione f_pr_and in 1.00000e+000: 9.99977e-001
77: complementa_d	<=>	ris <- 1 - v
pr_and (2 : 2): [ 1 0.9999773005503956 ]


pr_or (2 : 2): [ 0 2.269944960442416e-005 ]
------------------------------ Fine complementa_d

80: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0


prob (2 : 2): [ 1 0 ]
------------------------------ Fine vettore2s_d

81: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = -2, el2 = -3


tmp_i (2 : 2): [ -2 -3 ]
------------------------------ Fine vettore2s_i


*** sample_p ***
tmp_i (2 : 2): [ -2 -3 ]
k = 1, replace = 0
prob (2 : 2): [ 1 0 ]


ris (1 : 1): [ -3 ]
*****************************************


Stringhe allocate: 0 (50 interne); stringhe deallocate: 0 (5 interne)

84: vettore3v_i		<=>	ris <- c(v1, v2, v3)
ris (1 : 1): [ -3 ]
scalare_i (1 : 1): [ 0 ]
scalare_i (1 : 1): [ 0 ]


ris (3 : 3): [ -3 0 0 ]
------------------------------ Fine vettore3v_i

87: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 2, el2 = 3


o (2 : 2): [ 2 3 ]
------------------------------ Fine vettore2s_i


Stringhe allocate: 0 (70 interne); stringhe deallocate: 0 (55 interne)

56: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (3 : 3): [ -3 1 4 ]
st = 1
end = 3


ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

50: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
M (5 x 5 : 5 x 5): [
	 1 0 0 1 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
r = 2
val = 0


op (2 : 25): [ 4 5 ]
------------------------------ Fine which_m_rowindxne_d


*** create_logicRule ***
50: op_ss_seqdiv_d	<=>	ris <- (da:a) / div
da = 1
a = 2
div = 2.000


x (2 : 2): [ 0.5 1 ]
------------------------------ Fine op_ss_seqdiv_d

Calcolo la funzione f_pr_and in 5.00000e-001: 1.00000e+000
Calcolo la funzione f_pr_and in 1.00000e+000: 9.99977e-001
77: complementa_d	<=>	ris <- 1 - v
pr_and (2 : 2): [ 1 0.9999773005503956 ]


pr_or (2 : 2): [ 0 2.269944960442416e-005 ]
------------------------------ Fine complementa_d

80: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0


prob (2 : 2): [ 1 0 ]
------------------------------ Fine vettore2s_d

81: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = -2, el2 = -3


tmp_i (2 : 2): [ -2 -3 ]
------------------------------ Fine vettore2s_i


*** sample_p ***
tmp_i (2 : 2): [ -2 -3 ]
k = 1, replace = 0
prob (2 : 2): [ 1 0 ]


ris (1 : 1): [ -2 ]
*****************************************


Stringhe allocate: 0 (120 interne); stringhe deallocate: 0 (70 interne)

84: vettore3v_i		<=>	ris <- c(v1, v2, v3)
ris (1 : 1): [ -2 ]
scalare_i (1 : 1): [ 0 ]
scalare_i (1 : 1): [ 0 ]


ris (3 : 3): [ -2 0 0 ]
------------------------------ Fine vettore3v_i

87: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = 2, el2 = 3


o (2 : 2): [ 2 3 ]
------------------------------ Fine vettore2s_i

92: InitVett_d
pr_or (2 : 2): [ 0 2.269944960442416e-005 ]
val = 0


pr_or (2 : 2): [ 0 0 ]
------------------------------ Fine InitVett_d

95: InitVett_d
pr_and (2 : 2): [ 1 0.9999773005503956 ]
val = 1


pr_and (2 : 2): [ 1 1 ]
------------------------------ Fine InitVett_d


Stringhe allocate: 0 (140 interne); stringhe deallocate: 0 (120 interne)

56: copia_v_i	<=>	ris[st:end] <- v[st:end]
ris (3 : 3): [ -2 4 5 ]
st = 1
end = 3


ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

50: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
M (5 x 5 : 5 x 5): [
	 1 0 0 1 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
r = 3
val = 0


op (1 : 25): [ 4 ]
------------------------------ Fine which_m_rowindxne_d

62: copia_v_i	<=>	ris[st:end] <- v[st:end]
op (1 : 25): [ 4 ]
st = 1
end = 1


ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

50: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
M (5 x 5 : 5 x 5): [
	 1 0 0 1 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
r = 4
val = 0


op (1 : 25): [ 3 ]
------------------------------ Fine which_m_rowindxne_d

62: copia_v_i	<=>	ris[st:end] <- v[st:end]
op (1 : 25): [ 3 ]
st = 1
end = 1


ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

50: which_m_rowindxne_d	<=>	ris <- which(m[r, ] != val)
M (5 x 5 : 5 x 5): [
	 1 0 0 1 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
r = 5
val = 0


op (1 : 25): [ 2 ]
------------------------------ Fine which_m_rowindxne_d

62: copia_v_i	<=>	ris[st:end] <- v[st:end]
op (1 : 25): [ 2 ]
st = 1
end = 1


ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i


Stringhe allocate: 0 (175 interne); stringhe deallocate: 0 (145 interne)

55: InitMatr_i
reg (5 x 3 : 5 x 3): [
	 79845320 193 0
	 79843248 3 84
	 0 1 0
	 44 3 45
	 0 0 1
 ]
val = 0


reg (5 x 3 : 5 x 3): [
	 0 0 0
	 0 0 0
	 0 0 0
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine InitMatr_i

59: assegna1_mv_riga_i	<=>	m[riga,] <- v
reg (5 x 3 : 5 x 3): [
	 0 0 0
	 0 0 0
	 0 0 0
	 0 0 0
	 0 0 0
 ]
riga = 1
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]


reg (5 x 3 : 5 x 3): [
	 -3 1 4
	 0 0 0
	 0 0 0
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine assegna1_mv_riga_i

59: assegna1_mv_riga_i	<=>	m[riga,] <- v
reg (5 x 3 : 5 x 3): [
	 -3 1 4
	 0 0 0
	 0 0 0
	 0 0 0
	 0 0 0
 ]
riga = 2
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]


reg (5 x 3 : 5 x 3): [
	 -3 1 4
	 -2 4 5
	 0 0 0
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine assegna1_mv_riga_i

59: assegna1_mv_riga_i	<=>	m[riga,] <- v
reg (5 x 3 : 5 x 3): [
	 -3 1 4
	 -2 4 5
	 0 0 0
	 0 0 0
	 0 0 0
 ]
riga = 3
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]


reg (5 x 3 : 5 x 3): [
	 -3 1 4
	 -2 4 5
	 4 0 0
	 0 0 0
	 0 0 0
 ]
------------------------------ Fine assegna1_mv_riga_i

59: assegna1_mv_riga_i	<=>	m[riga,] <- v
reg (5 x 3 : 5 x 3): [
	 -3 1 4
	 -2 4 5
	 4 0 0
	 0 0 0
	 0 0 0
 ]
riga = 4
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]


reg (5 x 3 : 5 x 3): [
	 -3 1 4
	 -2 4 5
	 4 0 0
	 3 0 0
	 0 0 0
 ]
------------------------------ Fine assegna1_mv_riga_i

59: assegna1_mv_riga_i	<=>	m[riga,] <- v
reg (5 x 3 : 5 x 3): [
	 -3 1 4
	 -2 4 5
	 4 0 0
	 3 0 0
	 0 0 0
 ]
riga = 5
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]


reg (5 x 3 : 5 x 3): [
	 -3 1 4
	 -2 4 5
	 4 0 0
	 3 0 0
	 2 0 0
 ]
------------------------------ Fine assegna1_mv_riga_i


*** write_m_i ***
reg (5 x 3 : 5 x 3): [
	 -3 1 4
	 -2 4 5
	 4 0 0
	 3 0 0
	 2 0 0
 ]

Stringhe allocate: 0 (180 interne); stringhe deallocate: 0 (145 interne)


*** createNEG1 ***
17: InitMatr_i
ris (5 x 5 : 5 x 5): [
	 79860512 0 0 0 0
	 5 0 0 0 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
val = 0


ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
------------------------------ Fine InitMatr_i

19: which_m_indxeq_i	<=>	ris <- which(m == val)
Mdiscr (5 x 5 : 5 x 5): [
	 1 0 0 1 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
val = 1


ind (7 : 25): [ 1 10 14 16 17 18 22 ]
------------------------------ Fine which_m_indxeq_i

22: vettore2s_i		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 1


tmp_i (2 : 2): [ -1 1 ]
------------------------------ Fine vettore2s_i


***sample***
tmp_i (2 : 2): [ -1 1 ]
k = 7, replace = 1


ris (7 : 7): [ 1 -1 1 1 -1 1 -1 ]
*****************************************


Stringhe allocate: 0 (200 interne); stringhe deallocate: 0 (145 interne)


Stringhe allocate: 0 (200 interne); stringhe deallocate: 0 (160 interne)

74: moltiplica_mm_di	<=>	ris <- m1 * m2
M (5 x 5 : 5 x 5): [
	 1 0 0 1 0
	 0 0 0 1 1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 1 0 0 0
 ]
ris (5 x 5 : 5 x 5): [
	 1 0 0 1 0
	 0 0 0 -1 -1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 -1 0 0 0
 ]


tmpm1_d (5 x 5 : 5 x 5): [
	 1 0 0 1 0
	 0 0 0 -1 -1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 -1 0 0 0
 ]
------------------------------ Fine moltiplica_mm_di


*** write_m_d ***
tmpm1_d (5 x 5 : 5 x 5): [
	 1 0 0 1 0
	 0 0 0 -1 -1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 -1 0 0 0
 ]

Stringhe allocate: 0 (205 interne); stringhe deallocate: 0 (160 interne)


*** lsoda ***
116: copia_v_d	<=>	ris[st:end] <- v[st:end]
parm1[j][i] (5 : 5): [ 0.8988629876690203 0.86013003877782 0.7529666664997292 0.6820456255132146 0.8224436778595854 ]
st = 1
end = 5


y (5 : 5): [ 0.8988629876690203 0.86013003877782 0.7529666664997292 0.6820456255132146 0.8224436778595854 ]
------------------------------ Fine copia_v_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 1.489341748494813e-313 0 3.904681430596773e-316 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1851747943 1936024687 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (255 interne); stringhe deallocate: 0 (175 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 3.946409819792008e-316 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820456255132146


ris (2 : 2): [ -1 0.6820456255132146 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (275 interne); stringhe deallocate: 0 (195 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842414698311489e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820456255132146


ris (2 : 2): [ 1 0.6820456255132146 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (295 interne); stringhe deallocate: 0 (215 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.842414698407899e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7529666664997292


ris (2 : 2): [ 1 0.7529666664997292 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (315 interne); stringhe deallocate: 0 (235 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820454686149038 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.86013003877782


ris (2 : 2): [ -1 0.86013003877782 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (335 interne); stringhe deallocate: 0 (255 interne)


Stringhe allocate: 1 (335 interne); stringhe deallocate: 0 (260 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179543744867854 0.6820456255132146 0.7529666664997292 0.13986996122218 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8979054728093714 0.9999758771901712 0.9999953207395332 0.8302235772795471 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 3.946409819792008e-316 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (370 interne); stringhe deallocate: 0 (290 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 3.904712260293073e-316 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820457041972112


ris (2 : 2): [ -1 0.6820457041972112 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (390 interne); stringhe deallocate: 0 (310 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 5.841311260495934e-308 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820457041972112


ris (2 : 2): [ 1 0.6820457041972112 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (410 interne); stringhe deallocate: 0 (330 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7529667305267828


ris (2 : 2): [ 1 0.7529667305267828 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (430 interne); stringhe deallocate: 0 (350 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820454686111477 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601300466512538


ris (2 : 2): [ -1 0.8601300466512538 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (450 interne); stringhe deallocate: 0 (370 interne)


Stringhe allocate: 1 (450 interne); stringhe deallocate: 0 (375 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179542958027888 0.6820457041972112 0.7529667305267828 0.1398699533487462 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.897905345405681 0.9999758772281047 0.9999953207454452 0.8302235705654266 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 3.904712260293073e-316 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (485 interne); stringhe deallocate: 0 (405 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 3.904715422313207e-316 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820457435391877


ris (2 : 2): [ -1 0.6820457435391877 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (505 interne); stringhe deallocate: 0 (425 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820457435391877


ris (2 : 2): [ 1 0.6820457435391877 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (525 interne); stringhe deallocate: 0 (445 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7529667625402909


ris (2 : 2): [ 1 0.7529667625402909 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (545 interne); stringhe deallocate: 0 (465 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.682045468611415 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601300505879389


ris (2 : 2): [ -1 0.8601300505879389 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (565 interne); stringhe deallocate: 0 (485 interne)


Stringhe allocate: 1 (565 interne); stringhe deallocate: 0 (490 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179542564608123 0.6820457435391877 0.7529667625402909 0.1398699494120611 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8979052817038236 0.9999758772470715 0.9999953207484011 0.8302235672083937 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.8224434940343599 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (600 interne); stringhe deallocate: 0 (520 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 3.904636371809872e-316 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820459160386079


ris (2 : 2): [ -1 0.6820459160386079 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (620 interne); stringhe deallocate: 0 (540 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820459160386079


ris (2 : 2): [ 1 0.6820459160386079 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (640 interne); stringhe deallocate: 0 (560 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7529669029071987


ris (2 : 2): [ 1 0.7529669029071987 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (660 interne); stringhe deallocate: 0 (580 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820454686112081 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601300678487678


ris (2 : 2): [ -1 0.8601300678487678 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (680 interne); stringhe deallocate: 0 (600 interne)


Stringhe allocate: 1 (680 interne); stringhe deallocate: 0 (605 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179540839613921 0.6820459160386079 0.7529669029071987 0.1398699321512322 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8979050023953277 0.999975877330233 0.999995320761362 0.8302235524891151 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.8224434940341823 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (715 interne); stringhe deallocate: 0 (635 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.6820454685218866 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820459402490454


ris (2 : 2): [ -1 0.6820459402490454 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (735 interne); stringhe deallocate: 0 (655 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820459402490454


ris (2 : 2): [ 1 0.6820459402490454 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (755 interne); stringhe deallocate: 0 (675 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.752966922607811


ris (2 : 2): [ 1 0.752966922607811 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (775 interne); stringhe deallocate: 0 (695 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820459454485368 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601300702713294


ris (2 : 2): [ -1 0.8601300702713294 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (795 interne); stringhe deallocate: 0 (715 interne)


Stringhe allocate: 1 (795 interne); stringhe deallocate: 0 (720 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179540597509546 0.6820459402490454 0.752966922607811 0.1398699297286706 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8979049631940983 0.9999758773419047 0.9999953207631811 0.8302235504232608 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.822443494034582 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (830 interne); stringhe deallocate: 0 (750 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.6820454685215651 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820457828811689


ris (2 : 2): [ -1 0.6820457828811689 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (850 interne); stringhe deallocate: 0 (770 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820457828811689


ris (2 : 2): [ 1 0.6820457828811689 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (870 interne); stringhe deallocate: 0 (790 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7529667945538032


ris (2 : 2): [ 1 0.7529667945538032 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (890 interne); stringhe deallocate: 0 (810 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.682045468614735 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601300545246311


ris (2 : 2): [ -1 0.8601300545246311 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (910 interne); stringhe deallocate: 0 (830 interne)


Stringhe allocate: 1 (910 interne); stringhe deallocate: 0 (835 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179542171188311 0.6820457828811689 0.7529667945538032 0.1398699454753689 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8979052180019265 0.9999758772660381 0.9999953207513572 0.8302235638513549 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.8224434940342604 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (945 interne); stringhe deallocate: 0 (865 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.6820454685215935 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820459402490454


ris (2 : 2): [ -1 0.6820459402490454 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (965 interne); stringhe deallocate: 0 (885 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820459402490454


ris (2 : 2): [ 1 0.6820459402490454 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (985 interne); stringhe deallocate: 0 (905 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.752966922607811


ris (2 : 2): [ 1 0.752966922607811 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1005 interne); stringhe deallocate: 0 (925 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820459454595955 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601300702713294


ris (2 : 2): [ -1 0.8601300702713294 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1025 interne); stringhe deallocate: 0 (945 interne)


Stringhe allocate: 1 (1025 interne); stringhe deallocate: 0 (950 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179540597509546 0.6820459402490454 0.752966922607811 0.1398699297286706 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8979049631940983 0.9999758773419047 0.9999953207631811 0.8302235504232608 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.8224434940342889 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1060 interne); stringhe deallocate: 0 (980 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.6820454685215758 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820459402490454


ris (2 : 2): [ -1 0.6820459402490454 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1080 interne); stringhe deallocate: 0 (1000 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820459402490454


ris (2 : 2): [ 1 0.6820459402490454 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1100 interne); stringhe deallocate: 0 (1020 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.752966922607811


ris (2 : 2): [ 1 0.752966922607811 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1120 interne); stringhe deallocate: 0 (1040 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820459454596488 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601300702713294


ris (2 : 2): [ -1 0.8601300702713294 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1140 interne); stringhe deallocate: 0 (1060 interne)


Stringhe allocate: 1 (1140 interne); stringhe deallocate: 0 (1065 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179540597509546 0.6820459402490454 0.752966922607811 0.1398699297286706 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8979049631940983 0.9999758773419047 0.9999953207631811 0.8302235504232608 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.8224434940342711 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1175 interne); stringhe deallocate: 0 (1095 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.6820459453595476 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820463336686392


ris (2 : 2): [ -1 0.6820463336686392 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1195 interne); stringhe deallocate: 0 (1115 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820463336686392


ris (2 : 2): [ 1 0.6820463336686392 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1215 interne); stringhe deallocate: 0 (1135 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7529672427427472


ris (2 : 2): [ 1 0.7529672427427472 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1235 interne); stringhe deallocate: 0 (1155 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820459454483991 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601301096379341


ris (2 : 2): [ -1 0.8601301096379341 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1255 interne); stringhe deallocate: 0 (1175 interne)


Stringhe allocate: 1 (1255 interne); stringhe deallocate: 0 (1180 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179536663313608 0.6820463336686392 0.7529672427427472 0.1398698903620659 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8979043261724576 0.9999758775315703 0.9999953207927407 0.8302235168531542 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.8224434940350847 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1290 interne); stringhe deallocate: 0 (1210 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.6820454685215864 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820465303778885


ris (2 : 2): [ -1 0.6820465303778885 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1310 interne); stringhe deallocate: 0 (1230 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820465303778885


ris (2 : 2): [ 1 0.6820465303778885 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1330 interne); stringhe deallocate: 0 (1250 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7529674028097488


ris (2 : 2): [ 1 0.7529674028097488 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1350 interne); stringhe deallocate: 0 (1270 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.682046422285592 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601301293204435


ris (2 : 2): [ -1 0.8601301293204435 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1370 interne); stringhe deallocate: 0 (1290 interne)


Stringhe allocate: 1 (1370 interne); stringhe deallocate: 0 (1295 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179534696221115 0.6820465303778885 0.7529674028097488 0.1398698706795565 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8979040076613306 0.9999758776264023 0.9999953208075204 0.8302235000687815 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.8224434940342817 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1405 interne); stringhe deallocate: 0 (1325 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.6820459453587304 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820473928719198


ris (2 : 2): [ -1 0.6820473928719198 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1425 interne); stringhe deallocate: 0 (1345 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820473928719198


ris (2 : 2): [ 1 0.6820473928719198 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1445 interne); stringhe deallocate: 0 (1365 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7529681046416721


ris (2 : 2): [ 1 0.7529681046416721 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1465 interne); stringhe deallocate: 0 (1385 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820473759598427 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601302156201421


ris (2 : 2): [ -1 0.8601302156201421 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1485 interne); stringhe deallocate: 0 (1405 interne)


Stringhe allocate: 1 (1485 interne); stringhe deallocate: 0 (1410 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179526071280802 0.6820473928719198 0.7529681046416721 0.1398697843798579 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8979026111037483 0.9999758780421992 0.9999953208723231 0.8302234264762548 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.8224434940342675 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1520 interne); stringhe deallocate: 0 (1440 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.6820459453587411 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820475139235265


ris (2 : 2): [ -1 0.6820475139235265 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1540 interne); stringhe deallocate: 0 (1460 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820475139235265


ris (2 : 2): [ 1 0.6820475139235265 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1560 interne); stringhe deallocate: 0 (1480 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7529682031442386


ris (2 : 2): [ 1 0.7529682031442386 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1580 interne); stringhe deallocate: 0 (1500 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820473759602912 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601302277321095


ris (2 : 2): [ -1 0.8601302277321095 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1600 interne); stringhe deallocate: 0 (1520 interne)


Stringhe allocate: 1 (1600 interne); stringhe deallocate: 0 (1525 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179524860764735 0.6820475139235265 0.7529682031442386 0.1398697722678906 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8979024150947458 0.9999758781005561 0.9999953208814182 0.8302234161477149 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.8224434940342782 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1635 interne); stringhe deallocate: 0 (1555 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.682045945452515 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820467270872594


ris (2 : 2): [ -1 0.6820467270872594 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1655 interne); stringhe deallocate: 0 (1575 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820467270872594


ris (2 : 2): [ 1 0.6820467270872594 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1675 interne); stringhe deallocate: 0 (1595 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7529675628768542


ris (2 : 2): [ 1 0.7529675628768542 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1695 interne); stringhe deallocate: 0 (1615 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820464222854969 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601301490031292


ris (2 : 2): [ -1 0.8601301490031292 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1715 interne); stringhe deallocate: 0 (1635 interne)


Stringhe allocate: 1 (1715 interne); stringhe deallocate: 0 (1640 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179532729127406 0.6820467270872594 0.7529675628768542 0.1398698509968708 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8979036891492109 0.9999758777212338 0.9999953208223 0.8302234832842617 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.8224434941280521 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1750 interne); stringhe deallocate: 0 (1670 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.6820464221959739 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820475139235265


ris (2 : 2): [ -1 0.6820475139235265 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1770 interne); stringhe deallocate: 0 (1690 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820475139235265


ris (2 : 2): [ 1 0.6820475139235265 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1790 interne); stringhe deallocate: 0 (1710 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7529682031442386


ris (2 : 2): [ 1 0.7529682031442386 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1810 interne); stringhe deallocate: 0 (1730 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820473759598151 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601302277321095


ris (2 : 2): [ -1 0.8601302277321095 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1830 interne); stringhe deallocate: 0 (1750 interne)


Stringhe allocate: 1 (1830 interne); stringhe deallocate: 0 (1755 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179524860764735 0.6820475139235265 0.7529682031442386 0.1398697722678906 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8979024150947458 0.9999758781005561 0.9999953208814182 0.8302234161477149 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.8224434940343528 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1865 interne); stringhe deallocate: 0 (1785 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.6820473758702974 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820475139235265


ris (2 : 2): [ -1 0.6820475139235265 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1885 interne); stringhe deallocate: 0 (1805 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820475139235265


ris (2 : 2): [ 1 0.6820475139235265 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1905 interne); stringhe deallocate: 0 (1825 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7529682031442386


ris (2 : 2): [ 1 0.7529682031442386 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1925 interne); stringhe deallocate: 0 (1845 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820473759598187 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601302277321095


ris (2 : 2): [ -1 0.8601302277321095 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1945 interne); stringhe deallocate: 0 (1865 interne)


Stringhe allocate: 1 (1945 interne); stringhe deallocate: 0 (1870 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179524860764735 0.6820475139235265 0.7529682031442386 0.1398697722678906 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8979024150947458 0.9999758781005561 0.9999953208814182 0.8302234161477149 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.8224434940343599 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (1980 interne); stringhe deallocate: 0 (1900 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.6820473758701198 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820494810117601


ris (2 : 2): [ -1 0.6820494810117601 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2000 interne); stringhe deallocate: 0 (1920 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820494810117601


ris (2 : 2): [ 1 0.6820494810117601 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2020 interne); stringhe deallocate: 0 (1940 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7529698038106266


ris (2 : 2): [ 1 0.7529698038106266 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2040 interne); stringhe deallocate: 0 (1960 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820492833093246 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601304245510356


ris (2 : 2): [ -1 0.8601304245510356 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2060 interne); stringhe deallocate: 0 (1980 interne)


Stringhe allocate: 1 (2060 interne); stringhe deallocate: 0 (1985 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179505189882399 0.6820494810117601 0.7529698038106266 0.1398695754489644 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8978992299068277 0.9999758790488342 0.9999953210292101 0.8302232483095631 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.8224434940341823 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2095 interne); stringhe deallocate: 0 (2015 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.682046422196203 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820504645421867


ris (2 : 2): [ -1 0.6820504645421867 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2115 interne); stringhe deallocate: 0 (2035 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820504645421867


ris (2 : 2): [ 1 0.6820504645421867 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2135 interne); stringhe deallocate: 0 (2055 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7529706041321583


ris (2 : 2): [ 1 0.7529706041321583 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2155 interne); stringhe deallocate: 0 (2075 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820502369827279 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601305229406734


ris (2 : 2): [ -1 0.8601305229406734 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2175 interne); stringhe deallocate: 0 (2095 interne)


Stringhe allocate: 1 (2175 interne); stringhe deallocate: 0 (2100 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179495354578134 0.6820504645421867 0.7529706041321583 0.1398694770593266 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8978976373051997 0.9999758795229528 0.9999953211031032 0.8302231644075057 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.822443494034582 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2210 interne); stringhe deallocate: 0 (2130 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.6820473758701979 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820547769355926


ris (2 : 2): [ -1 0.6820547769355926 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2230 interne); stringhe deallocate: 0 (2150 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820547769355926


ris (2 : 2): [ 1 0.6820547769355926 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2250 interne); stringhe deallocate: 0 (2170 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7529741132263927


ris (2 : 2): [ 1 0.7529741132263927 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2270 interne); stringhe deallocate: 0 (2190 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.68205452851719 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.86013095432802


ris (2 : 2): [ -1 0.86013095432802 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2290 interne); stringhe deallocate: 0 (2210 interne)


Stringhe allocate: 1 (2290 interne); stringhe deallocate: 0 (2215 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179452230644074 0.6820547769355926 0.7529741132263927 0.13986904567198 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8978906541397419 0.9999758816016655 0.9999953214270815 0.8302227965415413 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.8224434940342604 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2325 interne); stringhe deallocate: 0 (2245 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.6820473758702264 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820553821791102


ris (2 : 2): [ -1 0.6820553821791102 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2345 interne); stringhe deallocate: 0 (2265 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820553821791102


ris (2 : 2): [ 1 0.6820553821791102 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2365 interne); stringhe deallocate: 0 (2285 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7529746057268602


ris (2 : 2): [ 1 0.7529746057268602 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2385 interne); stringhe deallocate: 0 (2305 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820550053580679 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601310148668361


ris (2 : 2): [ -1 0.8601310148668361 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2405 interne); stringhe deallocate: 0 (2325 interne)


Stringhe allocate: 1 (2405 interne); stringhe deallocate: 0 (2330 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179446178208898 0.6820553821791102 0.7529746057268602 0.1398689851331639 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8978896740233204 0.9999758818933981 0.9999953214725501 0.8302227449171242 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.8224434940342889 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2440 interne); stringhe deallocate: 0 (2360 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.6820492832188414 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820514480756553


ris (2 : 2): [ -1 0.6820514480756553 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2460 interne); stringhe deallocate: 0 (2380 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820514480756553


ris (2 : 2): [ 1 0.6820514480756553 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2480 interne); stringhe deallocate: 0 (2400 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7529714044562814


ris (2 : 2): [ 1 0.7529714044562814 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2500 interne); stringhe deallocate: 0 (2420 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820511906570461 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601306213347161


ris (2 : 2): [ -1 0.8601306213347161 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2520 interne); stringhe deallocate: 0 (2440 interne)


Stringhe allocate: 1 (2520 interne); stringhe deallocate: 0 (2445 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179485519243447 0.6820514480756553 0.7529714044562814 0.1398693786652839 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8978960446787545 0.9999758799970633 0.9999953211769954 0.8302230805017667 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.8224434940342711 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2555 interne); stringhe deallocate: 0 (2475 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.6820502368939714 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.682055382179109


ris (2 : 2): [ -1 0.682055382179109 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2575 interne); stringhe deallocate: 0 (2495 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.682055382179109


ris (2 : 2): [ 1 0.682055382179109 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2595 interne); stringhe deallocate: 0 (2515 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.752974605726859


ris (2 : 2): [ 1 0.752974605726859 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2615 interne); stringhe deallocate: 0 (2535 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820550053545791 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.860131014866833


ris (2 : 2): [ -1 0.860131014866833 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2635 interne); stringhe deallocate: 0 (2555 interne)


Stringhe allocate: 1 (2635 interne); stringhe deallocate: 0 (2560 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.317944617820891 0.682055382179109 0.752974605726859 0.139868985133167 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8978896740233224 0.9999758818933981 0.9999953214725501 0.8302227449171269 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.8224434940350847 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2670 interne); stringhe deallocate: 0 (2590 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.6820545284275923 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.682055382179109


ris (2 : 2): [ -1 0.682055382179109 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2690 interne); stringhe deallocate: 0 (2610 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.682055382179109


ris (2 : 2): [ 1 0.682055382179109 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2710 interne); stringhe deallocate: 0 (2630 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.752974605726859


ris (2 : 2): [ 1 0.752974605726859 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2730 interne); stringhe deallocate: 0 (2650 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820550053543721 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.860131014866833


ris (2 : 2): [ -1 0.860131014866833 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2750 interne); stringhe deallocate: 0 (2670 interne)


Stringhe allocate: 1 (2750 interne); stringhe deallocate: 0 (2675 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.317944617820891 0.682055382179109 0.752974605726859 0.139868985133167 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8978896740233224 0.9999758818933981 0.9999953214725501 0.8302227449171269 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.8224434940342817 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2785 interne); stringhe deallocate: 0 (2705 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.6820550052647363 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820652173768979


ris (2 : 2): [ -1 0.6820652173768979 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2805 interne); stringhe deallocate: 0 (2725 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820652173768979


ris (2 : 2): [ 1 0.6820652173768979 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2825 interne); stringhe deallocate: 0 (2745 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.752982608851471


ris (2 : 2): [ 1 0.752982608851471 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2845 interne); stringhe deallocate: 0 (2765 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820650189348649 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601319986090079


ris (2 : 2): [ -1 0.8601319986090079 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2865 interne); stringhe deallocate: 0 (2785 interne)


Stringhe allocate: 1 (2865 interne); stringhe deallocate: 0 (2790 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179347826231022 0.6820652173768979 0.752982608851471 0.1398680013909921 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8978737460908741 0.9999758866335536 0.9999953222113502 0.830221906035909 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.8224434940342675 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2900 interne); stringhe deallocate: 0 (2820 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.6820511905674813 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820701346335443


ris (2 : 2): [ -1 0.6820701346335443 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2920 interne); stringhe deallocate: 0 (2840 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820701346335443


ris (2 : 2): [ 1 0.6820701346335443 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2940 interne); stringhe deallocate: 0 (2860 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7529866101222256


ris (2 : 2): [ 1 0.7529866101222256 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2960 interne); stringhe deallocate: 0 (2880 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820697873098034 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601324899844126


ris (2 : 2): [ -1 0.8601324899844126 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (2980 interne); stringhe deallocate: 0 (2900 interne)


Stringhe allocate: 1 (2980 interne); stringhe deallocate: 0 (2905 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179298653664557 0.6820701346335443 0.7529866101222256 0.1398675100155874 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8978657819330357 0.9999758890031171 0.9999953225806796 0.8302214870207941 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.8224434940342782 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3015 interne); stringhe deallocate: 0 (2935 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.6820550053585208 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820916946819612


ris (2 : 2): [ -1 0.6820916946819612 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3035 interne); stringhe deallocate: 0 (2955 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820916946819612


ris (2 : 2): [ 1 0.6820916946819612 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3055 interne); stringhe deallocate: 0 (2975 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7530041539589913


ris (2 : 2): [ 1 0.7530041539589913 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3075 interne); stringhe deallocate: 0 (2995 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820912449896248 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601346441423108


ris (2 : 2): [ -1 0.8601346441423108 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3095 interne); stringhe deallocate: 0 (3015 interne)


Stringhe allocate: 1 (3095 interne); stringhe deallocate: 0 (3020 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179083053180388 0.6820916946819612 0.7530041539589913 0.1398653558576892 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.897830856667852 0.9999758993898822 0.9999953241996847 0.8302196501077518 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.8224439709652103 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3130 interne); stringhe deallocate: 0 (3050 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.6820550052648216 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820947205367515


ris (2 : 2): [ -1 0.6820947205367515 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3150 interne); stringhe deallocate: 0 (3070 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820947205367515


ris (2 : 2): [ 1 0.6820947205367515 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3170 interne); stringhe deallocate: 0 (3090 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7530066161522758


ris (2 : 2): [ 1 0.7530066161522758 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3190 interne); stringhe deallocate: 0 (3110 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820945828497855 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601349463109802


ris (2 : 2): [ -1 0.8601349463109802 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3210 interne); stringhe deallocate: 0 (3130 interne)


Stringhe allocate: 1 (3210 interne); stringhe deallocate: 0 (3135 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179052794632485 0.6820947205367515 0.7530066161522758 0.1398650536890198 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8978259543006429 0.9999759008472593 0.9999953244268596 0.8302193924426164 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.822443970871511 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3245 interne); stringhe deallocate: 0 (3165 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.6820650188451509 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820750519662208


ris (2 : 2): [ -1 0.6820750519662208 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3265 interne); stringhe deallocate: 0 (3185 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820750519662208


ris (2 : 2): [ 1 0.6820750519662208 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3285 interne); stringhe deallocate: 0 (3205 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7529906114577469


ris (2 : 2): [ 1 0.7529906114577469 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3305 interne); stringhe deallocate: 0 (3225 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820750325150495 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601329814698869


ris (2 : 2): [ -1 0.8601329814698869 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3325 interne); stringhe deallocate: 0 (3245 interne)


Stringhe allocate: 1 (3325 interne); stringhe deallocate: 0 (3250 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179249480337792 0.6820750519662208 0.7529906114577469 0.1398670185301131 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8978578171547996 0.9999758913724843 0.9999953229499858 0.8302210679136868 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.8224449245458345 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3360 interne); stringhe deallocate: 0 (3280 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.6820697872165553 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820947205366009


ris (2 : 2): [ -1 0.6820947205366009 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3380 interne); stringhe deallocate: 0 (3300 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820947205366009


ris (2 : 2): [ 1 0.6820947205366009 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3400 interne); stringhe deallocate: 0 (3320 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7530066161521415


ris (2 : 2): [ 1 0.7530066161521415 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3420 interne); stringhe deallocate: 0 (3340 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820945828385705 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601349463105911


ris (2 : 2): [ -1 0.8601349463105911 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3440 interne); stringhe deallocate: 0 (3360 interne)


Stringhe allocate: 1 (3440 interne); stringhe deallocate: 0 (3365 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179052794633991 0.6820947205366009 0.7530066161521415 0.1398650536894089 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.897825954300887 0.9999759008472593 0.9999953244268596 0.8302193924429482 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.8224449245456569 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3475 interne); stringhe deallocate: 0 (3395 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.6820912448890741 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6820947205366009


ris (2 : 2): [ -1 0.6820947205366009 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3495 interne); stringhe deallocate: 0 (3415 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6820947205366009


ris (2 : 2): [ 1 0.6820947205366009 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3515 interne); stringhe deallocate: 0 (3435 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7530066161521415


ris (2 : 2): [ 1 0.7530066161521415 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3535 interne); stringhe deallocate: 0 (3455 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6820945828385048 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601349463105911


ris (2 : 2): [ -1 0.8601349463105911 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3555 interne); stringhe deallocate: 0 (3475 interne)


Stringhe allocate: 1 (3555 interne); stringhe deallocate: 0 (3480 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3179052794633991 0.6820947205366009 0.7530066161521415 0.1398650536894089 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.897825954300887 0.9999759008472593 0.9999953244268596 0.8302193924429482 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.8224444477088984 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3590 interne); stringhe deallocate: 0 (3510 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.68209458274886 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6821438904415116


ris (2 : 2): [ -1 0.6821438904415116 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3610 interne); stringhe deallocate: 0 (3530 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6821438904415116


ris (2 : 2): [ 1 0.6821438904415116 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3630 interne); stringhe deallocate: 0 (3550 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7530466265923994


ris (2 : 2): [ 1 0.7530466265923994 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3650 interne); stringhe deallocate: 0 (3570 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6821436970662482 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601398562087449


ris (2 : 2): [ -1 0.8601398562087449 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3670 interne); stringhe deallocate: 0 (3590 interne)


Stringhe allocate: 1 (3670 interne); stringhe deallocate: 0 (3595 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3178561095584884 0.6821438904415116 0.7530466265923994 0.1398601437912551 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.897746264820722 0.9999759245171775 0.9999953281168843 0.8302152057757137 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.822444924545735 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3705 interne); stringhe deallocate: 0 (3625 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.6820750324254021 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6821684668388232


ris (2 : 2): [ -1 0.6821684668388232 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3725 interne); stringhe deallocate: 0 (3645 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6821684668388232


ris (2 : 2): [ 1 0.6821684668388232 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3745 interne); stringhe deallocate: 0 (3665 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7530666245246815


ris (2 : 2): [ 1 0.7530666245246815 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3765 interne); stringhe deallocate: 0 (3685 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6821680157608387 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601422987597421


ris (2 : 2): [ -1 0.8601422987597421 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3785 interne); stringhe deallocate: 0 (3705 interne)


Stringhe allocate: 1 (3785 interne); stringhe deallocate: 0 (3710 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3178315331611769 0.6821684668388232 0.7530666245246815 0.1398577012402579 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8977064153040475 0.9999759363393035 0.9999953299601327 0.8302131230833857 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.8224449245457635 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3820 interne); stringhe deallocate: 0 (3740 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.6820945827488707 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6822762191352221


ris (2 : 2): [ -1 0.6822762191352221 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3840 interne); stringhe deallocate: 0 (3760 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6822762191352221


ris (2 : 2): [ 1 0.6822762191352221 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3860 interne); stringhe deallocate: 0 (3780 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7531543028658198


ris (2 : 2): [ 1 0.7531543028658198 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3880 interne); stringhe deallocate: 0 (3800 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6822757809585944 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601530000564086


ris (2 : 2): [ -1 0.8601530000564086 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3900 interne); stringhe deallocate: 0 (3820 interne)


Stringhe allocate: 1 (3900 interne); stringhe deallocate: 0 (3825 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3177237808647779 0.6822762191352221 0.7531543028658198 0.1398469999435914 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8975315531265634 0.9999759881035304 0.999995338033037 0.8302039989423748 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.8224463550572203 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3935 interne); stringhe deallocate: 0 (3855 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.6820945827496843 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6822913393510279


ris (2 : 2): [ -1 0.6822913393510279 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3955 interne); stringhe deallocate: 0 (3875 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6822913393510279


ris (2 : 2): [ 1 0.6822913393510279 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3975 interne); stringhe deallocate: 0 (3895 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7531666061164321


ris (2 : 2): [ 1 0.7531666061164321 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (3995 interne); stringhe deallocate: 0 (3915 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6822910397476605 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601544977770116


ris (2 : 2): [ -1 0.8601544977770116 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4015 interne); stringhe deallocate: 0 (3935 interne)


Stringhe allocate: 1 (4015 interne); stringhe deallocate: 0 (3940 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3177086606489721 0.6822913393510279 0.7531666061164321 0.1398455022229884 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.897506996675406 0.9999759953583716 0.9999953391647306 0.8302027220262974 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.8224468318951921 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4050 interne); stringhe deallocate: 0 (3970 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.6821436969761763 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6821930451341418


ris (2 : 2): [ -1 0.6821930451341418 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4070 interne); stringhe deallocate: 0 (3990 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6821930451341418


ris (2 : 2): [ 1 0.6821930451341418 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4090 interne); stringhe deallocate: 0 (4010 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7530866240736872


ris (2 : 2): [ 1 0.7530866240736872 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4110 interne); stringhe deallocate: 0 (4030 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6821928112939437 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601447440556025


ris (2 : 2): [ -1 0.8601447440556025 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4130 interne); stringhe deallocate: 0 (4050 interne)


Stringhe allocate: 1 (4130 interne); stringhe deallocate: 0 (4055 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3178069548658582 0.6821930451341418 0.7530866240736872 0.1398552559443975 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8976665502814176 0.9999759481565368 0.999995331802803 0.8302110380968177 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.8224501697544966 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4165 interne); stringhe deallocate: 0 (4085 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.6821680156712304 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.682291339332206


ris (2 : 2): [ -1 0.682291339332206 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4185 interne); stringhe deallocate: 0 (4105 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.682291339332206


ris (2 : 2): [ 1 0.682291339332206 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4205 interne); stringhe deallocate: 0 (4125 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7531666060996458


ris (2 : 2): [ 1 0.7531666060996458 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4225 interne); stringhe deallocate: 0 (4145 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6822910397476205 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.860154497728349


ris (2 : 2): [ -1 0.860154497728349 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4245 interne); stringhe deallocate: 0 (4165 interne)


Stringhe allocate: 1 (4245 interne); stringhe deallocate: 0 (4170 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.317708660667794 0.682291339332206 0.7531666060996458 0.1398455022716511 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8975069967059772 0.9999759953583625 0.9999953391647289 0.8302027220677856 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.8224506465916406 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4280 interne); stringhe deallocate: 0 (4200 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.682275780868995 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.682291339332206


ris (2 : 2): [ -1 0.682291339332206 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4300 interne); stringhe deallocate: 0 (4220 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.682291339332206


ris (2 : 2): [ 1 0.682291339332206 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4320 interne); stringhe deallocate: 0 (4240 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7531666060996458


ris (2 : 2): [ 1 0.7531666060996458 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4340 interne); stringhe deallocate: 0 (4260 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6822910397476587 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.860154497728349


ris (2 : 2): [ -1 0.860154497728349 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4360 interne); stringhe deallocate: 0 (4280 interne)


Stringhe allocate: 1 (4360 interne); stringhe deallocate: 0 (4285 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.317708660667794 0.682291339332206 0.7531666060996458 0.1398455022716511 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8975069967059772 0.9999759953583625 0.9999953391647289 0.8302027220677856 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.822447785568702 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4395 interne); stringhe deallocate: 0 (4315 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.6822910397518314 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6825370368123358


ris (2 : 2): [ -1 0.6825370368123358 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4415 interne); stringhe deallocate: 0 (4335 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6825370368123358


ris (2 : 2): [ 1 0.6825370368123358 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4435 interne); stringhe deallocate: 0 (4355 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7533665287810477


ris (2 : 2): [ 1 0.7533665287810477 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4455 interne); stringhe deallocate: 0 (4375 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.682536610887853 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601788267361881


ris (2 : 2): [ -1 0.8601788267361881 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4475 interne); stringhe deallocate: 0 (4395 interne)


Stringhe allocate: 1 (4475 interne); stringhe deallocate: 0 (4400 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3174629631876642 0.6825370368123358 0.7533665287810477 0.1398211732638119 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8971073043074943 0.9999761129399261 0.9999953575158243 0.8301819822441322 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.8224506466854251 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4510 interne); stringhe deallocate: 0 (4430 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.6821928112035423 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6826596718060021


ris (2 : 2): [ -1 0.6826596718060021 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4530 interne); stringhe deallocate: 0 (4450 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6826596718060021


ris (2 : 2): [ 1 0.6826596718060021 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4550 interne); stringhe deallocate: 0 (4470 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7534663080429068


ris (2 : 2): [ 1 0.7534663080429068 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4570 interne); stringhe deallocate: 0 (4490 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6826596348709133 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8601906805373983


ris (2 : 2): [ -1 0.8601906805373983 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4590 interne); stringhe deallocate: 0 (4510 interne)


Stringhe allocate: 1 (4590 interne); stringhe deallocate: 0 (4515 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3173403281939979 0.6826596718060021 0.7534663080429068 0.1398093194626017 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.896907340423845 0.9999761714127728 0.9999953666476118 0.8301718788571306 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.8224506465917258 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4625 interne); stringhe deallocate: 0 (4545 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.6822910396581392 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6831972370973066


ris (2 : 2): [ -1 0.6831972370973066 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4645 interne); stringhe deallocate: 0 (4565 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6831972370973066


ris (2 : 2): [ 1 0.6831972370973066 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4665 interne); stringhe deallocate: 0 (4585 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7539036808628665


ris (2 : 2): [ 1 0.7539036808628665 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4685 interne); stringhe deallocate: 0 (4605 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6831970303484756 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8602424469801137


ris (2 : 2): [ -1 0.8602424469801137 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4705 interne); stringhe deallocate: 0 (4625 interne)


Stringhe allocate: 1 (4705 interne); stringhe deallocate: 0 (4630 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3168027629026934 0.6831972370973066 0.7539036808628665 0.1397575530198864 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8960271454858895 0.9999764260419017 0.9999954064644649 0.8301277693474368 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.822457799149106 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4740 interne); stringhe deallocate: 0 (4660 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.6822910396579616 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.683272613197312


ris (2 : 2): [ -1 0.683272613197312 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4760 interne); stringhe deallocate: 0 (4680 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.683272613197312


ris (2 : 2): [ 1 0.683272613197312 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4780 interne); stringhe deallocate: 0 (4700 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7539650055346419


ris (2 : 2): [ 1 0.7539650055346419 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4800 interne); stringhe deallocate: 0 (4720 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6832723706192647 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8602496090966257


ris (2 : 2): [ -1 0.8602496090966257 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4820 interne); stringhe deallocate: 0 (4740 interne)


Stringhe allocate: 1 (4820 interne); stringhe deallocate: 0 (4745 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.316727386802688 0.683272613197312 0.7539650055346419 0.1397503909033743 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8959032494670491 0.9999764615272129 0.9999954120198245 0.8301216682347028 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.8224611370090358 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4855 interne); stringhe deallocate: 0 (4775 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.6825366107948359 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6827823539073121


ris (2 : 2): [ -1 0.6827823539073121 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4875 interne); stringhe deallocate: 0 (4795 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6827823539073121


ris (2 : 2): [ 1 0.6827823539073121 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4895 interne); stringhe deallocate: 0 (4815 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7535661274174124


ris (2 : 2): [ 1 0.7535661274174124 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4915 interne); stringhe deallocate: 0 (4835 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6827821820208024 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8602026020993638


ris (2 : 2): [ -1 0.8602026020993638 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4935 interne); stringhe deallocate: 0 (4855 interne)


Stringhe allocate: 1 (4935 interne); stringhe deallocate: 0 (4860 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3172176460926879 0.6827823539073121 0.7535661274174124 0.1397973979006362 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.896706989406257 0.9999762297648709 0.9999953757650977 0.8301617188119442 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.822476395798498 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4970 interne); stringhe deallocate: 0 (4890 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.6826596347813307 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.683272610843934


ris (2 : 2): [ -1 0.683272610843934 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (4990 interne); stringhe deallocate: 0 (4910 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.683272610843934


ris (2 : 2): [ 1 0.683272610843934 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5010 interne); stringhe deallocate: 0 (4930 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7539650034357848


ris (2 : 2): [ 1 0.7539650034357848 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5030 interne); stringhe deallocate: 0 (4950 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6832723706227917 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8602496029945363


ris (2 : 2): [ -1 0.8602496029945363 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5050 interne); stringhe deallocate: 0 (4970 interne)


Stringhe allocate: 1 (5050 interne); stringhe deallocate: 0 (4975 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.316727389156066 0.683272610843934 0.7539650034357848 0.1397503970054637 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8959032533371406 0.9999764615261059 0.9999954120196344 0.830121673432653 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.8224787799839675 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5085 interne); stringhe deallocate: 0 (5005 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.6831970302586541 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.683272610843934


ris (2 : 2): [ -1 0.683272610843934 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5105 interne); stringhe deallocate: 0 (5025 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.683272610843934


ris (2 : 2): [ 1 0.683272610843934 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5125 interne); stringhe deallocate: 0 (5045 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7539650034357848


ris (2 : 2): [ 1 0.7539650034357848 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5145 interne); stringhe deallocate: 0 (5065 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.683272370630494 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8602496029945363


ris (2 : 2): [ -1 0.8602496029945363 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5165 interne); stringhe deallocate: 0 (5085 interne)


Stringhe allocate: 1 (5165 interne); stringhe deallocate: 0 (5090 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.316727389156066 0.683272610843934 0.7539650034357848 0.1397503970054637 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8959032533371406 0.9999764615261059 0.9999954120196344 0.830121673432653 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.8224644748692498 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5200 interne); stringhe deallocate: 0 (5120 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.6832723705296324 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6844973041778161


ris (2 : 2): [ -1 0.6844973041778161 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5220 interne); stringhe deallocate: 0 (5140 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6844973041778161


ris (2 : 2): [ 1 0.6844973041778161 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5240 interne); stringhe deallocate: 0 (5160 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7549613851071775


ris (2 : 2): [ 1 0.7549613851071775 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5260 interne); stringhe deallocate: 0 (5180 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6844968884528129 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8603657154317789


ris (2 : 2): [ -1 0.8603657154317789 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5280 interne); stringhe deallocate: 0 (5200 interne)


Stringhe allocate: 1 (5280 interne); stringhe deallocate: 0 (5205 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3155026958221839 0.6844973041778161 0.7549613851071775 0.1396342845682211 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8938737288404439 0.9999770306560902 0.9999955013455514 0.8300228174234124 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.8224787799839781 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5315 interne); stringhe deallocate: 0 (5235 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.6827821819318132 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6851043236788423


ris (2 : 2): [ -1 0.6851043236788423 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5335 interne); stringhe deallocate: 0 (5255 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6851043236788423


ris (2 : 2): [ 1 0.6851043236788423 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5355 interne); stringhe deallocate: 0 (5275 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7554550386113869


ris (2 : 2): [ 1 0.7554550386113869 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5375 interne); stringhe deallocate: 0 (5295 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6851039021439558 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8604159105471787


ris (2 : 2): [ -1 0.8604159105471787 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5395 interne); stringhe deallocate: 0 (5315 interne)


Stringhe allocate: 1 (5395 interne); stringhe deallocate: 0 (5320 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3148956763211577 0.6851043236788423 0.7554550386113869 0.1395840894528213 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8928562470379584 0.999977307624244 0.9999955449553446 0.8299801145459618 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.8224787799847917 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5430 interne); stringhe deallocate: 0 (5350 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.6832723705296431 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6877625508218795


ris (2 : 2): [ -1 0.6877625508218795 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5450 interne); stringhe deallocate: 0 (5370 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6877625508218795


ris (2 : 2): [ 1 0.6877625508218795 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5470 interne); stringhe deallocate: 0 (5390 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7576167023768071


ris (2 : 2): [ 1 0.7576167023768071 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5490 interne); stringhe deallocate: 0 (5410 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6877622693009728 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8606309164913157


ris (2 : 2): [ -1 0.8606309164913157 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5510 interne); stringhe deallocate: 0 (5430 interne)


Stringhe allocate: 1 (5510 interne); stringhe deallocate: 0 (5435 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3122374491781205 0.6877625508218795 0.7576167023768071 0.1393690835086843 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.888309864979686 0.9999784817052297 0.9999957309940644 0.8297974218733794 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.8225135890965376 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5545 interne); stringhe deallocate: 0 (5465 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.6832723705296289 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6881339911701112


ris (2 : 2): [ -1 0.6881339911701112 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5565 interne); stringhe deallocate: 0 (5485 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6881339911701112


ris (2 : 2): [ 1 0.6881339911701112 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5585 interne); stringhe deallocate: 0 (5505 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7579187004532153


ris (2 : 2): [ 1 0.7579187004532153 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5605 interne); stringhe deallocate: 0 (5525 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6881337254471474 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8606587724383298


ris (2 : 2): [ -1 0.8606587724383298 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5625 interne); stringhe deallocate: 0 (5545 interne)


Stringhe allocate: 1 (5625 interne); stringhe deallocate: 0 (5550 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3118660088298888 0.6881339911701112 0.7579187004532153 0.1393412275616702 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8876627798231125 0.9999786408519222 0.9999957563588098 0.8297737786362113 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.8225302783970605 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5660 interne); stringhe deallocate: 0 (5580 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.6844968883519051 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6857124783326336


ris (2 : 2): [ -1 0.6857124783326336 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5680 interne); stringhe deallocate: 0 (5600 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6857124783326336


ris (2 : 2): [ 1 0.6857124783326336 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5700 interne); stringhe deallocate: 0 (5620 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7559496570117421


ris (2 : 2): [ 1 0.7559496570117421 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5720 interne); stringhe deallocate: 0 (5640 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6857123463582404 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8604676914869375


ris (2 : 2): [ -1 0.8604676914869375 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5740 interne); stringhe deallocate: 0 (5660 interne)


Stringhe allocate: 1 (5740 interne); stringhe deallocate: 0 (5665 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3142875216673664 0.6857124783326336 0.7559496570117421 0.1395323085130625 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8918291617625294 0.9999775817614378 0.999995588226393 0.829936083006154 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.8226041881565926 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5775 interne); stringhe deallocate: 0 (5695 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.6851039021480716 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6881336966076092


ris (2 : 2): [ -1 0.6881336966076092 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5795 interne); stringhe deallocate: 0 (5715 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6881336966076092


ris (2 : 2): [ 1 0.6881336966076092 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5815 interne); stringhe deallocate: 0 (5735 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7579184377337783


ris (2 : 2): [ 1 0.7579184377337783 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5835 interne); stringhe deallocate: 0 (5755 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6881332486099598 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8606579980654339


ris (2 : 2): [ -1 0.8606579980654339 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5855 interne); stringhe deallocate: 0 (5775 interne)


Stringhe allocate: 1 (5855 interne); stringhe deallocate: 0 (5780 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3118663033923909 0.6881336966076092 0.7579184377337783 0.1393420019345661 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8876632941306651 0.9999786407261819 0.9999957563368096 0.8297744358177959 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.822614678667847 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5890 interne); stringhe deallocate: 0 (5810 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.6877622692113548 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6881336966076092


ris (2 : 2): [ -1 0.6881336966076092 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5910 interne); stringhe deallocate: 0 (5830 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6881336966076092


ris (2 : 2): [ 1 0.6881336966076092 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5930 interne); stringhe deallocate: 0 (5850 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7579184377337783


ris (2 : 2): [ 1 0.7579184377337783 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5950 interne); stringhe deallocate: 0 (5870 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6881332486099616 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8606579980654339


ris (2 : 2): [ -1 0.8606579980654339 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (5970 interne); stringhe deallocate: 0 (5890 interne)


Stringhe allocate: 1 (5970 interne); stringhe deallocate: 0 (5895 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3118663033923909 0.6881336966076092 0.7579184377337783 0.1393420019345661 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8876632941306651 0.9999786407261819 0.9999957563368096 0.8297744358177959 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.8225474445348411 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6005 interne); stringhe deallocate: 0 (5925 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.6881337253576021 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6941631864994533


ris (2 : 2): [ -1 0.6941631864994533 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6025 interne); stringhe deallocate: 0 (5945 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6941631864994533


ris (2 : 2): [ 1 0.6941631864994533 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6045 interne); stringhe deallocate: 0 (5965 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7628203303429161


ris (2 : 2): [ 1 0.7628203303429161 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6065 interne); stringhe deallocate: 0 (5985 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6941628544754437 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8610977357521026


ris (2 : 2): [ -1 0.8610977357521026 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6085 interne); stringhe deallocate: 0 (6005 interne)


Stringhe allocate: 1 (6085 interne); stringhe deallocate: 0 (6010 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3058368135005467 0.6941631864994533 0.7628203303429161 0.1389022642478974 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8767508282340082 0.9999810655273189 0.9999961475943859 0.82940199642545 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.8226142017369966 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6120 interne); stringhe deallocate: 0 (6040 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.685712346268069 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6970467951411812


ris (2 : 2): [ -1 0.6970467951411812 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6140 interne); stringhe deallocate: 0 (6060 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6970467951411812


ris (2 : 2): [ 1 0.6970467951411812 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6160 interne); stringhe deallocate: 0 (6080 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7651596566957857


ris (2 : 2): [ 1 0.7651596566957857 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6180 interne); stringhe deallocate: 0 (6100 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6970467656091293 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8611096457307554


ris (2 : 2): [ -1 0.8611096457307554 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6200 interne); stringhe deallocate: 0 (6120 interne)


Stringhe allocate: 1 (6200 interne); stringhe deallocate: 0 (6125 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3029532048588188 0.6970467951411812 0.7651596566957857 0.1388903542692446 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.871258193763605 0.9999821258793664 0.9999963213868557 0.8293919300834787 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.822614201736819 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6235 interne); stringhe deallocate: 0 (6155 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.6881332485206659 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7096355242698037


ris (2 : 2): [ -1 0.7096355242698037 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6255 interne); stringhe deallocate: 0 (6175 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7096355242698037


ris (2 : 2): [ 1 0.7096355242698037 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6275 interne); stringhe deallocate: 0 (6195 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7753713941450313


ris (2 : 2): [ 1 0.7753713941450313 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6295 interne); stringhe deallocate: 0 (6215 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7096352665847787 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8610586945704007


ris (2 : 2): [ -1 0.8610586945704007 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6315 interne); stringhe deallocate: 0 (6235 interne)


Stringhe allocate: 1 (6315 interne); stringhe deallocate: 0 (6240 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2903644757301963 0.7096355242698037 0.7753713941450313 0.1389413054295993 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8452037147018219 0.999986101783696 0.9999969927465255 0.8294350018631659 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.8227777568824823 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6350 interne); stringhe deallocate: 0 (6270 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.6881332485203444 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7113797563339168


ris (2 : 2): [ -1 0.7113797563339168 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6370 interne); stringhe deallocate: 0 (6290 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7113797563339168


ris (2 : 2): [ 1 0.7113797563339168 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6390 interne); stringhe deallocate: 0 (6310 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7767862823958532


ris (2 : 2): [ 1 0.7767862823958532 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6410 interne); stringhe deallocate: 0 (6330 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7113795369095239 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8610309535576591


ris (2 : 2): [ -1 0.8610309535576591 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6430 interne); stringhe deallocate: 0 (6350 interne)


Stringhe allocate: 1 (6430 interne); stringhe deallocate: 0 (6355 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2886202436660832 0.7113797563339168 0.7767862823958532 0.1389690464423409 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8413305646935372 0.9999865779241896 0.9999970755479697 0.8294584613380337 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.8228459445957839 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6465 interne); stringhe deallocate: 0 (6385 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.6941628543858514 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6999536454181985


ris (2 : 2): [ -1 0.6999536454181985 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6485 interne); stringhe deallocate: 0 (6405 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.6999536454181985


ris (2 : 2): [ 1 0.6999536454181985 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6505 interne); stringhe deallocate: 0 (6425 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7675185340924433


ris (2 : 2): [ 1 0.7675185340924433 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6525 interne); stringhe deallocate: 0 (6445 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.6999535649283804 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8611476942283901


ris (2 : 2): [ -1 0.8611476942283901 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6545 interne); stringhe deallocate: 0 (6465 interne)


Stringhe allocate: 1 (6545 interne); stringhe deallocate: 0 (6470 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.3000463545818015 0.6999536454181985 0.7675185340924433 0.1388523057716099 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8655413370814811 0.9999831346885204 0.9999964886940731 0.8293597788004911 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.8231930820469842 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6580 interne); stringhe deallocate: 0 (6500 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.6970467655186461 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7113427071262791


ris (2 : 2): [ -1 0.7113427071262791 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6600 interne); stringhe deallocate: 0 (6520 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7113427071262791


ris (2 : 2): [ 1 0.7113427071262791 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6620 interne); stringhe deallocate: 0 (6540 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7767532288869573


ris (2 : 2): [ 1 0.7767532288869573 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6640 interne); stringhe deallocate: 0 (6560 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7113423436111477 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8609282189099637


ris (2 : 2): [ -1 0.8609282189099637 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6660 interne); stringhe deallocate: 0 (6580 interne)


Stringhe allocate: 1 (6660 interne); stringhe deallocate: 0 (6585 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2886572928737209 0.7113427071262791 0.7767532288869573 0.1390717810900363 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8414134874789081 0.9999865679820668 0.9999970736398829 0.8295453920819451 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.8232760517124937 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6695 interne); stringhe deallocate: 0 (6615 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.7096352664960222 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7113427071262791


ris (2 : 2): [ -1 0.7113427071262791 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6715 interne); stringhe deallocate: 0 (6635 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7113427071262791


ris (2 : 2): [ 1 0.7113427071262791 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6735 interne); stringhe deallocate: 0 (6655 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7767532288869573


ris (2 : 2): [ 1 0.7767532288869573 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6755 interne); stringhe deallocate: 0 (6675 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.711342343611415 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8609282189099637


ris (2 : 2): [ -1 0.8609282189099637 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6775 interne); stringhe deallocate: 0 (6695 interne)


Stringhe allocate: 1 (6775 interne); stringhe deallocate: 0 (6700 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2886572928737209 0.7113427071262791 0.7767532288869573 0.1390717810900363 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8414134874789081 0.9999865679820668 0.9999970736398829 0.8295453920819451 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.8229079334271745 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6810 interne); stringhe deallocate: 0 (6730 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.7113795368199263 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7115101488696022


ris (2 : 2): [ -1 0.7115101488696022 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6830 interne); stringhe deallocate: 0 (6750 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7115101488696022


ris (2 : 2): [ 1 0.7115101488696022 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6850 interne); stringhe deallocate: 0 (6770 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7768888624066171


ris (2 : 2): [ 1 0.7768888624066171 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6870 interne); stringhe deallocate: 0 (6790 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7115097134537374 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8609186849153946


ris (2 : 2): [ -1 0.8609186849153946 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6890 interne); stringhe deallocate: 0 (6810 interne)


Stringhe allocate: 1 (6890 interne); stringhe deallocate: 0 (6815 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2884898511303978 0.7115101488696022 0.7768888624066171 0.1390813150846054 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.841038498062014 0.9999866128564268 0.9999970814617095 0.8295534636015931 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.8232112018589888 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6925 interne); stringhe deallocate: 0 (6845 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.6999535648350488 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7115937604761362


ris (2 : 2): [ -1 0.7115937604761362 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6945 interne); stringhe deallocate: 0 (6865 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7115937604761362


ris (2 : 2): [ 1 0.7115937604761362 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6965 interne); stringhe deallocate: 0 (6885 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7769565864869176


ris (2 : 2): [ 1 0.7769565864869176 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (6985 interne); stringhe deallocate: 0 (6905 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7115936367937517 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8609137170554295


ris (2 : 2): [ -1 0.8609137170554295 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7005 interne); stringhe deallocate: 0 (6925 interne)


Stringhe allocate: 1 (7005 interne); stringhe deallocate: 0 (6930 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2884062395238638 0.7115937604761362 0.7769565864869176 0.1390862829445705 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8408510321119613 0.9999866352081726 0.9999970853594489 0.8295576696926043 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.8232112018589746 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7040 interne); stringhe deallocate: 0 (6960 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.7113423435215829 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7119602923488471


ris (2 : 2): [ -1 0.7119602923488471 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7060 interne); stringhe deallocate: 0 (6980 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7119602923488471


ris (2 : 2): [ 1 0.7119602923488471 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7080 interne); stringhe deallocate: 0 (7000 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7772534687610784


ris (2 : 2): [ 1 0.7772534687610784 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7100 interne); stringhe deallocate: 0 (7020 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7119598477346081 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8608918008972096


ris (2 : 2): [ -1 0.8608918008972096 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7120 interne); stringhe deallocate: 0 (7040 interne)


Stringhe allocate: 1 (7120 interne); stringhe deallocate: 0 (7045 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2880397076511529 0.7119602923488471 0.7772534687610784 0.1391081991027904 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8400275341376244 0.9999867327529572 0.9999971023846488 0.8295762275287913 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.8232154933934091 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7155 interne); stringhe deallocate: 0 (7075 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.7113423436153568 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7120116986057492


ris (2 : 2): [ -1 0.7120116986057492 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7175 interne); stringhe deallocate: 0 (7095 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7120116986057492


ris (2 : 2): [ 1 0.7120116986057492 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7195 interne); stringhe deallocate: 0 (7115 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.777295105245284


ris (2 : 2): [ 1 0.777295105245284 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7215 interne); stringhe deallocate: 0 (7135 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7120113461553963 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8608886578587671


ris (2 : 2): [ -1 0.8608886578587671 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7235 interne); stringhe deallocate: 0 (7155 interne)


Stringhe allocate: 1 (7235 interne); stringhe deallocate: 0 (7160 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2879883013942508 0.7120116986057492 0.777295105245284 0.1391113421412329 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8399118176576271 0.9999867463766115 0.9999971047643961 0.8295788892498801 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.8232178776729739 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7270 interne); stringhe deallocate: 0 (7190 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.7115097133641868 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7116773962136478


ris (2 : 2): [ -1 0.7116773962136478 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7290 interne); stringhe deallocate: 0 (7210 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7116773962136478


ris (2 : 2): [ 1 0.7116773962136478 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7310 interne); stringhe deallocate: 0 (7230 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7770243310292727


ris (2 : 2): [ 1 0.7770243310292727 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7330 interne); stringhe deallocate: 0 (7250 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7116770833075492 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8609087932229708


ris (2 : 2): [ -1 0.8609087932229708 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7350 interne); stringhe deallocate: 0 (7270 interne)


Stringhe allocate: 1 (7350 interne); stringhe deallocate: 0 (7275 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2883226037863522 0.7116773962136478 0.7770243310292727 0.1390912067770292 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8406633682541058 0.9999866575290347 0.9999970892531581 0.8295618386965521 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.8232274143224387 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7385 interne); stringhe deallocate: 0 (7305 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.7115936367040376 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7120116977036076


ris (2 : 2): [ -1 0.7120116977036076 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7405 interne); stringhe deallocate: 0 (7325 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7120116977036076


ris (2 : 2): [ 1 0.7120116977036076 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7425 interne); stringhe deallocate: 0 (7345 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7772951044439772


ris (2 : 2): [ 1 0.7772951044439772 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7445 interne); stringhe deallocate: 0 (7365 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7120113461441999 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8608886547644582


ris (2 : 2): [ -1 0.8608886547644582 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7465 interne); stringhe deallocate: 0 (7385 interne)


Stringhe allocate: 1 (7465 interne); stringhe deallocate: 0 (7390 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2879883022963924 0.7120116977036076 0.7772951044439772 0.1391113452355418 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8399118196888409 0.9999867463763724 0.9999971047643503 0.8295788918703718 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.8232288448339205 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7500 interne); stringhe deallocate: 0 (7420 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.71195984764136 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7120116977036076


ris (2 : 2): [ -1 0.7120116977036076 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7520 interne); stringhe deallocate: 0 (7440 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7120116977036076


ris (2 : 2): [ 1 0.7120116977036076 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7540 interne); stringhe deallocate: 0 (7460 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7772951044439772


ris (2 : 2): [ 1 0.7772951044439772 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7560 interne); stringhe deallocate: 0 (7480 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7120113461442346 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8608886547644582


ris (2 : 2): [ -1 0.8608886547644582 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7580 interne); stringhe deallocate: 0 (7500 interne)


Stringhe allocate: 1 (7580 interne); stringhe deallocate: 0 (7505 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2879883022963924 0.7120116977036076 0.7772951044439772 0.1391113452355418 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8399118196888409 0.9999867463763724 0.9999971047643503 0.8295788918703718 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.8232202617648952 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7615 interne); stringhe deallocate: 0 (7535 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.7120113460548456 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7128469661804416


ris (2 : 2): [ -1 0.7128469661804416 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7635 interne); stringhe deallocate: 0 (7555 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7128469661804416


ris (2 : 2): [ 1 0.7128469661804416 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7655 interne); stringhe deallocate: 0 (7575 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7779716264033888


ris (2 : 2): [ 1 0.7779716264033888 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7675 interne); stringhe deallocate: 0 (7595 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7128467648453407 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8608374132107642


ris (2 : 2): [ -1 0.8608374132107642 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7695 interne); stringhe deallocate: 0 (7615 interne)


Stringhe allocate: 1 (7695 interne); stringhe deallocate: 0 (7620 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2871530338195584 0.7128469661804416 0.7779716264033888 0.1391625867892358 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8380240320836232 0.9999869657886045 0.9999971431584646 0.8296222972447066 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.8232288448341425 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7730 interne); stringhe deallocate: 0 (7650 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.7116770832066237 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7132618751192092


ris (2 : 2): [ -1 0.7132618751192092 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7750 interne); stringhe deallocate: 0 (7670 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7132618751192092


ris (2 : 2): [ 1 0.7132618751192092 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7770 interne); stringhe deallocate: 0 (7690 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7783075760021625


ris (2 : 2): [ 1 0.7783075760021625 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7790 interne); stringhe deallocate: 0 (7710 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.713261613173426 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.860806745394797


ris (2 : 2): [ -1 0.860806745394797 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7810 interne); stringhe deallocate: 0 (7730 interne)


Stringhe allocate: 1 (7810 interne); stringhe deallocate: 0 (7735 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2867381248807908 0.7132618751192092 0.7783075760021625 0.139193254605203 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.837081002220698 0.999987073424796 0.9999971620347294 0.8296482849046477 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.823228844833821 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7845 interne); stringhe deallocate: 0 (7765 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.7120113460545525 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7150793578540454


ris (2 : 2): [ -1 0.7150793578540454 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7865 interne); stringhe deallocate: 0 (7785 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7150793578540454


ris (2 : 2): [ 1 0.7150793578540454 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7885 interne); stringhe deallocate: 0 (7805 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7797791198162885


ris (2 : 2): [ 1 0.7797791198162885 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7905 interne); stringhe deallocate: 0 (7825 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7150793164200184 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.86066906610898


ris (2 : 2): [ -1 0.86066906610898 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7925 interne); stringhe deallocate: 0 (7845 interne)


Stringhe allocate: 1 (7925 interne); stringhe deallocate: 0 (7850 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2849206421459546 0.7150793578540454 0.7797791198162885 0.13933093389102 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8329089871758268 0.9999875345411226 0.9999972432587676 0.8297650432214273 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.8232507793431267 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7960 interne); stringhe deallocate: 0 (7880 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.7120113460545348 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7153335792981894


ris (2 : 2): [ -1 0.7153335792981894 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (7980 interne); stringhe deallocate: 0 (7900 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7153335792981894


ris (2 : 2): [ 1 0.7153335792981894 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8000 interne); stringhe deallocate: 0 (7920 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7799849223457688


ris (2 : 2): [ 1 0.7799849223457688 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8020 interne); stringhe deallocate: 0 (7940 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7153334706253425 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8606482171370968


ris (2 : 2): [ -1 0.8606482171370968 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8040 interne); stringhe deallocate: 0 (7960 interne)


Stringhe allocate: 1 (8040 interne); stringhe deallocate: 0 (7965 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2846664207018106 0.7153335792981894 0.7799849223457688 0.1393517828629032 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8323201172714719 0.9999875977151193 0.9999972544315099 0.829782736929867 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.8232617465977477 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8075 interne); stringhe deallocate: 0 (7995 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.7128467647565202 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7136773709909494


ris (2 : 2): [ -1 0.7136773709909494 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8095 interne); stringhe deallocate: 0 (8015 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7136773709909494


ris (2 : 2): [ 1 0.7136773709909494 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8115 interne); stringhe deallocate: 0 (8035 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7786440226421694


ris (2 : 2): [ 1 0.7786440226421694 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8135 interne); stringhe deallocate: 0 (8055 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7136769383377484 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8607771234746297


ris (2 : 2): [ -1 0.8607771234746297 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8155 interne); stringhe deallocate: 0 (8075 interne)


Stringhe allocate: 1 (8155 interne); stringhe deallocate: 0 (8080 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2863226290090506 0.7136773709909494 0.7786440226421694 0.1392228765253704 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8361331289841332 0.9999871803225364 0.9999971808139235 0.8296733932171454 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.8233099071515397 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8190 interne); stringhe deallocate: 0 (8110 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.713261613083354 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7153334664178085


ris (2 : 2): [ -1 0.7153334664178085 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8210 interne); stringhe deallocate: 0 (8130 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7153334664178085


ris (2 : 2): [ 1 0.7153334664178085 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8230 interne); stringhe deallocate: 0 (8150 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7799848220778932


ris (2 : 2): [ 1 0.7799848220778932 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8250 interne); stringhe deallocate: 0 (8170 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7153334706262191 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8606478288758661


ris (2 : 2): [ -1 0.8606478288758661 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8270 interne); stringhe deallocate: 0 (8190 interne)


Stringhe allocate: 1 (8270 interne); stringhe deallocate: 0 (8195 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2846665335821915 0.7153334664178085 0.7799848220778932 0.1393521711241339 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8323203790312475 0.9999875976871397 0.9999972544260776 0.8297830664640095 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.8233170597081099 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8305 interne); stringhe deallocate: 0 (8225 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.7150793163304101 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7153334664178085


ris (2 : 2): [ -1 0.7153334664178085 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8325 interne); stringhe deallocate: 0 (8245 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7153334664178085


ris (2 : 2): [ 1 0.7153334664178085 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8345 interne); stringhe deallocate: 0 (8265 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7799848220778932


ris (2 : 2): [ 1 0.7799848220778932 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8365 interne); stringhe deallocate: 0 (8285 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7153334706253061 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8606478288758661


ris (2 : 2): [ -1 0.8606478288758661 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8385 interne); stringhe deallocate: 0 (8305 interne)


Stringhe allocate: 1 (8385 interne); stringhe deallocate: 0 (8310 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2846665335821915 0.7153334664178085 0.7799848220778932 0.1393521711241339 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8323203790312475 0.9999875976871397 0.9999972544260776 0.8297830664640095 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.8232722370152246 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8420 interne); stringhe deallocate: 0 (8340 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.715333470535743 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7194616389361005


ris (2 : 2): [ -1 0.7194616389361005 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8440 interne); stringhe deallocate: 0 (8360 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7194616389361005


ris (2 : 2): [ 1 0.7194616389361005 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8460 interne); stringhe deallocate: 0 (8380 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7833265889161014


ris (2 : 2): [ 1 0.7833265889161014 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8480 interne); stringhe deallocate: 0 (8400 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7194614499039087 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8603018418532785


ris (2 : 2): [ -1 0.8603018418532785 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8500 interne); stringhe deallocate: 0 (8420 interne)


Stringhe allocate: 1 (8500 interne); stringhe deallocate: 0 (8425 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2805383610638995 0.7194616389361005 0.7833265889161014 0.1396981581467215 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8225788102002476 0.9999885798630066 0.9999974296378551 0.8300771853037058 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.8233165828709481 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8535 interne); stringhe deallocate: 0 (8455 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.7136769383419193 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7214583783057809


ris (2 : 2): [ -1 0.7214583783057809 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8555 interne); stringhe deallocate: 0 (8475 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7214583783057809


ris (2 : 2): [ 1 0.7214583783057809 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8575 interne); stringhe deallocate: 0 (8495 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7849403837880805


ris (2 : 2): [ 1 0.7849403837880805 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8595 interne); stringhe deallocate: 0 (8515 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7214579670890249 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8599997476616429


ris (2 : 2): [ -1 0.8599997476616429 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8615 interne); stringhe deallocate: 0 (8535 interne)


Stringhe allocate: 1 (8615 interne); stringhe deallocate: 0 (8540 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2785416216942191 0.7214583783057809 0.7849403837880805 0.1400002523383571 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.8177482022297868 0.9999890266267255 0.9999975102018122 0.8303347494862216 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.823316582964722 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8650 interne); stringhe deallocate: 0 (8570 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.7153334705358176 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7301808553685848


ris (2 : 2): [ -1 0.7301808553685848 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8670 interne); stringhe deallocate: 0 (8590 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7301808553685848


ris (2 : 2): [ 1 0.7301808553685848 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8690 interne); stringhe deallocate: 0 (8610 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7919892541530847


ris (2 : 2): [ 1 0.7919892541530847 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8710 interne); stringhe deallocate: 0 (8630 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7301807492202785 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.858615559254952


ris (2 : 2): [ -1 0.858615559254952 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8730 interne); stringhe deallocate: 0 (8650 interne)


Stringhe allocate: 1 (8730 interne); stringhe deallocate: 0 (8655 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2698191446314152 0.7301808553685848 0.7919892541530847 0.141384440745048 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.7957902847438318 0.9999907821168486 0.9999978335158126 0.831523899188344 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.8234276859288841 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8765 interne); stringhe deallocate: 0 (8685 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.7153334705358247 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7313905485375069


ris (2 : 2): [ -1 0.7313905485375069 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8785 interne); stringhe deallocate: 0 (8705 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7313905485375069


ris (2 : 2): [ 1 0.7313905485375069 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8805 interne); stringhe deallocate: 0 (8725 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7929666114269134


ris (2 : 2): [ 1 0.7929666114269134 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8825 interne); stringhe deallocate: 0 (8745 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7313904850909072 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8584032099606568


ris (2 : 2): [ -1 0.8584032099606568 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8845 interne); stringhe deallocate: 0 (8765 interne)


Stringhe allocate: 1 (8845 interne); stringhe deallocate: 0 (8770 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2686094514624932 0.7313905485375069 0.7929666114269134 0.1415967900393432 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.7926413233493712 0.9999910023035781 0.9999978748989047 0.8317076284537307 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.8234868137365083 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8880 interne); stringhe deallocate: 0 (8800 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.7194614498142116 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7234677995510387


ris (2 : 2): [ -1 0.7234677995510387 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8900 interne); stringhe deallocate: 0 (8820 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7234677995510387


ris (2 : 2): [ 1 0.7234677995510387 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8920 interne); stringhe deallocate: 0 (8840 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7865648386756649


ris (2 : 2): [ 1 0.7865648386756649 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8940 interne); stringhe deallocate: 0 (8860 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7234673588699971 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8597172123563857


ris (2 : 2): [ -1 0.8597172123563857 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8960 interne); stringhe deallocate: 0 (8880 interne)


Stringhe allocate: 1 (8960 interne); stringhe deallocate: 0 (8885 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2765322004489613 0.7234677995510387 0.7865648386756649 0.1402827876436144 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.812811004007174 0.9999894585853084 0.9999975887479062 0.8305762761035158 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.8237724391940944 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (8995 interne); stringhe deallocate: 0 (8915 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.7214579669960077 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7313763713365488


ris (2 : 2): [ -1 0.7313763713365488 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9015 interne); stringhe deallocate: 0 (8935 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7313763713365488


ris (2 : 2): [ 1 0.7313763713365488 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9035 interne); stringhe deallocate: 0 (8955 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7929540156051861


ris (2 : 2): [ 1 0.7929540156051861 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9055 interne); stringhe deallocate: 0 (8975 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7313761799761247 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8583539864413358


ris (2 : 2): [ -1 0.8583539864413358 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9075 interne); stringhe deallocate: 0 (8995 interne)


Stringhe allocate: 1 (9075 interne); stringhe deallocate: 0 (9000 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2686236286634512 0.7313763713365488 0.7929540156051861 0.1416460135586642 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.7926783661318826 0.9999909997537697 0.9999978743706353 0.8317502669356509 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.8238296596534784 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9110 interne); stringhe deallocate: 0 (9030 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.730180749130696 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7313763713365488


ris (2 : 2): [ -1 0.7313763713365488 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9130 interne); stringhe deallocate: 0 (9050 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7313763713365488


ris (2 : 2): [ 1 0.7313763713365488 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9150 interne); stringhe deallocate: 0 (9070 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7929540156051861


ris (2 : 2): [ 1 0.7929540156051861 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9170 interne); stringhe deallocate: 0 (9090 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7313761799794811 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8583539864413358


ris (2 : 2): [ -1 0.8583539864413358 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9190 interne); stringhe deallocate: 0 (9110 interne)


Stringhe allocate: 1 (9190 interne); stringhe deallocate: 0 (9115 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2686236286634512 0.7313763713365488 0.7929540156051861 0.1416460135586642 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.7926783661318826 0.9999909997537697 0.9999978743706353 0.8317502669356509 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.8235406963352858 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9225 interne); stringhe deallocate: 0 (9145 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.7313904850010857 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7333493967062843


ris (2 : 2): [ -1 0.7333493967062843 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9245 interne); stringhe deallocate: 0 (9165 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7333493967062843


ris (2 : 2): [ 1 0.7333493967062843 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9265 interne); stringhe deallocate: 0 (9185 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7945468190943091


ris (2 : 2): [ 1 0.7945468190943091 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9285 interne); stringhe deallocate: 0 (9205 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7333493321478279 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8579477089200525


ris (2 : 2): [ -1 0.8579477089200525 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9305 interne); stringhe deallocate: 0 (9225 interne)


Stringhe allocate: 1 (9305 interne); stringhe deallocate: 0 (9230 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2666506032937157 0.7333493967062843 0.7945468190943091 0.1420522910799476 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.7874923569007861 0.9999913477518418 0.9999979401421475 0.8321028995182296 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.823802956772326 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9340 interne); stringhe deallocate: 0 (9260 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.7234673587803648 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7343196065758194


ris (2 : 2): [ -1 0.7343196065758194 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9360 interne); stringhe deallocate: 0 (9280 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7343196065758194


ris (2 : 2): [ 1 0.7343196065758194 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9380 interne); stringhe deallocate: 0 (9300 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7953294381456143


ris (2 : 2): [ 1 0.7953294381456143 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9400 interne); stringhe deallocate: 0 (9320 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7343192189276664 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8577113061455332


ris (2 : 2): [ -1 0.8577113061455332 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9420 interne); stringhe deallocate: 0 (9340 interne)


Stringhe allocate: 1 (9420 interne); stringhe deallocate: 0 (9345 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2656803934241806 0.7343196065758194 0.7953294381456143 0.1422886938544669 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.7849199089131864 0.9999915139076254 0.9999979717091887 0.8323086663706049 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.8238029567723082 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9455 interne); stringhe deallocate: 0 (9375 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.7313761798871354 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7385641970323982


ris (2 : 2): [ -1 0.7385641970323982 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9475 interne); stringhe deallocate: 0 (9395 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7385641970323982


ris (2 : 2): [ 1 0.7385641970323982 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9495 interne); stringhe deallocate: 0 (9415 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7987530321956701


ris (2 : 2): [ 1 0.7987530321956701 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9515 interne); stringhe deallocate: 0 (9435 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7385640232987409 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8566567551028338


ris (2 : 2): [ -1 0.8566567551028338 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9535 interne); stringhe deallocate: 0 (9455 interne)


Stringhe allocate: 1 (9535 interne); stringhe deallocate: 0 (9460 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2614358029676018 0.7385641970323982 0.7987530321956701 0.1433432448971662 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.7735021695741642 0.9999922041120333 0.9999981042106008 0.8332317186193832 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.823871621323903 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9570 interne); stringhe deallocate: 0 (9490 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.7313761798863325 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7391553894874851


ris (2 : 2): [ -1 0.7391553894874851 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9590 interne); stringhe deallocate: 0 (9510 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7391553894874851


ris (2 : 2): [ 1 0.7391553894874851 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9610 interne); stringhe deallocate: 0 (9530 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7992297404141155


ris (2 : 2): [ 1 0.7992297404141155 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9630 interne); stringhe deallocate: 0 (9550 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7391553013749475 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8565010232331821


ris (2 : 2): [ -1 0.8565010232331821 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9650 interne); stringhe deallocate: 0 (9570 interne)


Stringhe allocate: 1 (9650 interne); stringhe deallocate: 0 (9575 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.260844610512515 0.7391553894874851 0.7992297404141155 0.1434989767668179 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.7718917990938334 0.9999922956827718 0.9999981219605543 0.8333687432290363 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.8239092914585982 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9685 interne); stringhe deallocate: 0 (9605 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.7333493320469628 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.735293157302592


ris (2 : 2): [ -1 0.735293157302592 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9705 interne); stringhe deallocate: 0 (9625 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.735293157302592


ris (2 : 2): [ 1 0.735293157302592 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9725 interne); stringhe deallocate: 0 (9645 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7961148704119293


ris (2 : 2): [ 1 0.7961148704119293 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9745 interne); stringhe deallocate: 0 (9665 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7352929203934364 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8574810915640303


ris (2 : 2): [ -1 0.8574810915640303 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9765 interne); stringhe deallocate: 0 (9685 interne)


Stringhe allocate: 1 (9765 interne); stringhe deallocate: 0 (9690 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.264706842697408 0.735293157302592 0.7961148704119293 0.1425189084359697 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.7823242535463406 0.9999916774283717 0.9999980029033406 0.8325094552357071 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.8240776149754296 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9800 interne); stringhe deallocate: 0 (9720 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.7343192188267587 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7391536686124823


ris (2 : 2): [ -1 0.7391536686124823 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9820 interne); stringhe deallocate: 0 (9740 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7391536686124823


ris (2 : 2): [ 1 0.7391536686124823 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9840 interne); stringhe deallocate: 0 (9760 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7992282161155653


ris (2 : 2): [ 1 0.7992282161155653 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9860 interne); stringhe deallocate: 0 (9780 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7391533940266974 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8564943883942696


ris (2 : 2): [ -1 0.8564943883942696 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9880 interne); stringhe deallocate: 0 (9800 interne)


Stringhe allocate: 1 (9880 interne); stringhe deallocate: 0 (9805 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2608463313875177 0.7391536686124823 0.7992282161155653 0.1435056116057304 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.7718964934633505 0.9999922954177898 0.9999981219040637 0.8333745851147189 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.8241043178562997 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9915 interne); stringhe deallocate: 0 (9835 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.7385640233028568 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7391536686124823


ris (2 : 2): [ -1 0.7391536686124823 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9935 interne); stringhe deallocate: 0 (9855 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7391536686124823


ris (2 : 2): [ 1 0.7391536686124823 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9955 interne); stringhe deallocate: 0 (9875 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7992282161155653


ris (2 : 2): [ 1 0.7992282161155653 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9975 interne); stringhe deallocate: 0 (9895 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7391533940262196 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8564943883942696


ris (2 : 2): [ -1 0.8564943883942696 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (9995 interne); stringhe deallocate: 0 (9915 interne)


Stringhe allocate: 1 (9995 interne); stringhe deallocate: 0 (9920 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2608463313875177 0.7391536686124823 0.7992282161155653 0.1435056116057304 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.7718964934633505 0.9999922954177898 0.9999981219040637 0.8333745851147189 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.8239455311763919 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10030 interne); stringhe deallocate: 0 (9950 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.7391553012853294 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7456088671533485


ris (2 : 2): [ -1 0.7456088671533485 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10050 interne); stringhe deallocate: 0 (9970 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7456088671533485


ris (2 : 2): [ 1 0.7456088671533485 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10070 interne); stringhe deallocate: 0 (9990 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8044322052420835


ris (2 : 2): [ 1 0.8044322052420835 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10090 interne); stringhe deallocate: 0 (10010 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7456088154739753 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8547311368590573


ris (2 : 2): [ -1 0.8547311368590573 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10110 interne); stringhe deallocate: 0 (10030 interne)


Stringhe allocate: 1 (10110 interne); stringhe deallocate: 0 (10035 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2543911328466515 0.7456088671533485 0.8044322052420835 0.1452688631409427 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.754027406595476 0.9999932279650632 0.9999983051952593 0.8349387864332996 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.8241009799962669 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10145 interne); stringhe deallocate: 0 (10065 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.7352929203038912 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.748656754127595


ris (2 : 2): [ -1 0.748656754127595 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10165 interne); stringhe deallocate: 0 (10085 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.748656754127595


ris (2 : 2): [ 1 0.748656754127595 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10185 interne); stringhe deallocate: 0 (10105 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8068824733052545


ris (2 : 2): [ 1 0.8068824733052545 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10205 interne); stringhe deallocate: 0 (10125 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7486567585892132 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8534718602200933


ris (2 : 2): [ -1 0.8534718602200933 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10225 interne); stringhe deallocate: 0 (10145 interne)


Stringhe allocate: 1 (10225 interne); stringhe deallocate: 0 (10150 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.251343245872405 0.748656754127595 0.8068824733052545 0.1465281397799068 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.7454292129479666 0.9999936281716695 0.9999983851919512 0.8360700211908001 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.824100979996274 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10260 interne); stringhe deallocate: 0 (10180 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.739153393936526 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7619584136582178


ris (2 : 2): [ -1 0.7619584136582178 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10280 interne); stringhe deallocate: 0 (10200 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7619584136582178


ris (2 : 2): [ 1 0.7619584136582178 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10300 interne); stringhe deallocate: 0 (10220 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8175758283646419


ris (2 : 2): [ 1 0.8175758283646419 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10320 interne); stringhe deallocate: 0 (10240 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7619581311181625 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8478933521904967


ris (2 : 2): [ -1 0.8478933521904967 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10340 interne); stringhe deallocate: 0 (10260 interne)


Stringhe allocate: 1 (10340 interne); stringhe deallocate: 0 (10265 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2380415863417822 0.7619584136582178 0.8175758283646419 0.1521066478095033 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.7070809165218279 0.9999951156391889 0.9999986923878454 0.8412185422207577 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.8243727771762721 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10375 interne); stringhe deallocate: 0 (10295 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.7391533939369257 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7638031263277931


ris (2 : 2): [ -1 0.7638031263277931 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10395 interne); stringhe deallocate: 0 (10315 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7638031263277931


ris (2 : 2): [ 1 0.7638031263277931 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10415 interne); stringhe deallocate: 0 (10335 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8190595316443163


ris (2 : 2): [ 1 0.8190595316443163 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10435 interne); stringhe deallocate: 0 (10355 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7638030140823373 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8471270374973969


ris (2 : 2): [ -1 0.8471270374973969 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10455 interne); stringhe deallocate: 0 (10375 interne)


Stringhe allocate: 1 (10455 interne); stringhe deallocate: 0 (10380 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2361968736722069 0.7638031263277931 0.8190595316443163 0.1528729625026031 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.7016991743397574 0.9999952924397142 0.9999987301172622 0.8419427486072888 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.8245511142738398 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10490 interne); stringhe deallocate: 0 (10410 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.7456088153843581 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7517342889515453


ris (2 : 2): [ -1 0.7517342889515453 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10510 interne); stringhe deallocate: 0 (10430 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7517342889515453


ris (2 : 2): [ 1 0.7517342889515453 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10530 interne); stringhe deallocate: 0 (10450 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8093573733725228


ris (2 : 2): [ 1 0.8093573733725228 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10550 interne); stringhe deallocate: 0 (10470 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7517342656082544 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8522547285475983


ris (2 : 2): [ -1 0.8522547285475983 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10570 interne); stringhe deallocate: 0 (10490 interne)


Stringhe allocate: 1 (10570 interne); stringhe deallocate: 0 (10495 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2482657110484547 0.7517342889515453 0.8093573733725228 0.1477452714524017 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.7366603512633811 0.9999940082790235 0.9999984621603979 0.8371744185096597 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.8254809467320143 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10605 interne); stringhe deallocate: 0 (10525 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.7486567584996209 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7637376498604009


ris (2 : 2): [ -1 0.7637376498604009 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10625 interne); stringhe deallocate: 0 (10545 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7637376498604009


ris (2 : 2): [ 1 0.7637376498604009 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10645 interne); stringhe deallocate: 0 (10565 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8190015489586098


ris (2 : 2): [ 1 0.8190015489586098 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10665 interne); stringhe deallocate: 0 (10585 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7637372105582632 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8468737901658042


ris (2 : 2): [ -1 0.8468737901658042 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10685 interne); stringhe deallocate: 0 (10605 interne)


Stringhe allocate: 1 (10685 interne); stringhe deallocate: 0 (10610 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2362623501395991 0.7637376498604009 0.8190015489586098 0.1531262098341958 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.7018903079605526 0.9999952862752715 0.9999987286634553 0.8421829540373894 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.825706967545031 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10720 interne); stringhe deallocate: 0 (10640 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.7619581310276793 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7637376498604009


ris (2 : 2): [ -1 0.7637376498604009 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10740 interne); stringhe deallocate: 0 (10660 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7637376498604009


ris (2 : 2): [ 1 0.7637376498604009 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10760 interne); stringhe deallocate: 0 (10680 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8190015489586098


ris (2 : 2): [ 1 0.8190015489586098 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10780 interne); stringhe deallocate: 0 (10700 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7637372105545071 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8468737901658042


ris (2 : 2): [ -1 0.8468737901658042 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10800 interne); stringhe deallocate: 0 (10720 interne)


Stringhe allocate: 1 (10800 interne); stringhe deallocate: 0 (10725 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2362623501395991 0.7637376498604009 0.8190015489586098 0.1531262098341958 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.7018903079605526 0.9999952862752715 0.9999987286634553 0.8421829540373894 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.8247022716526793 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10835 interne); stringhe deallocate: 0 (10755 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.7638030139935808 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7695844760125681


ris (2 : 2): [ -1 0.7695844760125681 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10855 interne); stringhe deallocate: 0 (10775 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7695844760125681


ris (2 : 2): [ 1 0.7695844760125681 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10875 interne); stringhe deallocate: 0 (10795 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.823693072682562


ris (2 : 2): [ 1 0.823693072682562 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10895 interne); stringhe deallocate: 0 (10815 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7695841877886611 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8438519378160787


ris (2 : 2): [ -1 0.8438519378160787 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10915 interne); stringhe deallocate: 0 (10835 interne)


Stringhe allocate: 1 (10915 interne); stringhe deallocate: 0 (10840 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2304155239874319 0.7695844760125681 0.823693072682562 0.1561480621839213 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.6848124836886859 0.9999958061340599 0.9999988410780452 0.8450819871332532 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.8255739299786882 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10950 interne); stringhe deallocate: 0 (10870 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.7517342655186567 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7723451123468028


ris (2 : 2): [ -1 0.7723451123468028 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10970 interne); stringhe deallocate: 0 (10890 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7723451123468028


ris (2 : 2): [ 1 0.7723451123468028 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (10990 interne); stringhe deallocate: 0 (10910 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8259020400300982


ris (2 : 2): [ 1 0.8259020400300982 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11010 interne); stringhe deallocate: 0 (10930 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7723450749344503 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8420114261254983


ris (2 : 2): [ -1 0.8420114261254983 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11030 interne); stringhe deallocate: 0 (10950 interne)


Stringhe allocate: 1 (11030 interne); stringhe deallocate: 0 (10955 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2276548876531972 0.7723451123468028 0.8259020400300982 0.1579885738745017 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.6767596801563773 0.9999960312607417 0.9999988905101216 0.8468765203428391 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.8255739299778853 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11065 interne); stringhe deallocate: 0 (10985 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.7637372104649316 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7843931466189339


ris (2 : 2): [ -1 0.7843931466189339 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11085 interne); stringhe deallocate: 0 (11005 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7843931466189339


ris (2 : 2): [ 1 0.7843931466189339 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11105 interne); stringhe deallocate: 0 (11025 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8355423260727054


ris (2 : 2): [ 1 0.8355423260727054 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11125 interne); stringhe deallocate: 0 (11045 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.784392842573781 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8339450041828279


ris (2 : 2): [ -1 0.8339450041828279 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11145 interne); stringhe deallocate: 0 (11065 interne)


Stringhe allocate: 1 (11145 interne); stringhe deallocate: 0 (11070 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2156068533810661 0.7843931466189339 0.8355423260727054 0.1660549958171721 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.6420150301241268 0.9999968805573265 0.9999990827112084 0.8549778537179398 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.8260603038792382 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11180 interne); stringhe deallocate: 0 (11100 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.7637372104649423 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7860640032855369


ris (2 : 2): [ -1 0.7860640032855369 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11200 interne); stringhe deallocate: 0 (11120 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7860640032855369


ris (2 : 2): [ 1 0.7860640032855369 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11220 interne); stringhe deallocate: 0 (11140 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8368799187150726


ris (2 : 2): [ 1 0.8368799187150726 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11240 interne); stringhe deallocate: 0 (11160 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7860636799794811 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8328454827132388


ris (2 : 2): [ -1 0.8328454827132388 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11260 interne); stringhe deallocate: 0 (11180 interne)


Stringhe allocate: 1 (11260 interne); stringhe deallocate: 0 (11185 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2139359967144631 0.7860640032855369 0.8368799187150726 0.1671545172867612 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.6372795391183157 0.9999969830080673 0.9999991066062415 0.8561094572953889 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.8263831226353524 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11295 interne); stringhe deallocate: 0 (11215 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.7695841877926029 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7751326025390278


ris (2 : 2): [ -1 0.7751326025390278 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11315 interne); stringhe deallocate: 0 (11235 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7751326025390278


ris (2 : 2): [ 1 0.7751326025390278 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11335 interne); stringhe deallocate: 0 (11255 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8281332148632725


ris (2 : 2): [ 1 0.8281332148632725 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11355 interne); stringhe deallocate: 0 (11275 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7751321881353768 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8402078827448598


ris (2 : 2): [ -1 0.8402078827448598 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11375 interne); stringhe deallocate: 0 (11295 interne)


Stringhe allocate: 1 (11375 interne); stringhe deallocate: 0 (11300 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2248673974609722 0.7751326025390278 0.8281332148632725 0.1597921172551402 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.6686509199613506 0.9999962463178935 0.9999989382991172 0.8486553315749424 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.8279547780025638 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11410 interne); stringhe deallocate: 0 (11330 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.7723450748448997 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7860046963639782


ris (2 : 2): [ -1 0.7860046963639782 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11430 interne); stringhe deallocate: 0 (11350 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7860046963639782


ris (2 : 2): [ 1 0.7860046963639782 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11450 interne); stringhe deallocate: 0 (11370 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8368276373512665


ris (2 : 2): [ 1 0.8368276373512665 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11470 interne); stringhe deallocate: 0 (11390 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7860045521796195 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8326069380057856


ris (2 : 2): [ -1 0.8326069380057856 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11490 interne); stringhe deallocate: 0 (11410 interne)


Stringhe allocate: 1 (11490 interne); stringhe deallocate: 0 (11415 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2139953036360218 0.7860046963639782 0.8368276373512665 0.1673930619942144 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.6374471736663481 0.9999969794298463 0.9999991056840725 0.8563557552577664 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.8282713977819114 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11525 interne); stringhe deallocate: 0 (11445 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.7843928424840669 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7860046963639782


ris (2 : 2): [ -1 0.7860046963639782 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11545 interne); stringhe deallocate: 0 (11465 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7860046963639782


ris (2 : 2): [ 1 0.7860046963639782 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11565 interne); stringhe deallocate: 0 (11485 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8368276373512665


ris (2 : 2): [ 1 0.8368276373512665 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11585 interne); stringhe deallocate: 0 (11505 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7860045521683698 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8326069380057856


ris (2 : 2): [ -1 0.8326069380057856 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11605 interne); stringhe deallocate: 0 (11525 interne)


Stringhe allocate: 1 (11605 interne); stringhe deallocate: 0 (11530 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2139953036360218 0.7860046963639782 0.8368276373512665 0.1673930619942144 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.6374471736663481 0.9999969794298463 0.9999991056840725 0.8563557552577664 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.826673993301938 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11640 interne); stringhe deallocate: 0 (11560 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.7860636798862331 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7913004823443396


ris (2 : 2): [ -1 0.7913004823443396 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11660 interne); stringhe deallocate: 0 (11580 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7913004823443396


ris (2 : 2): [ 1 0.7913004823443396 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11680 interne); stringhe deallocate: 0 (11600 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8410571363976562


ris (2 : 2): [ 1 0.8410571363976562 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11700 interne); stringhe deallocate: 0 (11620 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7913003056474084 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8285392746866903


ris (2 : 2): [ -1 0.8285392746866903 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11720 interne); stringhe deallocate: 0 (11640 interne)


Stringhe allocate: 1 (11720 interne); stringhe deallocate: 0 (11645 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2086995176556604 0.7913004823443396 0.8410571363976562 0.1714607253133097 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.6226237951194755 0.9999972827972821 0.9999991772949901 0.8605966791083251 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.8281593410495631 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11755 interne); stringhe deallocate: 0 (11675 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.7751321880348261 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7938009388138506


ris (2 : 2): [ -1 0.7938009388138506 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11775 interne); stringhe deallocate: 0 (11695 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7938009388138506


ris (2 : 2): [ 1 0.7938009388138506 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11795 interne); stringhe deallocate: 0 (11715 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8430485582097678


ris (2 : 2): [ 1 0.8430485582097678 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11815 interne); stringhe deallocate: 0 (11735 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7938008397049599 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8262532421854011


ris (2 : 2): [ -1 0.8262532421854011 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11835 interne); stringhe deallocate: 0 (11755 interne)


Stringhe allocate: 1 (11835 interne); stringhe deallocate: 0 (11760 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2061990611861494 0.7938009388138506 0.8430485582097678 0.1737467578145989 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.6157380660422898 0.9999974152513314 0.9999992089978809 0.8630115404980232 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.8281593410499628 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11870 interne); stringhe deallocate: 0 (11790 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.786004552078694 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8047134903378417


ris (2 : 2): [ -1 0.8047134903378417 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11890 interne); stringhe deallocate: 0 (11810 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8047134903378417


ris (2 : 2): [ 1 0.8047134903378417 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11910 interne); stringhe deallocate: 0 (11830 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8517394433084461


ris (2 : 2): [ 1 0.8517394433084461 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11930 interne); stringhe deallocate: 0 (11850 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8047132580708869 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8162751915241009


ris (2 : 2): [ -1 0.8162751915241009 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11950 interne); stringhe deallocate: 0 (11870 interne)


Stringhe allocate: 1 (11950 interne); stringhe deallocate: 0 (11875 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1952865096621583 0.8047134903378417 0.8517394433084461 0.1837248084758991 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.5867200635240294 0.9999979217472791 0.9999993336587448 0.873759166370239 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.8289847461704909 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (11985 interne); stringhe deallocate: 0 (11905 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.7860045520787224 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8062268751347883


ris (2 : 2): [ -1 0.8062268751347883 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12005 interne); stringhe deallocate: 0 (11925 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8062268751347883


ris (2 : 2): [ 1 0.8062268751347883 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12025 interne); stringhe deallocate: 0 (11945 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.852945307596895


ris (2 : 2): [ 1 0.852945307596895 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12045 interne); stringhe deallocate: 0 (11965 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8062267392105458 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8149169554191316


ris (2 : 2): [ -1 0.8149169554191316 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12065 interne); stringhe deallocate: 0 (11985 interne)


Stringhe allocate: 1 (12065 interne); stringhe deallocate: 0 (11990 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1937731248652117 0.8062268751347883 0.852945307596895 0.1850830445808684 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.5828450295746723 0.9999979836667776 0.9999993493275247 0.8752418101739595 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.8295102207188592 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12100 interne); stringhe deallocate: 0 (12020 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.7913003055577086 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7963257183729916


ris (2 : 2): [ -1 0.7963257183729916 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12120 interne); stringhe deallocate: 0 (12040 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.7963257183729916


ris (2 : 2): [ 1 0.7963257183729916 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12140 interne); stringhe deallocate: 0 (12060 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8450600010807494


ris (2 : 2): [ 1 0.8450600010807494 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12160 interne); stringhe deallocate: 0 (12080 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.7963256924576179 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8239943513446592


ris (2 : 2): [ -1 0.8239943513446592 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12180 interne); stringhe deallocate: 0 (12100 interne)


Stringhe allocate: 1 (12180 interne); stringhe deallocate: 0 (12105 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.2036742816270084 0.7963257183729916 0.8450600010807494 0.1760056486553409 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.6088681948064658 0.999997542443724 0.9999992397795114 0.8654174827108282 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.8319606868748473 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12215 interne); stringhe deallocate: 0 (12135 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.7938008396161393 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8061731569306082


ris (2 : 2): [ -1 0.8061731569306082 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12235 interne); stringhe deallocate: 0 (12155 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8061731569306082


ris (2 : 2): [ 1 0.8061731569306082 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12255 interne); stringhe deallocate: 0 (12175 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8528981706223073


ris (2 : 2): [ 1 0.8528981706223073 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12275 interne); stringhe deallocate: 0 (12195 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8061728566116742 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8147139122696002


ris (2 : 2): [ -1 0.8147139122696002 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12295 interne); stringhe deallocate: 0 (12215 interne)


Stringhe allocate: 1 (12295 interne); stringhe deallocate: 0 (12220 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1938268430693918 0.8061731569306082 0.8528981706223073 0.1852860877303998 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.5829819015744479 0.999997981500829 0.9999993487220122 0.8754637394625903 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.8323912708295183 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12330 interne); stringhe deallocate: 0 (12250 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.8047132579808149 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8061731569306082


ris (2 : 2): [ -1 0.8061731569306082 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12350 interne); stringhe deallocate: 0 (12270 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8061731569306082


ris (2 : 2): [ 1 0.8061731569306082 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12370 interne); stringhe deallocate: 0 (12290 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8528981706223073


ris (2 : 2): [ 1 0.8528981706223073 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12390 interne); stringhe deallocate: 0 (12310 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8061728566125472 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8147139122696002


ris (2 : 2): [ -1 0.8147139122696002 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12410 interne); stringhe deallocate: 0 (12330 interne)


Stringhe allocate: 1 (12410 interne); stringhe deallocate: 0 (12335 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1938268430693918 0.8061731569306082 0.8528981706223073 0.1852860877303998 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.5829819015744479 0.999997981500829 0.9999993487220122 0.8754637394625903 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.8300018398289595 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12445 interne); stringhe deallocate: 0 (12365 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.8062267391209375 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8109698337801439


ris (2 : 2): [ -1 0.8109698337801439 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12465 interne); stringhe deallocate: 0 (12385 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8109698337801439


ris (2 : 2): [ 1 0.8109698337801439 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12485 interne); stringhe deallocate: 0 (12405 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8567111326770001


ris (2 : 2): [ 1 0.8567111326770001 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12505 interne); stringhe deallocate: 0 (12425 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8109698384231576 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8098839832985578


ris (2 : 2): [ -1 0.8098839832985578 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12525 interne); stringhe deallocate: 0 (12445 interne)


Stringhe allocate: 1 (12525 interne); stringhe deallocate: 0 (12450 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1890301662198561 0.8109698337801439 0.8567111326770001 0.1901160167014422 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.5709622128449021 0.9999981660232958 0.9999993959271998 0.8807599511003206 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.8323130695347558 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12560 interne); stringhe deallocate: 0 (12480 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.7963256923680184 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8132346305641873


ris (2 : 2): [ -1 0.8132346305641873 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12580 interne); stringhe deallocate: 0 (12500 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8132346305641873


ris (2 : 2): [ 1 0.8132346305641873 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12600 interne); stringhe deallocate: 0 (12520 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8585064291762199


ris (2 : 2): [ 1 0.8585064291762199 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12620 interne); stringhe deallocate: 0 (12540 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8132343380875025 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8073004327706754


ris (2 : 2): [ -1 0.8073004327706754 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12640 interne); stringhe deallocate: 0 (12560 interne)


Stringhe allocate: 1 (12640 interne); stringhe deallocate: 0 (12565 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1867653694358127 0.8132346305641873 0.8585064291762199 0.1926995672293246 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.5654337912467127 0.9999982471871074 0.9999994169529899 0.883601502099577 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.8323130695347665 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12675 interne); stringhe deallocate: 0 (12595 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.806172856615845 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8231187106850731


ris (2 : 2): [ -1 0.8231187106850731 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12695 interne); stringhe deallocate: 0 (12615 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8231187106850731


ris (2 : 2): [ 1 0.8231187106850731 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12715 interne); stringhe deallocate: 0 (12635 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8663413931018303


ris (2 : 2): [ 1 0.8663413931018303 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12735 interne); stringhe deallocate: 0 (12655 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8231186955436147 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7960388018926057


ris (2 : 2): [ -1 0.7960388018926057 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12755 interne); stringhe deallocate: 0 (12675 interne)


Stringhe allocate: 1 (12755 interne); stringhe deallocate: 0 (12680 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1768812893149269 0.8231187106850731 0.8663413931018303 0.2039611981073943 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.5424801384685449 0.9999985613919377 0.9999995004742888 0.8959604094945914 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.8335766880977786 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12790 interne); stringhe deallocate: 0 (12710 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.8061728565221458 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8244894641500786


ris (2 : 2): [ -1 0.8244894641500786 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12810 interne); stringhe deallocate: 0 (12730 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8244894641500786


ris (2 : 2): [ 1 0.8244894641500786 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12830 interne); stringhe deallocate: 0 (12750 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8674284986062406


ris (2 : 2): [ 1 0.8674284986062406 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12850 interne); stringhe deallocate: 0 (12770 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8244891255325344 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7945030817380092


ris (2 : 2): [ -1 0.7945030817380092 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12870 interne); stringhe deallocate: 0 (12790 interne)


Stringhe allocate: 1 (12870 interne); stringhe deallocate: 0 (12795 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1755105358499214 0.8244894641500786 0.8674284986062406 0.2054969182619908 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.5394533539637566 0.9999986002694271 0.9999995110760185 0.8976322856244712 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.8343415348058372 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12905 interne); stringhe deallocate: 0 (12825 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.8109698383336763 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8155214581315459


ris (2 : 2): [ -1 0.8155214581315459 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12925 interne); stringhe deallocate: 0 (12845 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8155214581315459


ris (2 : 2): [ 1 0.8155214581315459 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12945 interne); stringhe deallocate: 0 (12865 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8603197752983884


ris (2 : 2): [ 1 0.8603197752983884 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12965 interne); stringhe deallocate: 0 (12885 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8155212490984756 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8047329724084632


ris (2 : 2): [ -1 0.8047329724084632 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (12985 interne); stringhe deallocate: 0 (12905 interne)


Stringhe allocate: 1 (12985 interne); stringhe deallocate: 0 (12910 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1844785418684541 0.8155214581315459 0.8603197752983884 0.1952670275915368 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.5599508602062382 0.9999983254964445 0.999999437447346 0.8864268786465767 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.8378071872716646 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13020 interne); stringhe deallocate: 0 (12940 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.8132343379978053 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8244408082791409


ris (2 : 2): [ -1 0.8244408082791409 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13040 interne); stringhe deallocate: 0 (12960 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8244408082791409


ris (2 : 2): [ 1 0.8244408082791409 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13060 interne); stringhe deallocate: 0 (12980 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8673860015754057


ris (2 : 2): [ 1 0.8673860015754057 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13080 interne); stringhe deallocate: 0 (13000 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8244404881424581 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7943450354946313


ris (2 : 2): [ -1 0.7943450354946313 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13100 interne); stringhe deallocate: 0 (13020 interne)


Stringhe allocate: 1 (13100 interne); stringhe deallocate: 0 (13025 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1755591917208591 0.8244408082791409 0.8673860015754057 0.2056549645053687 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.5395601235712371 0.9999985989075977 0.999999510665834 0.8978040473695282 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.8383607952121608 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13135 interne); stringhe deallocate: 0 (13055 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.8231186954505976 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8244408082791409


ris (2 : 2): [ -1 0.8244408082791409 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13155 interne); stringhe deallocate: 0 (13075 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8244408082791409


ris (2 : 2): [ 1 0.8244408082791409 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13175 interne); stringhe deallocate: 0 (13095 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8673860015754057


ris (2 : 2): [ 1 0.8673860015754057 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13195 interne); stringhe deallocate: 0 (13115 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8244404881426286 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7943450354946313


ris (2 : 2): [ -1 0.7943450354946313 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13215 interne); stringhe deallocate: 0 (13135 interne)


Stringhe allocate: 1 (13215 interne); stringhe deallocate: 0 (13140 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1755591917208591 0.8244408082791409 0.8673860015754057 0.2056549645053687 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.5395601235712371 0.9999985989075977 0.999999510665834 0.8978040473695282 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.8350730030067499 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13250 interne); stringhe deallocate: 0 (13170 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.8244891254429518 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8287854139059132


ris (2 : 2): [ -1 0.8287854139059132 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13270 interne); stringhe deallocate: 0 (13190 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8287854139059132


ris (2 : 2): [ 1 0.8287854139059132 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13290 interne); stringhe deallocate: 0 (13210 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8708234417636835


ris (2 : 2): [ 1 0.8708234417636835 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13310 interne); stringhe deallocate: 0 (13230 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8287849514943737 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7890346210042389


ris (2 : 2): [ -1 0.7890346210042389 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13330 interne); stringhe deallocate: 0 (13250 interne)


Stringhe allocate: 1 (13330 interne); stringhe deallocate: 0 (13255 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1712145860940868 0.8287854139059132 0.8708234417636835 0.2109653789957611 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.5302219371664761 0.9999987154355243 0.9999995427574531 0.9035366922077313 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.8383236019138991 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13365 interne); stringhe deallocate: 0 (13285 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.8155212490086541 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8308367606478178


ris (2 : 2): [ -1 0.8308367606478178 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13385 interne); stringhe deallocate: 0 (13305 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8308367606478178


ris (2 : 2): [ 1 0.8308367606478178 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13405 interne); stringhe deallocate: 0 (13325 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8724419259521175


ris (2 : 2): [ 1 0.8724419259521175 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13425 interne); stringhe deallocate: 0 (13345 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8308363049566658 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7862849702519738


ris (2 : 2): [ -1 0.7862849702519738 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13445 interne); stringhe deallocate: 0 (13365 interne)


Stringhe allocate: 1 (13445 interne); stringhe deallocate: 0 (13370 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1691632393521823 0.8308367606478178 0.8724419259521175 0.2137150297480263 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.5259513354275962 0.9999987670361058 0.9999995571300584 0.9064698929409207 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.8383236019139275 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13480 interne); stringhe deallocate: 0 (13400 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.8244404880528258 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8397892971143247


ris (2 : 2): [ -1 0.8397892971143247 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13500 interne); stringhe deallocate: 0 (13420 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8397892971143247


ris (2 : 2): [ 1 0.8397892971143247 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13520 interne); stringhe deallocate: 0 (13440 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8795052530330202


ris (2 : 2): [ 1 0.8795052530330202 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13540 interne); stringhe deallocate: 0 (13460 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8397889226019828 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.774301578692449


ris (2 : 2): [ -1 0.774301578692449 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13560 interne); stringhe deallocate: 0 (13480 interne)


Stringhe allocate: 1 (13560 interne); stringhe deallocate: 0 (13485 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1602107028856753 0.8397892971143247 0.8795052530330202 0.225698421307551 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.508364150082419 0.9999989690373417 0.999999614749336 0.918872280873267 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.8400654880528258 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13595 interne); stringhe deallocate: 0 (13515 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.8244404880536393 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8410308614149331


ris (2 : 2): [ -1 0.8410308614149331 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13615 interne); stringhe deallocate: 0 (13535 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8410308614149331


ris (2 : 2): [ 1 0.8410308614149331 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13635 interne); stringhe deallocate: 0 (13555 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8804852938621285


ris (2 : 2): [ 1 0.8804852938621285 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13655 interne); stringhe deallocate: 0 (13575 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8410306065506941 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7726627402063914


ris (2 : 2): [ -1 0.7726627402063914 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13675 interne); stringhe deallocate: 0 (13595 interne)


Stringhe allocate: 1 (13675 interne); stringhe deallocate: 0 (13600 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1589691385850669 0.8410308614149331 0.8804852938621285 0.2273372597936086 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.5060603066683674 0.9999989943051257 0.9999996221282439 0.9205107252625916 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.8410677997601823 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13710 interne); stringhe deallocate: 0 (13630 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.8287849514012251 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8329080618787477


ris (2 : 2): [ -1 0.8329080618787477 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13730 interne); stringhe deallocate: 0 (13650 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8329080618787477


ris (2 : 2): [ 1 0.8329080618787477 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13750 interne); stringhe deallocate: 0 (13670 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8740766823106695


ris (2 : 2): [ 1 0.8740766823106695 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13770 interne); stringhe deallocate: 0 (13690 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8329076855607385 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7835415431547598


ris (2 : 2): [ -1 0.7835415431547598 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13790 interne); stringhe deallocate: 0 (13710 interne)


Stringhe allocate: 1 (13790 interne); stringhe deallocate: 0 (13715 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1670919381212523 0.8329080618787477 0.8740766823106695 0.2164584568452402 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.5217300271070303 0.9999988170357919 0.9999995711886011 0.9093677642447313 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.8455267040257368 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13825 interne); stringhe deallocate: 0 (13745 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.8308363048558007 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8409867909525118


ris (2 : 2): [ -1 0.8409867909525118 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13845 interne); stringhe deallocate: 0 (13765 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8409867909525118


ris (2 : 2): [ 1 0.8409867909525118 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13865 interne); stringhe deallocate: 0 (13785 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8804469809183348


ris (2 : 2): [ 1 0.8804469809183348 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13885 interne); stringhe deallocate: 0 (13805 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8409867375321083 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7725487348082935


ris (2 : 2): [ -1 0.7725487348082935 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13905 interne); stringhe deallocate: 0 (13825 interne)


Stringhe allocate: 1 (13905 interne); stringhe deallocate: 0 (13830 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1590132090474882 0.8409867909525118 0.8804469809183348 0.2274512651917066 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.506141521327419 0.9999989934189142 0.999999621842451 0.9206241214404546 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.8461928455357324 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13940 interne); stringhe deallocate: 0 (13860 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.8397889225010751 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8409867909525118


ris (2 : 2): [ -1 0.8409867909525118 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13960 interne); stringhe deallocate: 0 (13880 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8409867909525118


ris (2 : 2): [ 1 0.8409867909525118 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (13980 interne); stringhe deallocate: 0 (13900 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8804469809183348


ris (2 : 2): [ 1 0.8804469809183348 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14000 interne); stringhe deallocate: 0 (13920 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8409867375325568 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7725487348082935


ris (2 : 2): [ -1 0.7725487348082935 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14020 interne); stringhe deallocate: 0 (13940 interne)


Stringhe allocate: 1 (14020 interne); stringhe deallocate: 0 (13945 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1590132090474882 0.8409867909525118 0.8804469809183348 0.2274512651917066 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.506141521327419 0.9999989934189142 0.999999621842451 0.9206241214404546 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.8420415012364266 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14055 interne); stringhe deallocate: 0 (13975 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.8410306065548099 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8449219307685474


ris (2 : 2): [ -1 0.8449219307685474 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14075 interne); stringhe deallocate: 0 (13995 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8449219307685474


ris (2 : 2): [ 1 0.8449219307685474 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14095 interne); stringhe deallocate: 0 (14015 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8835458787653437


ris (2 : 2): [ 1 0.8835458787653437 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14115 interne); stringhe deallocate: 0 (14035 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8449215977615712 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7669960797623806


ris (2 : 2): [ -1 0.7669960797623806 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14135 interne); stringhe deallocate: 0 (14055 interne)


Stringhe allocate: 1 (14135 interne); stringhe deallocate: 0 (14060 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1550780692314526 0.8449219307685474 0.8835458787653437 0.2330039202376194 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4990523396176363 0.9999990695522292 0.9999996442743557 0.926050682756849 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.8461937993038333 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14170 interne); stringhe deallocate: 0 (14090 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.8329076854711204 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8467799441606605


ris (2 : 2): [ -1 0.8467799441606605 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14190 interne); stringhe deallocate: 0 (14110 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8467799441606605


ris (2 : 2): [ 1 0.8467799441606605 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14210 interne); stringhe deallocate: 0 (14130 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8850049628492861


ris (2 : 2): [ 1 0.8850049628492861 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14230 interne); stringhe deallocate: 0 (14150 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8467798321670905 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7641837236434843


ris (2 : 2): [ -1 0.7641837236434843 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14250 interne); stringhe deallocate: 0 (14170 interne)


Stringhe allocate: 1 (14250 interne); stringhe deallocate: 0 (14175 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1532200558393395 0.8467799441606605 0.8850049628492861 0.2358162763565157 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4958189091430436 0.9999991034705537 0.9999996543705007 0.9287232241249801 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.8461937992101341 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14285 interne); stringhe deallocate: 0 (14205 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.840986737442563 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8548330067525097


ris (2 : 2): [ -1 0.8548330067525097 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14305 interne); stringhe deallocate: 0 (14225 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.854888730664873


ris (2 : 2): [ 1 0.854888730664873 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14325 interne); stringhe deallocate: 0 (14245 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8913726424066834


ris (2 : 2): [ 1 0.8913726424066834 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14345 interne); stringhe deallocate: 0 (14265 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8548884480423382 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7519244452136656


ris (2 : 2): [ -1 0.7519244452136656 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14365 interne); stringhe deallocate: 0 (14285 interne)


Stringhe allocate: 1 (14365 interne); stringhe deallocate: 0 (14290 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1451669932474903 0.854888730664873 0.8913726424066834 0.2480755547863344 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4826348756707551 0.9999992376037009 0.9999996951826453 0.9397155949775572 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.8483734218602876 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14400 interne); stringhe deallocate: 0 (14320 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.8409867374423854 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8555865986352433


ris (2 : 2): [ -1 0.8555865986352433 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14420 interne); stringhe deallocate: 0 (14340 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8560132812576599


ris (2 : 2): [ 1 0.8560132812576599 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14440 interne); stringhe deallocate: 0 (14360 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8922561619255479


ris (2 : 2): [ 1 0.8922561619255479 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14460 interne); stringhe deallocate: 0 (14380 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8560128300622543 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7502416420187144


ris (2 : 2): [ -1 0.7502416420187144 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14480 interne); stringhe deallocate: 0 (14400 interne)


Stringhe allocate: 1 (14480 interne); stringhe deallocate: 0 (14405 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1444134013647567 0.8560132812576599 0.8922561619255479 0.2497583579812857 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4814690916739106 0.9999992545478935 0.999999700450973 0.941136148983809 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.8495702831271998 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14515 interne); stringhe deallocate: 0 (14435 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.8449215976722773 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8486560314141783


ris (2 : 2): [ -1 0.8486560314141783 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14535 interne); stringhe deallocate: 0 (14455 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8486560314141783


ris (2 : 2): [ 1 0.8486560314141783 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14555 interne); stringhe deallocate: 0 (14475 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.886478716611484


ris (2 : 2): [ 1 0.886478716611484 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14575 interne); stringhe deallocate: 0 (14495 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8486557095474252 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7613580992959012


ris (2 : 2): [ -1 0.7613580992959012 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14595 interne); stringhe deallocate: 0 (14515 interne)


Stringhe allocate: 1 (14595 interne); stringhe deallocate: 0 (14520 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1513439685858217 0.8486560314141783 0.886478716611484 0.2386419007040989 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4926275155623169 0.999999136464421 0.9999996642772977 0.9313538181923127 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.8548326580055292 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14630 interne); stringhe deallocate: 0 (14550 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.8467798320774733 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8556116844784997


ris (2 : 2): [ -1 0.8556116844784997 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14650 interne); stringhe deallocate: 0 (14570 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8559733641481736


ris (2 : 2): [ 1 0.8559733641481736 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14670 interne); stringhe deallocate: 0 (14590 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8922216215787752


ris (2 : 2): [ 1 0.8922216215787752 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14690 interne); stringhe deallocate: 0 (14610 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8559732525772485 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.750160238974298


ris (2 : 2): [ -1 0.750160238974298 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14710 interne); stringhe deallocate: 0 (14630 interne)


Stringhe allocate: 1 (14710 interne); stringhe deallocate: 0 (14635 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1443883155215003 0.8559733641481736 0.8922216215787752 0.2498397610257021 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4814304815978491 0.9999992539529379 0.9999997002467334 0.9412043059009454 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.8555865375523268 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14745 interne); stringhe deallocate: 0 (14665 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.8548884479527459 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8556116844784997


ris (2 : 2): [ -1 0.8556116844784997 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14765 interne); stringhe deallocate: 0 (14685 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8559733641481736


ris (2 : 2): [ 1 0.8559733641481736 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14785 interne); stringhe deallocate: 0 (14705 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8922216215787752


ris (2 : 2): [ 1 0.8922216215787752 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14805 interne); stringhe deallocate: 0 (14725 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8559732525809682 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.750160238974298


ris (2 : 2): [ -1 0.750160238974298 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14825 interne); stringhe deallocate: 0 (14745 interne)


Stringhe allocate: 1 (14825 interne); stringhe deallocate: 0 (14750 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1443883155215003 0.8559733641481736 0.8922216215787752 0.2498397610257021 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4814304815978491 0.9999992539529379 0.9999997002467334 0.9412043059009454 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.8507461635594353 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14860 interne); stringhe deallocate: 0 (14780 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.8560128299717711 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8581183155491464


ris (2 : 2): [ -1 0.8581183155491464 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14880 interne); stringhe deallocate: 0 (14800 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8595376285321682


ris (2 : 2): [ 1 0.8595376285321682 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14900 interne); stringhe deallocate: 0 (14820 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8950153166905023


ris (2 : 2): [ 1 0.8950153166905023 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14920 interne); stringhe deallocate: 0 (14840 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8595376103347805 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7445591757606309


ris (2 : 2): [ -1 0.7445591757606309 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14940 interne); stringhe deallocate: 0 (14860 interne)


Stringhe allocate: 1 (14940 interne); stringhe deallocate: 0 (14865 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1418816844508536 0.8595376285321682 0.8950153166905023 0.2554408242393691 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4776360590058288 0.9999993052499027 0.9999997163244456 0.9457682403171382 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.8556113330845641 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14975 interne); stringhe deallocate: 0 (14895 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.8486557094586686 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8594394116121862


ris (2 : 2): [ -1 0.8594394116121862 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (14995 interne); stringhe deallocate: 0 (14915 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8612205294717941


ris (2 : 2): [ 1 0.8612205294717941 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15015 interne); stringhe deallocate: 0 (14935 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8963306987093203


ris (2 : 2): [ 1 0.8963306987093203 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15035 interne); stringhe deallocate: 0 (14955 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8612203686663467 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7418010064026906


ris (2 : 2): [ -1 0.7418010064026906 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15055 interne); stringhe deallocate: 0 (14975 interne)


Stringhe allocate: 1 (15055 interne); stringhe deallocate: 0 (14980 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1405605883878138 0.8612205294717941 0.8963306987093203 0.2581989935973094 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4756865063140779 0.9999993282291843 0.9999997235929814 0.9479236313473402 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.8556113330853776 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15090 interne); stringhe deallocate: 0 (15010 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.8559732524876509 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8652020234012208


ris (2 : 2): [ -1 0.8652020234012208 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15110 interne); stringhe deallocate: 0 (15030 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8685650860577533


ris (2 : 2): [ 1 0.8685650860577533 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15130 interne); stringhe deallocate: 0 (15050 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9020712393421183


ris (2 : 2): [ 1 0.9020712393421183 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15150 interne); stringhe deallocate: 0 (15070 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8685650914139425 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7297098501106091


ris (2 : 2): [ -1 0.7297098501106091 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15170 interne); stringhe deallocate: 0 (15090 interne)


Stringhe allocate: 1 (15170 interne); stringhe deallocate: 0 (15095 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1347979765987792 0.8685650860577533 0.9020712393421183 0.2702901498893909 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4675796847190653 0.9999994199428383 0.9999997531958055 0.9566471323152015 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.8581180660252485 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15205 interne); stringhe deallocate: 0 (15125 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.8559732524876367 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8659989387896713


ris (2 : 2): [ -1 0.8659989387896713 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15225 interne); stringhe deallocate: 0 (15145 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8695836509996509


ris (2 : 2): [ 1 0.8695836509996509 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15245 interne); stringhe deallocate: 0 (15165 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9028677430559754


ris (2 : 2): [ 1 0.9028677430559754 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15265 interne); stringhe deallocate: 0 (15185 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8695836155840349 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7280018104278592


ris (2 : 2): [ -1 0.7280018104278592 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15285 interne); stringhe deallocate: 0 (15205 interne)


Stringhe allocate: 1 (15285 interne); stringhe deallocate: 0 (15210 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1340010612103287 0.8695836509996509 0.9028677430559754 0.2719981895721408 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4665084737952747 0.999999431631886 0.9999997570446393 0.9577844569998776 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.8594393817906152 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15320 interne); stringhe deallocate: 0 (15240 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.8595376102452157 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.860749975505275


ris (2 : 2): [ -1 0.860749975505275 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15340 interne); stringhe deallocate: 0 (15260 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8629198008782075


ris (2 : 2): [ 1 0.8629198008782075 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15360 interne); stringhe deallocate: 0 (15280 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8976593056869291


ris (2 : 2): [ 1 0.8976593056869291 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15380 interne); stringhe deallocate: 0 (15300 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8629193394643444 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7390414219016551


ris (2 : 2): [ -1 0.7390414219016551 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15400 interne); stringhe deallocate: 0 (15320 interne)


Stringhe allocate: 1 (15400 interne); stringhe deallocate: 0 (15325 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.139250024494725 0.8629198008782075 0.8976593056869291 0.2609585780983449 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4737863980082487 0.9999993506609023 0.9999997307455544 0.9500187371039356 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.8652019588475106 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15435 interne); stringhe deallocate: 0 (15355 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.8612203686702884 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8660460733425138


ris (2 : 2): [ -1 0.8660460733425138 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15455 interne); stringhe deallocate: 0 (15375 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8695474958638958


ris (2 : 2): [ 1 0.8695474958638958 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15475 interne); stringhe deallocate: 0 (15395 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9028366040750943


ris (2 : 2): [ 1 0.9028366040750943 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15495 interne); stringhe deallocate: 0 (15415 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8695473759710701 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7280495637492195


ris (2 : 2): [ -1 0.7280495637492195 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15515 interne); stringhe deallocate: 0 (15435 interne)


Stringhe allocate: 1 (15515 interne); stringhe deallocate: 0 (15440 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1339539266574862 0.8695474958638958 0.9028366040750943 0.2719504362507805 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4664454889360786 0.9999994312210303 0.9999997568953043 0.9577529765630048 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.8659987538326419 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15550 interne); stringhe deallocate: 0 (15470 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.8685650913243919 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8660460733425138


ris (2 : 2): [ -1 0.8660460733425138 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15570 interne); stringhe deallocate: 0 (15490 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8695474958638958


ris (2 : 2): [ 1 0.8695474958638958 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15590 interne); stringhe deallocate: 0 (15510 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9028366040750943


ris (2 : 2): [ 1 0.9028366040750943 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15610 interne); stringhe deallocate: 0 (15530 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8695473759711234 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7280495637492195


ris (2 : 2): [ -1 0.7280495637492195 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15630 interne); stringhe deallocate: 0 (15550 interne)


Stringhe allocate: 1 (15630 interne); stringhe deallocate: 0 (15555 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1339539266574862 0.8695474958638958 0.9028366040750943 0.2719504362507805 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4664454889360786 0.9999994312210303 0.9999997568953043 0.9577529765630048 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.8607497303014426 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15665 interne); stringhe deallocate: 0 (15585 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.8695836154943208 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.868731764809664


ris (2 : 2): [ -1 0.868731764809664 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15685 interne); stringhe deallocate: 0 (15605 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8727758384045796


ris (2 : 2): [ 1 0.8727758384045796 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15705 interne); stringhe deallocate: 0 (15625 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9053551536967527


ris (2 : 2): [ 1 0.9053551536967527 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15725 interne); stringhe deallocate: 0 (15645 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8727755635209089 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7225970192514076


ris (2 : 2): [ -1 0.7225970192514076 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15745 interne); stringhe deallocate: 0 (15665 interne)


Stringhe allocate: 1 (15745 interne); stringhe deallocate: 0 (15670 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.131268235190336 0.8727758384045796 0.9053551536967527 0.2774029807485924 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4629248566259508 0.9999994667612604 0.9999997686820508 0.9612306126166946 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.8660459606176119 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15780 interne); stringhe deallocate: 0 (15700 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.8629193393710963 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8701007021850545


ris (2 : 2): [ -1 0.8701007021850545 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15800 interne); stringhe deallocate: 0 (15720 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8743001306103184


ris (2 : 2): [ 1 0.8743001306103184 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15820 interne); stringhe deallocate: 0 (15740 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9065409860375303


ris (2 : 2): [ 1 0.9065409860375303 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15840 interne); stringhe deallocate: 0 (15760 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8743000119157189 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7199160466287549


ris (2 : 2): [ -1 0.7199160466287549 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15860 interne); stringhe deallocate: 0 (15780 interne)


Stringhe allocate: 1 (15860 interne); stringhe deallocate: 0 (15785 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1298992978149455 0.8743001306103184 0.9065409860375303 0.2800839533712451 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4611813209006478 0.9999994827614098 0.9999997740321105 0.9628550148317365 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.8660459606174342 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15895 interne); stringhe deallocate: 0 (15815 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.8695473758705195 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8760659065187481


ris (2 : 2): [ -1 0.8760659065187481 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15915 interne); stringhe deallocate: 0 (15835 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8809524831836482


ris (2 : 2): [ 1 0.8809524831836482 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15935 interne); stringhe deallocate: 0 (15855 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9117161509574949


ris (2 : 2): [ 1 0.9117161509574949 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15955 interne); stringhe deallocate: 0 (15875 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.880952367109745 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7081836739729918


ris (2 : 2): [ -1 0.7081836739729918 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (15975 interne); stringhe deallocate: 0 (15895 interne)


Stringhe allocate: 1 (15975 interne); stringhe deallocate: 0 (15900 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.123934093481252 0.8809524831836482 0.9117161509574949 0.2918163260270082 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4539738884816521 0.9999995471557546 0.9999997959693217 0.9693233970941606 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.8687315074928339 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16010 interne); stringhe deallocate: 0 (15930 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.8695473758701979 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8768894367382556


ris (2 : 2): [ -1 0.8768894367382556 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16030 interne); stringhe deallocate: 0 (15950 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8818750512301601


ris (2 : 2): [ 1 0.8818750512301601 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16050 interne); stringhe deallocate: 0 (15970 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9124342084934074


ris (2 : 2): [ 1 0.9124342084934074 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16070 interne); stringhe deallocate: 0 (15990 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8818750470113166 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7065399786641573


ris (2 : 2): [ -1 0.7065399786641573 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16090 interne); stringhe deallocate: 0 (16010 interne)


Stringhe allocate: 1 (16090 interne); stringhe deallocate: 0 (16015 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1231105632617444 0.8818750512301601 0.9124342084934074 0.2934600213358427 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4530274534858709 0.9999995554291215 0.9999997988399628 0.9701492759680733 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.8701005069737136 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16125 interne); stringhe deallocate: 0 (16045 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.8727755634312615 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8714657218265517


ris (2 : 2): [ -1 0.8714657218265517 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16145 interne); stringhe deallocate: 0 (16065 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8758392504217674


ris (2 : 2): [ 1 0.8758392504217674 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16165 interne); stringhe deallocate: 0 (16085 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9077387408744518


ris (2 : 2): [ 1 0.9077387408744518 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16185 interne); stringhe deallocate: 0 (16105 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8758392422623036 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.717229808875815


ris (2 : 2): [ -1 0.717229808875815 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16205 interne); stringhe deallocate: 0 (16125 interne)


Stringhe allocate: 1 (16205 interne); stringhe deallocate: 0 (16130 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1285342781734483 0.8758392504217674 0.9077387408744518 0.282770191124185 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4594765187253507 0.9999994984301277 0.9999997793103586 0.9644270262815864 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.8760657398228631 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16240 interne); stringhe deallocate: 0 (16160 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.8743000118260191 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.876917049026957


ris (2 : 2): [ -1 0.876917049026957 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16260 interne); stringhe deallocate: 0 (16180 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8818423035506087


ris (2 : 2): [ 1 0.8818423035506087 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16280 interne); stringhe deallocate: 0 (16200 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9124061360681953


ris (2 : 2): [ 1 0.9124061360681953 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16300 interne); stringhe deallocate: 0 (16220 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8818421452469245 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7065657984418214


ris (2 : 2): [ -1 0.7065657984418214 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16320 interne); stringhe deallocate: 0 (16240 interne)


Stringhe allocate: 1 (16320 interne); stringhe deallocate: 0 (16245 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.123082950973043 0.8818423035506087 0.9124061360681953 0.2934342015581786 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4529959200685323 0.9999995551380521 0.9999997987284974 0.9701364503161499 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.8768892375950621 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16355 interne); stringhe deallocate: 0 (16275 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.8809523670209245 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.876917049026957


ris (2 : 2): [ -1 0.876917049026957 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16375 interne); stringhe deallocate: 0 (16295 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8818423035506087


ris (2 : 2): [ 1 0.8818423035506087 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16395 interne); stringhe deallocate: 0 (16315 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9124061360681953


ris (2 : 2): [ 1 0.9124061360681953 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16415 interne); stringhe deallocate: 0 (16335 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8818421452469281 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7065657984418214


ris (2 : 2): [ -1 0.7065657984418214 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16435 interne); stringhe deallocate: 0 (16355 interne)


Stringhe allocate: 1 (16435 interne); stringhe deallocate: 0 (16360 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.123082950973043 0.8818423035506087 0.9124061360681953 0.2934342015581786 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4529959200685323 0.9999995551380521 0.9999997987284974 0.9701364503161499 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.8714656917584733 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16470 interne); stringhe deallocate: 0 (16390 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.8818750469212446 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8796470349039557


ris (2 : 2): [ -1 0.8796470349039557 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16490 interne); stringhe deallocate: 0 (16410 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8847663837096454


ris (2 : 2): [ 1 0.8847663837096454 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16510 interne); stringhe deallocate: 0 (16430 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9146766378530683


ris (2 : 2): [ 1 0.9146766378530683 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16530 interne); stringhe deallocate: 0 (16450 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8847661107019027 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.7012807085741553


ris (2 : 2): [ -1 0.7012807085741553 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16550 interne); stringhe deallocate: 0 (16470 interne)


Stringhe allocate: 1 (16550 interne); stringhe deallocate: 0 (16475 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1203529650960443 0.8847663837096454 0.9146766378530683 0.2987192914258448 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4499414777946181 0.9999995803913853 0.999999807547283 0.9726654653498593 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.8769168941502485 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16585 interne); stringhe deallocate: 0 (16505 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.8758392421726953 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8810054065972978


ris (2 : 2): [ -1 0.8810054065972978 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16605 interne); stringhe deallocate: 0 (16525 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8861470155268368


ris (2 : 2): [ 1 0.8861470155268368 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16625 interne); stringhe deallocate: 0 (16545 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9157456793064154


ris (2 : 2): [ 1 0.9157456793064154 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16645 interne); stringhe deallocate: 0 (16565 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8861465542739877 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6986904680374598


ris (2 : 2): [ -1 0.6986904680374598 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16665 interne); stringhe deallocate: 0 (16585 interne)


Stringhe allocate: 1 (16665 interne); stringhe deallocate: 0 (16590 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1189945934027022 0.8861470155268368 0.9157456793064154 0.3013095319625402 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4484676444340343 0.9999995918116709 0.999999811564666 0.9738359143532802 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.8769168941502343 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16700 interne); stringhe deallocate: 0 (16620 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.8818421451573251 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8869228630149233


ris (2 : 2): [ -1 0.8869228630149233 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16720 interne); stringhe deallocate: 0 (16640 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8921724020036765


ris (2 : 2): [ 1 0.8921724020036765 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16740 interne); stringhe deallocate: 0 (16660 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9204111498908668


ris (2 : 2): [ 1 0.9204111498908668 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16760 interne); stringhe deallocate: 0 (16680 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8921723454422388 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6873688417372381


ris (2 : 2): [ -1 0.6873688417372381 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16780 interne); stringhe deallocate: 0 (16700 interne)


Stringhe allocate: 1 (16780 interne); stringhe deallocate: 0 (16705 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1130771369850767 0.8921724020036765 0.9204111498908668 0.3126311582627619 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4423911580888266 0.9999996381233698 0.9999998281382729 0.9784510544336996 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.8796467868809579 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16815 interne); stringhe deallocate: 0 (16735 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.8818421452510989 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8877393259645549


ris (2 : 2): [ -1 0.8877393259645549 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16835 interne); stringhe deallocate: 0 (16755 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8930080205362687


ris (2 : 2): [ 1 0.8930080205362687 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16855 interne); stringhe deallocate: 0 (16775 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9210584870431968


ris (2 : 2): [ 1 0.9210584870431968 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16875 interne); stringhe deallocate: 0 (16795 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8930077641471304 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6857919189824985


ris (2 : 2): [ -1 0.6857919189824985 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16895 interne); stringhe deallocate: 0 (16815 interne)


Stringhe allocate: 1 (16895 interne); stringhe deallocate: 0 (16820 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1122606740354452 0.8930080205362687 0.9210584870431968 0.3142080810175015 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4415953742889983 0.9999996441168622 0.9999998303196778 0.9790326668575023 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.8810052960384525 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16930 interne); stringhe deallocate: 0 (16850 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.8847661106115012 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8823651868255524


ris (2 : 2): [ -1 0.8823651868255524 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16950 interne); stringhe deallocate: 0 (16870 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8875410774948851


ris (2 : 2): [ 1 0.8875410774948851 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16970 interne); stringhe deallocate: 0 (16890 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9168254690523164


ris (2 : 2): [ 1 0.9168254690523164 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (16990 interne); stringhe deallocate: 0 (16910 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8875408261245754 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6960915879577089


ris (2 : 2): [ -1 0.6960915879577089 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17010 interne); stringhe deallocate: 0 (16930 interne)


Stringhe allocate: 1 (17010 interne); stringhe deallocate: 0 (16935 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1176348131744476 0.8875410774948851 0.9168254690523164 0.3039084120422911 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4470223015729758 0.9999996030277056 0.999999815537316 0.9749661134249646 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.886922845078054 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17045 interne); stringhe deallocate: 0 (16965 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.8861465541845064 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8877510563938593


ris (2 : 2): [ -1 0.8877510563938593 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17065 interne); stringhe deallocate: 0 (16985 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8929783591932536


ris (2 : 2): [ 1 0.8929783591932536 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17085 interne); stringhe deallocate: 0 (17005 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9210331792614577


ris (2 : 2): [ 1 0.9210331792614577 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17105 interne); stringhe deallocate: 0 (17025 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.892978200239833 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6858058033762779


ris (2 : 2): [ -1 0.6858058033762779 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17125 interne); stringhe deallocate: 0 (17045 interne)


Stringhe allocate: 1 (17125 interne); stringhe deallocate: 0 (17050 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1122489436061407 0.8929783591932536 0.9210331792614577 0.3141941966237221 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4415840143553988 0.9999996439058246 0.9999998302349176 0.9790276081023438 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.8877391902929048 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17160 interne); stringhe deallocate: 0 (17080 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.8921723453525416 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8877510563938593


ris (2 : 2): [ -1 0.8877510563938593 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17180 interne); stringhe deallocate: 0 (17100 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8929783591932536


ris (2 : 2): [ 1 0.8929783591932536 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17200 interne); stringhe deallocate: 0 (17120 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9210331792614577


ris (2 : 2): [ 1 0.9210331792614577 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17220 interne); stringhe deallocate: 0 (17140 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.892978200239626 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6858058033762779


ris (2 : 2): [ -1 0.6858058033762779 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17240 interne); stringhe deallocate: 0 (17160 interne)


Stringhe allocate: 1 (17240 interne); stringhe deallocate: 0 (17165 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1122489436061407 0.8929783591932536 0.9210331792614577 0.3141941966237221 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4415840143553988 0.9999996439058246 0.9999998302349176 0.9790276081023438 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.8823647586826198 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17275 interne); stringhe deallocate: 0 (17195 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.8930077640541132 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8904241447597915


ris (2 : 2): [ -1 0.8904241447597915 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17295 interne); stringhe deallocate: 0 (17215 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8956268527111022


ris (2 : 2): [ 1 0.8956268527111022 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17315 interne); stringhe deallocate: 0 (17235 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9230800624728227


ris (2 : 2): [ 1 0.9230800624728227 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17335 interne); stringhe deallocate: 0 (17255 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8956265538164567 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6807155532610122


ris (2 : 2): [ -1 0.6807155532610122 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17355 interne); stringhe deallocate: 0 (17275 interne)


Stringhe allocate: 1 (17355 interne); stringhe deallocate: 0 (17280 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1095758552402085 0.8956268527111022 0.9230800624728227 0.3192844467389878 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4390488311316197 0.9999996622649918 0.9999998369553547 0.9808101018951427 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.8877506343849237 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17390 interne); stringhe deallocate: 0 (17310 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.8875408260349929 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8917313471491524


ris (2 : 2): [ -1 0.8917313471491524 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17410 interne); stringhe deallocate: 0 (17330 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8968773636808187


ris (2 : 2): [ 1 0.8968773636808187 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17430 interne); stringhe deallocate: 0 (17350 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9240438153867818


ris (2 : 2): [ 1 0.9240438153867818 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17450 interne); stringhe deallocate: 0 (17370 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.89687729768578 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6782303396092778


ris (2 : 2): [ -1 0.6782303396092778 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17470 interne); stringhe deallocate: 0 (17390 interne)


Stringhe allocate: 1 (17470 interne); stringhe deallocate: 0 (17395 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1082686528508476 0.8968773636808187 0.9240438153867818 0.3217696603907222 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4378472291330517 0.9999996706014315 0.9999998400268267 0.9816294007626819 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.8877506343846022 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17505 interne); stringhe deallocate: 0 (17425 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.8929782001500115 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8974265596070333


ris (2 : 2): [ -1 0.8974265596070333 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17525 interne); stringhe deallocate: 0 (17445 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.902334873644379


ris (2 : 2): [ 1 0.902334873644379 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17545 interne); stringhe deallocate: 0 (17465 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9282497897187126


ris (2 : 2): [ 1 0.9282497897187126 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17565 interne); stringhe deallocate: 0 (17485 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.902334698969117 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6673757300572917


ris (2 : 2): [ -1 0.6673757300572917 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17585 interne); stringhe deallocate: 0 (17505 interne)


Stringhe allocate: 1 (17585 interne); stringhe deallocate: 0 (17510 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1025734403929667 0.902334873644379 0.9282497897187126 0.3326242699427083 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4328933247313636 0.9999997046406031 0.9999998527681129 0.9848451473831976 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.8904237834935174 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17620 interne); stringhe deallocate: 0 (17540 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.8929782001499937 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8982126929139003


ris (2 : 2): [ -1 0.8982126929139003 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17640 interne); stringhe deallocate: 0 (17560 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9030917373780686


ris (2 : 2): [ 1 0.9030917373780686 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17660 interne); stringhe deallocate: 0 (17580 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9288333714852739


ris (2 : 2): [ 1 0.9288333714852739 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17680 interne); stringhe deallocate: 0 (17600 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9030914395392387 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6658692341586662


ris (2 : 2): [ -1 0.6658692341586662 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17700 interne); stringhe deallocate: 0 (17620 interne)


Stringhe allocate: 1 (17700 interne); stringhe deallocate: 0 (17625 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1017873070860997 0.9030917373780686 0.9288333714852739 0.3341307658413338 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4322442960069352 0.9999997090748594 0.9999998544539003 0.9852477857328644 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.8917312709812926 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17735 interne); stringhe deallocate: 0 (17655 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.8956265537274675 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8930436168165065


ris (2 : 2): [ -1 0.8930436168165065 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17755 interne); stringhe deallocate: 0 (17675 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.8981400390501647


ris (2 : 2): [ 1 0.8981400390501647 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17775 interne); stringhe deallocate: 0 (17695 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9250172580241138


ris (2 : 2): [ 1 0.9250172580241138 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17795 interne); stringhe deallocate: 0 (17715 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.8981399624772077 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6757340074492216


ris (2 : 2): [ -1 0.6757340074492216 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17815 interne); stringhe deallocate: 0 (17735 interne)


Stringhe allocate: 1 (17815 interne); stringhe deallocate: 0 (17740 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1069563831834935 0.8981400390501647 0.9250172580241138 0.3242659925507784 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4366656484529588 0.9999996788101974 0.9999998430704471 0.9824200853114453 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.8974261371625261 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17850 interne); stringhe deallocate: 0 (17770 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.8968772975926314 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8982122070845602


ris (2 : 2): [ -1 0.8982122070845602 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17870 interne); stringhe deallocate: 0 (17790 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.903064871507904


ris (2 : 2): [ 1 0.903064871507904 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17890 interne); stringhe deallocate: 0 (17810 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9288105561263625


ris (2 : 2): [ 1 0.9288105561263625 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17910 interne); stringhe deallocate: 0 (17830 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9030647366471643 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6658784647761898


ris (2 : 2): [ -1 0.6658784647761898 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17930 interne); stringhe deallocate: 0 (17850 interne)


Stringhe allocate: 1 (17930 interne); stringhe deallocate: 0 (17855 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1017877929154398 0.903064871507904 0.9288105561263625 0.3341215352238102 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4322446945718115 0.999999708918605 0.9999998543883578 0.985245349296253 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.8982124416356001 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17965 interne); stringhe deallocate: 0 (17885 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9023346988682519 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.8982122070845602


ris (2 : 2): [ -1 0.8982122070845602 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (17985 interne); stringhe deallocate: 0 (17905 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.903064871507904


ris (2 : 2): [ 1 0.903064871507904 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18005 interne); stringhe deallocate: 0 (17925 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9288105561263625


ris (2 : 2): [ 1 0.9288105561263625 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18025 interne); stringhe deallocate: 0 (17945 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9030647366470985 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6658784647761898


ris (2 : 2): [ -1 0.6658784647761898 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18045 interne); stringhe deallocate: 0 (17965 interne)


Stringhe allocate: 1 (18045 interne); stringhe deallocate: 0 (17970 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.1017877929154398 0.903064871507904 0.9288105561263625 0.3341215352238102 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4322446945718115 0.999999708918605 0.9999998543883578 0.985245349296253 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.893043526840664 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18080 interne); stringhe deallocate: 0 (18000 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9030914394383309 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9007610246674113


ris (2 : 2): [ -1 0.9007610246674113 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18100 interne); stringhe deallocate: 0 (18020 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9054637515766679


ris (2 : 2): [ 1 0.9054637515766679 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18120 interne); stringhe deallocate: 0 (18040 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9306558442792257


ris (2 : 2): [ 1 0.9306558442792257 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18140 interne); stringhe deallocate: 0 (18060 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.905463704390467 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6610088979349973


ris (2 : 2): [ -1 0.6610088979349973 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18160 interne); stringhe deallocate: 0 (18080 interne)


Stringhe allocate: 1 (18160 interne); stringhe deallocate: 0 (18085 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.09923897533258874 0.9054637515766679 0.9306558442792257 0.3389911020650027 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4301961970642713 0.9999997225451719 0.9999998595952034 0.9864797955590832 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.8982119647984383 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18195 interne); stringhe deallocate: 0 (18115 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.8981399624813236 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9019921297905278


ris (2 : 2): [ -1 0.9019921297905278 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18215 interne); stringhe deallocate: 0 (18135 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9065964051987759


ris (2 : 2): [ 1 0.9065964051987759 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18235 interne); stringhe deallocate: 0 (18155 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.931524678245905


ris (2 : 2): [ 1 0.931524678245905 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18255 interne); stringhe deallocate: 0 (18175 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9065961926407216 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.658640263166117


ris (2 : 2): [ -1 0.658640263166117 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18275 interne); stringhe deallocate: 0 (18195 interne)


Stringhe allocate: 1 (18275 interne); stringhe deallocate: 0 (18200 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.09800787020947221 0.9065964051987759 0.931524678245905 0.341359736833883 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4292367026488552 0.9999997287555201 0.9999998619819077 0.9870446360975919 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.8982119648922122 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18310 interne); stringhe deallocate: 0 (18230 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9030647365575462 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9073573096367102


ris (2 : 2): [ -1 0.9073573096367102 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18330 interne); stringhe deallocate: 0 (18250 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9115395593052273


ris (2 : 2): [ 1 0.9115395593052273 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18350 interne); stringhe deallocate: 0 (18270 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9353164108912393


ris (2 : 2): [ 1 0.9353164108912393 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18370 interne); stringhe deallocate: 0 (18290 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9115395634598151 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6482989456641195


ris (2 : 2): [ -1 0.6482989456641195 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18390 interne); stringhe deallocate: 0 (18310 interne)


Stringhe allocate: 1 (18390 interne); stringhe deallocate: 0 (18315 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.09264269036328976 0.9115395593052273 0.9353164108912393 0.3517010543358805 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4252739031627933 0.999999754272042 0.9999998719319498 0.9892600289904873 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9007606594091087 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18425 interne); stringhe deallocate: 0 (18345 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9030647365575533 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9080986007181852


ris (2 : 2): [ -1 0.9080986007181852 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18445 interne); stringhe deallocate: 0 (18365 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9122250906412514


ris (2 : 2): [ 1 0.9122250906412514 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18465 interne); stringhe deallocate: 0 (18385 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9358425163615768


ris (2 : 2): [ 1 0.9358425163615768 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18485 interne); stringhe deallocate: 0 (18405 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9122247784561566 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6468664500089528


ris (2 : 2): [ -1 0.6468664500089528 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18505 interne); stringhe deallocate: 0 (18425 interne)


Stringhe allocate: 1 (18505 interne); stringhe deallocate: 0 (18430 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.09190139928181484 0.9122250906412514 0.9358425163615768 0.3531335499910472 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4247534289750228 0.9999997576158635 0.9999998732546418 0.9895369495829739 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9019918529515962 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18540 interne); stringhe deallocate: 0 (18460 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9054637043002956 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9032304761604134


ris (2 : 2): [ -1 0.9032304761604134 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18560 interne); stringhe deallocate: 0 (18480 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9077400767611646


ris (2 : 2): [ 1 0.9077400767611646 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18580 interne); stringhe deallocate: 0 (18500 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9324022476168759


ris (2 : 2): [ 1 0.9324022476168759 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18600 interne); stringhe deallocate: 0 (18520 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9077396481469711 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.656258936366113


ris (2 : 2): [ -1 0.656258936366113 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18620 interne); stringhe deallocate: 0 (18540 interne)


Stringhe allocate: 1 (18620 interne); stringhe deallocate: 0 (18545 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.09676952383958659 0.9077400767611646 0.9324022476168759 0.343741063633887 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4282908135604088 0.9999997348852474 0.9999998643514256 0.9875900791653288 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9073572246555202 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18655 interne); stringhe deallocate: 0 (18575 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9065961925514277 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9080894653010643


ris (2 : 2): [ -1 0.9080894653010643 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18675 interne); stringhe deallocate: 0 (18595 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9122007567880264


ris (2 : 2): [ 1 0.9122007567880264 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18695 interne); stringhe deallocate: 0 (18615 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9358219479903244


ris (2 : 2): [ 1 0.9358219479903244 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18715 interne); stringhe deallocate: 0 (18635 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9122004597610482 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6468751717490846


ris (2 : 2): [ -1 0.6468751717490846 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18735 interne); stringhe deallocate: 0 (18655 interne)


Stringhe allocate: 1 (18735 interne); stringhe deallocate: 0 (18660 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.09191053469893573 0.9122007567880264 0.9358219479903244 0.3531248282509154 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4247598042601004 0.9999997574979527 0.9999998732031881 0.9895352843087807 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9080982295997675 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18770 interne); stringhe deallocate: 0 (18690 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9115395633701979 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9080894653010643


ris (2 : 2): [ -1 0.9080894653010643 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18790 interne); stringhe deallocate: 0 (18710 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9122007567880264


ris (2 : 2): [ 1 0.9122007567880264 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18810 interne); stringhe deallocate: 0 (18730 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9358219479903244


ris (2 : 2): [ 1 0.9358219479903244 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18830 interne); stringhe deallocate: 0 (18750 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9122004597610864 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6468751717490846


ris (2 : 2): [ -1 0.6468751717490846 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18850 interne); stringhe deallocate: 0 (18770 interne)


Stringhe allocate: 1 (18850 interne); stringhe deallocate: 0 (18775 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.09191053469893573 0.9122007567880264 0.9358219479903244 0.3531248282509154 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4247598042601004 0.9999997574979527 0.9999998732031881 0.9895352843087807 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9032301990513503 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18885 interne); stringhe deallocate: 0 (18805 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9122247783665642 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9104746547847629


ris (2 : 2): [ -1 0.9104746547847629 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18905 interne); stringhe deallocate: 0 (18825 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9143735487374834


ris (2 : 2): [ 1 0.9143735487374834 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18925 interne); stringhe deallocate: 0 (18845 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9374854956926935


ris (2 : 2): [ 1 0.9374854956926935 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18945 interne); stringhe deallocate: 0 (18865 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9143734066947378 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6422456799273437


ris (2 : 2): [ -1 0.6422456799273437 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (18965 interne); stringhe deallocate: 0 (18885 interne)


Stringhe allocate: 1 (18965 interne); stringhe deallocate: 0 (18890 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.08952534521523714 0.9143735487374834 0.9374854956926935 0.3577543200726563 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4231277163146965 0.9999997678034941 0.9999998772979842 0.9903845600793787 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9080891696934685 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19000 interne); stringhe deallocate: 0 (18920 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9077396480564879 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9116166468567499


ris (2 : 2): [ -1 0.9116166468567499 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19020 interne); stringhe deallocate: 0 (18940 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9153994527258442


ris (2 : 2): [ 1 0.9153994527258442 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19040 interne); stringhe deallocate: 0 (18960 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9382687590763975


ris (2 : 2): [ 1 0.9382687590763975 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19060 interne); stringhe deallocate: 0 (18980 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9153990834182766 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6400012173741713


ris (2 : 2): [ -1 0.6400012173741713 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19080 interne); stringhe deallocate: 0 (19000 interne)


Stringhe allocate: 1 (19080 interne); stringhe deallocate: 0 (19005 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.08838335314325008 0.9153994527258442 0.9382687590763975 0.3599987826258287 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4223689839912415 0.9999997725159859 0.9999998791799212 0.9907721953576301 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9080891696934508 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19115 interne); stringhe deallocate: 0 (19035 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9122004596722917 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9165949991782724


ris (2 : 2): [ -1 0.9165949991782724 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19135 interne); stringhe deallocate: 0 (19055 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.919876727523904


ris (2 : 2): [ 1 0.919876727523904 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19155 interne); stringhe deallocate: 0 (19075 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9416870478048519


ris (2 : 2): [ 1 0.9416870478048519 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19175 interne); stringhe deallocate: 0 (19095 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9198765843340713 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.630203930985174


ris (2 : 2): [ -1 0.630203930985174 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19195 interne); stringhe deallocate: 0 (19115 interne)


Stringhe allocate: 1 (19195 interne); stringhe deallocate: 0 (19120 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.08340500082172764 0.919876727523904 0.9416870478048519 0.369796069014826 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4192262017515399 0.9999997919880179 0.9999998870609028 0.9922954716054184 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9104743091595964 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19230 interne); stringhe deallocate: 0 (19150 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9122004596714888 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9172836020183977


ris (2 : 2): [ -1 0.9172836020183977 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19250 interne); stringhe deallocate: 0 (19170 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9204976493326454


ris (2 : 2): [ 1 0.9204976493326454 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19270 interne); stringhe deallocate: 0 (19190 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9421613376897208


ris (2 : 2): [ 1 0.9421613376897208 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19290 interne); stringhe deallocate: 0 (19210 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9204974263138448 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.628848032590186


ris (2 : 2): [ -1 0.628848032590186 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19310 interne); stringhe deallocate: 0 (19230 interne)


Stringhe allocate: 1 (19310 interne); stringhe deallocate: 0 (19235 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.08271639798160235 0.9204976493326454 0.9421613376897208 0.371151967409814 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4188119167308185 0.9999997945534841 0.9999998881129979 0.9924861653468269 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9116163341526899 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19345 interne); stringhe deallocate: 0 (19265 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9143734066014062 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9127669498159264


ris (2 : 2): [ -1 0.9127669498159264 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19365 interne); stringhe deallocate: 0 (19285 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9164353362446917


ris (2 : 2): [ 1 0.9164353362446917 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19385 interne); stringhe deallocate: 0 (19305 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9390598975305973


ris (2 : 2): [ 1 0.9390598975305973 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19405 interne); stringhe deallocate: 0 (19325 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9164352505632829 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6377432303369311


ris (2 : 2): [ -1 0.6377432303369311 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19425 interne); stringhe deallocate: 0 (19345 interne)


Stringhe allocate: 1 (19425 interne); stringhe deallocate: 0 (19350 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.08723305018407357 0.9164353362446917 0.9390598975305973 0.3622567696630689 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4216192546353543 0.9999997771772838 0.9999998810514801 0.9911470316685084 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9165949909214746 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19460 interne); stringhe deallocate: 0 (19380 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9153990833287118 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9172689308830373


ris (2 : 2): [ -1 0.9172689308830373 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19480 interne); stringhe deallocate: 0 (19400 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9204756088670947


ris (2 : 2): [ 1 0.9204756088670947 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19500 interne); stringhe deallocate: 0 (19420 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9421427950285362


ris (2 : 2): [ 1 0.9421427950285362 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19520 interne); stringhe deallocate: 0 (19440 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9204754918080944 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6288580469200664


ris (2 : 2): [ -1 0.6288580469200664 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19540 interne); stringhe deallocate: 0 (19460 interne)


Stringhe allocate: 1 (19540 interne); stringhe deallocate: 0 (19465 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.08273106911696271 0.9204756088670947 0.9421427950285362 0.3711419530799336 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4188206930162464 0.9999997944629633 0.9999998880720502 0.9924847737878068 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9172835437779305 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19575 interne); stringhe deallocate: 0 (19495 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.919876584338013 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9172689308830373


ris (2 : 2): [ -1 0.9172689308830373 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19595 interne); stringhe deallocate: 0 (19515 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9204756088670947


ris (2 : 2): [ 1 0.9204756088670947 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19615 interne); stringhe deallocate: 0 (19535 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9421427950285362


ris (2 : 2): [ 1 0.9421427950285362 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19635 interne); stringhe deallocate: 0 (19555 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9204754918157967 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6288580469200664


ris (2 : 2): [ -1 0.6288580469200664 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19655 interne); stringhe deallocate: 0 (19575 interne)


Stringhe allocate: 1 (19655 interne); stringhe deallocate: 0 (19580 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.08273106911696271 0.9204756088670947 0.9421427950285362 0.3711419530799336 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4188206930162464 0.9999997944629633 0.9999998880720502 0.9924847737878068 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9127669423092044 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19690 interne); stringhe deallocate: 0 (19610 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9204974262242942 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9194716717933715


ris (2 : 2): [ -1 0.9194716717933715 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19710 interne); stringhe deallocate: 0 (19630 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9224436208551181


ris (2 : 2): [ 1 0.9224436208551181 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19730 interne); stringhe deallocate: 0 (19650 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9436425015347806


ris (2 : 2): [ 1 0.9436425015347806 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19750 interne); stringhe deallocate: 0 (19670 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9224433987677543 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6244802939390348


ris (2 : 2): [ -1 0.6244802939390348 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19770 interne); stringhe deallocate: 0 (19690 interne)


Stringhe allocate: 1 (19770 interne); stringhe deallocate: 0 (19695 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.08052832820662847 0.9224436208551181 0.9436425015347806 0.3755197060609652 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4175271999307386 0.9999998023904904 0.9999998913359134 0.9930699198443296 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9172687618261008 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19805 interne); stringhe deallocate: 0 (19725 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9164352504735689 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9205197484875286


ris (2 : 2): [ -1 0.9205197484875286 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19825 interne); stringhe deallocate: 0 (19745 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9233728360619583


ris (2 : 2): [ 1 0.9233728360619583 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19845 interne); stringhe deallocate: 0 (19765 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9443486220294617


ris (2 : 2): [ 1 0.9443486220294617 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19865 interne); stringhe deallocate: 0 (19785 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9233727543778425 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6223637374128661


ris (2 : 2): [ -1 0.6223637374128661 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19885 interne); stringhe deallocate: 0 (19805 interne)


Stringhe allocate: 1 (19885 interne); stringhe deallocate: 0 (19810 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.0794802515124714 0.9233728360619583 0.9443486220294617 0.3776362625871339 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4169285754494225 0.9999998060265473 0.9999998928395406 0.9933367571158063 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.917268761826108 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19920 interne); stringhe deallocate: 0 (19840 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9204754917148463 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9250899325861859


ris (2 : 2): [ -1 0.9250899325861859 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19940 interne); stringhe deallocate: 0 (19860 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.927428139362635


ris (2 : 2): [ 1 0.927428139362635 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19960 interne); stringhe deallocate: 0 (19880 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9474302466602876


ris (2 : 2): [ 1 0.9474302466602876 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (19980 interne); stringhe deallocate: 0 (19900 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9274277775712365 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6131255354128598


ris (2 : 2): [ -1 0.6131255354128598 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20000 interne); stringhe deallocate: 0 (19920 interne)


Stringhe allocate: 1 (20000 interne); stringhe deallocate: 0 (19925 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.07491006741381412 0.927428139362635 0.9474302466602876 0.3868744645871403 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4144401992225669 0.9999998211279619 0.999999899161824 0.9943891160243149 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9194712726596706 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20035 interne); stringhe deallocate: 0 (19955 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.920475491715246 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9257227235620396


ris (2 : 2): [ -1 0.9257227235620396 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20055 interne); stringhe deallocate: 0 (19975 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9279905409089468


ris (2 : 2): [ 1 0.9279905409089468 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20075 interne); stringhe deallocate: 0 (19995 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9478578241799022


ris (2 : 2): [ 1 0.9478578241799022 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20095 interne); stringhe deallocate: 0 (20015 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9279904454178505 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.611847456778683


ris (2 : 2): [ -1 0.611847456778683 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20115 interne); stringhe deallocate: 0 (20035 interne)


Stringhe allocate: 1 (20115 interne); stringhe deallocate: 0 (20040 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.07427727643796045 0.9279905409089468 0.9478578241799022 0.388152543221317 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4141108070702869 0.9999998231272874 0.999999900009064 0.9945213135276785 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9205193607338007 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20150 interne); stringhe deallocate: 0 (20070 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9224433986668288 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9215764678798935


ris (2 : 2): [ -1 0.9215764678798935 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20170 interne); stringhe deallocate: 0 (20090 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9243110902560636


ris (2 : 2): [ 1 0.9243110902560636 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20190 interne); stringhe deallocate: 0 (20110 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9450618419912688


ris (2 : 2): [ 1 0.9450618419912688 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20210 interne); stringhe deallocate: 0 (20130 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9243106930684455 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6202333699996463


ris (2 : 2): [ -1 0.6202333699996463 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20230 interne); stringhe deallocate: 0 (20150 interne)


Stringhe allocate: 1 (20230 interne); stringhe deallocate: 0 (20155 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.07842353212010655 0.9243110902560636 0.9450618419912688 0.3797666300003537 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4163357654250574 0.9999998096300945 0.9999998943371653 0.993595258764285 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9250898448948561 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20265 interne); stringhe deallocate: 0 (20185 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9233727542881951 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9257049544340147


ris (2 : 2): [ -1 0.9257049544340147 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20285 interne); stringhe deallocate: 0 (20205 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9279705776898086


ris (2 : 2): [ 1 0.9279705776898086 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20305 interne); stringhe deallocate: 0 (20225 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.94784110773537


ris (2 : 2): [ 1 0.94784110773537 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20325 interne); stringhe deallocate: 0 (20245 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9279704182571766 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6118592014740713


ris (2 : 2): [ -1 0.6118592014740713 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20345 interne); stringhe deallocate: 0 (20265 interne)


Stringhe allocate: 1 (20345 interne); stringhe deallocate: 0 (20270 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.07429504556598532 0.9279705776898086 0.94784110773537 0.3881407985259288 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4141200076195591 0.9999998230567027 0.9999998999760746 0.9945201126649196 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9257226078038201 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20380 interne); stringhe deallocate: 0 (20300 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9274277774815367 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9257049544340147


ris (2 : 2): [ -1 0.9257049544340147 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20400 interne); stringhe deallocate: 0 (20320 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9279705776898086


ris (2 : 2): [ 1 0.9279705776898086 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20420 interne); stringhe deallocate: 0 (20340 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.94784110773537


ris (2 : 2): [ 1 0.94784110773537 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20440 interne); stringhe deallocate: 0 (20360 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9279704182571784 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6118592014740713


ris (2 : 2): [ -1 0.6118592014740713 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20460 interne); stringhe deallocate: 0 (20380 interne)


Stringhe allocate: 1 (20460 interne); stringhe deallocate: 0 (20385 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.07429504556598532 0.9279705776898086 0.94784110773537 0.3881407985259288 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4141200076195591 0.9999998230567027 0.9999998999760746 0.9945201126649196 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.921576031876068 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20495 interne); stringhe deallocate: 0 (20415 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.92799044532903 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9277202474684657


ris (2 : 2): [ -1 0.9277202474684657 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20515 interne); stringhe deallocate: 0 (20435 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.929753109655716


ris (2 : 2): [ 1 0.929753109655716 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20535 interne); stringhe deallocate: 0 (20455 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9491931094895123


ris (2 : 2): [ 1 0.9491931094895123 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20555 interne); stringhe deallocate: 0 (20475 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9297528355545452 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6077377757882393


ris (2 : 2): [ -1 0.6077377757882393 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20575 interne); stringhe deallocate: 0 (20495 interne)


Stringhe allocate: 1 (20575 interne); stringhe deallocate: 0 (20500 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.07227975253153429 0.929753109655716 0.9491931094895123 0.3922622242117607 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4130943197897483 0.9999998292495635 0.999999902609362 0.9949261200480931 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9257044879926042 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20610 interne); stringhe deallocate: 0 (20530 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9243106929783735 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9286748739821383


ris (2 : 2): [ -1 0.9286748739821383 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20630 interne); stringhe deallocate: 0 (20550 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9305947487319941


ris (2 : 2): [ 1 0.9305947487319941 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20650 interne); stringhe deallocate: 0 (20570 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9498296847805796


ris (2 : 2): [ 1 0.9498296847805796 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20670 interne); stringhe deallocate: 0 (20590 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9305944531396468 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6057496520457751


ris (2 : 2): [ -1 0.6057496520457751 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20690 interne); stringhe deallocate: 0 (20610 interne)


Stringhe allocate: 1 (20690 interne); stringhe deallocate: 0 (20615 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.07132512601786167 0.9305947487319941 0.9498296847805796 0.3942503479542249 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4126208049620689 0.9999998320977814 0.9999999038250991 0.9951113129367857 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9257044879918013 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20725 interne); stringhe deallocate: 0 (20645 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9279704181675683 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9328384760938782


ris (2 : 2): [ -1 0.9328384760938782 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20745 interne); stringhe deallocate: 0 (20665 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9342678501841658


ris (2 : 2): [ 1 0.9342678501841658 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20765 interne); stringhe deallocate: 0 (20685 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9526078028435691


ris (2 : 2): [ 1 0.9526078028435691 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20785 interne); stringhe deallocate: 0 (20705 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9342675297683725 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5970722509631656


ris (2 : 2): [ -1 0.5970722509631656 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20805 interne); stringhe deallocate: 0 (20725 interne)


Stringhe allocate: 1 (20805 interne); stringhe deallocate: 0 (20730 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.06716152390612185 0.9342678501841658 0.9526078028435691 0.4029277490368344 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4106449889664058 0.9999998439822229 0.999999908955604 0.9958450480755686 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9277200786595117 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20840 interne); stringhe deallocate: 0 (20760 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.927970418167579 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9334154651185177


ris (2 : 2): [ -1 0.9334154651185177 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20860 interne); stringhe deallocate: 0 (20780 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9347772468406507


ris (2 : 2): [ 1 0.9347772468406507 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20880 interne); stringhe deallocate: 0 (20800 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.952993268624743


ris (2 : 2): [ 1 0.952993268624743 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20900 interne); stringhe deallocate: 0 (20820 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9347767918533716 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5958718302747226


ris (2 : 2): [ -1 0.5958718302747226 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20920 interne); stringhe deallocate: 0 (20840 interne)


Stringhe allocate: 1 (20920 interne); stringhe deallocate: 0 (20845 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.06658453488148231 0.9347772468406507 0.952993268624743 0.4041281697252774 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4103823215699403 0.9999998455625767 0.9999999096455037 0.9959376419982771 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.928674706650245 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20955 interne); stringhe deallocate: 0 (20875 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9297528355587161 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9296380180377648


ris (2 : 2): [ -1 0.9296380180377648 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20975 interne); stringhe deallocate: 0 (20895 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9314445748954888


ris (2 : 2): [ 1 0.9314445748954888 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (20995 interne); stringhe deallocate: 0 (20915 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9504726603218636


ris (2 : 2): [ 1 0.9504726603218636 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21015 interne); stringhe deallocate: 0 (20935 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9314441769584096 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.6037478095136557


ris (2 : 2): [ -1 0.6037478095136557 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21035 interne); stringhe deallocate: 0 (20955 interne)


Stringhe allocate: 1 (21035 interne); stringhe deallocate: 0 (20960 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.0703619819622352 0.9314445748954888 0.9504726603218636 0.3962521904863443 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4121509451510234 0.9999998349255026 0.9999999050376542 0.9952910975591764 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9328384488094486 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21070 interne); stringhe deallocate: 0 (20990 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9305944530492454 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9333963456127559


ris (2 : 2): [ -1 0.9333963456127559 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21090 interne); stringhe deallocate: 0 (21010 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9347591650959812


ris (2 : 2): [ 1 0.9347591650959812 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21110 interne); stringhe deallocate: 0 (21030 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9529781985455754


ris (2 : 2): [ 1 0.9529781985455754 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21130 interne); stringhe deallocate: 0 (21050 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9347591488784817 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5958851000192644


ris (2 : 2): [ -1 0.5958851000192644 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21150 interne); stringhe deallocate: 0 (21070 interne)


Stringhe allocate: 1 (21150 interne); stringhe deallocate: 0 (21075 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.06660365438724414 0.9347591650959812 0.9529781985455754 0.4041148999807356 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.410390983130765 0.9999998455067549 0.9999999096186301 0.9959366296028462 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9334154216771751 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21185 interne); stringhe deallocate: 0 (21105 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9342675296788912 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9333963456127559


ris (2 : 2): [ -1 0.9333963456127559 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21205 interne); stringhe deallocate: 0 (21125 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9347591650959812


ris (2 : 2): [ 1 0.9347591650959812 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21225 interne); stringhe deallocate: 0 (21145 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9529781985455754


ris (2 : 2): [ 1 0.9529781985455754 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21245 interne); stringhe deallocate: 0 (21165 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.934759148878749 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5958851000192644


ris (2 : 2): [ -1 0.5958851000192644 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21265 interne); stringhe deallocate: 0 (21185 interne)


Stringhe allocate: 1 (21265 interne); stringhe deallocate: 0 (21190 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.06660365438724414 0.9347591650959812 0.9529781985455754 0.4041148999807356 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.410390983130765 0.9999998455067549 0.9999999096186301 0.9959366296028462 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.929637917709897 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21300 interne); stringhe deallocate: 0 (21220 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9347767917636745 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9352278752050429


ris (2 : 2): [ -1 0.9352278752050429 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21320 interne); stringhe deallocate: 0 (21240 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.936373698023683


ris (2 : 2): [ 1 0.936373698023683 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21340 interne); stringhe deallocate: 0 (21260 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9541970427748192


ris (2 : 2): [ 1 0.9541970427748192 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21360 interne); stringhe deallocate: 0 (21280 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9363732426590596 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5920188952319755


ris (2 : 2): [ -1 0.5920188952319755 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21380 interne); stringhe deallocate: 0 (21300 interne)


Stringhe allocate: 1 (21380 interne); stringhe deallocate: 0 (21305 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.06477212479495709 0.936373698023683 0.9541970427748192 0.4079811047680245 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4095742791695899 0.9999998504124583 0.9999999117665217 0.9962213525969319 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9333963481906764 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21415 interne); stringhe deallocate: 0 (21335 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9314441768653925 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9360926784510929


ris (2 : 2): [ -1 0.9360926784510929 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21435 interne); stringhe deallocate: 0 (21355 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9371360147821527


ris (2 : 2): [ 1 0.9371360147821527 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21455 interne); stringhe deallocate: 0 (21375 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9547709222767645


ris (2 : 2): [ 1 0.9547709222767645 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21475 interne); stringhe deallocate: 0 (21395 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.937135705275197 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5901572977693328


ris (2 : 2): [ -1 0.5901572977693328 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21495 interne); stringhe deallocate: 0 (21415 interne)


Stringhe allocate: 1 (21495 interne); stringhe deallocate: 0 (21420 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.0639073215489071 0.9371360147821527 0.9547709222767645 0.4098427022306672 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4091976683214819 0.9999998526742873 0.9999999127600836 0.9963513598510897 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9333963481910761 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21530 interne); stringhe deallocate: 0 (21450 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9347591487888991 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9398651505463274


ris (2 : 2): [ -1 0.9398651505463274 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21550 interne); stringhe deallocate: 0 (21470 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9404629358727749


ris (2 : 2): [ 1 0.9404629358727749 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21570 interne); stringhe deallocate: 0 (21490 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9572754257274542


ris (2 : 2): [ 1 0.9572754257274542 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21590 interne); stringhe deallocate: 0 (21510 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9404625981313366 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5820321337501609


ris (2 : 2): [ -1 0.5820321337501609 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21610 interne); stringhe deallocate: 0 (21530 interne)


Stringhe allocate: 1 (21610 interne); stringhe deallocate: 0 (21535 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.06013484945367265 0.9404629358727749 0.9572754257274542 0.4179678662498391 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4076201579345334 0.999999862151822 0.9999999169668346 0.9968691023451808 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9352278797154128 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21645 interne); stringhe deallocate: 0 (21565 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9347591487889275 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9403882934681558


ris (2 : 2): [ -1 0.9403882934681558 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21665 interne); stringhe deallocate: 0 (21585 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9409243232060368


ris (2 : 2): [ 1 0.9409243232060368 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21685 interne); stringhe deallocate: 0 (21605 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9576229272974294


ris (2 : 2): [ 1 0.9576229272974294 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21705 interne); stringhe deallocate: 0 (21625 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9409241765081795 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5809080270815157


ris (2 : 2): [ -1 0.5809080270815157 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21725 interne); stringhe deallocate: 0 (21645 interne)


Stringhe allocate: 1 (21725 interne); stringhe deallocate: 0 (21650 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.05961170653184422 0.9409243232060368 0.9576229272974294 0.4190919729184843 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4074095638686906 0.9999998634171379 0.9999999175342718 0.9969347750706461 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9360923854832635 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21760 interne); stringhe deallocate: 0 (21680 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9363732425694273 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9369656102382159


ris (2 : 2): [ -1 0.9369656102382159 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21780 interne); stringhe deallocate: 0 (21700 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9379057470167572


ris (2 : 2): [ 1 0.9379057470167572 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21800 interne); stringhe deallocate: 0 (21720 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9553505716759264


ris (2 : 2): [ 1 0.9553505716759264 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21820 interne); stringhe deallocate: 0 (21740 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9379053204596488 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5882823247566696


ris (2 : 2): [ -1 0.5882823247566696 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21840 interne); stringhe deallocate: 0 (21760 interne)


Stringhe allocate: 1 (21840 interne); stringhe deallocate: 0 (21765 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.0630343897617841 0.9379057470167572 0.9553505716759264 0.4117176752433304 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4088232725894841 0.9999998549234195 0.9999999137522779 0.9964778505588077 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9398651210789488 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21875 interne); stringhe deallocate: 0 (21795 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9371357051862077 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9403689916303835


ris (2 : 2): [ -1 0.9403689916303835 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21895 interne); stringhe deallocate: 0 (21815 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9409079456139301


ris (2 : 2): [ 1 0.9409079456139301 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21915 interne); stringhe deallocate: 0 (21835 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9576093414420208


ris (2 : 2): [ 1 0.9576093414420208 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21935 interne); stringhe deallocate: 0 (21855 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.940907487196446 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5809223904451958


ris (2 : 2): [ -1 0.5809223904451958 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21955 interne); stringhe deallocate: 0 (21875 interne)


Stringhe allocate: 1 (21955 interne); stringhe deallocate: 0 (21880 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.05963100836961655 0.9409079456139301 0.9576093414420208 0.4190776095548042 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4074172994046892 0.9999998633724232 0.9999999175121603 0.9969339445644802 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9403882114423112 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (21990 interne); stringhe deallocate: 0 (21910 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.940462598038188 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9403689916303835


ris (2 : 2): [ -1 0.9403689916303835 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22010 interne); stringhe deallocate: 0 (21930 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9409079456139301


ris (2 : 2): [ 1 0.9409079456139301 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22030 interne); stringhe deallocate: 0 (21950 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9576093414420208


ris (2 : 2): [ 1 0.9576093414420208 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22050 interne); stringhe deallocate: 0 (21970 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9409074871964807 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5809223904451958


ris (2 : 2): [ -1 0.5809223904451958 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22070 interne); stringhe deallocate: 0 (21990 interne)


Stringhe allocate: 1 (22070 interne); stringhe deallocate: 0 (21995 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.05963100836961655 0.9409079456139301 0.9576093414420208 0.4190776095548042 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4074172994046892 0.9999998633724232 0.9999999175121603 0.9969339445644802 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9369654743199263 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22105 interne); stringhe deallocate: 0 (22025 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9409241764073144 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9420255300816884


ris (2 : 2): [ -1 0.9420255300816884 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22125 interne); stringhe deallocate: 0 (22045 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9423703129595296


ris (2 : 2): [ 1 0.9423703129595296 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22145 interne); stringhe deallocate: 0 (22065 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9587081426616412


ris (2 : 2): [ 1 0.9587081426616412 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22165 interne); stringhe deallocate: 0 (22085 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9423699467606239 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5773060697507608


ris (2 : 2): [ -1 0.5773060697507608 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22185 interne); stringhe deallocate: 0 (22105 interne)


Stringhe allocate: 1 (22185 interne); stringhe deallocate: 0 (22110 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.05797446991831157 0.9423703129595296 0.9587081426616412 0.4226939302492392 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4067629301867392 0.9999998673078946 0.9999999192814819 0.99713618761742 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9403686611180078 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22220 interne); stringhe deallocate: 0 (22140 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9379053203587411 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9428058856587436


ris (2 : 2): [ -1 0.9428058856587436 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22240 interne); stringhe deallocate: 0 (22160 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9430607833163398


ris (2 : 2): [ 1 0.9430607833163398 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22260 interne); stringhe deallocate: 0 (22180 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9592255012085426


ris (2 : 2): [ 1 0.9592255012085426 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22280 interne); stringhe deallocate: 0 (22200 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9430604069661506 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5755673614706303


ris (2 : 2): [ -1 0.5755673614706303 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22300 interne); stringhe deallocate: 0 (22220 interne)


Stringhe allocate: 1 (22300 interne); stringhe deallocate: 0 (22225 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.05719411434125643 0.9430607833163398 0.9592255012085426 0.4244326385293697 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4064612579837289 0.9999998691264647 0.9999999201013563 0.9972286791145559 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9403686611180184 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22335 interne); stringhe deallocate: 0 (22255 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9409074872005618 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.946074150617583


ris (2 : 2): [ -1 0.946074150617583 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22355 interne); stringhe deallocate: 0 (22275 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.946074150617583


ris (2 : 2): [ 1 0.946074150617583 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22375 interne); stringhe deallocate: 0 (22295 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9614833380249144


ris (2 : 2): [ 1 0.9614833380249144 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22395 interne); stringhe deallocate: 0 (22315 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9460740178055165 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5679784783256267


ris (2 : 2): [ -1 0.5679784783256267 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22415 interne); stringhe deallocate: 0 (22335 interne)


Stringhe allocate: 1 (22415 interne); stringhe deallocate: 0 (22340 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.05392584938241696 0.946074150617583 0.9614833380249144 0.4320215216743734 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4052422222545069 0.9999998767758177 0.9999999235830503 0.9975990005892361 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.94202519349939 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22450 interne); stringhe deallocate: 0 (22370 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9409074871068626 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9464920533775038


ris (2 : 2): [ -1 0.9464920533775038 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22470 interne); stringhe deallocate: 0 (22390 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9464920533775038


ris (2 : 2): [ 1 0.9464920533775038 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22490 interne); stringhe deallocate: 0 (22410 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9617966144327295


ris (2 : 2): [ 1 0.9617966144327295 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22510 interne); stringhe deallocate: 0 (22430 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9464917271561042 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5669275874649771


ris (2 : 2): [ -1 0.5669275874649771 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22530 interne); stringhe deallocate: 0 (22450 interne)


Stringhe allocate: 1 (22530 interne); stringhe deallocate: 0 (22455 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.05350794662249625 0.9464920533775038 0.9617966144327295 0.4330724125350229 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4050913940942544 0.9999998778007422 0.9999999240539985 0.9976462633330201 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9428057758336692 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22565 interne); stringhe deallocate: 0 (22485 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9423699466710787 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9435938408210006


ris (2 : 2): [ -1 0.9435938408210006 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22585 interne); stringhe deallocate: 0 (22505 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9437579702602678


ris (2 : 2): [ 1 0.9437579702602678 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22605 interne); stringhe deallocate: 0 (22525 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.959748061381674


ris (2 : 2): [ 1 0.959748061381674 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22625 interne); stringhe deallocate: 0 (22545 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.943757542890971 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5738160532899395


ris (2 : 2): [ -1 0.5738160532899395 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22645 interne); stringhe deallocate: 0 (22565 interne)


Stringhe allocate: 1 (22645 interne); stringhe deallocate: 0 (22570 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.05640615917899938 0.9437579702602678 0.959748061381674 0.4261839467100606 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4061608527176417 0.9999998709374374 0.9999999209210206 0.9973188569918137 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9462103931432466 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22680 interne); stringhe deallocate: 0 (22600 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9430604068759791 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9464772193275325


ris (2 : 2): [ -1 0.9464772193275325 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22700 interne); stringhe deallocate: 0 (22620 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9464772193275325


ris (2 : 2): [ 1 0.9464772193275325 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22720 interne); stringhe deallocate: 0 (22640 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9617843666262391


ris (2 : 2): [ 1 0.9617843666262391 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22740 interne); stringhe deallocate: 0 (22660 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9464769452050765 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5669444760757626


ris (2 : 2): [ -1 0.5669444760757626 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22760 interne); stringhe deallocate: 0 (22680 interne)


Stringhe allocate: 1 (22760 interne); stringhe deallocate: 0 (22685 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.05352278067246752 0.9464772193275325 0.9617843666262391 0.4330555239242374 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4050967287609157 0.9999998777645074 0.9999999240356412 0.9976455111135816 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9466824619296901 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22795 interne); stringhe deallocate: 0 (22715 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9460740177162226 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9464772193275325


ris (2 : 2): [ -1 0.9464772193275325 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22815 interne); stringhe deallocate: 0 (22735 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9464772193275325


ris (2 : 2): [ 1 0.9464772193275325 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22835 interne); stringhe deallocate: 0 (22755 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9617843666262391


ris (2 : 2): [ 1 0.9617843666262391 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22855 interne); stringhe deallocate: 0 (22775 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9464769452041635 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5669444760757626


ris (2 : 2): [ -1 0.5669444760757626 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22875 interne); stringhe deallocate: 0 (22795 interne)


Stringhe allocate: 1 (22875 interne); stringhe deallocate: 0 (22800 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.05352278067246752 0.9464772193275325 0.9617843666262391 0.4330555239242374 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4050967287609157 0.9999998777645074 0.9999999240356412 0.9976455111135816 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9435935108192499 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22910 interne); stringhe deallocate: 0 (22830 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.946491727066487 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9478017622916445


ris (2 : 2): [ -1 0.9478017622916445 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22930 interne); stringhe deallocate: 0 (22850 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9478017622916445


ris (2 : 2): [ 1 0.9478017622916445 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22950 interne); stringhe deallocate: 0 (22870 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9627749477357638


ris (2 : 2): [ 1 0.9627749477357638 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22970 interne); stringhe deallocate: 0 (22890 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.94780159882969 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5635711263114855


ris (2 : 2): [ -1 0.5635711263114855 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (22990 interne); stringhe deallocate: 0 (22910 interne)


Stringhe allocate: 1 (22990 interne); stringhe deallocate: 0 (22915 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.05219823770835552 0.9478017622916445 0.9627749477357638 0.4364288736885145 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4046259081303703 0.9999998809579616 0.9999999255061233 0.9977911344292496 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9466638652805983 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23025 interne); stringhe deallocate: 0 (22945 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9437575428013787 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9484271575799181


ris (2 : 2): [ -1 0.9484271575799181 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23045 interne); stringhe deallocate: 0 (22965 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9484271575799181


ris (2 : 2): [ 1 0.9484271575799181 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23065 interne); stringhe deallocate: 0 (22985 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.963241352016087


ris (2 : 2): [ 1 0.963241352016087 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23085 interne); stringhe deallocate: 0 (23005 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9484267323478139 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5619525101567496


ris (2 : 2): [ -1 0.5619525101567496 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23105 interne); stringhe deallocate: 0 (23025 interne)


Stringhe allocate: 1 (23105 interne); stringhe deallocate: 0 (23030 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.05157284242008187 0.9484271575799181 0.963241352016087 0.4380474898432504 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4044074418041303 0.9999998824366501 0.9999999261885935 0.9978578057037559 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9466638652806267 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23140 interne); stringhe deallocate: 0 (23060 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9464769451145934 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9511565227059651


ris (2 : 2): [ -1 0.9511565227059651 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23160 interne); stringhe deallocate: 0 (23080 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9511565227059651


ris (2 : 2): [ 1 0.9511565227059651 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23180 interne); stringhe deallocate: 0 (23100 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9652768161304562


ris (2 : 2): [ 1 0.9652768161304562 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23200 interne); stringhe deallocate: 0 (23120 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9511561482376125 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5548872583721415


ris (2 : 2): [ -1 0.5548872583721415 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23220 interne); stringhe deallocate: 0 (23140 interne)


Stringhe allocate: 1 (23220 interne); stringhe deallocate: 0 (23145 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.04884347729403493 0.9511565227059651 0.9652768161304562 0.4451127416278585 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4034820712261365 0.9999998886779518 0.9999999290945674 0.9981262332883674 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.948156842422943 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23255 interne); stringhe deallocate: 0 (23175 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9464769451154069 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9515350391982085


ris (2 : 2): [ -1 0.9515350391982085 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23275 interne); stringhe deallocate: 0 (23195 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9515350391982085


ris (2 : 2): [ 1 0.9515350391982085 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23295 interne); stringhe deallocate: 0 (23215 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9655592381749507


ris (2 : 2): [ 1 0.9655592381749507 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23315 interne); stringhe deallocate: 0 (23235 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9515347569414931 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5539091919880301


ris (2 : 2): [ -1 0.5539091919880301 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23335 interne); stringhe deallocate: 0 (23255 interne)


Stringhe allocate: 1 (23335 interne); stringhe deallocate: 0 (23260 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.04846496080179152 0.9515350391982085 0.9655592381749507 0.4460908080119699 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4033572696305721 0.999999889516943 0.9999999294886307 0.9981606630038375 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9488587467206315 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23370 interne); stringhe deallocate: 0 (23290 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9478015987400923 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9490586364345774


ris (2 : 2): [ -1 0.9490586364345774 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23390 interne); stringhe deallocate: 0 (23310 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9490586364345774


ris (2 : 2): [ 1 0.9490586364345774 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23410 interne); stringhe deallocate: 0 (23330 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9637124456195636


ris (2 : 2): [ 1 0.9637124456195636 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23430 interne); stringhe deallocate: 0 (23350 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9490585415787374 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5603214982857961


ris (2 : 2): [ -1 0.5603214982857961 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23450 interne); stringhe deallocate: 0 (23370 interne)


Stringhe allocate: 1 (23450 interne); stringhe deallocate: 0 (23375 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.05094136356542256 0.9490586364345774 0.9637124456195636 0.4396785017142039 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4041893114739285 0.9999998839110869 0.9999999268715785 0.9979229707074773 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9519224254612837 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23485 interne); stringhe deallocate: 0 (23405 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9484267322544824 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9515216032166124


ris (2 : 2): [ -1 0.9515216032166124 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23505 interne); stringhe deallocate: 0 (23425 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9515216032166124


ris (2 : 2): [ 1 0.9515216032166124 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23525 interne); stringhe deallocate: 0 (23445 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9655481966375659


ris (2 : 2): [ 1 0.9655481966375659 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23545 interne); stringhe deallocate: 0 (23465 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.951521405501027 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5539257019756756


ris (2 : 2): [ -1 0.5539257019756756 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23565 interne); stringhe deallocate: 0 (23485 interne)


Stringhe allocate: 1 (23565 interne); stringhe deallocate: 0 (23490 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.04847839678338761 0.9515216032166124 0.9655481966375659 0.4460742980243244 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.403361685168297 0.9999998894872704 0.9999999294732656 0.9981600870620573 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9523477642063867 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23600 interne); stringhe deallocate: 0 (23520 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9511561481480477 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9515216032166124


ris (2 : 2): [ -1 0.9515216032166124 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23620 interne); stringhe deallocate: 0 (23540 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9515216032166124


ris (2 : 2): [ 1 0.9515216032166124 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23640 interne); stringhe deallocate: 0 (23560 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9655481966375659


ris (2 : 2): [ 1 0.9655481966375659 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23660 interne); stringhe deallocate: 0 (23580 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9515214055043835 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5539257019756756


ris (2 : 2): [ -1 0.5539257019756756 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23680 interne); stringhe deallocate: 0 (23600 interne)


Stringhe allocate: 1 (23680 interne); stringhe deallocate: 0 (23605 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.04847839678338761 0.9515216032166124 0.9655481966375659 0.4460742980243244 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.403361685168297 0.9999998894872704 0.9999999294732656 0.9981600870620573 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9495682804112313 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23715 interne); stringhe deallocate: 0 (23635 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9515347569454349 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.952721311383555


ris (2 : 2): [ -1 0.952721311383555 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23735 interne); stringhe deallocate: 0 (23655 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.952721311383555


ris (2 : 2): [ 1 0.952721311383555 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23755 interne); stringhe deallocate: 0 (23675 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9664412161239359


ris (2 : 2): [ 1 0.9664412161239359 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23775 interne); stringhe deallocate: 0 (23695 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9527211278021248 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5507875360201264


ris (2 : 2): [ -1 0.5507875360201264 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23795 interne); stringhe deallocate: 0 (23715 interne)


Stringhe allocate: 1 (23795 interne); stringhe deallocate: 0 (23720 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.04727868861644502 0.952721311383555 0.9664412161239359 0.4492124639798736 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4029715811554966 0.9999998921056026 0.9999999307052105 0.9982664073685477 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9523296444881595 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23830 interne); stringhe deallocate: 0 (23750 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9490585414891868 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9532877647577017


ris (2 : 2): [ -1 0.9532877647577017 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23850 interne); stringhe deallocate: 0 (23770 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9532877647577017


ris (2 : 2): [ 1 0.9532877647577017 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23870 interne); stringhe deallocate: 0 (23790 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9668616845735382


ris (2 : 2): [ 1 0.9668616845735382 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23890 interne); stringhe deallocate: 0 (23810 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9532876103461234 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5492828898111247


ris (2 : 2): [ -1 0.5492828898111247 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23910 interne); stringhe deallocate: 0 (23830 interne)


Stringhe allocate: 1 (23910 interne); stringhe deallocate: 0 (23835 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.04671223524229828 0.9532877647577017 0.9668616845735382 0.4507171101888753 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4027902873856382 0.9999998933202217 0.9999999312777839 0.9983151992526858 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9523296443944602 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23945 interne); stringhe deallocate: 0 (23865 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.951521405411313 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9557598941679865


ris (2 : 2): [ -1 0.9557598941679865 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23965 interne); stringhe deallocate: 0 (23885 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9557598941679865


ris (2 : 2): [ 1 0.9557598941679865 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (23985 interne); stringhe deallocate: 0 (23905 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9686966772551224


ris (2 : 2): [ 1 0.9686966772551224 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24005 interne); stringhe deallocate: 0 (23925 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9557595341629988 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5427150299598765


ris (2 : 2): [ -1 0.5427150299598765 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24025 interne); stringhe deallocate: 0 (23945 interne)


Stringhe allocate: 1 (24025 interne); stringhe deallocate: 0 (23950 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.04424010583201354 0.9557598941679865 0.9686966772551224 0.4572849700401235 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.402020325070891 0.9999998984630452 0.99999993372172 0.998512699226375 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9536719409948091 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24060 interne); stringhe deallocate: 0 (23980 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9515214054111354 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9561027364447378


ris (2 : 2): [ -1 0.9561027364447378 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24080 interne); stringhe deallocate: 0 (24000 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9561027364447378


ris (2 : 2): [ 1 0.9561027364447378 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24100 interne); stringhe deallocate: 0 (24020 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9689512837517921


ris (2 : 2): [ 1 0.9689512837517921 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24120 interne); stringhe deallocate: 0 (24040 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9561023800797814 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5418057077659086


ris (2 : 2): [ -1 0.5418057077659086 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24140 interne); stringhe deallocate: 0 (24060 interne)


Stringhe allocate: 1 (24140 interne); stringhe deallocate: 0 (24065 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.04389726355526225 0.9561027364447378 0.9689512837517921 0.4581942922340914 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.40191622228798 0.9999998991564145 0.9999999340538803 0.9985381656367734 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.954302319717776 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24175 interne); stringhe deallocate: 0 (24095 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9527211277015741 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9538597283379324


ris (2 : 2): [ -1 0.9538597283379324 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24195 interne); stringhe deallocate: 0 (24115 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9538597283379324


ris (2 : 2): [ 1 0.9538597283379324 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24215 interne); stringhe deallocate: 0 (24135 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9672863804990987


ris (2 : 2): [ 1 0.9672863804990987 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24235 interne); stringhe deallocate: 0 (24155 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9538593380875282 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5477665712258047


ris (2 : 2): [ -1 0.5477665712258047 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24255 interne); stringhe deallocate: 0 (24175 interne)


Stringhe allocate: 1 (24255 interne); stringhe deallocate: 0 (24180 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.04614027166206758 0.9538597283379324 0.9672863804990987 0.4522334287741953 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4026090912572302 0.9999998945327828 0.9999999318513114 0.9983629904280864 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9570527164466913 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24290 interne); stringhe deallocate: 0 (24210 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9532876102451979 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.956090566767969


ris (2 : 2): [ -1 0.956090566767969 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24310 interne); stringhe deallocate: 0 (24230 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.956090566767969


ris (2 : 2): [ 1 0.956090566767969 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24330 interne); stringhe deallocate: 0 (24250 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9689413296814999


ris (2 : 2): [ 1 0.9689413296814999 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24350 interne); stringhe deallocate: 0 (24270 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9560904591512092 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5418218542579687


ris (2 : 2): [ -1 0.5418218542579687 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24370 interne); stringhe deallocate: 0 (24290 interne)


Stringhe allocate: 1 (24370 interne); stringhe deallocate: 0 (24295 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.043909433232031 0.956090566767969 0.9689413296814999 0.4581781457420313 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4019199065749052 0.9999998991318836 0.9999999340409255 0.9985377172397916 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9574346630100905 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24405 interne); stringhe deallocate: 0 (24325 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9557595340733514 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.956090566767969


ris (2 : 2): [ -1 0.956090566767969 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24425 interne); stringhe deallocate: 0 (24345 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.956090566767969


ris (2 : 2): [ 1 0.956090566767969 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24445 interne); stringhe deallocate: 0 (24365 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9689413296814999


ris (2 : 2): [ 1 0.9689413296814999 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24465 interne); stringhe deallocate: 0 (24385 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9560904591507313 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5418218542579687


ris (2 : 2): [ -1 0.5418218542579687 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24485 interne); stringhe deallocate: 0 (24405 interne)


Stringhe allocate: 1 (24485 interne); stringhe deallocate: 0 (24410 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.043909433232031 0.956090566767969 0.9689413296814999 0.4581781457420313 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4019199065749052 0.9999998991318836 0.9999999340409255 0.9985377172397916 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.954939374161242 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24520 interne); stringhe deallocate: 0 (24440 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9561023799900816 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.957177205490679


ris (2 : 2): [ -1 0.957177205490679 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24540 interne); stringhe deallocate: 0 (24460 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.957177205490679


ris (2 : 2): [ 1 0.957177205490679 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24560 interne); stringhe deallocate: 0 (24480 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9697463962963384


ris (2 : 2): [ 1 0.9697463962963384 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24580 interne); stringhe deallocate: 0 (24500 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.957177171034278 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5389059149874611


ris (2 : 2): [ -1 0.5389059149874611 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24600 interne); stringhe deallocate: 0 (24520 interne)


Stringhe allocate: 1 (24600 interne); stringhe deallocate: 0 (24525 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.04282279450932103 0.957177205490679 0.9697463962963384 0.4610940850125389 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4015940972970326 0.9999999012989129 0.9999999350805077 0.998616518140701 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9574184505467223 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24635 interne); stringhe deallocate: 0 (24555 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9538593379987077 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9576902720725122


ris (2 : 2): [ -1 0.9576902720725122 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24655 interne); stringhe deallocate: 0 (24575 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9576902720725122


ris (2 : 2): [ 1 0.9576902720725122 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24675 interne); stringhe deallocate: 0 (24595 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9701254530935274


ris (2 : 2): [ 1 0.9701254530935274 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24695 interne); stringhe deallocate: 0 (24615 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9576902478165081 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5375086789204107


ris (2 : 2): [ -1 0.5375086789204107 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24715 interne); stringhe deallocate: 0 (24635 interne)


Stringhe allocate: 1 (24715 interne); stringhe deallocate: 0 (24640 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.04230972792748777 0.9576902720725122 0.9701254530935274 0.4624913210795894 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4014424671554691 0.9999999023058539 0.9999999355642941 0.9986527669725712 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9574184505475358 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24750 interne); stringhe deallocate: 0 (24670 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9560904590611372 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9599294095628124


ris (2 : 2): [ -1 0.9599294095628124 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24770 interne); stringhe deallocate: 0 (24690 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9599294095628124


ris (2 : 2): [ 1 0.9599294095628124 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24790 interne); stringhe deallocate: 0 (24710 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9717797185915131


ris (2 : 2): [ 1 0.9717797185915131 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24810 interne); stringhe deallocate: 0 (24730 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9599289982751449 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5314096108403551


ris (2 : 2): [ -1 0.5314096108403551 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24830 interne); stringhe deallocate: 0 (24750 interne)


Stringhe allocate: 1 (24830 interne); stringhe deallocate: 0 (24755 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.04007059043718764 0.9599294095628124 0.9717797185915131 0.4685903891596449 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.400796909756946 0.9999999065814913 0.9999999376337688 0.9988002537006521 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9586224643711958 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24865 interne); stringhe deallocate: 0 (24785 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.956090459061123 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9602399398257996


ris (2 : 2): [ -1 0.9602399398257996 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24885 interne); stringhe deallocate: 0 (24805 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9602399398257996


ris (2 : 2): [ 1 0.9602399398257996 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24905 interne); stringhe deallocate: 0 (24825 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9720092490680484


ris (2 : 2): [ 1 0.9720092490680484 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24925 interne); stringhe deallocate: 0 (24845 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9602398961013803 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5305651095641267


ris (2 : 2): [ -1 0.5305651095641267 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24945 interne); stringhe deallocate: 0 (24865 interne)


Stringhe allocate: 1 (24945 interne); stringhe deallocate: 0 (24870 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.03976006017420042 0.9602399398257996 0.9720092490680484 0.4694348904358733 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.40070942610424 0.9999999071594848 0.9999999379156099 0.9988193673033268 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9591875164036523 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (24980 interne); stringhe deallocate: 0 (24900 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9571771709446786 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9582083295377594


ris (2 : 2): [ -1 0.9582083295377594 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25000 interne); stringhe deallocate: 0 (24920 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9582083295377594


ris (2 : 2): [ 1 0.9582083295377594 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25020 interne); stringhe deallocate: 0 (24940 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9705083210061427


ris (2 : 2): [ 1 0.9705083210061427 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25040 interne); stringhe deallocate: 0 (24960 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.958208092970315 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5361004894589777


ris (2 : 2): [ -1 0.5361004894589777 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25060 interne); stringhe deallocate: 0 (24980 interne)


Stringhe allocate: 1 (25060 interne); stringhe deallocate: 0 (24985 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.04179167046224064 0.9582083295377594 0.9705083210061427 0.4638995105410223 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4012907791729636 0.9999999033121672 0.9999999360492851 0.998688344584366 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9616532413487313 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25095 interne); stringhe deallocate: 0 (25015 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.957690247820679 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9602289171084623


ris (2 : 2): [ -1 0.9602289171084623 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25115 interne); stringhe deallocate: 0 (25035 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9602289171084623


ris (2 : 2): [ 1 0.9602289171084623 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25135 interne); stringhe deallocate: 0 (25055 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9720002753628075


ris (2 : 2): [ 1 0.9720002753628075 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25155 interne); stringhe deallocate: 0 (25075 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9602284520133413 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5305807144437634


ris (2 : 2): [ -1 0.5305807144437634 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25175 interne); stringhe deallocate: 0 (25095 interne)


Stringhe allocate: 1 (25175 interne); stringhe deallocate: 0 (25100 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.03977108289153775 0.9602289171084623 0.9720002753628075 0.4694192855562366 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4007125230611826 0.9999999071390295 0.9999999379046149 0.9988190168801093 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.961995610522095 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25210 interne); stringhe deallocate: 0 (25130 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9599289981847434 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9602289171084623


ris (2 : 2): [ -1 0.9602289171084623 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25230 interne); stringhe deallocate: 0 (25150 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9602289171084623


ris (2 : 2): [ 1 0.9602289171084623 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25250 interne); stringhe deallocate: 0 (25170 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9720002753628075


ris (2 : 2): [ 1 0.9720002753628075 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25270 interne); stringhe deallocate: 0 (25190 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9602284520095852 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5305807144437634


ris (2 : 2): [ -1 0.5305807144437634 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25290 interne); stringhe deallocate: 0 (25210 interne)


Stringhe allocate: 1 (25290 interne); stringhe deallocate: 0 (25215 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.03977108289153775 0.9602289171084623 0.9720002753628075 0.4694192855562366 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4007125230611826 0.9999999071390295 0.9999999379046149 0.9988190168801093 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9597582904821067 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25325 interne); stringhe deallocate: 0 (25245 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.960239896011899 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9612131428881269


ris (2 : 2): [ -1 0.9612131428881269 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25345 interne); stringhe deallocate: 0 (25265 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9612131428881269


ris (2 : 2): [ 1 0.9612131428881269 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25365 interne); stringhe deallocate: 0 (25285 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9727260515067094


ris (2 : 2): [ 1 0.9727260515067094 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25385 interne); stringhe deallocate: 0 (25305 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.961213120741542 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5278739061003931


ris (2 : 2): [ -1 0.5278739061003931 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25405 interne); stringhe deallocate: 0 (25325 interne)


Stringhe allocate: 1 (25405 interne); stringhe deallocate: 0 (25330 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.03878685711187313 0.9612131428881269 0.9727260515067094 0.4721260938996069 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4004384133238962 0.9999999089478546 0.9999999387876001 0.9988782792749966 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9619803516393404 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25440 interne); stringhe deallocate: 0 (25360 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9582080928806178 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9616778542445305


ris (2 : 2): [ -1 0.9616778542445305 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25460 interne); stringhe deallocate: 0 (25380 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9616778542445305


ris (2 : 2): [ 1 0.9616778542445305 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25480 interne); stringhe deallocate: 0 (25400 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9730677752499551


ris (2 : 2): [ 1 0.9730677752499551 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25500 interne); stringhe deallocate: 0 (25420 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9616775601334249 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.526577544033595


ris (2 : 2): [ -1 0.526577544033595 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25520 interne); stringhe deallocate: 0 (25440 interne)


Stringhe allocate: 1 (25520 interne); stringhe deallocate: 0 (25445 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.03832214575546955 0.9616778542445305 0.9730677752499551 0.473422455966405 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4003106768603639 0.9999999097896206 0.9999999391989853 0.9989056041447109 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9619803516391627 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25555 interne); stringhe deallocate: 0 (25475 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9602284519203241 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9637059586996858


ris (2 : 2): [ -1 0.9637059586996858 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25575 interne); stringhe deallocate: 0 (25495 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9637059586996858


ris (2 : 2): [ 1 0.9637059586996858 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25595 interne); stringhe deallocate: 0 (25515 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9745591132308549


ris (2 : 2): [ 1 0.9745591132308549 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25615 interne); stringhe deallocate: 0 (25535 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9637055485674333 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5209187600125119


ris (2 : 2): [ -1 0.5209187600125119 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25635 interne); stringhe deallocate: 0 (25555 interne)


Stringhe allocate: 1 (25635 interne); stringhe deallocate: 0 (25560 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.03629404130031422 0.9637059586996858 0.9745591132308549 0.4790812399874881 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3997656237488557 0.9999999133731237 0.9999999409622186 0.9990173287857272 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9630589572914179 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25670 interne); stringhe deallocate: 0 (25590 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9602284519200026 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9639872222724182


ris (2 : 2): [ -1 0.9639872222724182 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25690 interne); stringhe deallocate: 0 (25610 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9639872222724182


ris (2 : 2): [ 1 0.9639872222724182 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25710 interne); stringhe deallocate: 0 (25630 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9747660374029044


ris (2 : 2): [ 1 0.9747660374029044 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25730 interne); stringhe deallocate: 0 (25650 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9639868824941296 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5201351591416507


ris (2 : 2): [ -1 0.5201351591416507 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25750 interne); stringhe deallocate: 0 (25670 interne)


Stringhe allocate: 1 (25750 interne); stringhe deallocate: 0 (25675 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.03601277772758182 0.9639872222724182 0.9747660374029044 0.4798648408583494 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3996916043291812 0.9999999138587241 0.9999999412027947 0.9990318770355682 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9635648815159499 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25785 interne); stringhe deallocate: 0 (25705 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9612131206517205 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9621470861064331


ris (2 : 2): [ -1 0.9621470861064331 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25805 interne); stringhe deallocate: 0 (25725 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9621470861064331


ris (2 : 2): [ 1 0.9621470861064331 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25825 interne); stringhe deallocate: 0 (25745 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9734129347549114


ris (2 : 2): [ 1 0.9734129347549114 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25845 interne); stringhe deallocate: 0 (25765 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.962146767908326 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5252709312264268


ris (2 : 2): [ -1 0.5252709312264268 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25865 interne); stringhe deallocate: 0 (25785 interne)


Stringhe allocate: 1 (25865 interne); stringhe deallocate: 0 (25790 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.03785291389356693 0.9621470861064331 0.9734129347549114 0.4747290687735732 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.4001827838128986 0.9999999106316792 0.9999999396117001 0.9989324747180016 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9657721607213006 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25900 interne); stringhe deallocate: 0 (25820 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9616775600437926 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9639772384169537


ris (2 : 2): [ -1 0.9639772384169537 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25920 interne); stringhe deallocate: 0 (25840 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9639772384169537


ris (2 : 2): [ 1 0.9639772384169537 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25940 interne); stringhe deallocate: 0 (25860 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9747579475085531


ris (2 : 2): [ 1 0.9747579475085531 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25960 interne); stringhe deallocate: 0 (25880 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9639768689215629 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5201501089162159


ris (2 : 2): [ -1 0.5201501089162159 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (25980 interne); stringhe deallocate: 0 (25900 interne)


Stringhe allocate: 1 (25980 interne); stringhe deallocate: 0 (25905 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.03602276158304629 0.9639772384169537 0.9747579475085531 0.4798498910837841 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3996942252939824 0.9999999138415338 0.9999999411934075 0.9990316014966942 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9660787670140074 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26015 interne); stringhe deallocate: 0 (25935 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.963705548478444 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9639772384169537


ris (2 : 2): [ -1 0.9639772384169537 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26035 interne); stringhe deallocate: 0 (25955 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9639772384169537


ris (2 : 2): [ 1 0.9639772384169537 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26055 interne); stringhe deallocate: 0 (25975 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9747579475085531


ris (2 : 2): [ 1 0.9747579475085531 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26075 interne); stringhe deallocate: 0 (25995 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9639768689103132 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5201501089162159


ris (2 : 2): [ -1 0.5201501089162159 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26095 interne); stringhe deallocate: 0 (26015 interne)


Stringhe allocate: 1 (26095 interne); stringhe deallocate: 0 (26020 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.03602276158304629 0.9639772384169537 0.9747579475085531 0.4798498910837841 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3996942252939824 0.9999999138415338 0.9999999411934075 0.9990316014966942 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9640760509503679 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26130 interne); stringhe deallocate: 0 (26050 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.963986882400981 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9648687034086999


ris (2 : 2): [ -1 0.9648687034086999 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26150 interne); stringhe deallocate: 0 (26070 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9648687034086999


ris (2 : 2): [ 1 0.9648687034086999 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26170 interne); stringhe deallocate: 0 (26090 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9754122424341459


ris (2 : 2): [ 1 0.9754122424341459 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26190 interne); stringhe deallocate: 0 (26110 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9648685543961877 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5176394788125274


ris (2 : 2): [ -1 0.5176394788125274 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26210 interne); stringhe deallocate: 0 (26130 interne)


Stringhe allocate: 1 (26210 interne); stringhe deallocate: 0 (26135 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.0351312965913001 0.9648687034086999 0.9754122424341459 0.4823605211874726 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3994620597362782 0.9999999153630347 0.9999999419477985 0.9990767973342609 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9660649387364302 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26245 interne); stringhe deallocate: 0 (26165 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9621467678074609 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9652896168950329


ris (2 : 2): [ -1 0.9652896168950329 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26265 interne); stringhe deallocate: 0 (26185 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9652896168950329


ris (2 : 2): [ 1 0.9652896168950329 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26285 interne); stringhe deallocate: 0 (26205 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9757203100259624


ris (2 : 2): [ 1 0.9757203100259624 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26305 interne); stringhe deallocate: 0 (26225 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9652896016068153 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5164375893734113


ris (2 : 2): [ -1 0.5164375893734113 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26325 interne); stringhe deallocate: 0 (26245 interne)


Stringhe allocate: 1 (26325 interne); stringhe deallocate: 0 (26250 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.0347103831049671 0.9652896168950329 0.9757203100259624 0.4835624106265887 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3993537398367741 0.9999999160720582 0.9999999422996366 0.9990976837063751 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.966064938736416 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26360 interne); stringhe deallocate: 0 (26280 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9639768688206551 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9671265776345989


ris (2 : 2): [ -1 0.9671265776345989 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26380 interne); stringhe deallocate: 0 (26300 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9671265776345989


ris (2 : 2): [ 1 0.9671265776345989 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26400 interne); stringhe deallocate: 0 (26320 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9770647670899457


ris (2 : 2): [ 1 0.9770647670899457 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26420 interne); stringhe deallocate: 0 (26340 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9671263783406623 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5111911625731553


ris (2 : 2): [ -1 0.5111911625731553 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26440 interne); stringhe deallocate: 0 (26360 interne)


Stringhe allocate: 1 (26440 interne); stringhe deallocate: 0 (26365 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.03287342236540114 0.9671265776345989 0.9770647670899457 0.4888088374268447 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3988905873964104 0.9999999190975195 0.9999999438103248 0.9991834803533053 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.967030533981788 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26475 interne); stringhe deallocate: 0 (26395 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.963976868914429 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9673813328271319


ris (2 : 2): [ -1 0.9673813328271319 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26495 interne); stringhe deallocate: 0 (26415 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9673813328271319


ris (2 : 2): [ 1 0.9673813328271319 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26515 interne); stringhe deallocate: 0 (26435 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9772513114340947


ris (2 : 2): [ 1 0.9772513114340947 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26535 interne); stringhe deallocate: 0 (26455 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9673810093826649 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5104646148043739


ris (2 : 2): [ -1 0.5104646148043739 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26555 interne); stringhe deallocate: 0 (26475 interne)


Stringhe allocate: 1 (26555 interne); stringhe deallocate: 0 (26480 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.0326186671728681 0.9673813328271319 0.9772513114340947 0.4895353851956261 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3988275690991707 0.9999999195083977 0.9999999440167853 0.999194702680503 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9674825757015384 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26590 interne); stringhe deallocate: 0 (26510 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9648685543065696 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9657146248408101


ris (2 : 2): [ -1 0.9657146248408101 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26610 interne); stringhe deallocate: 0 (26530 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9657146248408101


ris (2 : 2): [ 1 0.9657146248408101 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26630 interne); stringhe deallocate: 0 (26550 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.976031474993929


ris (2 : 2): [ 1 0.976031474993929 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26650 interne); stringhe deallocate: 0 (26570 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9657144635147468 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5152261276630329


ris (2 : 2): [ -1 0.5152261276630329 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26670 interne); stringhe deallocate: 0 (26590 interne)


Stringhe allocate: 1 (26670 interne); stringhe deallocate: 0 (26595 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.03428537515918995 0.9657146248408101 0.976031474993929 0.4847738723369671 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3992452034139766 0.9999999167819522 0.9999999426528476 0.9991182601023669 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9694571582799583 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26705 interne); stringhe deallocate: 0 (26625 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9652896015172701 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.967372289923784


ris (2 : 2): [ -1 0.967372289923784 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26725 interne); stringhe deallocate: 0 (26645 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.967372289923784


ris (2 : 2): [ 1 0.967372289923784 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26745 interne); stringhe deallocate: 0 (26665 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9772440183056541


ris (2 : 2): [ 1 0.9772440183056541 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26765 interne); stringhe deallocate: 0 (26685 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9673719494766644 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5104788420602843


ris (2 : 2): [ -1 0.5104788420602843 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26785 interne); stringhe deallocate: 0 (26705 interne)


Stringhe allocate: 1 (26785 interne); stringhe deallocate: 0 (26710 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.03262771007621601 0.967372289923784 0.9772440183056541 0.4895211579397157 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3988298010271357 0.9999999194938487 0.9999999440087277 0.9991944844072721 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9697313396459322 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26820 interne); stringhe deallocate: 0 (26740 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9671263782504909 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.967372289923784


ris (2 : 2): [ -1 0.967372289923784 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26840 interne); stringhe deallocate: 0 (26760 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.967372289923784


ris (2 : 2): [ 1 0.967372289923784 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26860 interne); stringhe deallocate: 0 (26780 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9772440183056541


ris (2 : 2): [ 1 0.9772440183056541 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26880 interne); stringhe deallocate: 0 (26800 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9673719494775375 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5104788420602843


ris (2 : 2): [ -1 0.5104788420602843 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26900 interne); stringhe deallocate: 0 (26820 interne)


Stringhe allocate: 1 (26900 interne); stringhe deallocate: 0 (26825 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.03262771007621601 0.967372289923784 0.9772440183056541 0.4895211579397157 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3988298010271357 0.9999999194938487 0.9999999440087277 0.9991944844072721 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9679398624423854 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26935 interne); stringhe deallocate: 0 (26855 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.967381009293371 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9681797365931811


ris (2 : 2): [ -1 0.9681797365931811 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26955 interne); stringhe deallocate: 0 (26875 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9681797365931811


ris (2 : 2): [ 1 0.9681797365931811 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26975 interne); stringhe deallocate: 0 (26895 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9778338721418537


ris (2 : 2): [ 1 0.9778338721418537 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (26995 interne); stringhe deallocate: 0 (26915 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9681797116226205 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5081517706459491


ris (2 : 2): [ -1 0.5081517706459491 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27015 interne); stringhe deallocate: 0 (26935 interne)


Stringhe allocate: 1 (27015 interne); stringhe deallocate: 0 (26940 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.03182026340681887 0.9681797365931811 0.9778338721418537 0.4918482293540509 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3986319518835495 0.9999999207826218 0.9999999446566714 0.9992294137326971 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9697184650428827 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27050 interne); stringhe deallocate: 0 (26970 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9657144634251296 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9685609800462761


ris (2 : 2): [ -1 0.9685609800462761 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27070 interne); stringhe deallocate: 0 (26990 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9685609800462761


ris (2 : 2): [ 1 0.9685609800462761 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27090 interne); stringhe deallocate: 0 (27010 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9781115983508653


ris (2 : 2): [ 1 0.9781115983508653 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27110 interne); stringhe deallocate: 0 (27030 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.968560704512063 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5070381611071083


ris (2 : 2): [ -1 0.5070381611071083 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27130 interne); stringhe deallocate: 0 (27050 interne)


Stringhe allocate: 1 (27130 interne); stringhe deallocate: 0 (27055 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.03143901995372389 0.9685609800462761 0.9781115983508653 0.4929618388928917 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3985395417522233 0.9999999213839375 0.999999944959147 0.9992455908330636 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9697184650425612 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27165 interne); stringhe deallocate: 0 (27085 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9673719493870721 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9702248118747721


ris (2 : 2): [ -1 0.9702248118747721 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27185 interne); stringhe deallocate: 0 (27105 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9702248118747721


ris (2 : 2): [ 1 0.9702248118747721 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27205 interne); stringhe deallocate: 0 (27125 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9793236406870097


ris (2 : 2): [ 1 0.9793236406870097 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27225 interne); stringhe deallocate: 0 (27145 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9702243893607534 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5021770703704638


ris (2 : 2): [ -1 0.5021770703704638 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27245 interne); stringhe deallocate: 0 (27165 interne)


Stringhe allocate: 1 (27245 interne); stringhe deallocate: 0 (27170 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02977518812522795 0.9702248118747721 0.9793236406870097 0.4978229296295362 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3981436742715304 0.9999999239552382 0.9999999462599671 0.9993123338933235 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9705820171360955 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27280 interne); stringhe deallocate: 0 (27200 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9673719493870543 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9704555570338491


ris (2 : 2): [ -1 0.9704555570338491 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27300 interne); stringhe deallocate: 0 (27220 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9704555570338491


ris (2 : 2): [ 1 0.9704555570338491 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27320 interne); stringhe deallocate: 0 (27240 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9794918123967861


ris (2 : 2): [ 1 0.9794918123967861 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27340 interne); stringhe deallocate: 0 (27260 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9704551785415676 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5015038485747547


ris (2 : 2): [ -1 0.5015038485747547 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27360 interne); stringhe deallocate: 0 (27280 interne)


Stringhe allocate: 1 (27360 interne); stringhe deallocate: 0 (27285 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02954444296615089 0.9704555570338491 0.9794918123967861 0.4984961514252453 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3980897163712444 0.9999999243051303 0.9999999464380114 0.9993211008306314 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.970986375046234 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27395 interne); stringhe deallocate: 0 (27315 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.968179711533864 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.968945932066473


ris (2 : 2): [ -1 0.968945932066473 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27415 interne); stringhe deallocate: 0 (27335 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.968945932066473


ris (2 : 2): [ 1 0.968945932066473 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27435 interne); stringhe deallocate: 0 (27355 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9783921168777053


ris (2 : 2): [ 1 0.9783921168777053 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27455 interne); stringhe deallocate: 0 (27375 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9689455120989639 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.5059156286333773


ris (2 : 2): [ -1 0.5059156286333773 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27475 interne); stringhe deallocate: 0 (27395 interne)


Stringhe allocate: 1 (27475 interne); stringhe deallocate: 0 (27400 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.03105406793352705 0.968945932066473 0.9783921168777053 0.4940843713666228 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3984468816117625 0.9999999219864713 0.9999999452629855 0.999261554977239 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9727506725323991 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27510 interne); stringhe deallocate: 0 (27430 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9685607044224653 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9704473664005205


ris (2 : 2): [ -1 0.9704473664005205 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27530 interne); stringhe deallocate: 0 (27450 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9704473664005205


ris (2 : 2): [ 1 0.9704473664005205 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27550 interne); stringhe deallocate: 0 (27470 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9794852375620142


ris (2 : 2): [ 1 0.9794852375620142 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27570 interne); stringhe deallocate: 0 (27490 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9704470723099385 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.501517318715512


ris (2 : 2): [ -1 0.501517318715512 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27590 interne); stringhe deallocate: 0 (27510 interne)


Stringhe allocate: 1 (27590 interne); stringhe deallocate: 0 (27515 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02955263359947946 0.9704473664005205 0.9794852375620142 0.498482681284488 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3980916277992836 0.999999924292738 0.9999999464310618 0.9993209265149031 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9729957668309126 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27625 interne); stringhe deallocate: 0 (27545 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9702243892674218 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9704473664005205


ris (2 : 2): [ -1 0.9704473664005205 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27645 interne); stringhe deallocate: 0 (27565 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9704473664005205


ris (2 : 2): [ 1 0.9704473664005205 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27665 interne); stringhe deallocate: 0 (27585 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9794852375620142


ris (2 : 2): [ 1 0.9794852375620142 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27685 interne); stringhe deallocate: 0 (27605 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9704470723101091 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.501517318715512


ris (2 : 2): [ -1 0.501517318715512 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27705 interne); stringhe deallocate: 0 (27625 interne)


Stringhe allocate: 1 (27705 interne); stringhe deallocate: 0 (27630 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02955263359947946 0.9704473664005205 0.9794852375620142 0.498482681284488 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3980916277992836 0.999999924292738 0.9999999464310618 0.9993209265149031 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9713950244908105 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27740 interne); stringhe deallocate: 0 (27660 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9704551784520028 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9711787132590973


ris (2 : 2): [ -1 0.9711787132590973 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27760 interne); stringhe deallocate: 0 (27680 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9711787132590973


ris (2 : 2): [ 1 0.9711787132590973 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27780 interne); stringhe deallocate: 0 (27700 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9800169970632739


ris (2 : 2): [ 1 0.9800169970632739 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27800 interne); stringhe deallocate: 0 (27720 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9711785405141491 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4993616444113541


ris (2 : 2): [ -1 0.4993616444113541 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27820 interne); stringhe deallocate: 0 (27740 interne)


Stringhe allocate: 1 (27820 interne); stringhe deallocate: 0 (27745 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02882128674090267 0.9711787132590973 0.9800169970632739 0.5006383555886459 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3979220763235888 0.9999999253912983 0.9999999469902388 0.999348262683978 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9729843227391122 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27855 interne); stringhe deallocate: 0 (27775 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9689455121029056 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9715240254781191


ris (2 : 2): [ -1 0.9715240254781191 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27875 interne); stringhe deallocate: 0 (27795 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9715240254781191


ris (2 : 2): [ 1 0.9715240254781191 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27895 interne); stringhe deallocate: 0 (27815 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9802673701900366


ris (2 : 2): [ 1 0.9802673701900366 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27915 interne); stringhe deallocate: 0 (27835 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9715237706243904 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4983303780208223


ris (2 : 2): [ -1 0.4983303780208223 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27935 interne); stringhe deallocate: 0 (27855 interne)


Stringhe allocate: 1 (27935 interne); stringhe deallocate: 0 (27860 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02847597452188089 0.9715240254781191 0.9802673701900366 0.5016696219791778 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.397842804263529 0.9999999259044394 0.9999999472514962 0.9993609493867761 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9729843228328861 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27970 interne); stringhe deallocate: 0 (27890 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.970447072220388 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9730310453525535


ris (2 : 2): [ -1 0.9730310453525535 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (27990 interne); stringhe deallocate: 0 (27910 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9730310453525535


ris (2 : 2): [ 1 0.9730310453525535 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28010 interne); stringhe deallocate: 0 (27930 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9813600392277437


ris (2 : 2): [ 1 0.9813600392277437 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28030 interne); stringhe deallocate: 0 (27950 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9730310528815238 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4938287160605854


ris (2 : 2): [ -1 0.4938287160605854 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28050 interne); stringhe deallocate: 0 (27970 interne)


Stringhe allocate: 1 (28050 interne); stringhe deallocate: 0 (27975 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02696895464744653 0.9730310453525535 0.9813600392277437 0.5061712839394146 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.397502636367465 0.9999999281029084 0.9999999483766779 0.9994135068740138 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9737558452611594 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28085 interne); stringhe deallocate: 0 (28005 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9704470722203951 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.973240043362379


ris (2 : 2): [ -1 0.973240043362379 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28105 interne); stringhe deallocate: 0 (28025 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.973240043362379


ris (2 : 2): [ 1 0.973240043362379 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28125 interne); stringhe deallocate: 0 (28045 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.981511647810338


ris (2 : 2): [ 1 0.981511647810338 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28145 interne); stringhe deallocate: 0 (28065 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9732399075455671 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4932052435256863


ris (2 : 2): [ -1 0.4932052435256863 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28165 interne); stringhe deallocate: 0 (28085 interne)


Stringhe allocate: 1 (28165 interne); stringhe deallocate: 0 (28090 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02675995663762099 0.973240043362379 0.981511647810338 0.5067947564743137 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3974561962546525 0.9999999284026037 0.9999999485308899 0.9994204377207339 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9741168109899263 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28200 interne); stringhe deallocate: 0 (28120 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.971178540420901 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9718726967412402


ris (2 : 2): [ -1 0.9718726967412402 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28220 interne); stringhe deallocate: 0 (28140 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9718726967412402


ris (2 : 2): [ 1 0.9718726967412402 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28240 interne); stringhe deallocate: 0 (28160 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.980520260621205


ris (2 : 2): [ 1 0.980520260621205 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28260 interne); stringhe deallocate: 0 (28180 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9718723385758752 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4972908060101898


ris (2 : 2): [ -1 0.4972908060101898 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28280 interne); stringhe deallocate: 0 (28200 interne)


Stringhe allocate: 1 (28280 interne); stringhe deallocate: 0 (28205 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02812730325875978 0.9718726967412402 0.980520260621205 0.5027091939898103 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3977632666311703 0.9999999264189914 0.9999999475140734 0.9993734890103527 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.97569275779761 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28315 interne); stringhe deallocate: 0 (28235 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9715237705238398 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9732326246749716


ris (2 : 2): [ -1 0.9732326246749716 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28335 interne); stringhe deallocate: 0 (28255 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9732326246749716


ris (2 : 2): [ 1 0.9732326246749716 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28355 interne); stringhe deallocate: 0 (28275 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9815057205254817


ris (2 : 2): [ 1 0.9815057205254817 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28375 interne); stringhe deallocate: 0 (28295 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9732322781510048 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4932179452340493


ris (2 : 2): [ -1 0.4932179452340493 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28395 interne); stringhe deallocate: 0 (28315 interne)


Stringhe allocate: 1 (28395 interne); stringhe deallocate: 0 (28320 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02676737532502838 0.9732326246749716 0.9815057205254817 0.5067820547659507 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3974578416779393 0.9999999283919869 0.9999999485248695 0.999420297340443 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9759116260536249 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28430 interne); stringhe deallocate: 0 (28350 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9730310527805983 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9732326246749716


ris (2 : 2): [ -1 0.9732326246749716 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28450 interne); stringhe deallocate: 0 (28370 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9732326246749716


ris (2 : 2): [ 1 0.9732326246749716 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28470 interne); stringhe deallocate: 0 (28390 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9815057205254817


ris (2 : 2): [ 1 0.9815057205254817 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28490 interne); stringhe deallocate: 0 (28410 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9732322781514533 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4932179452340493


ris (2 : 2): [ -1 0.4932179452340493 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28510 interne); stringhe deallocate: 0 (28430 interne)


Stringhe allocate: 1 (28510 interne); stringhe deallocate: 0 (28435 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02676737532502838 0.9732326246749716 0.9815057205254817 0.5067820547659507 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3974578416779393 0.9999999283919869 0.9999999485248695 0.999420297340443 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9744815914158522 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28545 interne); stringhe deallocate: 0 (28465 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9732399074559197 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9738950439354862


ris (2 : 2): [ -1 0.9738950439354862 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28565 interne); stringhe deallocate: 0 (28485 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9738950439354862


ris (2 : 2): [ 1 0.9738950439354862 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28585 interne); stringhe deallocate: 0 (28505 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9819851073608925


ris (2 : 2): [ 1 0.9819851073608925 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28605 interne); stringhe deallocate: 0 (28525 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9738946049637196 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4912220427385408


ris (2 : 2): [ -1 0.4912220427385408 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28625 interne); stringhe deallocate: 0 (28545 interne)


Stringhe allocate: 1 (28625 interne); stringhe deallocate: 0 (28550 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.0261049560645138 0.9738950439354862 0.9819851073608925 0.5087779572614593 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3973117971754582 0.9999999293337811 0.9999999490095199 0.9994419453661615 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9759016124730096 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28660 interne); stringhe deallocate: 0 (28580 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9718723384861754 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9742078113476166


ris (2 : 2): [ -1 0.9742078113476166 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28680 interne); stringhe deallocate: 0 (28600 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9742078113476166


ris (2 : 2): [ 1 0.9742078113476166 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28700 interne); stringhe deallocate: 0 (28620 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9822108213911509


ris (2 : 2): [ 1 0.9822108213911509 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28720 interne); stringhe deallocate: 0 (28640 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9742074101395026 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4902674671039431


ris (2 : 2): [ -1 0.4902674671039431 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28740 interne); stringhe deallocate: 0 (28660 interne)


Stringhe allocate: 1 (28740 interne); stringhe deallocate: 0 (28665 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02579218865238342 0.9742078113476166 0.9822108213911509 0.5097325328960569 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3972434534942263 0.9999999297741431 0.9999999492361296 0.9994520119446018 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9759016124729918 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28775 interne); stringhe deallocate: 0 (28695 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9732322780621843 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9755727983947443


ris (2 : 2): [ -1 0.9755727983947443 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28795 interne); stringhe deallocate: 0 (28715 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9755727983947443


ris (2 : 2): [ 1 0.9755727983947443 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28815 interne); stringhe deallocate: 0 (28735 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9831958741221699


ris (2 : 2): [ 1 0.9831958741221699 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28835 interne); stringhe deallocate: 0 (28755 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9755725949234417 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.486100565488269


ris (2 : 2): [ -1 0.486100565488269 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28855 interne); stringhe deallocate: 0 (28775 interne)


Stringhe allocate: 1 (28855 interne); stringhe deallocate: 0 (28780 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02442720160525569 0.9755727983947443 0.9831958741221699 0.5138994345117309 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3969497234100579 0.999999931664084 0.9999999502133616 0.9994938752086015 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9765901653302507 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28890 interne); stringhe deallocate: 0 (28810 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9732322780613814 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9757620988686498


ris (2 : 2): [ -1 0.9757620988686498 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28910 interne); stringhe deallocate: 0 (28830 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9757620988686498


ris (2 : 2): [ 1 0.9757620988686498 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28930 interne); stringhe deallocate: 0 (28850 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9833325508681994


ris (2 : 2): [ 1 0.9833325508681994 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28950 interne); stringhe deallocate: 0 (28870 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9757618992761215 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4855234342389146


ris (2 : 2): [ -1 0.4855234342389146 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (28970 interne); stringhe deallocate: 0 (28890 interne)


Stringhe allocate: 1 (28970 interne); stringhe deallocate: 0 (28895 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02423790113135016 0.9757620988686498 0.9833325508681994 0.5144765657610854 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3969095646106526 0.9999999319221391 0.9999999503474588 0.9994994160985647 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9769125072483931 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29005 interne); stringhe deallocate: 0 (28925 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9738946048741113 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9745236212224749


ris (2 : 2): [ -1 0.9745236212224749 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29025 interne); stringhe deallocate: 0 (28945 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9745236212224749


ris (2 : 2): [ 1 0.9745236212224749 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29045 interne); stringhe deallocate: 0 (28965 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9824388047982163


ris (2 : 2): [ 1 0.9824388047982163 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29065 interne); stringhe deallocate: 0 (28985 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9745235531753549 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4893051697087051


ris (2 : 2): [ -1 0.4893051697087051 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29085 interne); stringhe deallocate: 0 (29005 interne)


Stringhe allocate: 1 (29085 interne); stringhe deallocate: 0 (29010 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02547637877752507 0.9745236212224749 0.9824388047982163 0.5106948302912948 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3971748406919936 0.9999999302160045 0.9999999494639953 0.9994619765958441 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9783196537022363 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29120 interne); stringhe deallocate: 0 (29040 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9742074100499032 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9757553793733601


ris (2 : 2): [ -1 0.9757553793733601 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29140 interne); stringhe deallocate: 0 (29060 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9757553793733601


ris (2 : 2): [ 1 0.9757553793733601 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29160 interne); stringhe deallocate: 0 (29080 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9833272073568721


ris (2 : 2): [ 1 0.9833272073568721 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29180 interne); stringhe deallocate: 0 (29100 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9757552235550318 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4855353725815731


ris (2 : 2): [ -1 0.4855353725815731 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29200 interne); stringhe deallocate: 0 (29120 interne)


Stringhe allocate: 1 (29200 interne); stringhe deallocate: 0 (29125 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.0242446206266399 0.9757553793733601 0.9833272073568721 0.5144646274184269 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.396910987723205 0.9999999319129957 0.9999999503422229 0.9994993020969551 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9785151569371102 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29235 interne); stringhe deallocate: 0 (29155 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9755725949276126 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9757553793733601


ris (2 : 2): [ -1 0.9757553793733601 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29255 interne); stringhe deallocate: 0 (29175 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9757553793733601


ris (2 : 2): [ 1 0.9757553793733601 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29275 interne); stringhe deallocate: 0 (29195 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9833272073568721


ris (2 : 2): [ 1 0.9833272073568721 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29295 interne); stringhe deallocate: 0 (29215 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9757552235587514 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4855353725815731


ris (2 : 2): [ -1 0.4855353725815731 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29315 interne); stringhe deallocate: 0 (29235 interne)


Stringhe allocate: 1 (29315 interne); stringhe deallocate: 0 (29240 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.0242446206266399 0.9757553793733601 0.9833272073568721 0.5144646274184269 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.396910987723205 0.9999999319129957 0.9999999503422229 0.9994993020969551 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9772381871212161 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29350 interne); stringhe deallocate: 0 (29270 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.97576189918572 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9763553672863374


ris (2 : 2): [ -1 0.9763553672863374 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29370 interne); stringhe deallocate: 0 (29290 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9763553672863374


ris (2 : 2): [ 1 0.9763553672863374 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29390 interne); stringhe deallocate: 0 (29310 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9837593796737579


ris (2 : 2): [ 1 0.9837593796737579 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29410 interne); stringhe deallocate: 0 (29330 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9763550847000149 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4836881979824136


ris (2 : 2): [ -1 0.4836881979824136 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29430 interne); stringhe deallocate: 0 (29350 interne)


Stringhe allocate: 1 (29430 interne); stringhe deallocate: 0 (29355 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02364463271366257 0.9763553672863374 0.9837593796737579 0.5163118020175864 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3967846051631889 0.9999999327245892 0.9999999507639108 0.9995166366302003 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9785056201940208 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29465 interne); stringhe deallocate: 0 (29385 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9745235530858736 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9766386571568445


ris (2 : 2): [ -1 0.9766386571568445 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29485 interne); stringhe deallocate: 0 (29405 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9766386571568445


ris (2 : 2): [ 1 0.9766386571568445 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29505 interne); stringhe deallocate: 0 (29425 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9839628632650488


ris (2 : 2): [ 1 0.9839628632650488 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29525 interne); stringhe deallocate: 0 (29445 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9766383259722549 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4828049599475311


ris (2 : 2): [ -1 0.4828049599475311 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29545 interne); stringhe deallocate: 0 (29465 interne)


Stringhe allocate: 1 (29545 interne); stringhe deallocate: 0 (29470 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.0233613428431555 0.9766386571568445 0.9839628632650488 0.517195040052469 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3967254136535782 0.9999999331044214 0.9999999509612163 0.9995247123078177 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9785056201940279 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29580 interne); stringhe deallocate: 0 (29500 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9757552234653346 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9778749976093468


ris (2 : 2): [ -1 0.9778749976093468 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29600 interne); stringhe deallocate: 0 (29520 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9778749976093468


ris (2 : 2): [ 1 0.9778749976093468 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29620 interne); stringhe deallocate: 0 (29540 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9848508987457155


ris (2 : 2): [ 1 0.9848508987457155 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29640 interne); stringhe deallocate: 0 (29560 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9778747647232686 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4789494547831445


ris (2 : 2): [ -1 0.4789494547831445 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29660 interne); stringhe deallocate: 0 (29580 interne)


Stringhe allocate: 1 (29660 interne); stringhe deallocate: 0 (29585 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02212500239065318 0.9778749976093468 0.9848508987457155 0.5210505452168555 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3964706569504156 0.99999993473715 0.9999999518130758 0.9995584165546034 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9791207401279323 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29695 interne); stringhe deallocate: 0 (29615 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9757552234657343 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9780464569899694


ris (2 : 2): [ -1 0.9780464569899694 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29715 interne); stringhe deallocate: 0 (29635 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9780464569899694


ris (2 : 2): [ 1 0.9780464569899694 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29735 interne); stringhe deallocate: 0 (29655 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9849741142814864


ris (2 : 2): [ 1 0.9849741142814864 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29755 interne); stringhe deallocate: 0 (29675 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9780464261003923 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4784154354081144


ris (2 : 2): [ -1 0.4784154354081144 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29775 interne); stringhe deallocate: 0 (29695 interne)


Stringhe allocate: 1 (29775 interne); stringhe deallocate: 0 (29700 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02195354301003061 0.9780464569899694 0.9849741142814864 0.5215845645918856 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3964357804400275 0.999999934960413 0.9999999519300968 0.999562892818804 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9794082729347284 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29810 interne); stringhe deallocate: 0 (29730 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9763550846104323 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9769247027456819


ris (2 : 2): [ -1 0.9769247027456819 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29830 interne); stringhe deallocate: 0 (29750 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9769247027456819


ris (2 : 2): [ 1 0.9769247027456819 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29850 interne); stringhe deallocate: 0 (29770 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9841683927237269


ris (2 : 2): [ 1 0.9841683927237269 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29870 interne); stringhe deallocate: 0 (29790 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9769244282704968 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4819145501461163


ris (2 : 2): [ -1 0.4819145501461163 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29890 interne); stringhe deallocate: 0 (29810 interne)


Stringhe allocate: 1 (29890 interne); stringhe deallocate: 0 (29815 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02307529725431812 0.9769247027456819 0.9841683927237269 0.5180854498538837 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3966659573897505 0.9999999334857724 0.9999999511597026 0.9995327172724513 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9806637851719557 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29925 interne); stringhe deallocate: 0 (29845 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9766383258824334 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9780403707898199


ris (2 : 2): [ -1 0.9780403707898199 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29945 interne); stringhe deallocate: 0 (29865 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9780403707898199


ris (2 : 2): [ 1 0.9780403707898199 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29965 interne); stringhe deallocate: 0 (29885 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.984969297048495


ris (2 : 2): [ 1 0.984969297048495 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (29985 interne); stringhe deallocate: 0 (29905 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9780402272283943 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4784266268285535


ris (2 : 2): [ -1 0.4784266268285535 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30005 interne); stringhe deallocate: 0 (29925 interne)


Stringhe allocate: 1 (30005 interne); stringhe deallocate: 0 (29930 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02195962921018013 0.9780403707898199 0.984969297048495 0.5215733731714465 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3964370165553923 0.9999999349525011 0.999999951925527 0.9995627994761573 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9808383075718865 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30040 interne); stringhe deallocate: 0 (29960 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9778747646336363 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9780403707898199


ris (2 : 2): [ -1 0.9780403707898199 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30060 interne); stringhe deallocate: 0 (29980 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9780403707898199


ris (2 : 2): [ 1 0.9780403707898199 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30080 interne); stringhe deallocate: 0 (30000 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.984969297048495


ris (2 : 2): [ 1 0.984969297048495 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30100 interne); stringhe deallocate: 0 (30020 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9780402272284476 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4784266268285535


ris (2 : 2): [ -1 0.4784266268285535 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30120 interne); stringhe deallocate: 0 (30040 interne)


Stringhe allocate: 1 (30120 interne); stringhe deallocate: 0 (30045 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02195962921018013 0.9780403707898199 0.984969297048495 0.5215733731714465 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3964370165553923 0.9999999349525011 0.999999951925527 0.9995627994761573 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9796991436009215 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30155 interne); stringhe deallocate: 0 (30075 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.978046426011403 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9785838113511064


ris (2 : 2): [ -1 0.9785838113511064 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30175 interne); stringhe deallocate: 0 (30095 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9785838113511064


ris (2 : 2): [ 1 0.9785838113511064 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30195 interne); stringhe deallocate: 0 (30115 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9853589049728256


ris (2 : 2): [ 1 0.9853589049728256 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30215 interne); stringhe deallocate: 0 (30135 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9785833447403913 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4767177390801804


ris (2 : 2): [ -1 0.4767177390801804 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30235 interne); stringhe deallocate: 0 (30155 interne)


Stringhe allocate: 1 (30235 interne); stringhe deallocate: 0 (30160 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02141618864889361 0.9785838113511064 0.9853589049728256 0.5232822609198196 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3963271854025899 0.999999935655184 0.9999999522937166 0.9995768246138447 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9808302013409929 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30270 interne); stringhe deallocate: 0 (30190 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9769244281773482 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9788404018634742


ris (2 : 2): [ -1 0.9788404018634742 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30290 interne); stringhe deallocate: 0 (30210 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9788404018634742


ris (2 : 2): [ 1 0.9788404018634742 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30310 interne); stringhe deallocate: 0 (30230 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9855423475862819


ris (2 : 2): [ 1 0.9855423475862819 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30330 interne); stringhe deallocate: 0 (30250 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9788403599686975 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4759007900086039


ris (2 : 2): [ -1 0.4759007900086039 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30350 interne); stringhe deallocate: 0 (30270 interne)


Stringhe allocate: 1 (30350 interne); stringhe deallocate: 0 (30275 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02115959813652579 0.9788404018634742 0.9855423475862819 0.5240992099913961 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3962757070785508 0.9999999359843191 0.999999952466097 0.9995833698919779 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9808302013401899 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30385 interne); stringhe deallocate: 0 (30305 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9780402271275293 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9799602203363768


ris (2 : 2): [ -1 0.9799602203363768 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30405 interne); stringhe deallocate: 0 (30325 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9799602203363768


ris (2 : 2): [ 1 0.9799602203363768 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30425 interne); stringhe deallocate: 0 (30345 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.986342920980951


ris (2 : 2): [ 1 0.986342920980951 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30445 interne); stringhe deallocate: 0 (30365 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9799599736160927 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4723346455185821


ris (2 : 2): [ -1 0.4723346455185821 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30465 interne); stringhe deallocate: 0 (30385 interne)


Stringhe allocate: 1 (30465 interne); stringhe deallocate: 0 (30390 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02003977966362325 0.9799602203363768 0.986342920980951 0.5276653544814179 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3960538613652597 0.9999999374011444 0.9999999532111312 0.9996107781973621 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9813785640721093 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30500 interne); stringhe deallocate: 0 (30420 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9780402271275399 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9801155201014616


ris (2 : 2): [ -1 0.9801155201014616 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30520 interne); stringhe deallocate: 0 (30440 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9801155201014616


ris (2 : 2): [ 1 0.9801155201014616 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30540 interne); stringhe deallocate: 0 (30460 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9864540010920566


ris (2 : 2): [ 1 0.9864540010920566 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30560 interne); stringhe deallocate: 0 (30480 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9801154225301154 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4718406909681392


ris (2 : 2): [ -1 0.4718406909681392 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30580 interne); stringhe deallocate: 0 (30500 interne)


Stringhe allocate: 1 (30580 interne); stringhe deallocate: 0 (30505 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01988447989853837 0.9801155201014616 0.9864540010920566 0.5281593090318608 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3960234538334836 0.9999999375951419 0.9999999533135786 0.9996144298836691 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9816355793003915 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30615 interne); stringhe deallocate: 0 (30535 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9785833447445071 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9790994883746942


ris (2 : 2): [ -1 0.9790994883746942 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30635 interne); stringhe deallocate: 0 (30555 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9790994883746942


ris (2 : 2): [ 1 0.9790994883746942 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30655 interne); stringhe deallocate: 0 (30575 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9857276345709686


ris (2 : 2): [ 1 0.9857276345709686 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30675 interne); stringhe deallocate: 0 (30595 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9790992825455067 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4750771856032211


ris (2 : 2): [ -1 0.4750771856032211 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30695 interne); stringhe deallocate: 0 (30615 interne)


Stringhe allocate: 1 (30695 interne); stringhe deallocate: 0 (30620 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.02090051162530582 0.9790994883746942 0.9857276345709686 0.5249228143967789 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3962239734374808 0.9999999363149477 0.9999999526395781 0.9995898662021965 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9827556698787845 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30730 interne); stringhe deallocate: 0 (30650 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9788403598790794 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9801100075100714


ris (2 : 2): [ -1 0.9801100075100714 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30750 interne); stringhe deallocate: 0 (30670 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9801100075100714


ris (2 : 2): [ 1 0.9801100075100714 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30770 interne); stringhe deallocate: 0 (30690 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9864496583047975


ris (2 : 2): [ 1 0.9864496583047975 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30790 interne); stringhe deallocate: 0 (30710 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9801097004837409 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4718511596382723


ris (2 : 2): [ -1 0.4718511596382723 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30810 interne); stringhe deallocate: 0 (30730 interne)


Stringhe allocate: 1 (30810 interne); stringhe deallocate: 0 (30735 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01988999248992862 0.9801100075100714 0.9864496583047975 0.5281488403617276 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3960245317086441 0.999999937588266 0.9999999533095776 0.9996143528472236 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9829115955358176 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30845 interne); stringhe deallocate: 0 (30765 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9799599735265474 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9801100075100714


ris (2 : 2): [ -1 0.9801100075100714 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30865 interne); stringhe deallocate: 0 (30785 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9801100075100714


ris (2 : 2): [ 1 0.9801100075100714 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30885 interne); stringhe deallocate: 0 (30805 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9864496583047975


ris (2 : 2): [ 1 0.9864496583047975 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30905 interne); stringhe deallocate: 0 (30825 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9801097004837445 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4718511596382723


ris (2 : 2): [ -1 0.4718511596382723 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30925 interne); stringhe deallocate: 0 (30845 interne)


Stringhe allocate: 1 (30925 interne); stringhe deallocate: 0 (30850 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01988999248992862 0.9801100075100714 0.9864496583047975 0.5281488403617276 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3960245317086441 0.999999937588266 0.9999999533095776 0.9996143528472236 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9818949787145357 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30960 interne); stringhe deallocate: 0 (30880 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.980115422439944 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9806022301641577


ris (2 : 2): [ -1 0.9806022301641577 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (30980 interne); stringhe deallocate: 0 (30900 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9806022301641577


ris (2 : 2): [ 1 0.9806022301641577 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31000 interne); stringhe deallocate: 0 (30920 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9868008939755287


ris (2 : 2): [ 1 0.9868008939755287 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31020 interne); stringhe deallocate: 0 (30940 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9806017964318832 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4702707252998522


ris (2 : 2): [ -1 0.4702707252998522 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31040 interne); stringhe deallocate: 0 (30960 interne)


Stringhe allocate: 1 (31040 interne); stringhe deallocate: 0 (30965 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01939776983584229 0.9806022301641577 0.9868008939755287 0.5297292747001479 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3959287166474739 0.9999999381992453 0.9999999536320703 0.9996258106793046 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9829039661411159 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31075 interne); stringhe deallocate: 0 (30995 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9790992824562128 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9808346376652573


ris (2 : 2): [ -1 0.9808346376652573 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31095 interne); stringhe deallocate: 0 (31015 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9808346376652573


ris (2 : 2): [ 1 0.9808346376652573 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31115 interne); stringhe deallocate: 0 (31035 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9869662694340313


ris (2 : 2): [ 1 0.9869662694340313 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31135 interne); stringhe deallocate: 0 (31055 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9808344929641732 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4695153195981697


ris (2 : 2): [ -1 0.4695153195981697 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31155 interne); stringhe deallocate: 0 (31075 interne)


Stringhe allocate: 1 (31155 interne); stringhe deallocate: 0 (31080 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01916536233474275 0.9808346376652573 0.9869662694340313 0.5304846804018303 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3958837770199735 0.9999999384856426 0.9999999537831401 0.9996311665425903 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9829039661415155 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31190 interne); stringhe deallocate: 0 (31110 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9801097003941237 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9818489160599589


ris (2 : 2): [ -1 0.9818489160599589 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31210 interne); stringhe deallocate: 0 (31130 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9818489160599589


ris (2 : 2): [ 1 0.9818489160599589 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31230 interne); stringhe deallocate: 0 (31150 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9876879948266772


ris (2 : 2): [ 1 0.9876879948266772 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31250 interne); stringhe deallocate: 0 (31170 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9818487255997095 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4662178220314338


ris (2 : 2): [ -1 0.4662178220314338 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31270 interne); stringhe deallocate: 0 (31190 interne)


Stringhe allocate: 1 (31270 interne); stringhe deallocate: 0 (31195 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01815108394004106 0.9818489160599589 0.9876879948266772 0.5337821779685662 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3956898824833456 0.9999999397200893 0.9999999544366935 0.9996536638906584 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9833932010655104 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31305 interne); stringhe deallocate: 0 (31225 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9801097003941521 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9819895792123233


ris (2 : 2): [ -1 0.9819895792123233 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31325 interne); stringhe deallocate: 0 (31245 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9819895792123233


ris (2 : 2): [ 1 0.9819895792123233 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31345 interne); stringhe deallocate: 0 (31265 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.987788134723173


ris (2 : 2): [ 1 0.987788134723173 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31365 interne); stringhe deallocate: 0 (31285 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9819893925650991 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4657610671645014


ris (2 : 2): [ -1 0.4657610671645014 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31385 interne); stringhe deallocate: 0 (31305 interne)


Stringhe allocate: 1 (31385 interne); stringhe deallocate: 0 (31310 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01801042078767667 0.9819895792123233 0.987788134723173 0.5342389328354986 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.395663277036541 0.9999999398893187 0.9999999545266414 0.9996566701347089 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9836220829014764 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31420 interne); stringhe deallocate: 0 (31340 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9806017963414 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9810693059236241


ris (2 : 2): [ -1 0.9810693059236241 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31440 interne); stringhe deallocate: 0 (31360 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9810693059236241


ris (2 : 2): [ 1 0.9810693059236241 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31460 interne); stringhe deallocate: 0 (31380 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9871333076128096


ris (2 : 2): [ 1 0.9871333076128096 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31480 interne); stringhe deallocate: 0 (31400 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.981069096846011 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4687537422286304


ris (2 : 2): [ -1 0.4687537422286304 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31500 interne); stringhe deallocate: 0 (31420 interne)


Stringhe allocate: 1 (31500 interne); stringhe deallocate: 0 (31425 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01893069407637593 0.9810693059236241 0.9871333076128096 0.5312462577713696 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3958385946107538 0.9999999387734792 0.9999999539352292 0.9996364886872221 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9846215335850523 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31535 interne); stringhe deallocate: 0 (31455 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9808344928754167 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9819845861685814


ris (2 : 2): [ -1 0.9819845861685814 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31555 interne); stringhe deallocate: 0 (31475 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9819845861685814


ris (2 : 2): [ 1 0.9819845861685814 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31575 interne); stringhe deallocate: 0 (31495 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9877842196539465


ris (2 : 2): [ 1 0.9877842196539465 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31595 interne); stringhe deallocate: 0 (31515 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9819841473528701 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4657708423208177


ris (2 : 2): [ -1 0.4657708423208177 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31615 interne); stringhe deallocate: 0 (31535 interne)


Stringhe allocate: 1 (31615 interne); stringhe deallocate: 0 (31540 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01801541383141858 0.9819845861685814 0.9877842196539465 0.5342291576791823 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3956642202577504 0.9999999398833197 0.9999999545231282 0.9996566060707783 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.984760293198903 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31650 interne); stringhe deallocate: 0 (31570 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9818487255101118 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9819845861685814


ris (2 : 2): [ -1 0.9819845861685814 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31670 interne); stringhe deallocate: 0 (31590 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9819845861685814


ris (2 : 2): [ 1 0.9819845861685814 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31690 interne); stringhe deallocate: 0 (31610 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9877842196539465


ris (2 : 2): [ 1 0.9877842196539465 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31710 interne); stringhe deallocate: 0 (31630 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9819841473526632 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4657708423208177


ris (2 : 2): [ -1 0.4657708423208177 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31730 interne); stringhe deallocate: 0 (31650 interne)


Stringhe allocate: 1 (31730 interne); stringhe deallocate: 0 (31655 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01801541383141858 0.9819845861685814 0.9877842196539465 0.5342291576791823 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3956642202577504 0.9999999398833197 0.9999999545231282 0.9996566060707783 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9838533489231978 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31765 interne); stringhe deallocate: 0 (31685 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9819893924717675 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9824304180735652


ris (2 : 2): [ -1 0.9824304180735652 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31785 interne); stringhe deallocate: 0 (31705 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9824304180735652


ris (2 : 2): [ 1 0.9824304180735652 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31805 interne); stringhe deallocate: 0 (31725 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9881008623296044


ris (2 : 2): [ 1 0.9881008623296044 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31825 interne); stringhe deallocate: 0 (31745 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9824299900957536 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4643096285508747


ris (2 : 2): [ -1 0.4643096285508747 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31845 interne); stringhe deallocate: 0 (31765 interne)


Stringhe allocate: 1 (31845 interne); stringhe deallocate: 0 (31770 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01756958192643476 0.9824304180735652 0.9881008623296044 0.5356903714491252 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3955803400487342 0.9999999404166127 0.9999999548063988 0.9996660512611223 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9847536174778711 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31880 interne); stringhe deallocate: 0 (31800 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9810690967564462 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9826409217510504


ris (2 : 2): [ -1 0.9826409217510504 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31900 interne); stringhe deallocate: 0 (31820 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9826409217510504


ris (2 : 2): [ 1 0.9826409217510504 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31920 interne); stringhe deallocate: 0 (31840 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9882499500557457


ris (2 : 2): [ 1 0.9882499500557457 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31940 interne); stringhe deallocate: 0 (31860 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9826407521230358 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4636113174896647


ris (2 : 2): [ -1 0.4636113174896647 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31960 interne); stringhe deallocate: 0 (31880 interne)


Stringhe allocate: 1 (31960 interne); stringhe deallocate: 0 (31885 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01735907824894956 0.9826409217510504 0.9882499500557457 0.5363886825103353 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3955409737269165 0.9999999406667651 0.9999999549391621 0.999670473042321 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9847536174778817 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (31995 interne); stringhe deallocate: 0 (31915 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9819841473568118 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.983559606953008


ris (2 : 2): [ -1 0.983559606953008 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32015 interne); stringhe deallocate: 0 (31935 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.983559606953008


ris (2 : 2): [ 1 0.983559606953008 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32035 interne); stringhe deallocate: 0 (31955 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9889005931358834


ris (2 : 2): [ 1 0.9889005931358834 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32055 interne); stringhe deallocate: 0 (31975 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9835591404974373 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4605630483962747


ris (2 : 2): [ -1 0.4605630483962747 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32075 interne); stringhe deallocate: 0 (31995 interne)


Stringhe allocate: 1 (32075 interne); stringhe deallocate: 0 (32000 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01644039304699196 0.983559606953008 0.9889005931358834 0.5394369516037254 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3953709444015615 0.9999999417462511 0.9999999555140122 0.9996891004221764 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9851899235714114 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32110 interne); stringhe deallocate: 0 (32030 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9819841472631126 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9836870129563762


ris (2 : 2): [ -1 0.9836870129563762 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32130 interne); stringhe deallocate: 0 (32050 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9836870129563762


ris (2 : 2): [ 1 0.9836870129563762 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32150 interne); stringhe deallocate: 0 (32070 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9889908703125188


ris (2 : 2): [ 1 0.9889908703125188 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32170 interne); stringhe deallocate: 0 (32090 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.983686932855889 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4601408065682664


ris (2 : 2): [ -1 0.4601408065682664 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32190 interne); stringhe deallocate: 0 (32110 interne)


Stringhe allocate: 1 (32190 interne); stringhe deallocate: 0 (32115 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01631298704362383 0.9836870129563762 0.9889908703125188 0.5398591934317336 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3953475904699804 0.9999999418943983 0.9999999555931916 0.9996915963595325 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9853940097814231 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32225 interne); stringhe deallocate: 0 (32145 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9824299900060396 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9828534731151354


ris (2 : 2): [ -1 0.9828534731151354 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32245 interne); stringhe deallocate: 0 (32165 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9828534731151354


ris (2 : 2): [ 1 0.9828534731151354 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32265 interne); stringhe deallocate: 0 (32185 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9884005367418769


ris (2 : 2): [ 1 0.9884005367418769 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32285 interne); stringhe deallocate: 0 (32205 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9828534214921003 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4629072867834203


ris (2 : 2): [ -1 0.4629072867834203 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32305 interne); stringhe deallocate: 0 (32225 interne)


Stringhe allocate: 1 (32305 interne); stringhe deallocate: 0 (32230 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01714652688486462 0.9828534731151354 0.9884005367418769 0.5370927132165797 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3955013788944505 0.9999999409182854 0.9999999550728642 0.999674871857234 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9862852184301119 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32340 interne); stringhe deallocate: 0 (32260 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9826407520297877 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9836824904942785


ris (2 : 2): [ -1 0.9836824904942785 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32360 interne); stringhe deallocate: 0 (32280 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9836824904942785


ris (2 : 2): [ 1 0.9836824904942785 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32380 interne); stringhe deallocate: 0 (32300 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9889873408357652


ris (2 : 2): [ 1 0.9889873408357652 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32400 interne); stringhe deallocate: 0 (32320 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.983682164473092 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4601499205659451


ris (2 : 2): [ -1 0.4601499205659451 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32420 interne); stringhe deallocate: 0 (32340 interne)


Stringhe allocate: 1 (32420 interne); stringhe deallocate: 0 (32345 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01631750950572153 0.9836824904942785 0.9889873408357652 0.5398500794340548 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3953484185143231 0.9999999418891461 0.9999999555900987 0.9996915426971524 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9864087192539088 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32455 interne); stringhe deallocate: 0 (32375 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9835591403968866 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9836824904942785


ris (2 : 2): [ -1 0.9836824904942785 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32475 interne); stringhe deallocate: 0 (32395 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9836824904942785


ris (2 : 2): [ 1 0.9836824904942785 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32495 interne); stringhe deallocate: 0 (32415 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9889873408357652


ris (2 : 2): [ 1 0.9889873408357652 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32515 interne); stringhe deallocate: 0 (32435 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9836821644730263 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4601499205659451


ris (2 : 2): [ -1 0.4601499205659451 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32535 interne); stringhe deallocate: 0 (32455 interne)


Stringhe allocate: 1 (32535 interne); stringhe deallocate: 0 (32460 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01631750950572153 0.9836824904942785 0.9889873408357652 0.5398500794340548 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3953484185143231 0.9999999418891461 0.9999999555900987 0.9996915426971524 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9856004802711542 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32570 interne); stringhe deallocate: 0 (32490 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9836869327549636 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9840863038610109


ris (2 : 2): [ -1 0.9840863038610109 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32590 interne); stringhe deallocate: 0 (32510 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9840863038610109


ris (2 : 2): [ 1 0.9840863038610109 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32610 interne); stringhe deallocate: 0 (32530 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9892727975585797


ris (2 : 2): [ 1 0.9892727975585797 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32630 interne); stringhe deallocate: 0 (32550 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9840860455464728 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4587992800084007


ris (2 : 2): [ -1 0.4587992800084007 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32650 interne); stringhe deallocate: 0 (32570 interne)


Stringhe allocate: 1 (32650 interne); stringhe deallocate: 0 (32575 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01591369613898908 0.9840863038610109 0.9892727975585797 0.5412007199915994 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3952747531056839 0.9999999423562569 0.9999999558395553 0.9996993943136129 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9864029972080886 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32685 interne); stringhe deallocate: 0 (32605 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9828534214024529 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9842769680949439


ris (2 : 2): [ -1 0.9842769680949439 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32705 interne); stringhe deallocate: 0 (32625 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9842769680949439


ris (2 : 2): [ 1 0.9842769680949439 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32725 interne); stringhe deallocate: 0 (32645 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9894072017209423


ris (2 : 2): [ 1 0.9894072017209423 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32745 interne); stringhe deallocate: 0 (32665 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9842767804092762 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4581539023415903


ris (2 : 2): [ -1 0.4581539023415903 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32765 interne); stringhe deallocate: 0 (32685 interne)


Stringhe allocate: 1 (32765 interne); stringhe deallocate: 0 (32690 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01572303190505608 0.9842769680949439 0.9894072017209423 0.5418460976584097 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3952401612556325 0.9999999425755006 0.9999999559565235 0.9997030752682178 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.986402997208117 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32800 interne); stringhe deallocate: 0 (32720 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9836821643833922 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9851090695211661


ris (2 : 2): [ -1 0.9851090695211661 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32820 interne); stringhe deallocate: 0 (32740 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9851090695211661


ris (2 : 2): [ 1 0.9851090695211661 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32840 interne); stringhe deallocate: 0 (32760 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9899937633410977


ris (2 : 2): [ 1 0.9899937633410977 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32860 interne); stringhe deallocate: 0 (32780 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9851088612503425 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4553366977975859


ris (2 : 2): [ -1 0.4553366977975859 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32880 interne); stringhe deallocate: 0 (32800 interne)


Stringhe allocate: 1 (32880 interne); stringhe deallocate: 0 (32805 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01489093047883394 0.9851090695211661 0.9899937633410977 0.5446633022024141 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3950906089267756 0.9999999435226106 0.9999999564633761 0.9997186233988574 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.986792096329193 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32915 interne); stringhe deallocate: 0 (32835 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9836821643842058 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9852244678283449


ris (2 : 2): [ -1 0.9852244678283449 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32935 interne); stringhe deallocate: 0 (32855 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9852244678283449


ris (2 : 2): [ 1 0.9852244678283449 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32955 interne); stringhe deallocate: 0 (32875 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9900751491709701


ris (2 : 2): [ 1 0.9900751491709701 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32975 interne); stringhe deallocate: 0 (32895 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9852242558426312 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4549464554286817


ris (2 : 2): [ -1 0.4549464554286817 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (32995 interne); stringhe deallocate: 0 (32915 interne)


Stringhe allocate: 1 (32995 interne); stringhe deallocate: 0 (32920 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01477553217165506 0.9852244678283449 0.9900751491709701 0.5450535445713183 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3950700490386855 0.9999999436527193 0.99999995653324 0.9997207120327796 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9869742481244401 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33030 interne); stringhe deallocate: 0 (32950 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9840860454564009 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9844694870261752


ris (2 : 2): [ -1 0.9844694870261752 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33050 interne); stringhe deallocate: 0 (32970 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9844694870261752


ris (2 : 2): [ 1 0.9844694870261752 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33070 interne); stringhe deallocate: 0 (32990 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9895429572116432


ris (2 : 2): [ 1 0.9895429572116432 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33090 interne); stringhe deallocate: 0 (33010 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9844694226220687 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4575032267450131


ris (2 : 2): [ -1 0.4575032267450131 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33110 interne); stringhe deallocate: 0 (33030 interne)


Stringhe allocate: 1 (33110 interne); stringhe deallocate: 0 (33035 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.0155305129738248 0.9844694870261752 0.9895429572116432 0.5424967732549869 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3952053559669744 0.9999999427960311 0.9999999560743533 0.9997067408693433 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9877686588292036 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33145 interne); stringhe deallocate: 0 (33065 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9842767803196679 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9852203715967981


ris (2 : 2): [ -1 0.9852203715967981 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33165 interne); stringhe deallocate: 0 (33085 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9852203715967981


ris (2 : 2): [ 1 0.9852203715967981 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33185 interne); stringhe deallocate: 0 (33105 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9900719673100181


ris (2 : 2): [ 1 0.9900719673100181 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33205 interne); stringhe deallocate: 0 (33125 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9852199643081674 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4549549423223898


ris (2 : 2): [ -1 0.4549549423223898 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33225 interne); stringhe deallocate: 0 (33145 interne)


Stringhe allocate: 1 (33225 interne); stringhe deallocate: 0 (33150 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01477962840320191 0.9852203715967981 0.9900719673100181 0.5450450576776103 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3950707780936364 0.999999943648106 0.9999999565305108 0.9997206667748271 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9878788082127343 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33260 interne); stringhe deallocate: 0 (33180 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.985108861160743 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9852203715967981


ris (2 : 2): [ -1 0.9852203715967981 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33280 interne); stringhe deallocate: 0 (33200 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9852203715967981


ris (2 : 2): [ 1 0.9852203715967981 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33300 interne); stringhe deallocate: 0 (33220 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9900719673100181


ris (2 : 2): [ 1 0.9900719673100181 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33320 interne); stringhe deallocate: 0 (33240 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9852199643082056 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4549549423223898


ris (2 : 2): [ -1 0.4549549423223898 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33340 interne); stringhe deallocate: 0 (33260 interne)


Stringhe allocate: 1 (33340 interne); stringhe deallocate: 0 (33265 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01477962840320191 0.9852203715967981 0.9900719673100181 0.5450450576776103 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3950707780936364 0.999999943648106 0.9999999565305108 0.9997206667748271 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9871578304295419 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33375 interne); stringhe deallocate: 0 (33295 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9852242558468021 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9855861265664545


ris (2 : 2): [ -1 0.9855861265664545 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33395 interne); stringhe deallocate: 0 (33315 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9855861265664545


ris (2 : 2): [ 1 0.9855861265664545 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33415 interne); stringhe deallocate: 0 (33335 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9903293095651232


ris (2 : 2): [ 1 0.9903293095651232 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33435 interne); stringhe deallocate: 0 (33355 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9855856984122671 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4537067925357139


ris (2 : 2): [ -1 0.4537067925357139 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33455 interne); stringhe deallocate: 0 (33375 interne)


Stringhe allocate: 1 (33455 interne); stringhe deallocate: 0 (33380 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.0144138734335455 0.9855861265664545 0.9903293095651232 0.5462932074642861 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3950058968403544 0.9999999440585421 0.9999999567506974 0.9997272447130374 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9878735630977786 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33490 interne); stringhe deallocate: 0 (33410 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9844694225316673 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9857588211743528


ris (2 : 2): [ -1 0.9857588211743528 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33510 interne); stringhe deallocate: 0 (33430 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9857588211743528


ris (2 : 2): [ 1 0.9857588211743528 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33530 interne); stringhe deallocate: 0 (33450 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9904504763388747


ris (2 : 2): [ 1 0.9904504763388747 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33550 interne); stringhe deallocate: 0 (33470 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9857587902969387 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4531104630143767


ris (2 : 2): [ -1 0.4531104630143767 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33570 interne); stringhe deallocate: 0 (33490 interne)


Stringhe allocate: 1 (33570 interne); stringhe deallocate: 0 (33495 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01424117882564724 0.9857588211743528 0.9904504763388747 0.5468895369856233 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3949754142633795 0.999999944251293 0.9999999568539834 0.9997303326148486 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9878735630040794 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33605 interne); stringhe deallocate: 0 (33525 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9852199642186861 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9865124991273258


ris (2 : 2): [ -1 0.9865124991273258 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33625 interne); stringhe deallocate: 0 (33545 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9865124991273258


ris (2 : 2): [ 1 0.9865124991273258 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33645 interne); stringhe deallocate: 0 (33565 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9909792678426258


ris (2 : 2): [ 1 0.9909792678426258 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33665 interne); stringhe deallocate: 0 (33585 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.986512193007167 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4505073636036078


ris (2 : 2): [ -1 0.4505073636036078 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33685 interne); stringhe deallocate: 0 (33605 interne)


Stringhe allocate: 1 (33685 interne); stringhe deallocate: 0 (33610 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01348750087267425 0.9865124991273258 0.9909792678426258 0.5494926363963922 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3948435118501742 0.9999999450847572 0.9999999573018605 0.9997434081795216 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9882207004552583 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33720 interne); stringhe deallocate: 0 (33640 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9852199642185084 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9866170214333909


ris (2 : 2): [ -1 0.9866170214333909 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33740 interne); stringhe deallocate: 0 (33660 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9866170214333909


ris (2 : 2): [ 1 0.9866170214333909 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33760 interne); stringhe deallocate: 0 (33680 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9910526380289962


ris (2 : 2): [ 1 0.9910526380289962 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33780 interne); stringhe deallocate: 0 (33700 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9866166203446065 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4501467734131338


ris (2 : 2): [ -1 0.4501467734131338 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33800 interne); stringhe deallocate: 0 (33720 interne)


Stringhe allocate: 1 (33800 interne); stringhe deallocate: 0 (33725 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01338297856660908 0.9866170214333909 0.9910526380289962 0.5498532265868663 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3948253635700141 0.9999999451993564 0.9999999573636353 0.9997451688000291 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9883828250888698 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33835 interne); stringhe deallocate: 0 (33755 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9855856983192499 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9859331956789985


ris (2 : 2): [ -1 0.9859331956789985 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33855 interne); stringhe deallocate: 0 (33775 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9859331956789985


ris (2 : 2): [ 1 0.9859331956789985 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33875 interne); stringhe deallocate: 0 (33795 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9905728613494527


ris (2 : 2): [ 1 0.9905728613494527 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33895 interne); stringhe deallocate: 0 (33815 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9859328358599138 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4525092284335779


ris (2 : 2): [ -1 0.4525092284335779 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33915 interne); stringhe deallocate: 0 (33835 interne)


Stringhe allocate: 1 (33915 interne); stringhe deallocate: 0 (33840 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01406680432100149 0.9859331956789985 0.9905728613494527 0.5474907715664221 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3949447334864873 0.999999944445245 0.9999999569580573 0.9997334105669748 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9890909282692011 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33950 interne); stringhe deallocate: 0 (33870 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9857587902073561 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9866133112612704


ris (2 : 2): [ -1 0.9866133112612704 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33970 interne); stringhe deallocate: 0 (33890 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9866133112612704


ris (2 : 2): [ 1 0.9866133112612704 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (33990 interne); stringhe deallocate: 0 (33910 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9910497695474492


ris (2 : 2): [ 1 0.9910497695474492 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34010 interne); stringhe deallocate: 0 (33930 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.986613282488026 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4501546679262075


ris (2 : 2): [ -1 0.4501546679262075 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34030 interne); stringhe deallocate: 0 (33950 interne)


Stringhe allocate: 1 (34030 interne); stringhe deallocate: 0 (33955 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01338668873872961 0.9866133112612704 0.9910497695474492 0.5498453320737926 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.394826007170958 0.9999999451952926 0.9999999573612219 0.999745130383724 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9891891567234694 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34065 interne); stringhe deallocate: 0 (33985 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9865121929173455 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9866133112612704


ris (2 : 2): [ -1 0.9866133112612704 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34085 interne); stringhe deallocate: 0 (34005 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9866133112612704


ris (2 : 2): [ 1 0.9866133112612704 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34105 interne); stringhe deallocate: 0 (34025 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9910497695474492


ris (2 : 2): [ 1 0.9910497695474492 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34125 interne); stringhe deallocate: 0 (34045 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9866132824957283 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4501546679262075


ris (2 : 2): [ -1 0.4501546679262075 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34145 interne); stringhe deallocate: 0 (34065 interne)


Stringhe allocate: 1 (34145 interne); stringhe deallocate: 0 (34070 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01338668873872961 0.9866133112612704 0.9910497695474492 0.5498453320737926 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.394826007170958 0.9999999451952926 0.9999999573612219 0.999745130383724 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9885468570713982 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34180 interne); stringhe deallocate: 0 (34100 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9866166202549742 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9869445947418315


ris (2 : 2): [ -1 0.9869445947418315 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34200 interne); stringhe deallocate: 0 (34120 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9869445947418315


ris (2 : 2): [ 1 0.9869445947418315 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34220 interne); stringhe deallocate: 0 (34140 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9912817663115799


ris (2 : 2): [ 1 0.9912817663115799 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34240 interne); stringhe deallocate: 0 (34160 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9869442074835746 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4490014672928159


ris (2 : 2): [ -1 0.4490014672928159 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34260 interne); stringhe deallocate: 0 (34180 interne)


Stringhe allocate: 1 (34260 interne); stringhe deallocate: 0 (34185 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01305540525816851 0.9869445947418315 0.9912817663115799 0.5509985327071841 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3947687129468113 0.9999999455569637 0.9999999575559778 0.999750681243903 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.989184388351898 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34295 interne); stringhe deallocate: 0 (34215 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9859328357709245 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9871010133156783


ris (2 : 2): [ -1 0.9871010133156783 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34315 interne); stringhe deallocate: 0 (34235 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9871010133156783


ris (2 : 2): [ 1 0.9871010133156783 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34335 interne); stringhe deallocate: 0 (34255 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9913909994390988


ris (2 : 2): [ 1 0.9913909994390988 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34355 interne); stringhe deallocate: 0 (34275 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9871006100602155 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4484505638742833


ris (2 : 2): [ -1 0.4484505638742833 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34375 interne); stringhe deallocate: 0 (34295 interne)


Stringhe allocate: 1 (34375 interne); stringhe deallocate: 0 (34300 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01289898668432166 0.9871010133156783 0.9913909994390988 0.5515494361257167 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3947417824114211 0.9999999457268998 0.9999999576473682 0.9997532901951969 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9891843883527116 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34410 interne); stringhe deallocate: 0 (34330 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9866132823948774 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9877836590101815


ris (2 : 2): [ -1 0.9877836590101815 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34430 interne); stringhe deallocate: 0 (34350 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9877836590101815


ris (2 : 2): [ 1 0.9877836590101815 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34450 interne); stringhe deallocate: 0 (34370 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9918677105701758


ris (2 : 2): [ 1 0.9918677105701758 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34470 interne); stringhe deallocate: 0 (34390 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9877834408707971 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4460457589389038


ris (2 : 2): [ -1 0.4460457589389038 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34490 interne); stringhe deallocate: 0 (34410 interne)


Stringhe allocate: 1 (34490 interne); stringhe deallocate: 0 (34415 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.0122163409898185 0.9877836590101815 0.9918677105701758 0.5539542410610963 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3946251571961152 0.9999999464623509 0.999999958043913 0.9997643631526435 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9894938556675825 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34525 interne); stringhe deallocate: 0 (34445 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9866132823948632 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9878783303508335


ris (2 : 2): [ -1 0.9878783303508335 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34545 interne); stringhe deallocate: 0 (34465 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9878783303508335


ris (2 : 2): [ 1 0.9878783303508335 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34565 interne); stringhe deallocate: 0 (34485 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.991933854568902


ris (2 : 2): [ 1 0.991933854568902 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34585 interne); stringhe deallocate: 0 (34505 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9878783314652138 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4457126323463625


ris (2 : 2): [ -1 0.4457126323463625 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34605 interne); stringhe deallocate: 0 (34525 interne)


Stringhe allocate: 1 (34605 interne); stringhe deallocate: 0 (34530 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.0121216696491665 0.9878783303508335 0.991933854568902 0.5542873676536375 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.394609098976022 0.9999999465635554 0.9999999580986396 0.9997658573724062 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9896383373265039 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34640 interne); stringhe deallocate: 0 (34560 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9869442073826669 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9872589534602295


ris (2 : 2): [ -1 0.9872589534602295 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34660 interne); stringhe deallocate: 0 (34580 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9872589534602295


ris (2 : 2): [ 1 0.9872589534602295 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34680 interne); stringhe deallocate: 0 (34600 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9915013308200262


ris (2 : 2): [ 1 0.9915013308200262 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34700 interne); stringhe deallocate: 0 (34620 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9872589199971564 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4478951209498263


ris (2 : 2): [ -1 0.4478951209498263 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34720 interne); stringhe deallocate: 0 (34640 interne)


Stringhe allocate: 1 (34720 interne); stringhe deallocate: 0 (34645 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01274104653977048 0.9872589534602295 0.9915013308200262 0.5521048790501737 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3947146686585397 0.9999999458979505 0.9999999577394776 0.999755893035395 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9902696697239755 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34755 interne); stringhe deallocate: 0 (34675 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9871006100643314 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9878749698530351


ris (2 : 2): [ -1 0.9878749698530351 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34775 interne); stringhe deallocate: 0 (34695 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9878749698530351


ris (2 : 2): [ 1 0.9878749698530351 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34795 interne); stringhe deallocate: 0 (34715 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9919312686022666


ris (2 : 2): [ 1 0.9919312686022666 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34815 interne); stringhe deallocate: 0 (34735 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9878745167679188 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4457199691276612


ris (2 : 2): [ -1 0.4457199691276612 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34835 interne); stringhe deallocate: 0 (34755 interne)


Stringhe allocate: 1 (34835 interne); stringhe deallocate: 0 (34760 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01212503014696487 0.9878749698530351 0.9919312686022666 0.5542800308723388 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3946096685057793 0.9999999465599663 0.9999999580965013 0.9997658245658641 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9903574078548587 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34870 interne); stringhe deallocate: 0 (34790 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.987783440781179 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9878749698530351


ris (2 : 2): [ -1 0.9878749698530351 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34890 interne); stringhe deallocate: 0 (34810 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9878749698530351


ris (2 : 2): [ 1 0.9878749698530351 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34910 interne); stringhe deallocate: 0 (34830 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9919312686022666


ris (2 : 2): [ 1 0.9919312686022666 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34930 interne); stringhe deallocate: 0 (34850 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9878745167679206 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4457199691276612


ris (2 : 2): [ -1 0.4457199691276612 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34950 interne); stringhe deallocate: 0 (34870 interne)


Stringhe allocate: 1 (34950 interne); stringhe deallocate: 0 (34875 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01212503014696487 0.9878749698530351 0.9919312686022666 0.5542800308723388 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3946096685057793 0.9999999465599663 0.9999999580965013 0.9997658245658641 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9897847263341575 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (34985 interne); stringhe deallocate: 0 (34905 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9878783313756685 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9881750306955395


ris (2 : 2): [ -1 0.9881750306955395 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35005 interne); stringhe deallocate: 0 (34925 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9881750306955395


ris (2 : 2): [ 1 0.9881750306955395 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35025 interne); stringhe deallocate: 0 (34945 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9921404161375387


ris (2 : 2): [ 1 0.9921404161375387 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35045 interne); stringhe deallocate: 0 (34965 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9881749241775921 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4446546906581404


ris (2 : 2): [ -1 0.4446546906581404 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35065 interne); stringhe deallocate: 0 (34985 interne)


Stringhe allocate: 1 (35065 interne); stringhe deallocate: 0 (34990 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01182496930446053 0.9881750306955395 0.9921404161375387 0.5553453093418597 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3945589538739715 0.9999999468794933 0.9999999582690871 0.9997705402313438 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9903531162267427 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35100 interne); stringhe deallocate: 0 (35020 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.987258919906985 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9883167072105805


ris (2 : 2): [ -1 0.9883167072105805 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35120 interne); stringhe deallocate: 0 (35040 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9883167072105805


ris (2 : 2): [ 1 0.9883167072105805 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35140 interne); stringhe deallocate: 0 (35060 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9922388909564963


ris (2 : 2): [ 1 0.9922388909564963 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35160 interne); stringhe deallocate: 0 (35080 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9883165448144515 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4441458409946407


ris (2 : 2): [ -1 0.4441458409946407 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35180 interne); stringhe deallocate: 0 (35100 interne)


Stringhe allocate: 1 (35180 interne); stringhe deallocate: 0 (35105 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01168329278941949 0.9883167072105805 0.9922388909564963 0.5558541590053593 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3945351059592592 0.9999999470296965 0.9999999583501008 0.9997727591563022 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9903531162265651 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35215 interne); stringhe deallocate: 0 (35135 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9878745166786249 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9889350152581985


ris (2 : 2): [ -1 0.9889350152581985 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35235 interne); stringhe deallocate: 0 (35155 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9889350152581985


ris (2 : 2): [ 1 0.9889350152581985 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35255 interne); stringhe deallocate: 0 (35175 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9926686510796096


ris (2 : 2): [ 1 0.9926686510796096 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35275 interne); stringhe deallocate: 0 (35195 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9889350026077279 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4419246097153021


ris (2 : 2): [ -1 0.4419246097153021 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35295 interne); stringhe deallocate: 0 (35215 interne)


Stringhe allocate: 1 (35295 interne); stringhe deallocate: 0 (35220 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01106498474180151 0.9889350152581985 0.9926686510796096 0.558075390284698 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3944317555488993 0.9999999476802601 0.9999999587018211 0.9997821968870471 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9906287281044062 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35330 interne); stringhe deallocate: 0 (35250 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9878745166783034 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9890207640621312


ris (2 : 2): [ -1 0.9890207640621312 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35350 interne); stringhe deallocate: 0 (35270 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9890207640621312


ris (2 : 2): [ 1 0.9890207640621312 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35370 interne); stringhe deallocate: 0 (35290 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9927282805935765


ris (2 : 2): [ 1 0.9927282805935765 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35390 interne); stringhe deallocate: 0 (35310 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9890203564590845 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4416169087729761


ris (2 : 2): [ -1 0.4416169087729761 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35410 interne); stringhe deallocate: 0 (35330 interne)


Stringhe allocate: 1 (35410 interne); stringhe deallocate: 0 (35335 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01097923593786876 0.9890207640621312 0.9927282805935765 0.558383091227024 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3944175155679368 0.9999999477698491 0.9999999587503874 0.9997834730130659 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9907574741367995 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35445 interne); stringhe deallocate: 0 (35365 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9881749240879998 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9884597618921112


ris (2 : 2): [ -1 0.9884597618921112 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35465 interne); stringhe deallocate: 0 (35385 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9884597618921112


ris (2 : 2): [ 1 0.9884597618921112 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35485 interne); stringhe deallocate: 0 (35405 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9923383558625328


ris (2 : 2): [ 1 0.9923383558625328 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35505 interne); stringhe deallocate: 0 (35425 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9884595959647573 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4436327916115661


ris (2 : 2): [ -1 0.4436327916115661 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35525 interne); stringhe deallocate: 0 (35445 interne)


Stringhe allocate: 1 (35525 interne); stringhe deallocate: 0 (35450 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01154023810788885 0.9884597618921112 0.9923383558625328 0.5563672083884339 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3945110892790519 0.9999999471809296 0.9999999584317695 0.9997749746928214 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9913201419835076 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35560 interne); stringhe deallocate: 0 (35480 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9883165447239684 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.989017720282749


ris (2 : 2): [ -1 0.989017720282749 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35580 interne); stringhe deallocate: 0 (35500 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.989017720282749


ris (2 : 2): [ 1 0.989017720282749 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35600 interne); stringhe deallocate: 0 (35520 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.992725949317171


ris (2 : 2): [ 1 0.992725949317171 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35620 interne); stringhe deallocate: 0 (35540 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9890174954360989 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4416237218675641


ris (2 : 2): [ -1 0.4416237218675641 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35640 interne); stringhe deallocate: 0 (35560 interne)


Stringhe allocate: 1 (35640 interne); stringhe deallocate: 0 (35565 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01098227971725097 0.989017720282749 0.992725949317171 0.558376278132436 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.394418020650909 0.9999999477666717 0.9999999587484897 0.9997834448381948 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9913983432774352 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35675 interne); stringhe deallocate: 0 (35595 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9889350025189714 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.989017720282749


ris (2 : 2): [ -1 0.989017720282749 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35695 interne); stringhe deallocate: 0 (35615 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.989017720282749


ris (2 : 2): [ 1 0.989017720282749 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35715 interne); stringhe deallocate: 0 (35635 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.992725949317171


ris (2 : 2): [ 1 0.992725949317171 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35735 interne); stringhe deallocate: 0 (35655 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9890174954363662 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4416237218675641


ris (2 : 2): [ -1 0.4416237218675641 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35755 interne); stringhe deallocate: 0 (35675 interne)


Stringhe allocate: 1 (35755 interne); stringhe deallocate: 0 (35680 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01098227971725097 0.989017720282749 0.992725949317171 0.558376278132436 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.394418020650909 0.9999999477666717 0.9999999587484897 0.9997834448381948 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9908881275189714 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35790 interne); stringhe deallocate: 0 (35710 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9890203563694868 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9892895011422801


ris (2 : 2): [ -1 0.9892895011422801 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35810 interne); stringhe deallocate: 0 (35730 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9892895011422801


ris (2 : 2): [ 1 0.9892895011422801 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35830 interne); stringhe deallocate: 0 (35750 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9929144980305119


ris (2 : 2): [ 1 0.9929144980305119 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35850 interne); stringhe deallocate: 0 (35770 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.989289292616335 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4406398259300942


ris (2 : 2): [ -1 0.4406398259300942 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35870 interne); stringhe deallocate: 0 (35790 interne)


Stringhe allocate: 1 (35870 interne); stringhe deallocate: 0 (35795 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01071049885771991 0.9892895011422801 0.9929144980305119 0.5593601740699058 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3943730332517861 0.9999999480496289 0.9999999589016877 0.9997874759504221 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9913945285801802 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35905 interne); stringhe deallocate: 0 (35825 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9884595958714257 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9894178250004877


ris (2 : 2): [ -1 0.9894178250004877 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35925 interne); stringhe deallocate: 0 (35845 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9894178250004877


ris (2 : 2): [ 1 0.9894178250004877 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35945 interne); stringhe deallocate: 0 (35865 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9930032741203456


ris (2 : 2): [ 1 0.9930032741203456 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35965 interne); stringhe deallocate: 0 (35885 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9894175618120622 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4401698935613147


ris (2 : 2): [ -1 0.4401698935613147 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (35985 interne); stringhe deallocate: 0 (35905 interne)


Stringhe allocate: 1 (35985 interne); stringhe deallocate: 0 (35910 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01058217499951231 0.9894178250004877 0.9930032741203456 0.5598301064386853 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3943518704092636 0.9999999481826964 0.9999999589736223 0.9997893747654878 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.991394528580166 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36020 interne); stringhe deallocate: 0 (35940 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9890174953465341 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.989977859062654


ris (2 : 2): [ -1 0.989977859062654 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36040 interne); stringhe deallocate: 0 (35960 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.989977859062654


ris (2 : 2): [ 1 0.989977859062654 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36060 interne); stringhe deallocate: 0 (35980 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9933907074124526


ris (2 : 2): [ 1 0.9933907074124526 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36080 interne); stringhe deallocate: 0 (36000 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9899778454763073 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4381185447271468


ris (2 : 2): [ -1 0.4381185447271468 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36100 interne); stringhe deallocate: 0 (36020 interne)


Stringhe allocate: 1 (36100 interne); stringhe deallocate: 0 (36025 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01002214093734599 0.989977859062654 0.9933907074124526 0.5618814552728533 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3942600961378954 0.9999999487594553 0.9999999592860853 0.9997974669637788 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9916400997166512 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36135 interne); stringhe deallocate: 0 (36055 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9890174954403079 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9900555262565136


ris (2 : 2): [ -1 0.9900555262565136 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36155 interne); stringhe deallocate: 0 (36075 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9900555262565136


ris (2 : 2): [ 1 0.9900555262565136 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36175 interne); stringhe deallocate: 0 (36095 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9934444640493989


ris (2 : 2): [ 1 0.9934444640493989 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36195 interne); stringhe deallocate: 0 (36115 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9900550931036385 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4378343738493235


ris (2 : 2): [ -1 0.4378343738493235 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36215 interne); stringhe deallocate: 0 (36135 interne)


Stringhe allocate: 1 (36215 interne); stringhe deallocate: 0 (36140 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.009944473743486393 0.9900555262565136 0.9934444640493989 0.5621656261506765 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3942474434386704 0.9999999488389333 0.9999999593292513 0.9997985631949814 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9917550175655521 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36250 interne); stringhe deallocate: 0 (36170 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9892892925267844 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.989547397136454


ris (2 : 2): [ -1 0.989547397136454 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36270 interne); stringhe deallocate: 0 (36190 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.989547397136454


ris (2 : 2): [ 1 0.989547397136454 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36290 interne); stringhe deallocate: 0 (36210 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9930929427841614


ris (2 : 2): [ 1 0.9930929427841614 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36310 interne); stringhe deallocate: 0 (36230 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9895472615302055 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4396960770315296


ris (2 : 2): [ -1 0.4396960770315296 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36330 interne); stringhe deallocate: 0 (36250 interne)


Stringhe allocate: 1 (36330 interne); stringhe deallocate: 0 (36255 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.01045260286354599 0.989547397136454 0.9930929427841614 0.5603039229684704 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3943305525531127 0.9999999483167128 0.9999999590461521 0.9997912721149063 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9922566501622825 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36365 interne); stringhe deallocate: 0 (36285 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9894175617223482 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9900527693456489


ris (2 : 2): [ -1 0.9900527693456489 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36385 interne); stringhe deallocate: 0 (36305 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9900527693456489


ris (2 : 2): [ 1 0.9900527693456489 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36405 interne); stringhe deallocate: 0 (36325 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9934423623789666


ris (2 : 2): [ 1 0.9934423623789666 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36425 interne); stringhe deallocate: 0 (36345 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9900527089066511 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4378406963284832


ris (2 : 2): [ -1 0.4378406963284832 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36445 interne); stringhe deallocate: 0 (36365 interne)


Stringhe allocate: 1 (36445 interne); stringhe deallocate: 0 (36370 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.009947230654351102 0.9900527693456489 0.9934423623789666 0.5621593036715169 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.394247892253931 0.9999999488361143 0.9999999593275646 0.9997985388696833 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9923262683873872 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36480 interne); stringhe deallocate: 0 (36400 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9899778453830592 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9900527693456489


ris (2 : 2): [ -1 0.9900527693456489 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36500 interne); stringhe deallocate: 0 (36420 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9900527693456489


ris (2 : 2): [ 1 0.9900527693456489 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36520 interne); stringhe deallocate: 0 (36440 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9934423623789666


ris (2 : 2): [ 1 0.9934423623789666 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36540 interne); stringhe deallocate: 0 (36460 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9900527089066857 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4378406963284832


ris (2 : 2): [ -1 0.4378406963284832 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36560 interne); stringhe deallocate: 0 (36480 interne)


Stringhe allocate: 1 (36560 interne); stringhe deallocate: 0 (36485 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.009947230654351102 0.9900527693456489 0.9934423623789666 0.5621593036715169 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.394247892253931 0.9999999488361143 0.9999999593275646 0.9997985388696833 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9918713657382838 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36595 interne); stringhe deallocate: 0 (36515 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9900550930030878 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9902989355395115


ris (2 : 2): [ -1 0.9902989355395115 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36615 interne); stringhe deallocate: 0 (36535 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9902989355395115


ris (2 : 2): [ 1 0.9902989355395115 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36635 interne); stringhe deallocate: 0 (36555 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9936123410361936


ris (2 : 2): [ 1 0.9936123410361936 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36655 interne); stringhe deallocate: 0 (36575 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9902987568802528 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4369321030499929


ris (2 : 2): [ -1 0.4369321030499929 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36675 interne); stringhe deallocate: 0 (36595 interne)


Stringhe allocate: 1 (36675 interne); stringhe deallocate: 0 (36600 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.009701064460488462 0.9902989355395115 0.9936123410361936 0.5630678969500071 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3942079072881833 0.9999999490872202 0.9999999594637605 0.9998020046978086 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9923229305275019 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36710 interne); stringhe deallocate: 0 (36630 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.98954726142928 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9904151651952418


ris (2 : 2): [ -1 0.9904151651952418 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36730 interne); stringhe deallocate: 0 (36650 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9904151651952418


ris (2 : 2): [ 1 0.9904151651952418 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36750 interne); stringhe deallocate: 0 (36670 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9936923736190445


ris (2 : 2): [ 1 0.9936923736190445 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36770 interne); stringhe deallocate: 0 (36690 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9904151051473029 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4364981736055812


ris (2 : 2): [ -1 0.4364981736055812 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36790 interne); stringhe deallocate: 0 (36710 interne)


Stringhe allocate: 1 (36790 interne); stringhe deallocate: 0 (36715 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.009584834804758247 0.9904151651952418 0.9936923736190445 0.5635018263944188 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.394189091155317 0.9999999492053537 0.9999999595277287 0.9998036388382769 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9923229305271804 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36825 interne); stringhe deallocate: 0 (36745 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9900527088170037 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9909224174486622


ris (2 : 2): [ -1 0.9909224174486622 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36845 interne); stringhe deallocate: 0 (36765 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9909224174486622


ris (2 : 2): [ 1 0.9909224174486622 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36865 interne); stringhe deallocate: 0 (36785 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9940416488248934


ris (2 : 2): [ 1 0.9940416488248934 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36885 interne); stringhe deallocate: 0 (36805 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.990921983045995 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4346039854150146


ris (2 : 2): [ -1 0.4346039854150146 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36905 interne); stringhe deallocate: 0 (36825 interne)


Stringhe allocate: 1 (36905 interne); stringhe deallocate: 0 (36830 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.009077582551337837 0.9909224174486622 0.9940416488248934 0.5653960145849855 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3941074449603402 0.9999999497177141 0.9999999598057174 0.9998106158328667 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.992541798782824 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36940 interne); stringhe deallocate: 0 (36860 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9900527088169859 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9909927647038895


ris (2 : 2): [ -1 0.9909927647038895 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36960 interne); stringhe deallocate: 0 (36880 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9909927647038895


ris (2 : 2): [ 1 0.9909927647038895 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (36980 interne); stringhe deallocate: 0 (36900 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9940901110010258


ris (2 : 2): [ 1 0.9940901110010258 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37000 interne); stringhe deallocate: 0 (36920 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9909925549454108 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4343415830950026


ris (2 : 2): [ -1 0.4343415830950026 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37020 interne); stringhe deallocate: 0 (36940 interne)


Stringhe allocate: 1 (37020 interne); stringhe deallocate: 0 (36945 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.009007235296110472 0.9909927647038895 0.9940901110010258 0.5656584169049974 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3940961823644076 0.9999999497883605 0.9999999598441375 0.9998115626211444 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9926438419346617 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37055 interne); stringhe deallocate: 0 (36975 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9902987567914323 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9905325254816847


ris (2 : 2): [ -1 0.9905325254816847 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37075 interne); stringhe deallocate: 0 (36995 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9905325254816847


ris (2 : 2): [ 1 0.9905325254816847 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37095 interne); stringhe deallocate: 0 (37015 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9937732108667842


ris (2 : 2): [ 1 0.9937732108667842 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37115 interne); stringhe deallocate: 0 (37035 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9905324070877484 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4360606528379727


ris (2 : 2): [ -1 0.4360606528379727 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37135 interne); stringhe deallocate: 0 (37055 interne)


Stringhe allocate: 1 (37135 interne); stringhe deallocate: 0 (37060 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.009467474518315311 0.9905325254816847 0.9937732108667842 0.5639393471620273 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3941701329639374 0.9999999493243581 0.9999999595922378 0.9998052728600601 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9930906383527116 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37170 interne); stringhe deallocate: 0 (37090 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.990415105057231 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9909902676249177


ris (2 : 2): [ -1 0.9909902676249177 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37190 interne); stringhe deallocate: 0 (37110 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9909902676249177


ris (2 : 2): [ 1 0.9909902676249177 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37210 interne); stringhe deallocate: 0 (37130 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9940882163228352


ris (2 : 2): [ 1 0.9940882163228352 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37230 interne); stringhe deallocate: 0 (37150 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9909901707604965 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4343474468051256


ris (2 : 2): [ -1 0.4343474468051256 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37250 interne); stringhe deallocate: 0 (37170 interne)


Stringhe allocate: 1 (37250 interne); stringhe deallocate: 0 (37175 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.009009732375082291 0.9909902676249177 0.9940882163228352 0.5656525531948744 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3940965818960192 0.9999999497858545 0.9999999598426361 0.9998115415157183 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9931531040196333 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37285 interne); stringhe deallocate: 0 (37205 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9909219829563867 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9909902676249177


ris (2 : 2): [ -1 0.9909902676249177 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37305 interne); stringhe deallocate: 0 (37225 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9909902676249177


ris (2 : 2): [ 1 0.9909902676249177 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37325 interne); stringhe deallocate: 0 (37245 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9940882163228352


ris (2 : 2): [ 1 0.9940882163228352 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37345 interne); stringhe deallocate: 0 (37265 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9909901707595834 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4343474468051256


ris (2 : 2): [ -1 0.4343474468051256 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37365 interne); stringhe deallocate: 0 (37285 interne)


Stringhe allocate: 1 (37365 interne); stringhe deallocate: 0 (37290 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.009009732375082291 0.9909902676249177 0.9940882163228352 0.5656525531948744 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3940965818960192 0.9999999497858545 0.9999999598426361 0.9998115415157183 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9927473155979882 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37400 interne); stringhe deallocate: 0 (37320 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9909925548558114 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.991213233271009


ris (2 : 2): [ -1 0.991213233271009 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37420 interne); stringhe deallocate: 0 (37340 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.991213233271009


ris (2 : 2): [ 1 0.991213233271009 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37440 interne); stringhe deallocate: 0 (37360 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9942414538779165


ris (2 : 2): [ 1 0.9942414538779165 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37460 interne); stringhe deallocate: 0 (37380 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9912128537125025 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4335085086802165


ris (2 : 2): [ -1 0.4335085086802165 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37480 interne); stringhe deallocate: 0 (37400 interne)


Stringhe allocate: 1 (37480 interne); stringhe deallocate: 0 (37405 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.008786766728991036 0.991213233271009 0.9942414538779165 0.5664914913197835 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3940609801076793 0.9999999500091243 0.9999999599638832 0.9998145372538025 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9931497661595223 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37515 interne); stringhe deallocate: 0 (37435 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9905324070919193 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9913185085724778


ris (2 : 2): [ -1 0.9913185085724778 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37535 interne); stringhe deallocate: 0 (37455 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9913185085724778


ris (2 : 2): [ 1 0.9913185085724778 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37555 interne); stringhe deallocate: 0 (37475 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9943136040967006


ris (2 : 2): [ 1 0.9943136040967006 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37575 interne); stringhe deallocate: 0 (37495 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.991318234728185 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4331078763102546


ris (2 : 2): [ -1 0.4331078763102546 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37595 interne); stringhe deallocate: 0 (37515 interne)


Stringhe allocate: 1 (37595 interne); stringhe deallocate: 0 (37520 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.00868149142752217 0.9913185085724778 0.9943136040967006 0.5668921236897454 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3940442213450469 0.9999999501141978 0.9999999600208442 0.9998159510257767 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9931497662532962 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37630 interne); stringhe deallocate: 0 (37550 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.990990170670095 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9917779535700962


ris (2 : 2): [ -1 0.9917779535700962 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37650 interne); stringhe deallocate: 0 (37570 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9917779535700962


ris (2 : 2): [ 1 0.9917779535700962 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37670 interne); stringhe deallocate: 0 (37590 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9946284793840035


ris (2 : 2): [ 1 0.9946284793840035 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37690 interne); stringhe deallocate: 0 (37610 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9917779057449367 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4313590371581147


ris (2 : 2): [ -1 0.4313590371581147 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37710 interne); stringhe deallocate: 0 (37630 interne)


Stringhe allocate: 1 (37710 interne); stringhe deallocate: 0 (37635 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.008222046429903762 0.9917779535700962 0.9946284793840035 0.5686409628418854 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3939714631236052 0.9999999505701835 0.9999999602684846 0.9998219973891546 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.993344792557302 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37745 interne); stringhe deallocate: 0 (37665 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9909901706701021 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9918416707725262


ris (2 : 2): [ -1 0.9918416707725262 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37765 interne); stringhe deallocate: 0 (37685 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9918416707725262


ris (2 : 2): [ 1 0.9918416707725262 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37785 interne); stringhe deallocate: 0 (37705 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.994672168547683


ris (2 : 2): [ 1 0.994672168547683 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37805 interne); stringhe deallocate: 0 (37725 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9918413250872451 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.431116767809386


ris (2 : 2): [ -1 0.431116767809386 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37825 interne); stringhe deallocate: 0 (37745 interne)


Stringhe allocate: 1 (37825 interne); stringhe deallocate: 0 (37750 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.008158329227473837 0.9918416707725262 0.994672168547683 0.5688832321906141 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3939614215333045 0.999999950633091 0.9999999603027234 0.9998228191985941 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9934363452916841 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37860 interne); stringhe deallocate: 0 (37780 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9912128536228053 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9914248079455507


ris (2 : 2): [ -1 0.9914248079455507 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37880 interne); stringhe deallocate: 0 (37800 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9914248079455507


ris (2 : 2): [ 1 0.9914248079455507 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37900 interne); stringhe deallocate: 0 (37820 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9943864797293922


ris (2 : 2): [ 1 0.9943864797293922 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37920 interne); stringhe deallocate: 0 (37840 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9914245694107686 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4327039241934749


ris (2 : 2): [ -1 0.4327039241934749 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37940 interne); stringhe deallocate: 0 (37860 interne)


Stringhe allocate: 1 (37940 interne); stringhe deallocate: 0 (37865 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.008575192054449343 0.9914248079455507 0.9943864797293922 0.5672960758065251 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.39402733263641 0.9999999502200694 0.9999999600782958 0.9998173656101073 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9938340274814479 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37975 interne); stringhe deallocate: 0 (37895 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9913182346351679 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9918394090369535


ris (2 : 2): [ -1 0.9918394090369535 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (37995 interne); stringhe deallocate: 0 (37915 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9918394090369535


ris (2 : 2): [ 1 0.9918394090369535 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38015 interne); stringhe deallocate: 0 (37935 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9946704604752092


ris (2 : 2): [ 1 0.9946704604752092 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38035 interne); stringhe deallocate: 0 (37955 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9918394177385759 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4311222032095502


ris (2 : 2): [ -1 0.4311222032095502 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38055 interne); stringhe deallocate: 0 (37975 interne)


Stringhe allocate: 1 (38055 interne); stringhe deallocate: 0 (37980 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.008160590963046555 0.9918394090369535 0.9946704604752092 0.5688777967904498 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3939617777716966 0.9999999506308593 0.9999999603013854 0.9998228008026434 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9938893405921991 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38090 interne); stringhe deallocate: 0 (38010 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9917779056553542 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9918394090369535


ris (2 : 2): [ -1 0.9918394090369535 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38110 interne); stringhe deallocate: 0 (38030 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9918394090369535


ris (2 : 2): [ 1 0.9918394090369535 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38130 interne); stringhe deallocate: 0 (38050 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9946704604752092


ris (2 : 2): [ 1 0.9946704604752092 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38150 interne); stringhe deallocate: 0 (38070 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9918394177419323 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4311222032095502


ris (2 : 2): [ -1 0.4311222032095502 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38170 interne); stringhe deallocate: 0 (38090 interne)


Stringhe allocate: 1 (38170 interne); stringhe deallocate: 0 (38095 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.008160590963046555 0.9918394090369535 0.9946704604752092 0.5688777967904498 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3939617777716966 0.9999999506308593 0.9999999603013854 0.9998228008026434 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9935283748631179 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38205 interne); stringhe deallocate: 0 (38125 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9918413249974236 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9920413607286612


ris (2 : 2): [ -1 0.9920413607286612 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38225 interne); stringhe deallocate: 0 (38145 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9920413607286612


ris (2 : 2): [ 1 0.9920413607286612 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38245 interne); stringhe deallocate: 0 (38165 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9948086057495844


ris (2 : 2): [ 1 0.9948086057495844 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38265 interne); stringhe deallocate: 0 (38185 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9920411198675545 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4303476782966556


ris (2 : 2): [ -1 0.4303476782966556 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38285 interne); stringhe deallocate: 0 (38205 interne)


Stringhe allocate: 1 (38285 interne); stringhe deallocate: 0 (38210 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.007958639271338774 0.9920413607286612 0.9948086057495844 0.5696523217033445 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3939300277223132 0.9999999508297253 0.9999999604094585 0.9998254030138896 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.993886956406115 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38320 interne); stringhe deallocate: 0 (38240 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9914245693211363 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9921367140962699


ris (2 : 2): [ -1 0.9921367140962699 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38340 interne); stringhe deallocate: 0 (38260 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9921367140962699


ris (2 : 2): [ 1 0.9921367140962699 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38360 interne); stringhe deallocate: 0 (38280 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9948736499337864


ris (2 : 2): [ 1 0.9948736499337864 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38380 interne); stringhe deallocate: 0 (38300 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9921364872992484 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4299778324826012


ris (2 : 2): [ -1 0.4299778324826012 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38400 interne); stringhe deallocate: 0 (38320 interne)


Stringhe allocate: 1 (38400 interne); stringhe deallocate: 0 (38325 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.007863285903730088 0.9921367140962699 0.9948736499337864 0.5700221675173989 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3939150778221912 0.9999999509233429 0.9999999604602414 0.9998266320988076 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9938869564060973 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38435 interne); stringhe deallocate: 0 (38355 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9918394176495866 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9925528575519802


ris (2 : 2): [ -1 0.9925528575519802 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38455 interne); stringhe deallocate: 0 (38375 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9925528575519802


ris (2 : 2): [ 1 0.9925528575519802 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38475 interne); stringhe deallocate: 0 (38395 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9951575133306524


ris (2 : 2): [ 1 0.9951575133306524 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38495 interne); stringhe deallocate: 0 (38415 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9925527661271101 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.428363383401728


ris (2 : 2): [ -1 0.428363383401728 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38515 interne); stringhe deallocate: 0 (38435 interne)


Stringhe allocate: 1 (38515 interne); stringhe deallocate: 0 (38440 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.007447142448019806 0.9925528575519802 0.9951575133306524 0.571636616598272 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3938501409917077 0.9999999513298297 0.9999999606811056 0.9998318968463514 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9940605251324968 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38550 interne); stringhe deallocate: 0 (38470 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9918394176487837 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9926105695674503


ris (2 : 2): [ -1 0.9926105695674503 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38570 interne); stringhe deallocate: 0 (38490 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9926105695674503


ris (2 : 2): [ 1 0.9926105695674503 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38590 interne); stringhe deallocate: 0 (38510 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9951968995731162


ris (2 : 2): [ 1 0.9951968995731162 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38610 interne); stringhe deallocate: 0 (38530 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9926104634232873 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4281397294187151


ris (2 : 2): [ -1 0.4281397294187151 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38630 interne); stringhe deallocate: 0 (38550 interne)


Stringhe allocate: 1 (38630 interne); stringhe deallocate: 0 (38555 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.007389430432549693 0.9926105695674503 0.9951968995731162 0.571860270581285 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3938411747795426 0.999999951385936 0.999999960711653 0.9998326134755126 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9941420642857466 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38665 interne); stringhe deallocate: 0 (38585 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9920411197666894 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9922329950193011


ris (2 : 2): [ -1 0.9922329950193011 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38685 interne); stringhe deallocate: 0 (38605 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9922329950193011


ris (2 : 2): [ 1 0.9922329950193011 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38705 interne); stringhe deallocate: 0 (38625 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9949393480862958


ris (2 : 2): [ 1 0.9949393480862958 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38725 interne); stringhe deallocate: 0 (38645 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9922328083939247 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.429604918638141


ris (2 : 2): [ -1 0.429604918638141 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38745 interne); stringhe deallocate: 0 (38665 interne)


Stringhe allocate: 1 (38745 interne); stringhe deallocate: 0 (38670 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.007767004980698933 0.9922329950193011 0.9949393480862958 0.570395081361859 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.393900009234993 0.9999999510176905 0.999999960511469 0.9998278626260704 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9944968311314355 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38780 interne); stringhe deallocate: 0 (38700 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9921364871983407 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9926085209947602


ris (2 : 2): [ -1 0.9926085209947602 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38800 interne); stringhe deallocate: 0 (38720 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9926085209947602


ris (2 : 2): [ 1 0.9926085209947602 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38820 interne); stringhe deallocate: 0 (38740 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9951953597276859


ris (2 : 2): [ 1 0.9951953597276859 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38840 interne); stringhe deallocate: 0 (38760 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9926080792378791 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.428144765484304


ris (2 : 2): [ -1 0.428144765484304 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38860 interne); stringhe deallocate: 0 (38780 interne)


Stringhe allocate: 1 (38860 interne); stringhe deallocate: 0 (38785 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.007391479005239843 0.9926085209947602 0.9951953597276859 0.571855234515696 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3938414928844912 0.9999999513839455 0.9999999607104592 0.9998325973726623 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9945459453587411 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38895 interne); stringhe deallocate: 0 (38815 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9925527661312259 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9926085209947602


ris (2 : 2): [ -1 0.9926085209947602 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38915 interne); stringhe deallocate: 0 (38835 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9926085209947602


ris (2 : 2): [ 1 0.9926085209947602 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38935 interne); stringhe deallocate: 0 (38855 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9951953597276859


ris (2 : 2): [ 1 0.9951953597276859 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38955 interne); stringhe deallocate: 0 (38875 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9926080792374012 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.428144765484304


ris (2 : 2): [ -1 0.428144765484304 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (38975 interne); stringhe deallocate: 0 (38895 interne)


Stringhe allocate: 1 (38975 interne); stringhe deallocate: 0 (38900 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.007391479005239843 0.9926085209947602 0.9951953597276859 0.571855234515696 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3938414928844912 0.9999999513839455 0.9999999607104592 0.9998325973726623 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9942240803707279 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39010 interne); stringhe deallocate: 0 (38930 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9926104633336692 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.992791439244566


ris (2 : 2): [ -1 0.992791439244566 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39030 interne); stringhe deallocate: 0 (38950 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.992791439244566


ris (2 : 2): [ 1 0.992791439244566 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39050 interne); stringhe deallocate: 0 (38970 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9953198991513887


ris (2 : 2): [ 1 0.9953198991513887 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39070 interne); stringhe deallocate: 0 (38990 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.992791184706153 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4274297914518672


ris (2 : 2): [ -1 0.4274297914518672 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39090 interne); stringhe deallocate: 0 (39010 interne)


Stringhe allocate: 1 (39090 interne); stringhe deallocate: 0 (39015 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.007208560755433968 0.992791439244566 0.9953198991513887 0.5725702085481328 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3938131365967885 0.9999999515613549 0.9999999608068971 0.9998348680865248 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9945435611730247 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39125 interne); stringhe deallocate: 0 (39045 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9922328083043794 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9928778057956974


ris (2 : 2): [ -1 0.9928778057956974 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39145 interne); stringhe deallocate: 0 (39065 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9928778057956974


ris (2 : 2): [ 1 0.9928778057956974 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39165 interne); stringhe deallocate: 0 (39085 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9953785371702775


ris (2 : 2): [ 1 0.9953785371702775 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39185 interne); stringhe deallocate: 0 (39105 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9928774922317913 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4270884043015815


ris (2 : 2): [ -1 0.4270884043015815 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39205 interne); stringhe deallocate: 0 (39125 interne)


Stringhe allocate: 1 (39205 interne); stringhe deallocate: 0 (39130 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.007122194204302601 0.9928778057956974 0.9953785371702775 0.5729115956984185 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3937997812415466 0.9999999516448952 0.9999999608522219 0.9998359414286805 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9945435611730318 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39240 interne); stringhe deallocate: 0 (39160 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9926080791477077 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9932547287712267


ris (2 : 2): [ -1 0.9932547287712267 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39260 interne); stringhe deallocate: 0 (39180 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9932547287712267


ris (2 : 2): [ 1 0.9932547287712267 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39280 interne); stringhe deallocate: 0 (39200 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9956344430200006


ris (2 : 2): [ 1 0.9956344430200006 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39300 interne); stringhe deallocate: 0 (39220 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9932546704248031 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4255981835131167


ris (2 : 2): [ -1 0.4255981835131167 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39320 interne); stringhe deallocate: 0 (39240 interne)


Stringhe allocate: 1 (39320 interne); stringhe deallocate: 0 (39245 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.006745271228773331 0.9932547287712267 0.9956344430200006 0.5744018164868833 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3937417447628798 0.9999999520078005 0.9999999610494137 0.999840545727255 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9946985332492702 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39355 interne); stringhe deallocate: 0 (39275 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9926080791481073 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9933070015735462


ris (2 : 2): [ -1 0.9933070015735462 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39375 interne); stringhe deallocate: 0 (39295 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9933070015735462


ris (2 : 2): [ 1 0.9933070015735462 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39395 interne); stringhe deallocate: 0 (39315 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9956699501334878


ris (2 : 2): [ 1 0.9956699501334878 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39415 interne); stringhe deallocate: 0 (39335 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9933066456741342 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4253917376167893


ris (2 : 2): [ -1 0.4253917376167893 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39435 interne); stringhe deallocate: 0 (39355 interne)


Stringhe allocate: 1 (39435 interne); stringhe deallocate: 0 (39360 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.006692998426453767 0.9933070015735462 0.9956699501334878 0.5746082623832107 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3937337280192519 0.9999999520579137 0.9999999610766955 0.9998411733113496 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9947710124977167 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39470 interne); stringhe deallocate: 0 (39390 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9927911846165358 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9929650124824767


ris (2 : 2): [ -1 0.9929650124824767 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39490 interne); stringhe deallocate: 0 (39410 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9929650124824767


ris (2 : 2): [ 1 0.9929650124824767 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39510 interne); stringhe deallocate: 0 (39430 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9954377647485078


ris (2 : 2): [ 1 0.9954377647485078 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39530 interne); stringhe deallocate: 0 (39450 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9929647534317407 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4267441823145419


ris (2 : 2): [ -1 0.4267441823145419 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39550 interne); stringhe deallocate: 0 (39470 interne)


Stringhe allocate: 1 (39550 interne); stringhe deallocate: 0 (39475 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.007034987517523295 0.9929650124824767 0.9954377647485078 0.5732558176854581 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3937863176171615 0.9999999517291018 0.9999999608979491 0.9998370166251025 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9950871555332839 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39585 interne); stringhe deallocate: 0 (39505 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.992877492142199 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9933051460736779


ris (2 : 2): [ -1 0.9933051460736779 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39605 interne); stringhe deallocate: 0 (39525 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9933051460736779


ris (2 : 2): [ 1 0.9933051460736779 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39625 interne); stringhe deallocate: 0 (39545 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9956685619465289


ris (2 : 2): [ 1 0.9956685619465289 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39645 interne); stringhe deallocate: 0 (39565 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9933047383292593 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4253964017921039


ris (2 : 2): [ -1 0.4253964017921039 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39665 interne); stringhe deallocate: 0 (39585 interne)


Stringhe allocate: 1 (39665 interne); stringhe deallocate: 0 (39590 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.006694853926322075 0.9933051460736779 0.9956685619465289 0.5746035982078961 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3937340124525459 0.9999999520561358 0.9999999610756293 0.9998411591598051 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.995131024551867 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39700 interne); stringhe deallocate: 0 (39620 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9932546703343199 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9933051460736779


ris (2 : 2): [ -1 0.9933051460736779 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39720 interne); stringhe deallocate: 0 (39640 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9933051460736779


ris (2 : 2): [ 1 0.9933051460736779 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39740 interne); stringhe deallocate: 0 (39660 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9956685619465289


ris (2 : 2): [ 1 0.9956685619465289 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39760 interne); stringhe deallocate: 0 (39680 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9933047383255031 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4253964017921039


ris (2 : 2): [ -1 0.4253964017921039 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39780 interne); stringhe deallocate: 0 (39700 interne)


Stringhe allocate: 1 (39780 interne); stringhe deallocate: 0 (39705 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.006694853926322075 0.9933051460736779 0.9956685619465289 0.5746035982078961 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3937340124525459 0.9999999520561358 0.9999999610756293 0.9998411591598051 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9948439685826109 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39815 interne); stringhe deallocate: 0 (39735 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9933066455853776 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9934708247357565


ris (2 : 2): [ -1 0.9934708247357565 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39835 interne); stringhe deallocate: 0 (39755 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9934708247357565


ris (2 : 2): [ 1 0.9934708247357565 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39855 interne); stringhe deallocate: 0 (39775 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9957808355520037


ris (2 : 2): [ 1 0.9957808355520037 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39875 interne); stringhe deallocate: 0 (39795 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9934706776568252 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4247364709905508


ris (2 : 2): [ -1 0.4247364709905508 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39895 interne); stringhe deallocate: 0 (39815 interne)


Stringhe allocate: 1 (39895 interne); stringhe deallocate: 0 (39820 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.006529175264243459 0.9934708247357565 0.9957808355520037 0.5752635290094492 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3937086537160774 0.9999999522146301 0.9999999611617716 0.9998431489810001 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9951286403668718 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39930 interne); stringhe deallocate: 0 (39850 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9929647533421431 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9935490514553365


ris (2 : 2): [ -1 0.9935490514553365 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39950 interne); stringhe deallocate: 0 (39870 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9935490514553365


ris (2 : 2): [ 1 0.9935490514553365 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39970 interne); stringhe deallocate: 0 (39890 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9958336983451462


ris (2 : 2): [ 1 0.9958336983451462 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (39990 interne); stringhe deallocate: 0 (39910 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9935488789505635 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.424421385084589


ris (2 : 2): [ -1 0.424421385084589 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40010 interne); stringhe deallocate: 0 (39930 interne)


Stringhe allocate: 1 (40010 interne); stringhe deallocate: 0 (39935 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.006450948544663548 0.9935490514553365 0.9958336983451462 0.575578614915411 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.393696707362347 0.9999999522892826 0.9999999612022645 0.9998440902218391 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9951286403660689 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40045 interne); stringhe deallocate: 0 (39965 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9933047382359277 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9938904503826287


ris (2 : 2): [ -1 0.9938904503826287 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40065 interne); stringhe deallocate: 0 (39985 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9938904503826287


ris (2 : 2): [ 1 0.9938904503826287 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40085 interne); stringhe deallocate: 0 (40005 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9960644001705941


ris (2 : 2): [ 1 0.9960644001705941 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40105 interne); stringhe deallocate: 0 (40025 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9938902943560075 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4230459749514643


ris (2 : 2): [ -1 0.4230459749514643 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40125 interne); stringhe deallocate: 0 (40045 interne)


Stringhe allocate: 1 (40125 interne); stringhe deallocate: 0 (40050 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.006109549617371313 0.9938904503826287 0.9960644001705941 0.5769540250485357 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3936447728843558 0.9999999526137197 0.9999999613784893 0.9998481332635112 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9952669231419336 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40160 interne); stringhe deallocate: 0 (40080 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9933047382359383 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9939377966040018


ris (2 : 2): [ -1 0.9939377966040018 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40180 interne); stringhe deallocate: 0 (40100 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9939377966040018


ris (2 : 2): [ 1 0.9939377966040018 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40200 interne); stringhe deallocate: 0 (40120 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9960964102083025


ris (2 : 2): [ 1 0.9960964102083025 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40220 interne); stringhe deallocate: 0 (40140 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.993937501238026 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4228554328621528


ris (2 : 2): [ -1 0.4228554328621528 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40240 interne); stringhe deallocate: 0 (40160 interne)


Stringhe allocate: 1 (40240 interne); stringhe deallocate: 0 (40165 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.006062203395998167 0.9939377966040018 0.9960964102083025 0.5771445671378472 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3936375963467921 0.999999952658539 0.9999999614028772 0.9998486850400681 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9953312961583016 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40275 interne); stringhe deallocate: 0 (40195 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9934706776607669 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9936280391298838


ris (2 : 2): [ -1 0.9936280391298838 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40295 interne); stringhe deallocate: 0 (40215 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9936280391298838


ris (2 : 2): [ 1 0.9936280391298838 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40315 interne); stringhe deallocate: 0 (40235 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9958870926322653


ris (2 : 2): [ 1 0.9958870926322653 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40335 interne); stringhe deallocate: 0 (40255 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9936280339300545 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4241036802821298


ris (2 : 2): [ -1 0.4241036802821298 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40355 interne); stringhe deallocate: 0 (40275 interne)


Stringhe allocate: 1 (40355 interne); stringhe deallocate: 0 (40280 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.006371960870116156 0.9936280391298838 0.9958870926322653 0.5758963197178701 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3936846623444933 0.9999999523645429 0.9999999612431219 0.9998450335710583 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9956126301754154 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40390 interne); stringhe deallocate: 0 (40310 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.993548878861013 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9939361159803314


ris (2 : 2): [ -1 0.9939361159803314 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40410 interne); stringhe deallocate: 0 (40330 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9939361159803314


ris (2 : 2): [ 1 0.9939361159803314 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40430 interne); stringhe deallocate: 0 (40350 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9960951587430684


ris (2 : 2): [ 1 0.9960951587430684 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40450 interne); stringhe deallocate: 0 (40370 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.993936070734307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4228597510491328


ris (2 : 2): [ -1 0.4228597510491328 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40470 interne); stringhe deallocate: 0 (40390 interne)


Stringhe allocate: 1 (40470 interne); stringhe deallocate: 0 (40395 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.00606388401966862 0.9939361159803314 0.9960951587430684 0.5771402489508672 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3936378509808269 0.9999999526569487 0.9999999614019242 0.9998486725575688 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9956517307286887 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40505 interne); stringhe deallocate: 0 (40425 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9938902942662935 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9939361159803314


ris (2 : 2): [ -1 0.9939361159803314 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40525 interne); stringhe deallocate: 0 (40445 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9939361159803314


ris (2 : 2): [ 1 0.9939361159803314 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40545 interne); stringhe deallocate: 0 (40465 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9960951587430684


ris (2 : 2): [ 1 0.9960951587430684 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40565 interne); stringhe deallocate: 0 (40485 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9939360707230573 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4228597510491328


ris (2 : 2): [ -1 0.4228597510491328 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40585 interne); stringhe deallocate: 0 (40505 interne)


Stringhe allocate: 1 (40585 interne); stringhe deallocate: 0 (40510 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.00606388401966862 0.9939361159803314 0.9960951587430684 0.5771402489508672 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3936378509808269 0.9999999526569487 0.9999999614019242 0.9998486725575688 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9953966228490572 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40620 interne); stringhe deallocate: 0 (40540 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.993937501144778 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.99408617984262


ris (2 : 2): [ -1 0.99408617984262 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40640 interne); stringhe deallocate: 0 (40560 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.99408617984262


ris (2 : 2): [ 1 0.99408617984262 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40660 interne); stringhe deallocate: 0 (40580 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9961963745837694


ris (2 : 2): [ 1 0.9961963745837694 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40680 interne); stringhe deallocate: 0 (40600 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9940857975907678 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.422250686719585


ris (2 : 2): [ -1 0.422250686719585 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40700 interne); stringhe deallocate: 0 (40620 interne)


Stringhe allocate: 1 (40700 interne); stringhe deallocate: 0 (40625 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.005913820157379957 0.99408617984262 0.9961963745837694 0.577749313280415 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3936151457731127 0.9999999527987287 0.9999999614789394 0.9998504230441114 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9956498233798854 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40735 interne); stringhe deallocate: 0 (40655 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9936280338295038 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9941570338893779


ris (2 : 2): [ -1 0.9941570338893779 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40755 interne); stringhe deallocate: 0 (40675 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9941570338893779


ris (2 : 2): [ 1 0.9941570338893779 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40775 interne); stringhe deallocate: 0 (40695 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9962440309498715


ris (2 : 2): [ 1 0.9962440309498715 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40795 interne); stringhe deallocate: 0 (40715 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9941568463272743 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.421959903548807


ris (2 : 2): [ -1 0.421959903548807 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40815 interne); stringhe deallocate: 0 (40735 interne)


Stringhe allocate: 1 (40815 interne); stringhe deallocate: 0 (40740 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.005842966110622072 0.9941570338893779 0.9962440309498715 0.5780400964511929 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3936044472111355 0.9999999528655237 0.9999999615151483 0.9998512516207679 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9956498233802851 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40850 interne); stringhe deallocate: 0 (40770 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9939360706333815 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9944662568209727


ris (2 : 2): [ -1 0.9944662568209727 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40870 interne); stringhe deallocate: 0 (40790 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9944662568209727


ris (2 : 2): [ 1 0.9944662568209727 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40890 interne); stringhe deallocate: 0 (40810 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9964520110810871


ris (2 : 2): [ 1 0.9964520110810871 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40910 interne); stringhe deallocate: 0 (40830 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9944658368062385 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4206905801082098


ris (2 : 2): [ -1 0.4206905801082098 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40930 interne); stringhe deallocate: 0 (40850 interne)


Stringhe allocate: 1 (40930 interne); stringhe deallocate: 0 (40855 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.005533743179027328 0.9944662568209727 0.9964520110810871 0.5793094198917902 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3935579202973323 0.9999999531559274 0.9999999616727708 0.9998548151333315 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.99577284736678 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40965 interne); stringhe deallocate: 0 (40885 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9939360706334099 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9945091407793093


ris (2 : 2): [ -1 0.9945091407793093 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (40985 interne); stringhe deallocate: 0 (40905 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9945091407793093


ris (2 : 2): [ 1 0.9945091407793093 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41005 interne); stringhe deallocate: 0 (40925 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9964808684680238


ris (2 : 2): [ 1 0.9964808684680238 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41025 interne); stringhe deallocate: 0 (40945 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9945087521499989 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4205147335712886


ris (2 : 2): [ -1 0.4205147335712886 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41045 interne); stringhe deallocate: 0 (40965 interne)


Stringhe allocate: 1 (41045 interne); stringhe deallocate: 0 (40970 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.005490859220690703 0.9945091407793093 0.9964808684680238 0.5794852664287113 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3935514888238876 0.9999999531960599 0.99999996169459 0.9998553020316585 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.995830544662951 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41080 interne); stringhe deallocate: 0 (41000 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.994085797501068 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9942285771730024


ris (2 : 2): [ -1 0.9942285771730024 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41100 interne); stringhe deallocate: 0 (41020 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9942285771730024


ris (2 : 2): [ 1 0.9942285771730024 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41120 interne); stringhe deallocate: 0 (41040 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9962921664634084


ris (2 : 2): [ 1 0.9962921664634084 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41140 interne); stringhe deallocate: 0 (41060 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9942283719009772 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4216667013683859


ris (2 : 2): [ -1 0.4216667013683859 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41160 interne); stringhe deallocate: 0 (41080 interne)


Stringhe allocate: 1 (41160 interne); stringhe deallocate: 0 (41085 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.005771422826997608 0.9942285771730024 0.9962921664634084 0.5783332986316141 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3935936588149921 0.9999999529328725 0.9999999615516865 0.9998520824460612 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.996081361008148 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41195 interne); stringhe deallocate: 0 (41115 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9941568462384538 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9945076185501973


ris (2 : 2): [ -1 0.9945076185501973 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41215 interne); stringhe deallocate: 0 (41135 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9945076185501973


ris (2 : 2): [ 1 0.9945076185501973 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41235 interne); stringhe deallocate: 0 (41155 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9964797402588773


ris (2 : 2): [ 1 0.9964797402588773 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41255 interne); stringhe deallocate: 0 (41175 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9945073216385296 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4205187301445837


ris (2 : 2): [ -1 0.4205187301445837 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41275 interne); stringhe deallocate: 0 (41195 interne)


Stringhe allocate: 1 (41275 interne); stringhe deallocate: 0 (41200 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.005492381449802686 0.9945076185501973 0.9964797402588773 0.5794812698554164 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3935517170310334 0.999999953194636 0.9999999616937372 0.9998552909837617 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9961161701215104 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41310 interne); stringhe deallocate: 0 (41230 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9944658367161665 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9945076185501973


ris (2 : 2): [ -1 0.9945076185501973 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41330 interne); stringhe deallocate: 0 (41250 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9945076185501973


ris (2 : 2): [ 1 0.9945076185501973 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41350 interne); stringhe deallocate: 0 (41270 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9964797402588773


ris (2 : 2): [ 1 0.9964797402588773 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41370 interne); stringhe deallocate: 0 (41290 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9945073216394027 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4205187301445837


ris (2 : 2): [ -1 0.4205187301445837 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41390 interne); stringhe deallocate: 0 (41310 interne)


Stringhe allocate: 1 (41390 interne); stringhe deallocate: 0 (41315 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.005492381449802686 0.9945076185501973 0.9964797402588773 0.5794812698554164 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3935517170310334 0.999999953194636 0.9999999616937372 0.9998552909837617 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9958887187962446 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41425 interne); stringhe deallocate: 0 (41345 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9945087520603906 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9946435392684596


ris (2 : 2): [ -1 0.9946435392684596 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41445 interne); stringhe deallocate: 0 (41365 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9946435392684596


ris (2 : 2): [ 1 0.9946435392684596 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41465 interne); stringhe deallocate: 0 (41385 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9965709874077915


ris (2 : 2): [ 1 0.9965709874077915 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41485 interne); stringhe deallocate: 0 (41405 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9946432202285775 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.419956663827078


ris (2 : 2): [ -1 0.419956663827078 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41505 interne); stringhe deallocate: 0 (41425 interne)


Stringhe allocate: 1 (41505 interne); stringhe deallocate: 0 (41430 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.005356460731540391 0.9946435392684596 0.9965709874077915 0.580043336172922 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3935313656294545 0.9999999533216128 0.9999999617626494 0.999856836479786 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9961147396092187 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41540 interne); stringhe deallocate: 0 (41460 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9942283718113778 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.994707715498344


ris (2 : 2): [ -1 0.994707715498344 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41560 interne); stringhe deallocate: 0 (41480 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.994707715498344


ris (2 : 2): [ 1 0.994707715498344 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41580 interne); stringhe deallocate: 0 (41500 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9966139501249101


ris (2 : 2): [ 1 0.9966139501249101 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41600 interne); stringhe deallocate: 0 (41520 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9947075932449732 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4196883328415314


ris (2 : 2): [ -1 0.4196883328415314 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41620 interne); stringhe deallocate: 0 (41540 interne)


Stringhe allocate: 1 (41620 interne); stringhe deallocate: 0 (41545 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.005292284501655975 0.994707715498344 0.9966139501249101 0.5803116671584686 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3935217743226436 0.9999999533814464 0.999999961795053 0.9998575684728459 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9961147396092294 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41655 interne); stringhe deallocate: 0 (41575 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9945073216427005 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9949877949412511


ris (2 : 2): [ -1 0.9949877949412511 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41675 interne); stringhe deallocate: 0 (41595 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9949877949412511


ris (2 : 2): [ 1 0.9949877949412511 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41695 interne); stringhe deallocate: 0 (41615 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.996801446408717


ris (2 : 2): [ 1 0.996801446408717 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41715 interne); stringhe deallocate: 0 (41635 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9949874966605581 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4185170180041042


ris (2 : 2): [ -1 0.4185170180041042 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41735 interne); stringhe deallocate: 0 (41655 interne)


Stringhe allocate: 1 (41735 interne); stringhe deallocate: 0 (41660 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.005012205058748886 0.9949877949412511 0.996801446408717 0.5814829819958958 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.393480048949744 0.999999953641677 0.9999999619361463 0.9998607202094137 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9962239354122318 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41770 interne); stringhe deallocate: 0 (41690 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9945073215490012 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.995026637193666


ris (2 : 2): [ -1 0.995026637193666 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41790 interne); stringhe deallocate: 0 (41710 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.995026637193666


ris (2 : 2): [ 1 0.995026637193666 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41810 interne); stringhe deallocate: 0 (41730 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9968274616476736


ris (2 : 2): [ 1 0.9968274616476736 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41830 interne); stringhe deallocate: 0 (41750 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9950265973037746 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4183547481816558


ris (2 : 2): [ -1 0.4183547481816558 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41850 interne); stringhe deallocate: 0 (41770 interne)


Stringhe allocate: 1 (41850 interne); stringhe deallocate: 0 (41775 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.004973362806333981 0.995026637193666 0.9968274616476736 0.5816452518183441 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3934742794293361 0.9999999536776516 0.9999999619556819 0.9998611513077444 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9962754337316184 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41885 interne); stringhe deallocate: 0 (41805 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9946432201390962 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9947725160062454


ris (2 : 2): [ -1 0.9947725160062454 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41905 interne); stringhe deallocate: 0 (41825 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9947725160062454


ris (2 : 2): [ 1 0.9947725160062454 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41925 interne); stringhe deallocate: 0 (41845 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9966573447985023


ris (2 : 2): [ 1 0.9966573447985023 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41945 interne); stringhe deallocate: 0 (41865 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9947724430987197 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4194177678103908


ris (2 : 2): [ -1 0.4194177678103908 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (41965 interne); stringhe deallocate: 0 (41885 interne)


Stringhe allocate: 1 (41965 interne); stringhe deallocate: 0 (41890 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.005227483993754611 0.9947725160062454 0.9966573447985023 0.5805822321896093 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3935121012801211 0.9999999534417842 0.9999999618277544 0.9998583027731131 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9964985935216646 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42000 interne); stringhe deallocate: 0 (41920 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.994707593155276 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.995025258430826


ris (2 : 2): [ -1 0.995025258430826 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42020 interne); stringhe deallocate: 0 (41940 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.995025258430826


ris (2 : 2): [ 1 0.995025258430826 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42040 interne); stringhe deallocate: 0 (41960 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9968264445551988


ris (2 : 2): [ 1 0.9968264445551988 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42060 interne); stringhe deallocate: 0 (41980 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9950251667923604 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4183584460226388


ris (2 : 2): [ -1 0.4183584460226388 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42080 interne); stringhe deallocate: 0 (42000 interne)


Stringhe allocate: 1 (42080 interne); stringhe deallocate: 0 (42005 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.004974741569173991 0.995025258430826 0.9968264445551988 0.5816415539773612 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3934744841558649 0.9999999536763751 0.9999999619549184 0.9998611414986431 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9965300647739284 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42115 interne); stringhe deallocate: 0 (42035 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9949874965675409 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.995025258430826


ris (2 : 2): [ -1 0.995025258430826 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42135 interne); stringhe deallocate: 0 (42055 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.995025258430826


ris (2 : 2): [ 1 0.995025258430826 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42155 interne); stringhe deallocate: 0 (42075 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9968264445551988


ris (2 : 2): [ 1 0.9968264445551988 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42175 interne); stringhe deallocate: 0 (42095 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.995025166792531 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4183584460226388


ris (2 : 2): [ -1 0.4183584460226388 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42195 interne); stringhe deallocate: 0 (42115 interne)


Stringhe allocate: 1 (42195 interne); stringhe deallocate: 0 (42120 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.004974741569173991 0.995025258430826 0.9968264445551988 0.5816415539773612 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3934744841558649 0.9999999536763751 0.9999999619549184 0.9998611414986431 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9963269321449335 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42230 interne); stringhe deallocate: 0 (42150 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9950265972141921 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9951483689609705


ris (2 : 2): [ -1 0.9951483689609705 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42250 interne); stringhe deallocate: 0 (42170 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9951483689609705


ris (2 : 2): [ 1 0.9951483689609705 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42270 interne); stringhe deallocate: 0 (42190 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9969087048231556


ris (2 : 2): [ 1 0.9969087048231556 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42290 interne); stringhe deallocate: 0 (42210 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9951481907827038 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4178397961909902


ris (2 : 2): [ -1 0.4178397961909902 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42310 interne); stringhe deallocate: 0 (42230 interne)


Stringhe allocate: 1 (42310 interne); stringhe deallocate: 0 (42235 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.004851631039029525 0.9951483689609705 0.9969087048231556 0.5821602038090099 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3934562246082994 0.9999999537902156 0.9999999620166252 0.9998625105573425 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9965281574253737 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42345 interne); stringhe deallocate: 0 (42265 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9947724430088982 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9952064967415036


ris (2 : 2): [ -1 0.9952064967415036 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42365 interne); stringhe deallocate: 0 (42285 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9952064967415036


ris (2 : 2): [ 1 0.9952064967415036 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42385 interne); stringhe deallocate: 0 (42305 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9969474361661367


ris (2 : 2): [ 1 0.9969474361661367 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42405 interne); stringhe deallocate: 0 (42325 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9952063649237068 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4175922044652116


ris (2 : 2): [ -1 0.4175922044652116 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42425 interne); stringhe deallocate: 0 (42345 interne)


Stringhe allocate: 1 (42425 interne); stringhe deallocate: 0 (42350 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.004793503258496368 0.9952064967415036 0.9969474361661367 0.5824077955347884 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3934476176604359 0.9999999538438692 0.9999999620456446 0.9998631593498309 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9965281574254021 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42460 interne); stringhe deallocate: 0 (42380 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9950251667027281 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9954601793965696


ris (2 : 2): [ -1 0.9954601793965696 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42480 interne); stringhe deallocate: 0 (42400 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9954601793965696


ris (2 : 2): [ 1 0.9954601793965696 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42500 interne); stringhe deallocate: 0 (42420 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9971164660451344


ris (2 : 2): [ 1 0.9971164660451344 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42520 interne); stringhe deallocate: 0 (42440 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9954600422919242 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4165114209039184


ris (2 : 2): [ -1 0.4165114209039184 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42540 interne); stringhe deallocate: 0 (42460 interne)


Stringhe allocate: 1 (42540 interne); stringhe deallocate: 0 (42465 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.004539820603430389 0.9954601793965696 0.9971164660451344 0.5834885790960815 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3934101633536018 0.999999954077297 0.9999999621720306 0.9998659558078915 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.996625909042816 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42575 interne); stringhe deallocate: 0 (42495 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9950251667035417 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9954953608637267


ris (2 : 2): [ -1 0.9954953608637267 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42595 interne); stringhe deallocate: 0 (42515 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9954953608637267


ris (2 : 2): [ 1 0.9954953608637267 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42615 interne); stringhe deallocate: 0 (42535 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9971399190576644


ris (2 : 2): [ 1 0.9971399190576644 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42635 interne); stringhe deallocate: 0 (42555 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9954953282303816 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4163616921362943


ris (2 : 2): [ -1 0.4163616921362943 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42655 interne); stringhe deallocate: 0 (42575 interne)


Stringhe allocate: 1 (42655 interne); stringhe deallocate: 0 (42580 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.004504639136273303 0.9954953608637267 0.9971399190576644 0.5836383078637057 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3934049829690475 0.9999999541095763 0.9999999621895334 0.999866338690417 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9966716854108171 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42690 interne); stringhe deallocate: 0 (42610 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9951481906895552 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9952651899634125


ris (2 : 2): [ -1 0.9952651899634125 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42710 interne); stringhe deallocate: 0 (42630 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9952651899634125


ris (2 : 2): [ 1 0.9952651899634125 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42730 interne); stringhe deallocate: 0 (42650 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9969865569224408


ris (2 : 2): [ 1 0.9969865569224408 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42750 interne); stringhe deallocate: 0 (42670 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9952650158830041 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4173425497973406


ris (2 : 2): [ -1 0.4173425497973406 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42770 interne); stringhe deallocate: 0 (42690 interne)


Stringhe allocate: 1 (42770 interne); stringhe deallocate: 0 (42695 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.004734810036587489 0.9952651899634125 0.9969865569224408 0.5826574502026594 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3934389363902335 0.9999999538979816 0.9999999620749333 0.9998638104500277 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9968705265049849 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42805 interne); stringhe deallocate: 0 (42725 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9952063648228418 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9954941120458247


ris (2 : 2): [ -1 0.9954941120458247 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42825 interne); stringhe deallocate: 0 (42745 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9954941120458247


ris (2 : 2): [ 1 0.9954941120458247 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42845 interne); stringhe deallocate: 0 (42765 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9971390021380474


ris (2 : 2): [ 1 0.9971390021380474 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42865 interne); stringhe deallocate: 0 (42785 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9954938977188759 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4163651126803914


ris (2 : 2): [ -1 0.4163651126803914 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42885 interne); stringhe deallocate: 0 (42805 interne)


Stringhe allocate: 1 (42885 interne); stringhe deallocate: 0 (42810 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.004505887954175281 0.9954941120458247 0.9971390021380474 0.5836348873196087 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3934051667965943 0.9999999541084309 0.9999999621888491 0.9998663299557019 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9968981830601464 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42920 interne); stringhe deallocate: 0 (42840 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9954600421910165 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9954941120458247


ris (2 : 2): [ -1 0.9954941120458247 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42940 interne); stringhe deallocate: 0 (42860 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9954941120458247


ris (2 : 2): [ 1 0.9954941120458247 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42960 interne); stringhe deallocate: 0 (42880 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9971390021380474


ris (2 : 2): [ 1 0.9971390021380474 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (42980 interne); stringhe deallocate: 0 (42900 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9954938977193244 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4163651126803914


ris (2 : 2): [ -1 0.4163651126803914 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43000 interne); stringhe deallocate: 0 (42920 interne)


Stringhe allocate: 1 (43000 interne); stringhe deallocate: 0 (42925 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.004505887954175281 0.9954941120458247 0.9971390021380474 0.5836348873196087 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3934051667965943 0.9999999541084309 0.9999999621888491 0.9998663299557019 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9967174617771981 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43035 interne); stringhe deallocate: 0 (42955 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9954953282344974 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.995605619716015


ris (2 : 2): [ -1 0.995605619716015 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43055 interne); stringhe deallocate: 0 (42975 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.995605619716015


ris (2 : 2): [ 1 0.995605619716015 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43075 interne); stringhe deallocate: 0 (42995 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9972131606379001


ris (2 : 2): [ 1 0.9972131606379001 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43095 interne); stringhe deallocate: 0 (43015 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9956054776138661 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4158865646046851


ris (2 : 2): [ -1 0.4158865646046851 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43115 interne); stringhe deallocate: 0 (43035 interne)


Stringhe allocate: 1 (43115 interne); stringhe deallocate: 0 (43040 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.004394380283984978 0.995605619716015 0.9972131606379001 0.5841134353953149 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3933887694897886 0.9999999542105922 0.9999999622441409 0.9998675464517886 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9968972294796146 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43150 interne); stringhe deallocate: 0 (43070 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.995265015793386 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9956582690984109


ris (2 : 2): [ -1 0.9956582690984109 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43170 interne); stringhe deallocate: 0 (43090 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9956582690984109


ris (2 : 2): [ 1 0.9956582690984109 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43190 interne); stringhe deallocate: 0 (43110 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9972480773524086


ris (2 : 2): [ 1 0.9972480773524086 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43210 interne); stringhe deallocate: 0 (43130 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9956579297012702 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4156581271137709


ris (2 : 2): [ -1 0.4156581271137709 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43230 interne); stringhe deallocate: 0 (43150 interne)


Stringhe allocate: 1 (43230 interne); stringhe deallocate: 0 (43155 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.004341730901589069 0.9956582690984109 0.9972480773524086 0.5843418728862291 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3933810391197864 0.9999999542587497 0.9999999622701465 0.9998681232449813 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9968972293859153 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43265 interne); stringhe deallocate: 0 (43185 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9954938976293306 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9958880427968269


ris (2 : 2): [ -1 0.9958880427968269 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43285 interne); stringhe deallocate: 0 (43205 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9958880427968269


ris (2 : 2): [ 1 0.9958880427968269 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43305 interne); stringhe deallocate: 0 (43225 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9974004595724455


ris (2 : 2): [ 1 0.9974004595724455 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43325 interne); stringhe deallocate: 0 (43245 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9958877652115277 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4146609558181061


ris (2 : 2): [ -1 0.4146609558181061 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43345 interne); stringhe deallocate: 0 (43265 interne)


Stringhe allocate: 1 (43345 interne); stringhe deallocate: 0 (43270 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.004111957203173144 0.9958880427968269 0.9974004595724455 0.585339044181894 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3933473902237953 0.9999999544683272 0.9999999623834295 0.9998706117995774 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9969840137487154 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43380 interne); stringhe deallocate: 0 (43300 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.995493897629153 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9959199084985746


ris (2 : 2): [ -1 0.9959199084985746 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43400 interne); stringhe deallocate: 0 (43320 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9959199084985746


ris (2 : 2): [ 1 0.9959199084985746 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43420 interne); stringhe deallocate: 0 (43340 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9974216027107914


ris (2 : 2): [ 1 0.9974216027107914 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43440 interne); stringhe deallocate: 0 (43360 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9959197133020004 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4145228097525855


ris (2 : 2): [ -1 0.4145228097525855 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43460 interne); stringhe deallocate: 0 (43380 interne)


Stringhe allocate: 1 (43460 interne); stringhe deallocate: 0 (43385 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.004080091501425409 0.9959199084985746 0.9974216027107914 0.5854771902474145 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3933427350010284 0.9999999544973162 0.9999999623991206 0.9998709528371672 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.997024544906985 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43495 interne); stringhe deallocate: 0 (43415 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9956054775245722 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9957114306307471


ris (2 : 2): [ -1 0.9957114306307471 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43515 interne); stringhe deallocate: 0 (43435 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9957114306307471


ris (2 : 2): [ 1 0.9957114306307471 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43535 interne); stringhe deallocate: 0 (43455 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9972833451271397


ris (2 : 2): [ 1 0.9972833451271397 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43555 interne); stringhe deallocate: 0 (43475 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9957113354629525 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4154277849194621


ris (2 : 2): [ -1 0.4154277849194621 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43575 interne); stringhe deallocate: 0 (43495 interne)


Stringhe allocate: 1 (43575 interne); stringhe deallocate: 0 (43500 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.004288569369252926 0.9957114306307471 0.9972833451271397 0.5845722150805379 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3933732412030336 0.9999999543073241 0.9999999622963953 0.999868702305683 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9972019283302362 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43610 interne); stringhe deallocate: 0 (43530 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.995657929611653 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9959187773786277


ris (2 : 2): [ -1 0.9959187773786277 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43630 interne); stringhe deallocate: 0 (43550 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9959187773786277


ris (2 : 2): [ 1 0.9959187773786277 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43650 interne); stringhe deallocate: 0 (43570 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9974207760980676


ris (2 : 2): [ 1 0.9974207760980676 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43670 interne); stringhe deallocate: 0 (43590 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9959187596268091 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4145259730456515


ris (2 : 2): [ -1 0.4145259730456515 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43690 interne); stringhe deallocate: 0 (43610 interne)


Stringhe allocate: 1 (43690 interne); stringhe deallocate: 0 (43615 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.004081222621372338 0.9959187773786277 0.9974207760980676 0.5854740269543485 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3933429001979355 0.9999999544962874 0.9999999623985072 0.9998709450380873 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9972267238621413 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43725 interne); stringhe deallocate: 0 (43645 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9958877651219353 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9959187773786277


ris (2 : 2): [ -1 0.9959187773786277 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43745 interne); stringhe deallocate: 0 (43665 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9959187773786277


ris (2 : 2): [ 1 0.9959187773786277 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43765 interne); stringhe deallocate: 0 (43685 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9974207760980676


ris (2 : 2): [ 1 0.9974207760980676 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43785 interne); stringhe deallocate: 0 (43705 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9959187596305288 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4145259730456515


ris (2 : 2): [ -1 0.4145259730456515 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43805 interne); stringhe deallocate: 0 (43725 interne)


Stringhe allocate: 1 (43805 interne); stringhe deallocate: 0 (43730 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.004081222621372338 0.9959187773786277 0.9974207760980676 0.5854740269543485 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3933429001979355 0.9999999544962874 0.9999999623985072 0.9998709450380873 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9970655529026971 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43840 interne); stringhe deallocate: 0 (43760 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9959197132115172 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9960197757293799


ris (2 : 2): [ -1 0.9960197757293799 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43860 interne); stringhe deallocate: 0 (43780 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9960197757293799


ris (2 : 2): [ 1 0.9960197757293799 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43880 interne); stringhe deallocate: 0 (43800 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9974876307684166


ris (2 : 2): [ 1 0.9974876307684166 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43900 interne); stringhe deallocate: 0 (43820 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9960193722671535 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4140844598643868


ris (2 : 2): [ -1 0.4140844598643868 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43920 interne); stringhe deallocate: 0 (43840 interne)


Stringhe allocate: 1 (43920 interne); stringhe deallocate: 0 (43845 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.003980224270620059 0.9960197757293799 0.9974876307684166 0.5859155401356132 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3933281633173096 0.999999954588048 0.9999999624480807 0.9998720290433517 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9972252933506773 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43955 interne); stringhe deallocate: 0 (43875 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.995711335374196 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9960674630389566


ris (2 : 2): [ -1 0.9960674630389566 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43975 interne); stringhe deallocate: 0 (43895 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9960674630389566


ris (2 : 2): [ 1 0.9960674630389566 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (43995 interne); stringhe deallocate: 0 (43915 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9975191085550769


ris (2 : 2): [ 1 0.9975191085550769 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44015 interne); stringhe deallocate: 0 (43935 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9960670559832412 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4138737103574283


ris (2 : 2): [ -1 0.4138737103574283 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44035 interne); stringhe deallocate: 0 (43955 interne)


Stringhe allocate: 1 (44035 interne); stringhe deallocate: 0 (43960 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.003932536961043454 0.9960674630389566 0.9975191085550769 0.5861262896425716 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3933212147465523 0.9999999546313092 0.9999999624713989 0.9998725432632066 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9972252933514909 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44070 interne); stringhe deallocate: 0 (43990 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9959187595372114 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9962755811400688


ris (2 : 2): [ -1 0.9962755811400688 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44090 interne); stringhe deallocate: 0 (44010 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9962755811400688


ris (2 : 2): [ 1 0.9962755811400688 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44110 interne); stringhe deallocate: 0 (44030 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9976564827347705


ris (2 : 2): [ 1 0.9976564827347705 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44130 interne); stringhe deallocate: 0 (44050 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.996275433821169 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4129537507946921


ris (2 : 2): [ -1 0.4129537507946921 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44150 interne); stringhe deallocate: 0 (44070 interne)


Stringhe allocate: 1 (44150 interne); stringhe deallocate: 0 (44075 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.003724418859931244 0.9962755811400688 0.9976564827347705 0.5870462492053079 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3932909614360023 0.9999999548196292 0.999999962572995 0.9998747638514604 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9973030178074751 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44185 interne); stringhe deallocate: 0 (44105 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9959187595371972 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9963044435790007


ris (2 : 2): [ -1 0.9963044435790007 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44205 interne); stringhe deallocate: 0 (44125 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9963044435790007


ris (2 : 2): [ 1 0.9963044435790007 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44225 interne); stringhe deallocate: 0 (44145 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9976755434971479


ris (2 : 2): [ 1 0.9976755434971479 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44245 interne); stringhe deallocate: 0 (44165 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9963040440508317 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4128263008736079


ris (2 : 2): [ -1 0.4128263008736079 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44265 interne); stringhe deallocate: 0 (44185 interne)


Stringhe allocate: 1 (44265 interne); stringhe deallocate: 0 (44190 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.00369555642099928 0.9963044435790007 0.9976755434971479 0.5871736991263921 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.393286775026665 0.9999999548456843 0.9999999625870697 0.999875068423812 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9973392574314843 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44300 interne); stringhe deallocate: 0 (44220 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9960193721775887 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9961156142296223


ris (2 : 2): [ -1 0.9961156142296223 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44320 interne); stringhe deallocate: 0 (44240 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9961156142296223


ris (2 : 2): [ 1 0.9961156142296223 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44340 interne); stringhe deallocate: 0 (44260 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9975509028262344


ris (2 : 2): [ 1 0.9975509028262344 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44360 interne); stringhe deallocate: 0 (44280 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9961152165395397 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4136612024525508


ris (2 : 2): [ -1 0.4136612024525508 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44380 interne); stringhe deallocate: 0 (44300 interne)


Stringhe allocate: 1 (44380 interne); stringhe deallocate: 0 (44305 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.003884385770377752 0.9961156142296223 0.9975509028262344 0.5863387975474492 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3933142048136637 0.9999999546749496 0.9999999624949372 0.9998730596824572 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9974970905308602 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44415 interne); stringhe deallocate: 0 (44335 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9960670559871829 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9963034190642732


ris (2 : 2): [ -1 0.9963034190642732 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44435 interne); stringhe deallocate: 0 (44355 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9963034190642732


ris (2 : 2): [ 1 0.9963034190642732 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44455 interne); stringhe deallocate: 0 (44375 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.997674798297045


ris (2 : 2): [ 1 0.997674798297045 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44475 interne); stringhe deallocate: 0 (44395 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.996303090387574 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4128292256341102


ris (2 : 2): [ -1 0.4128292256341102 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44495 interne); stringhe deallocate: 0 (44415 interne)


Stringhe allocate: 1 (44495 interne); stringhe deallocate: 0 (44420 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.003696580935726779 0.9963034190642732 0.997674798297045 0.5871707743658898 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.393286923591074 0.9999999548447597 0.9999999625865197 0.9998750614426972 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9975190251339114 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44530 interne); stringhe deallocate: 0 (44450 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9962754337316184 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9963034190642732


ris (2 : 2): [ -1 0.9963034190642732 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44550 interne); stringhe deallocate: 0 (44470 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9963034190642732


ris (2 : 2): [ 1 0.9963034190642732 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44570 interne); stringhe deallocate: 0 (44490 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.997674798297045


ris (2 : 2): [ 1 0.997674798297045 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44590 interne); stringhe deallocate: 0 (44510 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9963030903876273 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4128292256341102


ris (2 : 2): [ -1 0.4128292256341102 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44610 interne); stringhe deallocate: 0 (44530 interne)


Stringhe allocate: 1 (44610 interne); stringhe deallocate: 0 (44535 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.003696580935726779 0.9963034190642732 0.997674798297045 0.5871707743658898 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.393286923591074 0.9999999548447597 0.9999999625865197 0.9998750614426972 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9973759738927512 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44645 interne); stringhe deallocate: 0 (44565 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9963040439611177 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9963948985726543


ris (2 : 2): [ -1 0.9963948985726543 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44665 interne); stringhe deallocate: 0 (44585 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9963948985726543


ris (2 : 2): [ 1 0.9963948985726543 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44685 interne); stringhe deallocate: 0 (44605 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9977350684879767


ris (2 : 2): [ 1 0.9977350684879767 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44705 interne); stringhe deallocate: 0 (44625 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9963946431107527 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4124219106044974


ris (2 : 2): [ -1 0.4124219106044974 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44725 interne); stringhe deallocate: 0 (44645 interne)


Stringhe allocate: 1 (44725 interne); stringhe deallocate: 0 (44650 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.003605101427345714 0.9963948985726543 0.9977350684879767 0.5875780893955026 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3932736693080485 0.9999999549272434 0.9999999626309899 0.9998760299195439 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9975180713659029 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44760 interne); stringhe deallocate: 0 (44680 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9961152164462916 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.996438091472364


ris (2 : 2): [ -1 0.996438091472364 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44780 interne); stringhe deallocate: 0 (44700 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.996438091472364


ris (2 : 2): [ 1 0.996438091472364 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44800 interne); stringhe deallocate: 0 (44720 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9977634460448734


ris (2 : 2): [ 1 0.9977634460448734 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44820 interne); stringhe deallocate: 0 (44740 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9964380352921838 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4122274930565256


ris (2 : 2): [ -1 0.4122274930565256 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44840 interne); stringhe deallocate: 0 (44760 interne)


Stringhe allocate: 1 (44840 interne); stringhe deallocate: 0 (44765 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.003561908527636049 0.996438091472364 0.9977634460448734 0.5877725069434745 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.393267418984745 0.9999999549661364 0.9999999626519099 0.9998764895389918 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9975180713657252 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44875 interne); stringhe deallocate: 0 (44795 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9963030902870234 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9966265949620536


ris (2 : 2): [ -1 0.9966265949620536 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44895 interne); stringhe deallocate: 0 (44815 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9966265949620536


ris (2 : 2): [ 1 0.9966265949620536 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44915 interne); stringhe deallocate: 0 (44835 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9978872903177427


ris (2 : 2): [ 1 0.9978872903177427 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44935 interne); stringhe deallocate: 0 (44855 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9966263859696083 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4113788258580396


ris (2 : 2): [ -1 0.4113788258580396 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44955 interne); stringhe deallocate: 0 (44875 interne)


Stringhe allocate: 1 (44955 interne); stringhe deallocate: 0 (44880 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.003373405037946364 0.9966265949620536 0.9978872903177427 0.5886211741419604 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3932401996971149 0.999999955135482 0.9999999627430714 0.9998784759987016 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9975872127540644 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (44990 interne); stringhe deallocate: 0 (44910 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9963030902867018 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9966527371881785


ris (2 : 2): [ -1 0.9966527371881785 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45010 interne); stringhe deallocate: 0 (44930 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9966527371881785


ris (2 : 2): [ 1 0.9966527371881785 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45030 interne); stringhe deallocate: 0 (44950 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9979044737961984


ris (2 : 2): [ 1 0.9979044737961984 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45050 interne); stringhe deallocate: 0 (44970 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.996652612013758 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4112612521553407


ris (2 : 2): [ -1 0.4112612521553407 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45070 interne); stringhe deallocate: 0 (44990 interne)


Stringhe allocate: 1 (45070 interne); stringhe deallocate: 0 (44995 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.003347262811821516 0.9966527371881785 0.9979044737961984 0.5887387478446593 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3932364323523855 0.999999955158917 0.9999999627557026 0.9998787486712281 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9976196376805007 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45105 interne); stringhe deallocate: 0 (45025 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9963946430211053 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9964817045335295


ris (2 : 2): [ -1 0.9964817045335295 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45125 interne); stringhe deallocate: 0 (45045 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9964817045335295


ris (2 : 2): [ 1 0.9964817045335295 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45145 interne); stringhe deallocate: 0 (45065 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9977921089158857


ris (2 : 2): [ 1 0.9977921089158857 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45165 interne); stringhe deallocate: 0 (45085 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9964814274734852 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4120314523530116


ris (2 : 2): [ -1 0.4120314523530116 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45185 interne); stringhe deallocate: 0 (45105 interne)


Stringhe allocate: 1 (45185 interne); stringhe deallocate: 0 (45110 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.003518295466470534 0.9964817045335295 0.9977921089158857 0.5879685476469885 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3932611129383863 0.9999999550053738 0.9999999626730285 0.9998769512712162 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.997760304642199 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45220 interne); stringhe deallocate: 0 (45140 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.996438035202484 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9966518092313966


ris (2 : 2): [ -1 0.9966518092313966 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45240 interne); stringhe deallocate: 0 (45160 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9966518092313966


ris (2 : 2): [ 1 0.9966518092313966 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45260 interne); stringhe deallocate: 0 (45180 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9979038019904348


ris (2 : 2): [ 1 0.9979038019904348 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45280 interne); stringhe deallocate: 0 (45200 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9966516583389655 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4112639558399034


ris (2 : 2): [ -1 0.4112639558399034 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45300 interne); stringhe deallocate: 0 (45220 interne)


Stringhe allocate: 1 (45300 interne); stringhe deallocate: 0 (45225 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.003348190768603376 0.9966518092313966 0.9979038019904348 0.5887360441600966 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3932365660485668 0.9999999551580854 0.9999999627552088 0.9998787424078186 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9977798549656676 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45335 interne); stringhe deallocate: 0 (45255 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9966263858807878 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9966518092313966


ris (2 : 2): [ -1 0.9966518092313966 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45355 interne); stringhe deallocate: 0 (45275 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9966518092313966


ris (2 : 2): [ 1 0.9966518092313966 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45375 interne); stringhe deallocate: 0 (45295 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9979038019904348


ris (2 : 2): [ 1 0.9979038019904348 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45395 interne); stringhe deallocate: 0 (45315 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9966516583389691 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4112639558399034


ris (2 : 2): [ -1 0.4112639558399034 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45415 interne); stringhe deallocate: 0 (45335 interne)


Stringhe allocate: 1 (45415 interne); stringhe deallocate: 0 (45340 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.003348190768603376 0.9966518092313966 0.9979038019904348 0.5887360441600966 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3932365660485668 0.9999999551580854 0.9999999627552088 0.9998787424078186 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9976520626080827 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45450 interne); stringhe deallocate: 0 (45370 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.996652611923686 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9967346670244943


ris (2 : 2): [ -1 0.9967346670244943 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45470 interne); stringhe deallocate: 0 (45390 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9967346670244943


ris (2 : 2): [ 1 0.9967346670244943 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45490 interne); stringhe deallocate: 0 (45410 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.997958136203656


ris (2 : 2): [ 1 0.997958136203656 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45510 interne); stringhe deallocate: 0 (45430 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9967346280053695 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4108882157254313


ris (2 : 2): [ -1 0.4108882157254313 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45530 interne); stringhe deallocate: 0 (45450 interne)


Stringhe allocate: 1 (45530 interne); stringhe deallocate: 0 (45455 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.003265332975505686 0.9967346670244943 0.997958136203656 0.5891117842745688 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3932246373045115 0.9999999552322831 0.9999999627951208 0.9998796097620044 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9977789012913618 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45565 interne); stringhe deallocate: 0 (45485 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9964814273838769 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9967737891012285


ris (2 : 2): [ -1 0.9967737891012285 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45585 interne); stringhe deallocate: 0 (45505 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9967737891012285


ris (2 : 2): [ 1 0.9967737891012285 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45605 interne); stringhe deallocate: 0 (45525 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9979837188706928


ris (2 : 2): [ 1 0.9979837188706928 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45625 interne); stringhe deallocate: 0 (45545 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9967737286514291 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.41070887634532


ris (2 : 2): [ -1 0.41070887634532 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45645 interne); stringhe deallocate: 0 (45565 interne)


Stringhe allocate: 1 (45645 interne); stringhe deallocate: 0 (45570 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.003226210898771509 0.9967737891012285 0.9979837188706928 0.5892911236546801 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3932190114046819 0.9999999552672738 0.9999999628138983 0.9998800215580809 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9977789012913476 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45680 interne); stringhe deallocate: 0 (45600 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9966516582493661 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9969445266075756


ris (2 : 2): [ -1 0.9969445266075756 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45700 interne); stringhe deallocate: 0 (45620 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9969445266075756


ris (2 : 2): [ 1 0.9969445266075756 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45720 interne); stringhe deallocate: 0 (45640 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9980953657897276


ris (2 : 2): [ 1 0.9980953657897276 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45740 interne); stringhe deallocate: 0 (45660 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.996944436354104 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4099260284192595


ris (2 : 2): [ -1 0.4099260284192595 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45760 interne); stringhe deallocate: 0 (45680 interne)


Stringhe allocate: 1 (45760 interne); stringhe deallocate: 0 (45685 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.003055473392424402 0.9969445266075756 0.9980953657897276 0.5900739715807405 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3931945064431083 0.9999999554196604 0.9999999628957346 0.999881802697845 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9978404132847665 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45795 interne); stringhe deallocate: 0 (45715 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.99665165834314 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9969682049941483


ris (2 : 2): [ -1 0.9969682049941483 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45815 interne); stringhe deallocate: 0 (45735 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9969682049941483


ris (2 : 2): [ 1 0.9969682049941483 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45835 interne); stringhe deallocate: 0 (45755 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9981108568769095


ris (2 : 2): [ 1 0.9981108568769095 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45855 interne); stringhe deallocate: 0 (45775 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9969678013785757 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4098175728121575


ris (2 : 2): [ -1 0.4098175728121575 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45875 interne); stringhe deallocate: 0 (45795 interne)


Stringhe allocate: 1 (45875 interne); stringhe deallocate: 0 (45800 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.003031795005851712 0.9969682049941483 0.9981108568769095 0.5901824271878425 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3931911141449774 0.9999999554407526 0.9999999629070753 0.9998820473633585 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9978690236080325 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45910 interne); stringhe deallocate: 0 (45830 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.996734627914968 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9968132917402515


ris (2 : 2): [ -1 0.9968132917402515 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45930 interne); stringhe deallocate: 0 (45850 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9968132917402515


ris (2 : 2): [ 1 0.9968132917402515 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45950 interne); stringhe deallocate: 0 (45870 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9980095587514164


ris (2 : 2): [ 1 0.9980095587514164 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45970 interne); stringhe deallocate: 0 (45890 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9968128292984035 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4105280388005257


ris (2 : 2): [ -1 0.4105280388005257 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (45990 interne); stringhe deallocate: 0 (45910 interne)


Stringhe allocate: 1 (45990 interne); stringhe deallocate: 0 (45915 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.003186708259748539 0.9968132917402515 0.9980095587514164 0.5894719611994743 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3932133349187806 0.9999999553025769 0.9999999628328546 0.9998804353687203 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9979944316869407 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46025 interne); stringhe deallocate: 0 (45945 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9967737285619478 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9969673644949685


ris (2 : 2): [ -1 0.9969673644949685 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46045 interne); stringhe deallocate: 0 (45965 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9969673644949685


ris (2 : 2): [ 1 0.9969673644949685 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46065 interne); stringhe deallocate: 0 (45985 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9981102512369194


ris (2 : 2): [ 1 0.9981102512369194 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46085 interne); stringhe deallocate: 0 (46005 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9969673245379287 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4098200716826305


ris (2 : 2): [ -1 0.4098200716826305 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46105 interne); stringhe deallocate: 0 (46025 interne)


Stringhe allocate: 1 (46105 interne); stringhe deallocate: 0 (46030 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.003032635505031522 0.9969673644949685 0.9981102512369194 0.5901799283173694 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3931912345340905 0.9999999554400041 0.9999999629066319 0.999882041731846 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9980120746618013 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46140 interne); stringhe deallocate: 0 (46060 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9969444362644069 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9969673644949685


ris (2 : 2): [ -1 0.9969673644949685 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46160 interne); stringhe deallocate: 0 (46080 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9969673644949685


ris (2 : 2): [ 1 0.9969673644949685 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46180 interne); stringhe deallocate: 0 (46100 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9981102512369194


ris (2 : 2): [ 1 0.9981102512369194 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46200 interne); stringhe deallocate: 0 (46120 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9969673245377217 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4098200716826305


ris (2 : 2): [ -1 0.4098200716826305 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46220 interne); stringhe deallocate: 0 (46140 interne)


Stringhe allocate: 1 (46220 interne); stringhe deallocate: 0 (46145 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.003032635505031522 0.9969673644949685 0.9981102512369194 0.5901799283173694 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3931912345340905 0.9999999554400041 0.9999999629066319 0.999882041731846 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9978981105808131 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46255 interne); stringhe deallocate: 0 (46175 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9969678012855585 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9970424131478916


ris (2 : 2): [ -1 0.9970424131478916 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46275 interne); stringhe deallocate: 0 (46195 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9970424131478916


ris (2 : 2): [ 1 0.9970424131478916 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46295 interne); stringhe deallocate: 0 (46215 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9981592341035726


ris (2 : 2): [ 1 0.9981592341035726 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46315 interne); stringhe deallocate: 0 (46235 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9970421879717302 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4094734812307653


ris (2 : 2): [ -1 0.4094734812307653 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46335 interne); stringhe deallocate: 0 (46255 interne)


Stringhe allocate: 1 (46335 interne); stringhe deallocate: 0 (46260 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.002957586852108451 0.9970424131478916 0.9981592341035726 0.5905265187692348 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3931804923158541 0.9999999555067918 0.9999999629424686 0.9998828202556077 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.998011120987707 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46370 interne); stringhe deallocate: 0 (46290 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.996812829208821 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9970778480665392


ris (2 : 2): [ -1 0.9970778480665392 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46390 interne); stringhe deallocate: 0 (46310 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9970778480665392


ris (2 : 2): [ 1 0.9970778480665392 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46410 interne); stringhe deallocate: 0 (46330 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9981822971478983


ris (2 : 2): [ 1 0.9981822971478983 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46430 interne); stringhe deallocate: 0 (46350 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9970774739247936 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4093080610001653


ris (2 : 2): [ -1 0.4093080610001653 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46450 interne); stringhe deallocate: 0 (46370 interne)


Stringhe allocate: 1 (46450 interne); stringhe deallocate: 0 (46375 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.002922151933460793 0.9970778480665392 0.9981822971478983 0.5906919389998346 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3931754254724384 0.9999999555382912 0.9999999629593299 0.9998831900158041 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9980111209873854 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46485 interne); stringhe deallocate: 0 (46405 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9969673244481072 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9972324939890604


ris (2 : 2): [ -1 0.9972324939890604 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46505 interne); stringhe deallocate: 0 (46425 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9972324939890604


ris (2 : 2): [ 1 0.9972324939890604 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46525 interne); stringhe deallocate: 0 (46445 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.998282948023699


ris (2 : 2): [ 1 0.998282948023699 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46545 interne); stringhe deallocate: 0 (46465 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9972324460089119 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4085859729622854


ris (2 : 2): [ -1 0.4085859729622854 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46565 interne); stringhe deallocate: 0 (46485 interne)


Stringhe allocate: 1 (46565 interne); stringhe deallocate: 0 (46490 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.002767506010939558 0.9972324939890604 0.998282948023699 0.5914140270377146 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3931533515745697 0.9999999556755016 0.9999999630328258 0.999884790475463 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9980659572606072 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46600 interne); stringhe deallocate: 0 (46520 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9969673244480894 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.997253940746799


ris (2 : 2): [ -1 0.997253940746799 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46620 interne); stringhe deallocate: 0 (46540 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.997253940746799


ris (2 : 2): [ 1 0.997253940746799 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46640 interne); stringhe deallocate: 0 (46560 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9982969134022827


ris (2 : 2): [ 1 0.9982969134022827 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46660 interne); stringhe deallocate: 0 (46580 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9972539036810844 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4084859346231398


ris (2 : 2): [ -1 0.4084859346231398 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46680 interne); stringhe deallocate: 0 (46600 interne)


Stringhe allocate: 1 (46680 interne); stringhe deallocate: 0 (46605 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.002746059253201039 0.997253940746799 0.9982969134022827 0.5915140653768602 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3931502952973427 0.9999999556944968 0.9999999630430119 0.99988501046831 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9980917064671324 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46715 interne); stringhe deallocate: 0 (46635 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9970421878827409 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9971136276804307


ris (2 : 2): [ -1 0.9971136276804307 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46735 interne); stringhe deallocate: 0 (46655 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9971136276804307


ris (2 : 2): [ 1 0.9971136276804307 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46755 interne); stringhe deallocate: 0 (46675 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9982055920730778


ris (2 : 2): [ 1 0.9982055920730778 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46775 interne); stringhe deallocate: 0 (46695 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9971132367081648 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4091412581002926


ris (2 : 2): [ -1 0.4091412581002926 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46795 interne); stringhe deallocate: 0 (46715 interne)


Stringhe allocate: 1 (46795 interne); stringhe deallocate: 0 (46720 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.002886372319569341 0.9971136276804307 0.9982055920730778 0.5908587418997073 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3931703127189649 0.9999999555700746 0.999999962976353 0.9998835616858123 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9982032863629655 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46830 interne); stringhe deallocate: 0 (46750 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.997077473831645 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9972531794625623


ris (2 : 2): [ -1 0.9972531794625623 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46850 interne); stringhe deallocate: 0 (46770 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9972531794625623


ris (2 : 2): [ 1 0.9972531794625623 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46870 interne); stringhe deallocate: 0 (46790 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9982963674114377


ris (2 : 2): [ 1 0.9982963674114377 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46890 interne); stringhe deallocate: 0 (46810 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9972529499955529 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4084882438138189


ris (2 : 2): [ -1 0.4084882438138189 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46910 interne); stringhe deallocate: 0 (46830 interne)


Stringhe allocate: 1 (46910 interne); stringhe deallocate: 0 (46835 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.002746820537437689 0.9972531794625623 0.9982963674114377 0.5915117561861811 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3931504037635887 0.9999999556938227 0.9999999630426137 0.9998850053949397 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9982190219883833 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46945 interne); stringhe deallocate: 0 (46865 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9972324459080468 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9972531794625623


ris (2 : 2): [ -1 0.9972531794625623 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46965 interne); stringhe deallocate: 0 (46885 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9972531794625623


ris (2 : 2): [ 1 0.9972531794625623 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (46985 interne); stringhe deallocate: 0 (46905 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836677e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9982963674114377


ris (2 : 2): [ 1 0.9982963674114377 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47005 interne); stringhe deallocate: 0 (46925 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9972529499954872 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4084882438138189


ris (2 : 2): [ -1 0.4084882438138189 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47025 interne); stringhe deallocate: 0 (46945 interne)


Stringhe allocate: 1 (47025 interne); stringhe deallocate: 0 (46950 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.002746820537437689 0.9972531794625623 0.9982963674114377 0.5915117561861811 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3931504037635887 0.9999999556938227 0.9999999630426137 0.9998850053949397 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.9981174556736718 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47060 interne); stringhe deallocate: 0 (46980 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9972539035801766 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.997321154967252


ris (2 : 2): [ -1 0.997321154967252 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47080 interne); stringhe deallocate: 0 (47000 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.997321154967252


ris (2 : 2): [ 1 0.997321154967252 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47100 interne); stringhe deallocate: 0 (47020 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047889647e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9983405259826742


ris (2 : 2): [ 1 0.9983405259826742 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47120 interne); stringhe deallocate: 0 (47040 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9973211377095588 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4081685612728114


ris (2 : 2): [ -1 0.4081685612728114 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47140 interne); stringhe deallocate: 0 (47060 interne)


Stringhe allocate: 1 (47140 interne); stringhe deallocate: 0 (47065 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.002678845032747956 0.997321154967252 0.9983405259826742 0.5918314387271886 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3931407247859136 0.9999999557539754 0.999999963074804 0.9998857056242607 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9982180683140633 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47175 interne); stringhe deallocate: 0 (47095 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9971132367122806 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9973532502332473


ris (2 : 2): [ -1 0.9973532502332473 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47195 interne); stringhe deallocate: 0 (47115 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9973532502332473


ris (2 : 2): [ 1 0.9973532502332473 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47215 interne); stringhe deallocate: 0 (47135 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836158e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9983613175605318


ris (2 : 2): [ 1 0.9983613175605318 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47235 interne); stringhe deallocate: 0 (47155 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9973530857986805 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4080159889898142


ris (2 : 2): [ -1 0.4080159889898142 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47255 interne); stringhe deallocate: 0 (47175 interne)


Stringhe allocate: 1 (47255 interne); stringhe deallocate: 0 (47180 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.002646749766752721 0.9973532502332473 0.9983613175605318 0.5919840110101858 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3931361590068607 0.9999999557823487 0.9999999630899508 0.9998860383130547 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9982180684078372 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47290 interne); stringhe deallocate: 0 (47210 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.9972529499059348 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9974933211635001


ris (2 : 2): [ -1 0.9974933211635001 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47310 interne); stringhe deallocate: 0 (47230 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9974933211635001


ris (2 : 2): [ 1 0.9974933211635001 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47330 interne); stringhe deallocate: 0 (47250 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839966e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9984520553872955


ris (2 : 2): [ 1 0.9984520553872955 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47350 interne); stringhe deallocate: 0 (47270 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.997493275923194 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4073499847973219


ris (2 : 2): [ -1 0.4073499847973219 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47370 interne); stringhe deallocate: 0 (47290 interne)


Stringhe allocate: 1 (47370 interne); stringhe deallocate: 0 (47295 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.002506678836499909 0.9974933211635001 0.9984520553872955 0.5926500152026781 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3931162647151985 0.9999999559059631 0.9999999631559807 0.9998874792593817 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9982667057042747 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47405 interne); stringhe deallocate: 0 (47325 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9972529499059419 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9975127466178445


ris (2 : 2): [ -1 0.9975127466178445 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47425 interne); stringhe deallocate: 0 (47345 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9975127466178445


ris (2 : 2): [ 1 0.9975127466178445 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47445 interne); stringhe deallocate: 0 (47365 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837019e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9984646453234743


ris (2 : 2): [ 1 0.9984646453234743 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47465 interne); stringhe deallocate: 0 (47385 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9975123494095257 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4072577159900339


ris (2 : 2): [ -1 0.4072577159900339 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47485 interne); stringhe deallocate: 0 (47405 interne)


Stringhe allocate: 1 (47485 interne); stringhe deallocate: 0 (47410 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.002487253382155497 0.9975127466178445 0.9984646453234743 0.5927422840099661 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3931135097951898 0.999999955923079 0.9999999631651331 0.999887677447888 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9982895938878755 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47520 interne); stringhe deallocate: 0 (47440 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9973211376193873 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9973856577078207


ris (2 : 2): [ -1 0.9973856577078207 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47540 interne); stringhe deallocate: 0 (47460 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9973856577078207


ris (2 : 2): [ 1 0.9973856577078207 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47560 interne); stringhe deallocate: 0 (47480 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047839447e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9983823181814265


ris (2 : 2): [ 1 0.9983823181814265 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47580 interne); stringhe deallocate: 0 (47500 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9973855107263168 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4078621407411286


ris (2 : 2): [ -1 0.4078621407411286 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47600 interne); stringhe deallocate: 0 (47520 interne)


Stringhe allocate: 1 (47600 interne); stringhe deallocate: 0 (47525 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.002614342292179273 0.9973856577078207 0.9983823181814265 0.5921378592588714 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3931315515714 0.9999999558109796 0.9999999631052433 0.9998863728040506 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9983892528537623 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47635 interne); stringhe deallocate: 0 (47555 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9973530857093866 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9975120570827414


ris (2 : 2): [ -1 0.9975120570827414 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47655 interne); stringhe deallocate: 0 (47575 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9975120570827414


ris (2 : 2): [ 1 0.9975120570827414 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47675 interne); stringhe deallocate: 0 (47595 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047887244e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9984641531069638


ris (2 : 2): [ 1 0.9984641531069638 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47695 interne); stringhe deallocate: 0 (47615 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9975118725723275 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4072598495740222


ris (2 : 2): [ -1 0.4072598495740222 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47715 interne); stringhe deallocate: 0 (47635 interne)


Stringhe allocate: 1 (47715 interne); stringhe deallocate: 0 (47640 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.002487942917258623 0.9975120570827414 0.9984641531069638 0.5927401504259777 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3931136075681368 0.9999999559224716 0.9999999631647754 0.9998876728690057 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442739156494e-314 0 0.9984030811317499 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47750 interne); stringhe deallocate: 0 (47670 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405432917940604e-314 0 0.9974932758335768 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79867152 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9975120570827414


ris (2 : 2): [ -1 0.9975120570827414 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47770 interne); stringhe deallocate: 0 (47690 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9975120570827414


ris (2 : 2): [ 1 0.9975120570827414 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47790 interne); stringhe deallocate: 0 (47710 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047996928e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9984641531069638


ris (2 : 2): [ 1 0.9984641531069638 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47810 interne); stringhe deallocate: 0 (47730 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9975118725723657 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4072598495740222


ris (2 : 2): [ -1 0.4072598495740222 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47830 interne); stringhe deallocate: 0 (47750 interne)


Stringhe allocate: 1 (47830 interne); stringhe deallocate: 0 (47755 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.002487942917258623 0.9975120570827414 0.9984641531069638 0.5927401504259777 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3931136075681368 0.9999999559224716 0.9999999631647754 0.9998876728690057 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443541519103e-314 0 0.998312958908528 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47865 interne); stringhe deallocate: 0 (47785 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434162986032e-314 0 0.9975123493199334 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941856 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9975736260657422


ris (2 : 2): [ -1 0.9975736260657422 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47885 interne); stringhe deallocate: 0 (47805 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9975736260657422


ris (2 : 2): [ 1 0.9975736260657422 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47905 interne); stringhe deallocate: 0 (47825 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047997687e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9985039625249641


ris (2 : 2): [ 1 0.9985039625249641 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47925 interne); stringhe deallocate: 0 (47845 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9975733845694936 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4069650031956965


ris (2 : 2): [ -1 0.4069650031956965 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47945 interne); stringhe deallocate: 0 (47865 interne)


Stringhe allocate: 1 (47945 interne); stringhe deallocate: 0 (47870 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.002426373934257819 0.9975736260657422 0.9985039625249641 0.5930349968043035 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.393104882294356 0.9999999559766772 0.9999999631937006 0.9998883038732277 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443683810009e-314 0 0.9984026042942986 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (47980 interne); stringhe deallocate: 0 (47900 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434321087039e-314 0 0.9973855106358336 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79863360 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9976026964330023


ris (2 : 2): [ -1 0.9976026964330023 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48000 interne); stringhe deallocate: 0 (47920 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9976026964330023


ris (2 : 2): [ 1 0.9976026964330023 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48020 interne); stringhe deallocate: 0 (47940 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837487e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9985227063518274


ris (2 : 2): [ 1 0.9985227063518274 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48040 interne); stringhe deallocate: 0 (47960 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9976024716323879 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4068242889963012


ris (2 : 2): [ -1 0.4068242889963012 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48060 interne); stringhe deallocate: 0 (47980 interne)


Stringhe allocate: 1 (48060 interne); stringhe deallocate: 0 (47985 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.002397303566997744 0.9976026964330023 0.9985227063518274 0.5931757110036988 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3931007660379587 0.9999999560022479 0.9999999632073118 0.9998886037672055 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161444055347375e-314 0 0.9984026042942809 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79865856 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48095 interne); stringhe deallocate: 0 (48015 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435123449647e-314 0 0.997511872483571 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79849984 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9977295660275879


ris (2 : 2): [ -1 0.9977295660275879 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48115 interne); stringhe deallocate: 0 (48035 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836652e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9977295660275879


ris (2 : 2): [ 1 0.9977295660275879 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48135 interne); stringhe deallocate: 0 (48055 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.53590304783798e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.998604507460261


ris (2 : 2): [ 1 0.998604507460261 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48155 interne); stringhe deallocate: 0 (48075 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9977293103167373 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4062100476673785


ris (2 : 2): [ -1 0.4062100476673785 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48175 interne); stringhe deallocate: 0 (48095 interne)


Stringhe allocate: 1 (48175 interne); stringhe deallocate: 0 (48100 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.002270433972412111 0.9977295660275879 0.998604507460261 0.5937899523326216 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3930828277380593 0.9999999561136699 0.9999999632666545 0.9998899034593904 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161443027690831e-314 0 0.9984459964764909 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942632 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48210 interne); stringhe deallocate: 0 (48130 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435265740553e-314 0 0.9975118724827681 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941832 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9977471606813321


ris (2 : 2): [ -1 0.9977471606813321 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48230 interne); stringhe deallocate: 0 (48150 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836702e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9977471606813321


ris (2 : 2): [ 1 0.9977471606813321 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48250 interne); stringhe deallocate: 0 (48170 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047837044e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9986158574205949


ris (2 : 2): [ 1 0.9986158574205949 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48270 interne); stringhe deallocate: 0 (48190 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9977469532913839 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4061249498321515


ris (2 : 2): [ -1 0.4061249498321515 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48290 interne); stringhe deallocate: 0 (48210 interne)


Stringhe allocate: 1 (48290 interne); stringhe deallocate: 0 (48215 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.002252839318667932 0.9977471606813321 0.9986158574205949 0.5938750501678485 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3930803433335643 0.9999999561290999 0.9999999632748808 0.9998900823211324 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.16144133601006e-314 0 0.9984665004734907 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79939656 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48325 interne); stringhe deallocate: 0 (48245 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405435637277919e-314 0 0.9975733844761621 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79941808 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.997632049583962


ris (2 : 2): [ -1 0.997632049583962 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48345 interne); stringhe deallocate: 0 (48265 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047849135e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.997632049583962


ris (2 : 2): [ 1 0.997632049583962 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48365 interne); stringhe deallocate: 0 (48285 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047843431e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9985416386331949


ris (2 : 2): [ 1 0.9985416386331949 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48385 interne); stringhe deallocate: 0 (48305 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9976320355364274 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4066823973972029


ris (2 : 2): [ -1 0.4066823973972029 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48405 interne); stringhe deallocate: 0 (48325 interne)


Stringhe allocate: 1 (48405 interne); stringhe deallocate: 0 (48330 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.002367950416037989 0.997632049583962 0.9985416386331949 0.5933176026027971 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3930966119924562 0.9999999560280521 0.9999999632210548 0.9998889053555673 ]
------------------------------ Fine f_aux5_d


*** target ***

*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
st = 1
end = 3


r (3 : 3): [ -3 1 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 2.161442581055487e-314 0 0.9985551921849023 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79942704 1701994341 1953265011 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 1


ris (2 : 2): [ 1 1 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48440 interne); stringhe deallocate: 0 (48360 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
st = 1
end = 3


r (3 : 3): [ -2 4 5 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (3 : 3): [ 6.405434609621376e-314 0 0.9976024715428231 ]
val = 0


valr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (3 : 3): [ 79869928 1072693248 0 ]
val = 0


signr (3 : 3): [ 0 0 0 ]
------------------------------ Fine InitVett_i


***next_op***

***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.9977465361331868


ris (2 : 2): [ -1 0.9977465361331868 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48460 interne); stringhe deallocate: 0 (48380 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
st = 1
end = 1


r (1 : 1): [ 4 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836133e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9977465361331868


ris (2 : 2): [ 1 0.9977465361331868 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48480 interne); stringhe deallocate: 0 (48400 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
st = 1
end = 1


r (1 : 1): [ 3 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 8.535903047836626e-307 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = 1, el2 = 0.9986154136822153


ris (2 : 2): [ 1 0.9986154136822153 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48500 interne); stringhe deallocate: 0 (48420 interne)


*** boole_result ***
37: copia_v_i	<=>	ris[st:end] <- v[st:end]
ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
st = 1
end = 1


r (1 : 1): [ 2 ]
------------------------------ Fine copia_v_i

41: InitVett_d
valr (1 : 1): [ 0.9977464764577526 ]
val = 0


valr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_d

42: InitVett_i
signr (1 : 1): [ 79873432 ]
val = 0


signr (1 : 1): [ 0 ]
------------------------------ Fine InitVett_i


***next_op***
109: vettore2s_d		<=>	ris <- c(el1, el2)
el1 = -1, el2 = 0.4061269208861293


ris (2 : 2): [ -1 0.4061269208861293 ]
------------------------------ Fine vettore2s_d


Stringhe allocate: 1 (48520 interne); stringhe deallocate: 0 (48440 interne)


Stringhe allocate: 1 (48520 interne); stringhe deallocate: 0 (48445 interne)

29: f_aux5_d	<=>	ris <- 1 / (1 + exp(-alpha * (targ - theta))) * (1 - xmin) + xmin
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
ris (5 : 5): [ 1 0.002253463866813243 0.9977465361331868 0.9986154136822153 0.5938730791138707 ]
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]


targetT (5 : 5): [ 0.9999999240903488 0.3930804315072772 0.9999999561285522 0.9999999632745593 0.9998900781815865 ]
------------------------------ Fine f_aux5_d


Stringhe allocate: 1 (48525 interne); stringhe deallocate: 0 (48465 interne)

119: moltiplica1_mv_d	m <- m * v
ris (5 x 51 : 5 x 51): [
	 0.8988629876690203 0.9088603161735783 0.9178694144363038 0.9259879685629445 0.9333040082356408 0.9398968615513349 0.945838015069744 0.9511918889448504 0.9560165354350868 0.9603642683661856 0.9642822303719854 0.9678129040638054 0.9709945726710194 0.9738617351475701 0.9764454802454414 0.9787738236111809 0.9808720115606229 0.9827627948256525 0.9844666752412594 0.9860021280477148 0.9873858022183061 0.9886327009847887 0.9897563445179998 0.9907689165275851 0.991681396370428 0.9925036781002335 0.9932446777491304 0.9939124300045467 0.9945141753296319 0.9950564384718751 0.9955450992111899 0.9959854561145929 0.9963822839887668 0.9967398856534724 0.997062138597186 0.9973525370208554 0.9976142297256539 0.9978500542555513 0.9980625676649111 0.9982540742447286 0.9984266505081458 0.9985821677061632 0.9987223121176844 0.9988486033339037 0.9989624107352908 0.9990649683398355 0.9991573881835517 0.9992406723783264 0.999315723977857 0.999383356769497 0.9994443040981832
	 0.86013003877782 0.8608886547644582 0.8564943883942696 0.8468737901658042 0.8326069380057856 0.8147139122696002 0.7943450354946313 0.7725487348082935 0.750160238974298 0.7280495637492195 0.7065657984418214 0.6858058033762779 0.6658784647761898 0.6468751717490846 0.6288580469200664 0.6118592014740713 0.5958851000192644 0.5809223904451958 0.5669444760757626 0.5539257019756756 0.5418218542579687 0.5305807144437634 0.5201501089162159 0.5104788420602843 0.501517318715512 0.4932179452340493 0.4855353725815731 0.4784266268285535 0.4718511596382723 0.4657708423208177 0.4601499205659451 0.4549549423223898 0.4501546679262075 0.4457199691276612 0.4416237218675641 0.4378406963284832 0.4343474468051256 0.4311222032095502 0.428144765484304 0.4253964017921039 0.4228597510491328 0.4205187301445837 0.4183584460226388 0.4163651126803914 0.4145259730456515 0.4128292256341102 0.4112639558399034 0.4098200716826305 0.4084882438138189 0.4072598495740222 0.4061269208861293
	 0.7529666664997292 0.7772951044439772 0.7992282161155653 0.8190015489586098 0.8368276373512665 0.8528981706223073 0.8673860015754057 0.8804469809183348 0.8922216215787752 0.9028366040750943 0.9124061360681953 0.9210331792614577 0.9288105561263625 0.9358219479903244 0.9421427950285362 0.94784110773537 0.9529781985455754 0.9576093414420208 0.9617843666262391 0.9655481966375659 0.9689413296814999 0.9720002753628075 0.9747579475085531 0.9772440183056541 0.9794852375620142 0.9815057205254817 0.9833272073568721 0.984969297048495 0.9864496583047975 0.9877842196539465 0.9889873408357652 0.9900719673100181 0.9910497695474492 0.9919312686022666 0.992725949317171 0.9934423623789666 0.9940882163228352 0.9946704604752092 0.9951953597276859 0.9956685619465289 0.9960951587430684 0.9964797402588773 0.9968264445551988 0.9971390021380474 0.9974207760980676 0.997674798297045 0.9979038019904348 0.9981102512369194 0.9982963674114377 0.9984641531069638 0.9986154136822153
	 0.6820456255132146 0.7120116977036076 0.7391536686124823 0.7637376498604009 0.7860046963639782 0.8061731569306082 0.8244408082791409 0.8409867909525118 0.8559733641481736 0.8695474958638958 0.8818423035506087 0.8929783591932536 0.903064871507904 0.9122007567880264 0.9204756088670947 0.9279705776898086 0.9347591650959812 0.9409079456139301 0.9464772193275325 0.9515216032166124 0.956090566767969 0.9602289171084623 0.9639772384169537 0.967372289923784 0.9704473664005205 0.9732326246749716 0.9757553793733601 0.9780403707898199 0.9801100075100714 0.9819845861685814 0.9836824904942785 0.9852203715967981 0.9866133112612704 0.9878749698530351 0.989017720282749 0.9900527693456489 0.9909902676249177 0.9918394090369535 0.9926085209947602 0.9933051460736779 0.9939361159803314 0.9945076185501973 0.995025258430826 0.9954941120458247 0.9959187773786277 0.9963034190642732 0.9966518092313966 0.9969673644949685 0.9972531794625623 0.9975120570827414 0.9977465361331868
	 0.8224436778595854 0.8232289895869878 0.8241012391444608 0.8255741208201427 0.8281594366676583 0.8323131341342922 0.8383238151071581 0.8461940854241536 0.8556116844784997 0.8660460733425138 0.876917049026957 0.8877510563938593 0.8982122070845602 0.9080894653010643 0.9172689308830373 0.9257049544340147 0.9333963456127559 0.9403689916303835 0.9466640217693105 0.9523300842208126 0.9574185261247719 0.9619804949394646 0.966065191552461 0.9697189138611042 0.97298459860479 0.9759016690945405 0.9785060672068709 0.9808303927940203 0.9829041020246551 0.9847537341821242 0.9864031479331901 0.987873755432516 0.9891847473475847 0.9903533049199403 0.991394797120351 0.9923229621898376 0.9931500736314107 0.9938870911882503 0.9945437976171668 0.995128922210029 0.9956502520758053 0.9961147322021062 0.9965285552877278 0.9968972422901056 0.9972257145727373 0.9975183584734139 0.9977790830484116 0.9980113716831124 0.9982183281973934 0.9984027180154718 0.9985670049151855
 ]
parm1[j][i] (5 : 5): [ 12.67431725 9.032985081 12.19219754 9.171903361 10.26385753 ]


ris (5 x 51 : 5 x 51): [
	 11.39247467 11.51918398311924 11.63336815263744 11.73626528324979 11.82899109107512 11.91255100558095 11.98785107010422 12.0557077661138 12.11685686635016 12.17196141283718 12.22161890627213 12.26636778474848 12.30669326206068 12.34303258889578 12.37577979395933 12.40528995644365 12.431883056165 12.45584744311698 12.47744296406044 12.49690378005186 12.51444090546056 12.5302444960056 12.54448591062143 12.55731956950938 12.5688846285218 12.57930648803424 12.58869815266649 12.59716145659604 12.60478816774988 12.61166098284765 12.61785442408535 12.6234356471823 12.62846516955323 12.63299752650083 12.63708186254421 12.64076246429469 12.64407924065732 12.64706815556457 12.64976161793467 12.65218883308274 12.65437611939511 12.65634719370062 12.65812342843305 12.6597240833733 12.66116651448388 12.66246636210028 12.66363772051974 12.66469329082622 12.66564451860879 12.66650171806654 12.66727418384585
	 7.769541808 7.77639437488951 7.736701032325657 7.649798312057634 7.520926049343353 7.359298614814441 7.17530685478942 6.97842119586874 6.776186247014228 6.576460847575258 6.382398316069826 6.194873590361138 6.014870238082507 5.843213775678794 5.680465355895758 5.526915038587859 5.382621218464208 5.24746328611031 5.121200994147725 5.00360260192873 4.894268726071988 4.792727677836836 4.698508173720703 4.611147764496703 4.530198457820341 4.455230340980642 4.385833776827126 4.321620582495478 4.262224485465064 4.207301069848749 4.156527367495517 4.109601206525363 4.066240399519941 4.026181831433944 3.9891804910454 3.95500847778984 3.923454006961141 3.894320429679717 3.867425279127962 3.842599350899156 3.819685822582191 3.798539415677089 3.77902560143284 3.761019851090859 3.744406930208378 3.7290802361537 3.71494117745489 3.701898593403552 3.689868212134117 3.678772145292447 3.668538417356873
	 9.180318338999999 9.476935460255902 9.744348290422783 9.985428670469352 10.20276786151812 10.3987029777318 10.5753414746381 10.73458351485295 10.87814225974755 11.00756222322632 11.12423584765156 11.22941846244992 11.32424177752987 11.40972605216564 11.48679106787564 11.55626602204205 11.618898447981 11.67536225701043 11.72626498879089 11.77215434779597 11.81352409614711 11.85081936615775 11.88444144970923 11.91475211596591 11.94207750386991 11.96671163128671 11.98891955855153 12.00894024045019 12.02698909731759 12.04326033291567 12.05792902402896 12.07115300426016 12.08307456229398 12.09382197290163 12.10351087715898 12.11224552672863 12.12011990559426 12.12721874131651 12.13361841669131 12.13938779161981 12.14458894403315 12.14927783784412 12.15350492511284 12.15731568890556 12.16075113268775 12.16384822151723 12.16664027978443 12.16915734977955 12.17142651494467 12.17347219128891 12.17531639010239
	 6.255656565 6.530502483239035 6.779446017442307 7.004927917676852 7.209159116342556 7.394142287599826 7.561691420401009 7.713449574493947 7.850904975557111 7.975405599863199 8.088172387807809 8.190311213984868 8.282823730184378 8.366617187090842 8.442513330686627 8.511256460422267 8.573520728069385 8.629916748768011 8.68099758906013 8.727264190606556 8.76917028275953 8.807126832156495 8.841506072963956 8.87264515729022 8.900849461562533 8.926395581291224 8.949534043588352 8.970491764040835 8.989474272031359 9.006667726329805 9.022240740721323 9.036346037574342 9.049121945564584 9.060693756242827 9.071174952749903 9.080668322728714 9.089266966347273 9.097055209318286 9.10410942986908 9.110498807771762 9.116286002779287 9.121527769120661 9.126275512081588 9.130575792128811 9.134470781522046 9.1379986778914 9.141194078836177 9.144088321218714 9.146709788480612 9.14908418899522 9.151234808186084
	 8.441444735999999 8.449505063686695 8.458457708875203 8.473575156552951 8.500110470081902 8.542743429102155 8.604436202265932 8.685215535522161 8.781876430490632 8.888973511203492 9.000551656840711 9.111750364933567 9.219122125222782 9.320500896344001 9.414717623278911 9.501303767125867 9.580247110391966 9.651813355724018 9.716424648217021 9.77458030597532 9.826807348727241 9.87363074669755 9.915555490786618 9.953056776016714 9.986575298963802 10.01651569487557 10.04324686605193 10.06710341273176 10.08838766883364 10.10737202978081 10.12430137752978 10.13939548338541 10.15285131762465 10.16484522606292 10.17553495362654 10.18506150766407 10.19355086166181 10.20111550486232 10.20785584608775 10.21386148154619 10.21921233701465 10.22397969485652 10.22822711604997 10.23201126691553 10.23538265962702 10.23838631493059 10.24106235482293 10.24344653227534 10.24557070445283 10.24746325527557 10.24914947260827
 ]
------------------------------ Fine moltiplica1_mv_d


*** write_m_d ***
ris (5 x 51 : 5 x 51): [
	 11.39247467 11.51918398311924 11.63336815263744 11.73626528324979 11.82899109107512 11.91255100558095 11.98785107010422 12.0557077661138 12.11685686635016 12.17196141283718 12.22161890627213 12.26636778474848 12.30669326206068 12.34303258889578 12.37577979395933 12.40528995644365 12.431883056165 12.45584744311698 12.47744296406044 12.49690378005186 12.51444090546056 12.5302444960056 12.54448591062143 12.55731956950938 12.5688846285218 12.57930648803424 12.58869815266649 12.59716145659604 12.60478816774988 12.61166098284765 12.61785442408535 12.6234356471823 12.62846516955323 12.63299752650083 12.63708186254421 12.64076246429469 12.64407924065732 12.64706815556457 12.64976161793467 12.65218883308274 12.65437611939511 12.65634719370062 12.65812342843305 12.6597240833733 12.66116651448388 12.66246636210028 12.66363772051974 12.66469329082622 12.66564451860879 12.66650171806654 12.66727418384585
	 7.769541808 7.77639437488951 7.736701032325657 7.649798312057634 7.520926049343353 7.359298614814441 7.17530685478942 6.97842119586874 6.776186247014228 6.576460847575258 6.382398316069826 6.194873590361138 6.014870238082507 5.843213775678794 5.680465355895758 5.526915038587859 5.382621218464208 5.24746328611031 5.121200994147725 5.00360260192873 4.894268726071988 4.792727677836836 4.698508173720703 4.611147764496703 4.530198457820341 4.455230340980642 4.385833776827126 4.321620582495478 4.262224485465064 4.207301069848749 4.156527367495517 4.109601206525363 4.066240399519941 4.026181831433944 3.9891804910454 3.95500847778984 3.923454006961141 3.894320429679717 3.867425279127962 3.842599350899156 3.819685822582191 3.798539415677089 3.77902560143284 3.761019851090859 3.744406930208378 3.7290802361537 3.71494117745489 3.701898593403552 3.689868212134117 3.678772145292447 3.668538417356873
	 9.180318338999999 9.476935460255902 9.744348290422783 9.985428670469352 10.20276786151812 10.3987029777318 10.5753414746381 10.73458351485295 10.87814225974755 11.00756222322632 11.12423584765156 11.22941846244992 11.32424177752987 11.40972605216564 11.48679106787564 11.55626602204205 11.618898447981 11.67536225701043 11.72626498879089 11.77215434779597 11.81352409614711 11.85081936615775 11.88444144970923 11.91475211596591 11.94207750386991 11.96671163128671 11.98891955855153 12.00894024045019 12.02698909731759 12.04326033291567 12.05792902402896 12.07115300426016 12.08307456229398 12.09382197290163 12.10351087715898 12.11224552672863 12.12011990559426 12.12721874131651 12.13361841669131 12.13938779161981 12.14458894403315 12.14927783784412 12.15350492511284 12.15731568890556 12.16075113268775 12.16384822151723 12.16664027978443 12.16915734977955 12.17142651494467 12.17347219128891 12.17531639010239
	 6.255656565 6.530502483239035 6.779446017442307 7.004927917676852 7.209159116342556 7.394142287599826 7.561691420401009 7.713449574493947 7.850904975557111 7.975405599863199 8.088172387807809 8.190311213984868 8.282823730184378 8.366617187090842 8.442513330686627 8.511256460422267 8.573520728069385 8.629916748768011 8.68099758906013 8.727264190606556 8.76917028275953 8.807126832156495 8.841506072963956 8.87264515729022 8.900849461562533 8.926395581291224 8.949534043588352 8.970491764040835 8.989474272031359 9.006667726329805 9.022240740721323 9.036346037574342 9.049121945564584 9.060693756242827 9.071174952749903 9.080668322728714 9.089266966347273 9.097055209318286 9.10410942986908 9.110498807771762 9.116286002779287 9.121527769120661 9.126275512081588 9.130575792128811 9.134470781522046 9.1379986778914 9.141194078836177 9.144088321218714 9.146709788480612 9.14908418899522 9.151234808186084
	 8.441444735999999 8.449505063686695 8.458457708875203 8.473575156552951 8.500110470081902 8.542743429102155 8.604436202265932 8.685215535522161 8.781876430490632 8.888973511203492 9.000551656840711 9.111750364933567 9.219122125222782 9.320500896344001 9.414717623278911 9.501303767125867 9.580247110391966 9.651813355724018 9.716424648217021 9.77458030597532 9.826807348727241 9.87363074669755 9.915555490786618 9.953056776016714 9.986575298963802 10.01651569487557 10.04324686605193 10.06710341273176 10.08838766883364 10.10737202978081 10.12430137752978 10.13939548338541 10.15285131762465 10.16484522606292 10.17553495362654 10.18506150766407 10.19355086166181 10.20111550486232 10.20785584608775 10.21386148154619 10.21921233701465 10.22397969485652 10.22822711604997 10.23201126691553 10.23538265962702 10.23838631493059 10.24106235482293 10.24344653227534 10.24557070445283 10.24746325527557 10.24914947260827
 ]

Stringhe allocate: 1 (48525 interne); stringhe deallocate: 0 (48465 interne)


*** write_vn_d ***
parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]

Stringhe allocate: 1 (48525 interne); stringhe deallocate: 0 (48465 interne)


*** write_vn_d ***
parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]

Stringhe allocate: 1 (48525 interne); stringhe deallocate: 0 (48465 interne)


*** write_vn_d ***
parm1[j][i] (5 : 5): [ 1.040829206 0.833709414 1.036836698 0.989892399 1.171423905 ]

Stringhe allocate: 1 (48525 interne); stringhe deallocate: 0 (48465 interne)


*** write_vn_d ***
parm1[j][i] (5 : 5): [ 0.6642835671483607 0.3855657655547057 0.5686263953856509 0.6044709965626511 0.7697130160769097 ]

Stringhe allocate: 1 (48525 interne); stringhe deallocate: 0 (48465 interne)


*** write_vn_d ***
parm1[j][i] (5 : 5): [ 12.67431725 9.032985081 12.19219754 9.171903361 10.26385753 ]

Stringhe allocate: 1 (48525 interne); stringhe deallocate: 0 (48465 interne)


*** write_vn_d ***
parm1[j][i] (5 : 5): [ 0.8988629876690203 0.86013003877782 0.7529666664997292 0.6820456255132146 0.8224436778595854 ]

Stringhe allocate: 1 (48525 interne); stringhe deallocate: 0 (48465 interne)


Stringhe allocate: 1 (48530 interne); stringhe deallocate: 0 (48500 interne)

Trasformo la lista ... ris (5 : 5): {
	ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
	ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
	ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
	ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
	ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
}

Trasformo il vettore ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 4 ]
Trasformo il vettore ACCEDIlst(ris, i, vi) (3 : 3): [ -2 4 5 ]
Trasformo il vettore ACCEDIlst(ris, i, vi) (1 : 1): [ 4 ]
Trasformo il vettore ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
Trasformo il vettore ACCEDIlst(ris, i, vi) (1 : 1): [ 2 ]
bene
------------------------------ Fine daLISTA

Trasformo la lista ... ris (5 : 5): {
	ris (5 x 51 : 5 x 51): [
	 11.39247467 11.51918398311924 11.63336815263744 11.73626528324979 11.82899109107512 11.91255100558095 11.98785107010422 12.0557077661138 12.11685686635016 12.17196141283718 12.22161890627213 12.26636778474848 12.30669326206068 12.34303258889578 12.37577979395933 12.40528995644365 12.431883056165 12.45584744311698 12.47744296406044 12.49690378005186 12.51444090546056 12.5302444960056 12.54448591062143 12.55731956950938 12.5688846285218 12.57930648803424 12.58869815266649 12.59716145659604 12.60478816774988 12.61166098284765 12.61785442408535 12.6234356471823 12.62846516955323 12.63299752650083 12.63708186254421 12.64076246429469 12.64407924065732 12.64706815556457 12.64976161793467 12.65218883308274 12.65437611939511 12.65634719370062 12.65812342843305 12.6597240833733 12.66116651448388 12.66246636210028 12.66363772051974 12.66469329082622 12.66564451860879 12.66650171806654 12.66727418384585
	 7.769541808 7.77639437488951 7.736701032325657 7.649798312057634 7.520926049343353 7.359298614814441 7.17530685478942 6.97842119586874 6.776186247014228 6.576460847575258 6.382398316069826 6.194873590361138 6.014870238082507 5.843213775678794 5.680465355895758 5.526915038587859 5.382621218464208 5.24746328611031 5.121200994147725 5.00360260192873 4.894268726071988 4.792727677836836 4.698508173720703 4.611147764496703 4.530198457820341 4.455230340980642 4.385833776827126 4.321620582495478 4.262224485465064 4.207301069848749 4.156527367495517 4.109601206525363 4.066240399519941 4.026181831433944 3.9891804910454 3.95500847778984 3.923454006961141 3.894320429679717 3.867425279127962 3.842599350899156 3.819685822582191 3.798539415677089 3.77902560143284 3.761019851090859 3.744406930208378 3.7290802361537 3.71494117745489 3.701898593403552 3.689868212134117 3.678772145292447 3.668538417356873
	 9.180318338999999 9.476935460255902 9.744348290422783 9.985428670469352 10.20276786151812 10.3987029777318 10.5753414746381 10.73458351485295 10.87814225974755 11.00756222322632 11.12423584765156 11.22941846244992 11.32424177752987 11.40972605216564 11.48679106787564 11.55626602204205 11.618898447981 11.67536225701043 11.72626498879089 11.77215434779597 11.81352409614711 11.85081936615775 11.88444144970923 11.91475211596591 11.94207750386991 11.96671163128671 11.98891955855153 12.00894024045019 12.02698909731759 12.04326033291567 12.05792902402896 12.07115300426016 12.08307456229398 12.09382197290163 12.10351087715898 12.11224552672863 12.12011990559426 12.12721874131651 12.13361841669131 12.13938779161981 12.14458894403315 12.14927783784412 12.15350492511284 12.15731568890556 12.16075113268775 12.16384822151723 12.16664027978443 12.16915734977955 12.17142651494467 12.17347219128891 12.17531639010239
	 6.255656565 6.530502483239035 6.779446017442307 7.004927917676852 7.209159116342556 7.394142287599826 7.561691420401009 7.713449574493947 7.850904975557111 7.975405599863199 8.088172387807809 8.190311213984868 8.282823730184378 8.366617187090842 8.442513330686627 8.511256460422267 8.573520728069385 8.629916748768011 8.68099758906013 8.727264190606556 8.76917028275953 8.807126832156495 8.841506072963956 8.87264515729022 8.900849461562533 8.926395581291224 8.949534043588352 8.970491764040835 8.989474272031359 9.006667726329805 9.022240740721323 9.036346037574342 9.049121945564584 9.060693756242827 9.071174952749903 9.080668322728714 9.089266966347273 9.097055209318286 9.10410942986908 9.110498807771762 9.116286002779287 9.121527769120661 9.126275512081588 9.130575792128811 9.134470781522046 9.1379986778914 9.141194078836177 9.144088321218714 9.146709788480612 9.14908418899522 9.151234808186084
	 8.441444735999999 8.449505063686695 8.458457708875203 8.473575156552951 8.500110470081902 8.542743429102155 8.604436202265932 8.685215535522161 8.781876430490632 8.888973511203492 9.000551656840711 9.111750364933567 9.219122125222782 9.320500896344001 9.414717623278911 9.501303767125867 9.580247110391966 9.651813355724018 9.716424648217021 9.77458030597532 9.826807348727241 9.87363074669755 9.915555490786618 9.953056776016714 9.986575298963802 10.01651569487557 10.04324686605193 10.06710341273176 10.08838766883364 10.10737202978081 10.12430137752978 10.13939548338541 10.15285131762465 10.16484522606292 10.17553495362654 10.18506150766407 10.19355086166181 10.20111550486232 10.20785584608775 10.21386148154619 10.21921233701465 10.22397969485652 10.22822711604997 10.23201126691553 10.23538265962702 10.23838631493059 10.24106235482293 10.24344653227534 10.24557070445283 10.24746325527557 10.24914947260827
 ]
	tmpm1_d (5 x 5 : 5 x 5): [
	 1 0 0 1 0
	 0 0 0 -1 -1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 -1 0 0 0
 ]
	parm1[j][i] (5 : 5): [ 1.040829206 0.833709414 1.036836698 0.989892399 1.171423905 ]
	parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
	parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
}

Trasformo la matrice
ris (5 x 51 : 5 x 51): [
	 11.39247467 11.51918398311924 11.63336815263744 11.73626528324979 11.82899109107512 11.91255100558095 11.98785107010422 12.0557077661138 12.11685686635016 12.17196141283718 12.22161890627213 12.26636778474848 12.30669326206068 12.34303258889578 12.37577979395933 12.40528995644365 12.431883056165 12.45584744311698 12.47744296406044 12.49690378005186 12.51444090546056 12.5302444960056 12.54448591062143 12.55731956950938 12.5688846285218 12.57930648803424 12.58869815266649 12.59716145659604 12.60478816774988 12.61166098284765 12.61785442408535 12.6234356471823 12.62846516955323 12.63299752650083 12.63708186254421 12.64076246429469 12.64407924065732 12.64706815556457 12.64976161793467 12.65218883308274 12.65437611939511 12.65634719370062 12.65812342843305 12.6597240833733 12.66116651448388 12.66246636210028 12.66363772051974 12.66469329082622 12.66564451860879 12.66650171806654 12.66727418384585
	 7.769541808 7.77639437488951 7.736701032325657 7.649798312057634 7.520926049343353 7.359298614814441 7.17530685478942 6.97842119586874 6.776186247014228 6.576460847575258 6.382398316069826 6.194873590361138 6.014870238082507 5.843213775678794 5.680465355895758 5.526915038587859 5.382621218464208 5.24746328611031 5.121200994147725 5.00360260192873 4.894268726071988 4.792727677836836 4.698508173720703 4.611147764496703 4.530198457820341 4.455230340980642 4.385833776827126 4.321620582495478 4.262224485465064 4.207301069848749 4.156527367495517 4.109601206525363 4.066240399519941 4.026181831433944 3.9891804910454 3.95500847778984 3.923454006961141 3.894320429679717 3.867425279127962 3.842599350899156 3.819685822582191 3.798539415677089 3.77902560143284 3.761019851090859 3.744406930208378 3.7290802361537 3.71494117745489 3.701898593403552 3.689868212134117 3.678772145292447 3.668538417356873
	 9.180318338999999 9.476935460255902 9.744348290422783 9.985428670469352 10.20276786151812 10.3987029777318 10.5753414746381 10.73458351485295 10.87814225974755 11.00756222322632 11.12423584765156 11.22941846244992 11.32424177752987 11.40972605216564 11.48679106787564 11.55626602204205 11.618898447981 11.67536225701043 11.72626498879089 11.77215434779597 11.81352409614711 11.85081936615775 11.88444144970923 11.91475211596591 11.94207750386991 11.96671163128671 11.98891955855153 12.00894024045019 12.02698909731759 12.04326033291567 12.05792902402896 12.07115300426016 12.08307456229398 12.09382197290163 12.10351087715898 12.11224552672863 12.12011990559426 12.12721874131651 12.13361841669131 12.13938779161981 12.14458894403315 12.14927783784412 12.15350492511284 12.15731568890556 12.16075113268775 12.16384822151723 12.16664027978443 12.16915734977955 12.17142651494467 12.17347219128891 12.17531639010239
	 6.255656565 6.530502483239035 6.779446017442307 7.004927917676852 7.209159116342556 7.394142287599826 7.561691420401009 7.713449574493947 7.850904975557111 7.975405599863199 8.088172387807809 8.190311213984868 8.282823730184378 8.366617187090842 8.442513330686627 8.511256460422267 8.573520728069385 8.629916748768011 8.68099758906013 8.727264190606556 8.76917028275953 8.807126832156495 8.841506072963956 8.87264515729022 8.900849461562533 8.926395581291224 8.949534043588352 8.970491764040835 8.989474272031359 9.006667726329805 9.022240740721323 9.036346037574342 9.049121945564584 9.060693756242827 9.071174952749903 9.080668322728714 9.089266966347273 9.097055209318286 9.10410942986908 9.110498807771762 9.116286002779287 9.121527769120661 9.126275512081588 9.130575792128811 9.134470781522046 9.1379986778914 9.141194078836177 9.144088321218714 9.146709788480612 9.14908418899522 9.151234808186084
	 8.441444735999999 8.449505063686695 8.458457708875203 8.473575156552951 8.500110470081902 8.542743429102155 8.604436202265932 8.685215535522161 8.781876430490632 8.888973511203492 9.000551656840711 9.111750364933567 9.219122125222782 9.320500896344001 9.414717623278911 9.501303767125867 9.580247110391966 9.651813355724018 9.716424648217021 9.77458030597532 9.826807348727241 9.87363074669755 9.915555490786618 9.953056776016714 9.986575298963802 10.01651569487557 10.04324686605193 10.06710341273176 10.08838766883364 10.10737202978081 10.12430137752978 10.13939548338541 10.15285131762465 10.16484522606292 10.17553495362654 10.18506150766407 10.19355086166181 10.20111550486232 10.20785584608775 10.21386148154619 10.21921233701465 10.22397969485652 10.22822711604997 10.23201126691553 10.23538265962702 10.23838631493059 10.24106235482293 10.24344653227534 10.24557070445283 10.24746325527557 10.24914947260827
 ]
Trasformo la matrice
tmpm1_d (5 x 5 : 5 x 5): [
	 1 0 0 1 0
	 0 0 0 -1 -1
	 0 0 0 1 0
	 0 0 1 0 0
	 0 -1 0 0 0
 ]
Trasformo il vettore parm1[j][i] (5 : 5): [ 1.040829206 0.833709414 1.036836698 0.989892399 1.171423905 ]
Trasformo il vettore parm1[j][i] (5 : 5): [ 19.8324631 19.019991 19.98633843 19.73320616 19.11550584 ]
Trasformo il vettore parm1[j][i] (5 : 5): [ 0.228424968 0.233144199 0.192135176 0.178056163 0.193839995 ]
bene
------------------------------ Fine daLISTA


Stringhe allocate: 1 (48530 interne); stringhe deallocate: 5 (48655 interne)

