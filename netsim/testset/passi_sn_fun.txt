
*** simulatenet ***
Ho trasformato la stringa 'connectivity' che vale 'MTM'
Ho trasformato la stringa 'INdegree' che vale 'free'
Ho trasformato il vettore num_subnet (3 : 3): [ 5 5 10 ]
Ho trasformato la stringa 'formula' che vale '1 / (1 + e ^ (-10 * (x - 0.5)))'
Ho trasformato il vettore Xmax (5 : 5): [ 10.000 10.000 10.000 10.000 10.000 ]
Ho trasformato il vettore lambda (2 : 2): [ 1.000 0.100 ]
Ho trasformato il vettore X0 (2 : 2): [ 0.000 1.000 ]
Ho trasformato il vettore weight_par (2 : 2): [ 1.000 0.000 ]
Ho trasformato la stringa 'act_fun' che vale 'sigmoidal'
Ho trasformato il vettore alpha (2 : 2): [ 10.000 0.200 ]
Ho trasformato il vettore beta (2 : 2): [ 0.500 0.010 ]
Ho trasformato il vettore times (5 : 5): [ 1.000 2.000 3.000 4.000 5.000 ]
Ho trasformato la stringa 'method' che vale 'Euler'
Ho trasformato il vettore param (5 : 5): [ 2 2 2 0 1 ]
226: copia_v_d
Xmax (5 : 5): [ 10.000 10.000 10.000 10.000 10.000 ]
start = 1
end = 5


parm1[j] (5 : 5): [ 10.000 10.000 10.000 10.000 10.000 ]
*****************************************

254: dividi1_vv_d
parm1[j] (5 : 5): [ 0.139 0.005 1.001 0.208 0.375 ]
parm1[j] (5 : 5): [ 10.335 13.886 9.603 23.519 4.934 ]


parm1[j] (5 : 5): [ 0.013 0.000 0.104 0.009 0.076 ]
*****************************************


*** simulatenet1 ***

*** connectivity_modular1 ***
40: seq_d
da = 1.000, a = 5.000, incremento = 1.000


tmp1_d (5 : 5): [ 1.000 2.000 3.000 4.000 5.000 ]
*****************************************

41: exp_d
tmp1_d (5 : 5): [ 1.000 2.000 3.000 4.000 5.000 ]
val = -2.200


tmp2_d (5 : 5): [ 1.000 0.218 0.089 0.047 0.029 ]
*****************************************

43: vettore2v_d
tmp1_d (5 : 5): [ 1.000 2.000 3.000 4.000 5.000 ]
scalare_d (1 : 1): [ 0.000 ]


Prob (6 : 6): [ 1.000 2.000 3.000 4.000 5.000 0.000 ]
*****************************************

45: somma_v_d
Prob (6 : 6): [ 1.000 2.000 3.000 4.000 5.000 0.000 ]
canc_NA = 0



ris: 15.000
*****************************************

45: dividi1_vs_d
Prob (6 : 6): [ 1.000 2.000 3.000 4.000 5.000 0.000 ]
div = 15.000


Prob (6 : 6): [ 0.067 0.133 0.200 0.267 0.333 0.000 ]
*****************************************

48: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 6


tmp2_d (6 : 16): [ 0.000 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

50: vettore2v_d
scalare_d (1 : 1): [ 5.000 ]
tmp2_d (6 : 16): [ 0.000 0.000 0.000 0.000 0.000 0.000 ]


Freq_out (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

51: copia_v_d
Freq_out (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
start = 1
end = 7


Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

53: moltiplica_vs_d
Prob (6 : 6): [ 0.067 0.133 0.200 0.267 0.333 0.000 ]
val = 5.000


tmp1_d (6 : 16): [ 0.333 0.667 1.000 1.333 1.667 0.000 ]
*****************************************

55: vettore2v_d
scalare_d (1 : 1): [ 1.#QO ]
tmp1_d (6 : 16): [ 0.333 0.667 1.000 1.333 1.667 0.000 ]


STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
*****************************************

56: copia_v_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
start = 1
end = 7


STin (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
*****************************************

59: rep_d
scalare_d (1 : 1): [ 1.000 ]
ripetizioni = 7


tmp1_d (7 : 16): [ 1.000 1.000 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

60: moltiplica_vs_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
val = 0.100


tmp2_d (7 : 16): [ 1.#QO 0.033 0.067 0.100 0.133 0.167 0.000 ]
*****************************************

61: cbind2v_d
tmp2_d (7 : 16): [ 1.#QO 0.033 0.067 0.100 0.133 0.167 0.000 ]
tmp1_d (7 : 16): [ 1.000 1.000 1.000 1.000 1.000 1.000 1.000 ]


aus (7 x 2 : 7 x 2): [
	 1.#QO 1.000
	 0.033 1.000
	 0.067 1.000
	 0.100 1.000
	 0.133 1.000
	 0.167 1.000
	 0.000 1.000
 ]
*****************************************

63: max_righe_d
aus (7 x 2 : 7 x 2): [
	 1.#QO 1.000
	 0.033 1.000
	 0.067 1.000
	 0.100 1.000
	 0.133 1.000
	 0.167 1.000
	 0.000 1.000
 ]


toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

65: assegna_v_segms_d
STin (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
start = 7
end = 7
val = 0.000


STin (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
*****************************************

75: assegna_v_segms_d
STin (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
start = 2
end = 6
val = 1.#QO


STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
*****************************************

83: seq_i
da = 1, a = 5, incremento = 1


h (5 : 5): [ 1 2 3 4 5 ]
*****************************************

97: somma_righe_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


Sin (5 : 5): [ 0 0 0 0 0 ]
*****************************************

99: somma_colonne_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


Sout (5 : 5): [ 0 0 0 0 0 ]
*****************************************

*** cluster_coeff2 ***
21: trasponi_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
*****************************************

22: somma1_m_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
tmpm_i (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
*****************************************

24: which_m_indxne_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


ind (0 : 25): [ ]
*****************************************

26: assegna1_ms_indxv_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
ind (0 : 25): [ ]
val = 1


Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
*****************************************

28: assegna1_s_diag_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
val = 0


Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
*****************************************

33: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


Cg (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

37: somma_riga_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1


ris: 0
*****************************************

39: which_m_rowindxne_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1, val = 0


neighbours (0 : 25): [ ]
*****************************************

37: somma_riga_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 2


ris: 0
*****************************************

39: which_m_rowindxne_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 2, val = 0


neighbours (0 : 25): [ ]
*****************************************

37: somma_riga_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 3


ris: 0
*****************************************

39: which_m_rowindxne_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 3, val = 0


neighbours (0 : 25): [ ]
*****************************************

37: somma_riga_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 4


ris: 0
*****************************************

39: which_m_rowindxne_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 4, val = 0


neighbours (0 : 25): [ ]
*****************************************

37: somma_riga_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 5


ris: 0
*****************************************

39: which_m_rowindxne_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 5, val = 0


neighbours (0 : 25): [ ]
*****************************************

72: media_v_d
Cg (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


media = 0.000
*****************************************


Stringhe allocate: 5 (190 interne); stringhe deallocate: 0 (20 interne)


*** module12 ***
18: seq_i
da = 1, a = 5, incremento = 1


tmp1_i (5 : 5): [ 1 2 3 4 5 ]
*****************************************


*** sampleB ***

*** sample ***
tmp1_i (5 : 5): [ 1 2 3 4 5 ]
k = 1, replace = 0


ris (1 : 1): [ 4 ]
*****************************************


Stringhe allocate: 5 (205 interne); stringhe deallocate: 0 (20 interne)


Stringhe allocate: 5 (205 interne); stringhe deallocate: 0 (20 interne)


*** mod1 ***
14: seq_i
da = 1, a = 3, incremento = 1


x (3 : 3): [ 1 2 3 ]
*****************************************

16: somma_vs_i
x (3 : 3): [ 1 2 3 ]
s = 1.000


tmp1_i (3 : 3): [ 2 3 4 ]
*****************************************

17: cbind2v_i
x (3 : 3): [ 1 2 3 ]
tmp1_i (3 : 3): [ 2 3 4 ]


ind (3 x 2 : 3 x 2): [
	 1 2
	 2 3
	 3 4
 ]
*****************************************

19: assegna1_ms_indx2_i
m (4 x 4 : 4 x 4): [
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
	 0 0 0 0
 ]
ind (3 x 2 : 3 x 2): [
	 1 2
	 2 3
	 3 4
 ]
val = 1


m (4 x 4 : 4 x 4): [
	 0 1 0 0
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]
*****************************************

22: vettore2s_i
el1 = 1, el2 = -1


tmp1_i (2 : 3): [ 1 -1 ]
*****************************************


*** sampleB ***

*** sample ***
tmp1_i (2 : 3): [ 1 -1 ]
k = 1, replace = 0


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (230 interne); stringhe deallocate: 0 (20 interne)


Stringhe allocate: 5 (230 interne); stringhe deallocate: 0 (20 interne)


*** triangola ***
18: diag_i
m (4 x 4 : 4 x 4): [
	 0 1 0 1
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]


Dmem (4 : 4): [ 0 0 0 0 ]
*****************************************

20: assegna1_s_diag_i
m (4 x 4 : 4 x 4): [
	 0 1 0 1
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]
val = 0


m (4 x 4 : 4 x 4): [
	 0 1 0 1
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]
*****************************************

24: which_m_rowindxne_i
m (4 x 4 : 4 x 4): [
	 0 1 0 1
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]
riga = 1, val = 0


tmp1_i (2 : 16): [ 2 4 ]
*****************************************

25: which_m_colindxne_i
m (4 x 4 : 4 x 4): [
	 0 1 0 1
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]
colonna = 1, val = 0


tmp2_i (0 : 16): [ ]
*****************************************

26: unione_i
tmp1_i (2 : 16): [ 2 4 ]
tmp2_i (0 : 16): [ ]
4663: elimina_doppi_i
ind (2 : 2): [ 2 4 ]


ris (2 : 2): [ 2 4 ]
*****************************************



ris (2 : 2): [ 2 4 ]
*****************************************

24: which_m_rowindxne_i
m (4 x 4 : 4 x 4): [
	 0 1 0 1
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]
riga = 2, val = 0


tmp1_i (1 : 16): [ 3 ]
*****************************************

25: which_m_colindxne_i
m (4 x 4 : 4 x 4): [
	 0 1 0 1
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]
colonna = 2, val = 0


tmp2_i (1 : 16): [ 1 ]
*****************************************

26: unione_i
tmp1_i (1 : 16): [ 3 ]
tmp2_i (1 : 16): [ 1 ]
4663: elimina_doppi_i
ind (2 : 2): [ 3 1 ]


ris (2 : 2): [ 3 1 ]
*****************************************



ris (2 : 2): [ 3 1 ]
*****************************************

61: vettore2s_i
el1 = 3, el2 = 1


tmp1_i (2 : 16): [ 3 1 ]
*****************************************

62: aggiungi_mv_riga_i
coord (1 x 2 : 2 x 2): [
	 0 0
 ]
riga = 2
tmp1_i (2 : 16): [ 3 1 ]


coord (1 x 2 : 2 x 2): [
	 0 3
 ]
*****************************************

63: vettore2s_i
el1 = 1, el2 = 3


tmp1_i (2 : 16): [ 1 3 ]
*****************************************

65: aggiungi_mv_riga_i
coord (1 x 2 : 2 x 2): [
	 0 3
 ]
riga = 2
tmp1_i (2 : 16): [ 1 3 ]


coord (1 x 2 : 2 x 2): [
	 0 1
 ]
*****************************************

78: somma_righe_i
m (4 x 4 : 4 x 4): [
	 0 1 0 1
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]


M_in (4 : 4): [ 2 1 1 0 ]
*****************************************

80: which_v_indxlt_i
M_in (4 : 4): [ 2 1 1 0 ]
val = 5

ris (4 : 8): [ 1 2 3 4 ]
*****************************************

84: which_m_colindxin_i
coord (1 x 2 : 2 x 2): [
	 0 1
 ]
c = 1
ris (4 : 8): [ 1 2 3 4 ]
3544: esiste_v_i
el = 0
ris (4 : 8): [ 1 2 3 4 ]


indx = 0
*****************************************



ind_aus (0 : 1): [ ]
*****************************************

24: which_m_rowindxne_i
m (4 x 4 : 4 x 4): [
	 0 1 0 1
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]
riga = 3, val = 0


tmp1_i (1 : 16): [ 4 ]
*****************************************

25: which_m_colindxne_i
m (4 x 4 : 4 x 4): [
	 0 1 0 1
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]
colonna = 3, val = 0


tmp2_i (1 : 16): [ 2 ]
*****************************************

26: unione_i
tmp1_i (1 : 16): [ 4 ]
tmp2_i (1 : 16): [ 2 ]
4663: elimina_doppi_i
ind (2 : 2): [ 4 2 ]


ris (2 : 8): [ 4 2 ]
*****************************************



ris (2 : 8): [ 4 2 ]
*****************************************

24: which_m_rowindxne_i
m (4 x 4 : 4 x 4): [
	 0 1 0 1
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]
riga = 4, val = 0


tmp1_i (0 : 16): [ ]
*****************************************

25: which_m_colindxne_i
m (4 x 4 : 4 x 4): [
	 0 1 0 1
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]
colonna = 4, val = 0


tmp2_i (2 : 16): [ 1 3 ]
*****************************************

26: unione_i
tmp1_i (0 : 16): [ ]
tmp2_i (2 : 16): [ 1 3 ]
4663: elimina_doppi_i
ind (2 : 2): [ 1 3 ]


ris (2 : 8): [ 1 3 ]
*****************************************



ris (2 : 8): [ 1 3 ]
*****************************************

140: assegna1_v_diag_i
m (4 x 4 : 4 x 4): [
	 0 1 0 1
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]
Dmem (4 : 4): [ 0 0 0 0 ]


m (4 x 4 : 4 x 4): [
	 0 1 0 1
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]
*****************************************


Stringhe allocate: 5 (285 interne); stringhe deallocate: 0 (75 interne)


Stringhe allocate: 5 (285 interne); stringhe deallocate: 0 (95 interne)


*** probmod2 ***
33: somma_righe_i
m (4 x 4 : 4 x 4): [
	 0 1 0 1
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]


M_in (4 : 4): [ 2 1 1 0 ]
*****************************************

35: somma_colonne_i
m (4 x 4 : 4 x 4): [
	 0 1 0 1
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]


M_out (4 : 4): [ 0 1 1 2 ]
*****************************************

54: which_m_colindxeq_i
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 2


tmp_i1 (0 : 12): [ ]
*****************************************

55: which_m_colindxeq_i
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 12): [ ]
*****************************************

56: interseca_i
tmp_i1 (0 : 12): [ ]
tmp_i2 (0 : 12): [ ]


ind1 (0 : 0): [ ]
*****************************************

100: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


S_out (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

103: rep_i
scalare_i (1 : 1): [ 1 ]
ripetizioni = 5


tmp_i1 (5 : 12): [ 1 1 1 1 1 ]
*****************************************

104: aggiungi_mv_riga_i
checkOUT (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
tmp_i1 (5 : 12): [ 1 1 1 1 1 ]


checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
*****************************************

109: assegna_v_indxNA_i
Sin (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 2.000


S_new (5 : 5): [ 2 2 2 2 2 ]
*****************************************

21: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

23: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

25: somma_vs_i
S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1.000


tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
*****************************************

26: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

28: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

29: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
*****************************************

31: somma_vs_i
S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1.000


tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
*****************************************

32: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

34: somma_vs_d
old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
s = -1.000


new1 (5 : 5): [ 4.000 4.000 4.000 4.000 4.000 ]
*****************************************

36: somma_vs_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
s = 1.000


new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

42: somma_vs_i
S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1.000


tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

47: abs1_v_d
a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

49: diff_vv_d
new1 (5 : 5): [ 4.000 4.000 4.000 4.000 4.000 ]
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

50: abs1_v_d
b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

52: which_v_indxna_d
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
*****************************************

87: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


S1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

90: diff_vv_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

91: abs1_v_d
a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

93: diff_vv_d
new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

94: abs1_v_d
b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

96: cbind2v_d
a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


tmpm_d (5 x 2 : 5 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]
*****************************************

97: max_righe_d
tmpm_d (5 x 2 : 5 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]


m (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

99: which_v_indxna_d
T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
*****************************************

128: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


S2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

131: which_v_indxeq_d
T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
val = 0.000


ind (0 : 5): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
ind (0 : 5): [ ]
val = -1.#IO


S2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

135: somma_vv_d
S1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
S2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

136: dividi1_vs_d
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
div = 2.000


Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************


Stringhe allocate: 5 (440 interne); stringhe deallocate: 0 (185 interne)

112: which_v_indxne_d
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
val = -1.#IO


indok (5 : 5): [ 1 2 3 4 5 ]
*****************************************

114: aggiungi_ms_rigaindx_i
checkIN (4 x 5 : 4 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
*****************************************

122: seq_i
da = 1, a = 5, incremento = 1


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
*****************************************

123: setdiff_i
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
2944: copia_v_i
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
start = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
*****************************************

2946: esiste_v_i
el = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
*****************************************

2946: esiste_v_i
el = 5
indInf (1 : 5): [ 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
*****************************************



indInf (0 : 5): [ ]
*****************************************

125: copia_v_indx_d
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

129: min_v_d
tmp_d1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


min = 0.000
*****************************************

130: assegna1_vs_indx_d
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
indInf (0 : 5): [ ]
val = -1.000


Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

140: somma_vv_d
S_out (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


tmp_d1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

141: aggiungi_mv_riga_d
Sc (4 x 5 : 4 x 5): [
	 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000
 ]
riga = 1
tmp_d1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


Sc (4 x 5 : 4 x 5): [
	 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************

54: which_m_colindxeq_i
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 12): [ ]
*****************************************

55: which_m_colindxeq_i
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 12): [ ]
*****************************************

56: interseca_i
tmp_i1 (0 : 12): [ ]
tmp_i2 (0 : 12): [ ]


ind1 (0 : 0): [ ]
*****************************************

73: assegna_v_indxNA_i
Sout (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


S_new (5 : 5): [ 1 1 1 1 1 ]
*****************************************

21: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

23: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

25: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

26: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
*****************************************

28: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

29: assegna_v_indxNA_d
Freq_out (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
*****************************************

31: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

32: assegna_v_indxNA_d
Freq_out (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

34: somma_vs_d
old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
s = -1.000


new1 (5 : 5): [ 4.000 4.000 4.000 4.000 4.000 ]
*****************************************

36: somma_vs_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
s = 1.000


new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

42: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

47: abs1_v_d
a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

49: diff_vv_d
new1 (5 : 5): [ 4.000 4.000 4.000 4.000 4.000 ]
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

50: abs1_v_d
b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

52: which_v_indxna_d
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
*****************************************

87: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


S1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

90: diff_vv_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]


a (5 : 5): [ -0.333 -0.333 -0.333 -0.333 -0.333 ]
*****************************************

91: abs1_v_d
a (5 : 5): [ -0.333 -0.333 -0.333 -0.333 -0.333 ]


a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
*****************************************

93: diff_vv_d
new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]


b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

94: abs1_v_d
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]


b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

96: cbind2v_d
a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]


tmpm_d (5 x 2 : 5 x 2): [
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
 ]
*****************************************

97: max_righe_d
tmpm_d (5 x 2 : 5 x 2): [
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
 ]


m (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

99: which_v_indxna_d
T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
complemento = 0


ind (0 : 5): [ ]
*****************************************

103: assegna1_vs_indx_d
a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
ind (0 : 5): [ ]
val = 0.000


a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
*****************************************

105: assegna1_vs_indx_d
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
ind (0 : 5): [ ]
val = 0.000


b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

107: cbind2v_d
a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]


tmpm_d (5 x 2 : 5 x 2): [
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
 ]
*****************************************

108: max_righe_d
tmpm_d (5 x 2 : 5 x 2): [
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
 ]


m (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

110: f_aux_d
a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
m (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]


S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
*****************************************

112: diff_vv_d
a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]


tmp_d1 (5 : 5): [ -0.667 -0.667 -0.667 -0.667 -0.667 ]
*****************************************

113: which_v_indxlt_d
tmp_d1 (5 : 5): [ -0.667 -0.667 -0.667 -0.667 -0.667 ]
val = 0.000

ind1 (5 : 5): [ 1 2 3 4 5 ]
*****************************************

115: diff_vv_d
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]


tmp_d1 (5 : 5): [ -0.333 -0.333 -0.333 -0.333 -0.333 ]
*****************************************

116: which_v_indxgt_d
tmp_d1 (5 : 5): [ -0.333 -0.333 -0.333 -0.333 -0.333 ]
val = 0.000


ind2 (0 : 5): [ ]
*****************************************

118: interseca_i
ind1 (5 : 5): [ 1 2 3 4 5 ]
ind2 (0 : 5): [ ]
2306: esiste_v_i
el = 1
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 1
indinf (0 : 0): [ ]


indx = 0
*****************************************

2306: esiste_v_i
el = 2
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 2
indinf (0 : 0): [ ]


indx = 0
*****************************************

2306: esiste_v_i
el = 3
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 3
indinf (0 : 0): [ ]


indx = 0
*****************************************

2306: esiste_v_i
el = 4
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 4
indinf (0 : 0): [ ]


indx = 0
*****************************************

2306: esiste_v_i
el = 5
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 5
indinf (0 : 0): [ ]


indx = 0
*****************************************



indinf (0 : 0): [ ]
*****************************************

120: assegna1_vs_indx_d
S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
indinf (0 : 0): [ ]
val = -1.#IO


S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
*****************************************

122: assegna1_vs_indx_d
S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
ind (0 : 5): [ ]
val = 0.000


S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
*****************************************

131: which_v_indxeq_d
T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
val = 0.000


ind (0 : 5): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
ind (0 : 5): [ ]
val = -1.#IO


S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
*****************************************

135: somma_vv_d
S1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]


S_out (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
*****************************************

136: dividi1_vs_d
S_out (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
div = 2.000


S_out (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
*****************************************


Stringhe allocate: 5 (565 interne); stringhe deallocate: 0 (295 interne)

76: which_v_indxne_d
S_out (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
val = -1.#IO


indok (5 : 5): [ 1 2 3 4 5 ]
*****************************************

78: aggiungi_ms_rigaindx_i
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 2
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
 ]
*****************************************

85: seq_i
da = 1, a = 5, incremento = 1


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
*****************************************

86: setdiff_i
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
2944: copia_v_i
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
start = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
*****************************************

2946: esiste_v_i
el = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
*****************************************

2946: esiste_v_i
el = 5
indInf (1 : 5): [ 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
*****************************************



indInf (0 : 5): [ ]
*****************************************

88: copia_v_indx_d
S_out (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
*****************************************

92: min_v_d
tmp_d1 (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]


min = -1.000
*****************************************

93: assegna1_vs_indx_d
S_out (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
indInf (0 : 5): [ ]
val = -2.000


S_out (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
*****************************************

109: assegna_v_indxNA_i
Sin (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


S_new (5 : 5): [ 1 1 1 1 1 ]
*****************************************

21: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

23: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

25: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

26: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

28: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

29: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
*****************************************

31: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

32: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

34: somma_vs_d
old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
s = -1.000


new1 (5 : 5): [ 4.000 4.000 4.000 4.000 4.000 ]
*****************************************

36: somma_vs_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
s = 1.000


new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

42: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

47: abs1_v_d
a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

49: diff_vv_d
new1 (5 : 5): [ 4.000 4.000 4.000 4.000 4.000 ]
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

50: abs1_v_d
b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

52: which_v_indxna_d
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
*****************************************

87: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


S1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

90: diff_vv_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

91: abs1_v_d
a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

93: diff_vv_d
new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

94: abs1_v_d
b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

96: cbind2v_d
a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


tmpm_d (5 x 2 : 5 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]
*****************************************

97: max_righe_d
tmpm_d (5 x 2 : 5 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]


m (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

99: which_v_indxna_d
T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
*****************************************

128: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


S2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

131: which_v_indxeq_d
T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
val = 0.000


ind (0 : 5): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
ind (0 : 5): [ ]
val = -1.#IO


S2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

135: somma_vv_d
S1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
S2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

136: dividi1_vs_d
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
div = 2.000


Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************


Stringhe allocate: 5 (655 interne); stringhe deallocate: 0 (385 interne)

112: which_v_indxne_d
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
val = -1.#IO


indok (5 : 5): [ 1 2 3 4 5 ]
*****************************************

114: aggiungi_ms_rigaindx_i
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 2
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
 ]
*****************************************

122: seq_i
da = 1, a = 5, incremento = 1


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
*****************************************

123: setdiff_i
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
2944: copia_v_i
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
start = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
*****************************************

2946: esiste_v_i
el = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
*****************************************

2946: esiste_v_i
el = 5
indInf (1 : 5): [ 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
*****************************************



indInf (0 : 5): [ ]
*****************************************

125: copia_v_indx_d
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

129: min_v_d
tmp_d1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


min = 0.000
*****************************************

130: assegna1_vs_indx_d
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
indInf (0 : 5): [ ]
val = -1.000


Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

140: somma_vv_d
S_out (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


tmp_d1 (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
*****************************************

141: aggiungi_mv_riga_d
Sc (4 x 5 : 4 x 5): [
	 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000
 ]
riga = 2
tmp_d1 (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]


Sc (4 x 5 : 4 x 5): [
	 0.000 0.000 0.000 0.000 0.000
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************

54: which_m_colindxeq_i
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 12): [ ]
*****************************************

55: which_m_colindxeq_i
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 12): [ ]
*****************************************

56: interseca_i
tmp_i1 (0 : 12): [ ]
tmp_i2 (0 : 12): [ ]


ind1 (0 : 0): [ ]
*****************************************

73: assegna_v_indxNA_i
Sout (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


S_new (5 : 5): [ 1 1 1 1 1 ]
*****************************************

21: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

23: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

25: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

26: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
*****************************************

28: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

29: assegna_v_indxNA_d
Freq_out (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
*****************************************

31: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

32: assegna_v_indxNA_d
Freq_out (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

34: somma_vs_d
old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
s = -1.000


new1 (5 : 5): [ 4.000 4.000 4.000 4.000 4.000 ]
*****************************************

36: somma_vs_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
s = 1.000


new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

42: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

47: abs1_v_d
a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

49: diff_vv_d
new1 (5 : 5): [ 4.000 4.000 4.000 4.000 4.000 ]
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

50: abs1_v_d
b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

52: which_v_indxna_d
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
*****************************************

87: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


S1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

90: diff_vv_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]


a (5 : 5): [ -0.333 -0.333 -0.333 -0.333 -0.333 ]
*****************************************

91: abs1_v_d
a (5 : 5): [ -0.333 -0.333 -0.333 -0.333 -0.333 ]


a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
*****************************************

93: diff_vv_d
new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]


b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

94: abs1_v_d
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]


b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

96: cbind2v_d
a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]


tmpm_d (5 x 2 : 5 x 2): [
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
 ]
*****************************************

97: max_righe_d
tmpm_d (5 x 2 : 5 x 2): [
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
 ]


m (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

99: which_v_indxna_d
T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
complemento = 0


ind (0 : 5): [ ]
*****************************************

103: assegna1_vs_indx_d
a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
ind (0 : 5): [ ]
val = 0.000


a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
*****************************************

105: assegna1_vs_indx_d
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
ind (0 : 5): [ ]
val = 0.000


b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

107: cbind2v_d
a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]


tmpm_d (5 x 2 : 5 x 2): [
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
 ]
*****************************************

108: max_righe_d
tmpm_d (5 x 2 : 5 x 2): [
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
 ]


m (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

110: f_aux_d
a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
m (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]


S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
*****************************************

112: diff_vv_d
a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]


tmp_d1 (5 : 5): [ -0.667 -0.667 -0.667 -0.667 -0.667 ]
*****************************************

113: which_v_indxlt_d
tmp_d1 (5 : 5): [ -0.667 -0.667 -0.667 -0.667 -0.667 ]
val = 0.000

ind1 (5 : 5): [ 1 2 3 4 5 ]
*****************************************

115: diff_vv_d
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]


tmp_d1 (5 : 5): [ -0.333 -0.333 -0.333 -0.333 -0.333 ]
*****************************************

116: which_v_indxgt_d
tmp_d1 (5 : 5): [ -0.333 -0.333 -0.333 -0.333 -0.333 ]
val = 0.000


ind2 (0 : 5): [ ]
*****************************************

118: interseca_i
ind1 (5 : 5): [ 1 2 3 4 5 ]
ind2 (0 : 5): [ ]
2306: esiste_v_i
el = 1
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 1
indinf (0 : 0): [ ]


indx = 0
*****************************************

2306: esiste_v_i
el = 2
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 2
indinf (0 : 0): [ ]


indx = 0
*****************************************

2306: esiste_v_i
el = 3
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 3
indinf (0 : 0): [ ]


indx = 0
*****************************************

2306: esiste_v_i
el = 4
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 4
indinf (0 : 0): [ ]


indx = 0
*****************************************

2306: esiste_v_i
el = 5
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 5
indinf (0 : 0): [ ]


indx = 0
*****************************************



indinf (0 : 0): [ ]
*****************************************

120: assegna1_vs_indx_d
S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
indinf (0 : 0): [ ]
val = -1.#IO


S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
*****************************************

122: assegna1_vs_indx_d
S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
ind (0 : 5): [ ]
val = 0.000


S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
*****************************************

131: which_v_indxeq_d
T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
val = 0.000


ind (0 : 5): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
ind (0 : 5): [ ]
val = -1.#IO


S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
*****************************************

135: somma_vv_d
S1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]


S_out (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
*****************************************

136: dividi1_vs_d
S_out (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
div = 2.000


S_out (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
*****************************************


Stringhe allocate: 5 (765 interne); stringhe deallocate: 0 (495 interne)

76: which_v_indxne_d
S_out (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
val = -1.#IO


indok (5 : 5): [ 1 2 3 4 5 ]
*****************************************

78: aggiungi_ms_rigaindx_i
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 3
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
 ]
*****************************************

85: seq_i
da = 1, a = 5, incremento = 1


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
*****************************************

86: setdiff_i
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
2944: copia_v_i
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
start = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
*****************************************

2946: esiste_v_i
el = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
*****************************************

2946: esiste_v_i
el = 5
indInf (1 : 5): [ 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
*****************************************



indInf (0 : 5): [ ]
*****************************************

88: copia_v_indx_d
S_out (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
*****************************************

92: min_v_d
tmp_d1 (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]


min = -1.000
*****************************************

93: assegna1_vs_indx_d
S_out (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
indInf (0 : 5): [ ]
val = -2.000


S_out (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
*****************************************

109: assegna_v_indxNA_i
Sin (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


S_new (5 : 5): [ 1 1 1 1 1 ]
*****************************************

21: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

23: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

25: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

26: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

28: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

29: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
*****************************************

31: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

32: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

34: somma_vs_d
old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
s = -1.000


new1 (5 : 5): [ 4.000 4.000 4.000 4.000 4.000 ]
*****************************************

36: somma_vs_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
s = 1.000


new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

42: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

47: abs1_v_d
a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

49: diff_vv_d
new1 (5 : 5): [ 4.000 4.000 4.000 4.000 4.000 ]
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

50: abs1_v_d
b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

52: which_v_indxna_d
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
*****************************************

87: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


S1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

90: diff_vv_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

91: abs1_v_d
a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

93: diff_vv_d
new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

94: abs1_v_d
b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

96: cbind2v_d
a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


tmpm_d (5 x 2 : 5 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]
*****************************************

97: max_righe_d
tmpm_d (5 x 2 : 5 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]


m (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

99: which_v_indxna_d
T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
*****************************************

128: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


S2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

131: which_v_indxeq_d
T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
val = 0.000


ind (0 : 5): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
ind (0 : 5): [ ]
val = -1.#IO


S2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

135: somma_vv_d
S1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
S2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

136: dividi1_vs_d
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
div = 2.000


Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************


Stringhe allocate: 5 (855 interne); stringhe deallocate: 0 (585 interne)

112: which_v_indxne_d
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
val = -1.#IO


indok (5 : 5): [ 1 2 3 4 5 ]
*****************************************

114: aggiungi_ms_rigaindx_i
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 3
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
 ]
*****************************************

122: seq_i
da = 1, a = 5, incremento = 1


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
*****************************************

123: setdiff_i
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
2944: copia_v_i
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
start = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
*****************************************

2946: esiste_v_i
el = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
*****************************************

2946: esiste_v_i
el = 5
indInf (1 : 5): [ 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
*****************************************



indInf (0 : 5): [ ]
*****************************************

125: copia_v_indx_d
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

129: min_v_d
tmp_d1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


min = 0.000
*****************************************

130: assegna1_vs_indx_d
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
indInf (0 : 5): [ ]
val = -1.000


Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

140: somma_vv_d
S_out (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


tmp_d1 (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
*****************************************

141: aggiungi_mv_riga_d
Sc (4 x 5 : 4 x 5): [
	 0.000 0.000 0.000 0.000 0.000
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000
 ]
riga = 3
tmp_d1 (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]


Sc (4 x 5 : 4 x 5): [
	 0.000 0.000 0.000 0.000 0.000
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************

54: which_m_colindxeq_i
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


tmp_i1 (0 : 12): [ ]
*****************************************

55: which_m_colindxeq_i
memory (4 x 3 : 4 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 2


tmp_i2 (0 : 12): [ ]
*****************************************

56: interseca_i
tmp_i1 (0 : 12): [ ]
tmp_i2 (0 : 12): [ ]


ind1 (0 : 0): [ ]
*****************************************

73: assegna_v_indxNA_i
Sout (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 2.000


S_new (5 : 5): [ 2 2 2 2 2 ]
*****************************************

21: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

23: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

25: somma_vs_i
S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1.000


tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
*****************************************

26: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


T2 (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

28: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

29: assegna_v_indxNA_d
Freq_out (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
*****************************************

31: somma_vs_i
S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1.000


tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
*****************************************

32: assegna_v_indxNA_d
Freq_out (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

34: somma_vs_d
old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
s = -1.000


new1 (5 : 5): [ 4.000 4.000 4.000 4.000 4.000 ]
*****************************************

36: somma_vs_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
s = 1.000


new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (5 : 12): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

42: somma_vs_i
S_new (5 : 5): [ 2 2 2 2 2 ]
s = 1.000


tmp_i1 (5 : 5): [ 3 3 3 3 3 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 3 3 3 3 3 ]


toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

47: abs1_v_d
a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

49: diff_vv_d
new1 (5 : 5): [ 4.000 4.000 4.000 4.000 4.000 ]
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

50: abs1_v_d
b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

52: which_v_indxna_d
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
*****************************************

87: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


S1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

90: diff_vv_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
T2 (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]


a (5 : 5): [ -0.667 -0.667 -0.667 -0.667 -0.667 ]
*****************************************

91: abs1_v_d
a (5 : 5): [ -0.667 -0.667 -0.667 -0.667 -0.667 ]


a (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

93: diff_vv_d
new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
T2 (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]


b (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
*****************************************

94: abs1_v_d
b (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]


b (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
*****************************************

96: cbind2v_d
a (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
b (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]


tmpm_d (5 x 2 : 5 x 2): [
	 0.667 0.333
	 0.667 0.333
	 0.667 0.333
	 0.667 0.333
	 0.667 0.333
 ]
*****************************************

97: max_righe_d
tmpm_d (5 x 2 : 5 x 2): [
	 0.667 0.333
	 0.667 0.333
	 0.667 0.333
	 0.667 0.333
	 0.667 0.333
 ]


m (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

99: which_v_indxna_d
T2 (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
complemento = 0


ind (0 : 5): [ ]
*****************************************

103: assegna1_vs_indx_d
a (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
ind (0 : 5): [ ]
val = 0.000


a (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

105: assegna1_vs_indx_d
b (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
ind (0 : 5): [ ]
val = 0.000


b (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
*****************************************

107: cbind2v_d
a (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
b (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]


tmpm_d (5 x 2 : 5 x 2): [
	 0.667 0.333
	 0.667 0.333
	 0.667 0.333
	 0.667 0.333
	 0.667 0.333
 ]
*****************************************

108: max_righe_d
tmpm_d (5 x 2 : 5 x 2): [
	 0.667 0.333
	 0.667 0.333
	 0.667 0.333
	 0.667 0.333
	 0.667 0.333
 ]


m (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

110: f_aux_d
a (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
b (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
m (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
T2 (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]


S2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

112: diff_vv_d
a (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]


tmp_d1 (5 : 5): [ -0.333 -0.333 -0.333 -0.333 -0.333 ]
*****************************************

113: which_v_indxlt_d
tmp_d1 (5 : 5): [ -0.333 -0.333 -0.333 -0.333 -0.333 ]
val = 0.000

ind1 (5 : 5): [ 1 2 3 4 5 ]
*****************************************

115: diff_vv_d
b (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]


tmp_d1 (5 : 5): [ -0.667 -0.667 -0.667 -0.667 -0.667 ]
*****************************************

116: which_v_indxgt_d
tmp_d1 (5 : 5): [ -0.667 -0.667 -0.667 -0.667 -0.667 ]
val = 0.000


ind2 (0 : 5): [ ]
*****************************************

118: interseca_i
ind1 (5 : 5): [ 1 2 3 4 5 ]
ind2 (0 : 5): [ ]
2306: esiste_v_i
el = 1
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 1
indinf (0 : 0): [ ]


indx = 0
*****************************************

2306: esiste_v_i
el = 2
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 2
indinf (0 : 0): [ ]


indx = 0
*****************************************

2306: esiste_v_i
el = 3
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 3
indinf (0 : 0): [ ]


indx = 0
*****************************************

2306: esiste_v_i
el = 4
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 4
indinf (0 : 0): [ ]


indx = 0
*****************************************

2306: esiste_v_i
el = 5
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 5
indinf (0 : 0): [ ]


indx = 0
*****************************************



indinf (0 : 0): [ ]
*****************************************

120: assegna1_vs_indx_d
S2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
indinf (0 : 0): [ ]
val = -1.#IO


S2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

122: assegna1_vs_indx_d
S2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
ind (0 : 5): [ ]
val = 0.000


S2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

131: which_v_indxeq_d
T2 (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
val = 0.000


ind (0 : 5): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
ind (0 : 5): [ ]
val = -1.#IO


S2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

135: somma_vv_d
S1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
S2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]


S_out (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

136: dividi1_vs_d
S_out (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
div = 2.000


S_out (5 : 5): [ 0.500 0.500 0.500 0.500 0.500 ]
*****************************************


Stringhe allocate: 5 (965 interne); stringhe deallocate: 0 (695 interne)

76: which_v_indxne_d
S_out (5 : 5): [ 0.500 0.500 0.500 0.500 0.500 ]
val = -1.#IO


indok (5 : 5): [ 1 2 3 4 5 ]
*****************************************

78: aggiungi_ms_rigaindx_i
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 4
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
*****************************************

85: seq_i
da = 1, a = 5, incremento = 1


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
*****************************************

86: setdiff_i
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
2944: copia_v_i
tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
start = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
*****************************************

2946: esiste_v_i
el = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
*****************************************

2946: esiste_v_i
el = 5
indInf (1 : 5): [ 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
*****************************************



indInf (0 : 5): [ ]
*****************************************

88: copia_v_indx_d
S_out (5 : 5): [ 0.500 0.500 0.500 0.500 0.500 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ 0.500 0.500 0.500 0.500 0.500 ]
*****************************************

92: min_v_d
tmp_d1 (5 : 5): [ 0.500 0.500 0.500 0.500 0.500 ]


min = 0.500
*****************************************

93: assegna1_vs_indx_d
S_out (5 : 5): [ 0.500 0.500 0.500 0.500 0.500 ]
indInf (0 : 5): [ ]
val = -1.000


S_out (5 : 5): [ 0.500 0.500 0.500 0.500 0.500 ]
*****************************************

136: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

137: aggiungi_ms_riga_i
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 4, val = 1


checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
*****************************************

140: somma_vv_d
S_out (5 : 5): [ 0.500 0.500 0.500 0.500 0.500 ]
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


tmp_d1 (5 : 5): [ 0.500 0.500 0.500 0.500 0.500 ]
*****************************************

141: aggiungi_mv_riga_d
Sc (4 x 5 : 4 x 5): [
	 0.000 0.000 0.000 0.000 0.000
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 0.000 0.000 0.000 0.000 0.000
 ]
riga = 4
tmp_d1 (5 : 5): [ 0.500 0.500 0.500 0.500 0.500 ]


Sc (4 x 5 : 4 x 5): [
	 0.000 0.000 0.000 0.000 0.000
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 0.500 0.500 0.500 0.500 0.500
 ]
*****************************************

149: somma_m_d
Sc (4 x 5 : 4 x 5): [
	 0.000 0.000 0.000 0.000 0.000
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 0.500 0.500 0.500 0.500 0.500
 ]


ris: -7.500
*****************************************

154: somma_colonne_i
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]


aus (5 : 5): [ 4 4 4 4 4 ]
*****************************************

156: which_v_indxne_i
aus (5 : 5): [ 4 4 4 4 4 ]
val = 0


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
*****************************************

167: somma_righe_i
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]


rs (4 : 4): [ 5 5 5 5 ]
*****************************************

169: ordine_i
rs (4 : 4): [ 5 5 5 5 ]
decr = 0


ord_ind (4 : 4): [ 1 2 3 4 ]
*****************************************

182: which_m_rowindxne_i
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
riga = 1, val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
*****************************************

184: unione1_i
I (0 : 0): [ ]
I_add (5 : 20): [ 1 2 3 4 5 ]
2858: elimina_doppi_i
I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
*****************************************



ris (5 : 5): [ 1 2 3 4 5 ]
*****************************************

182: which_m_rowindxne_i
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
riga = 2, val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
*****************************************

184: unione1_i
ris (5 : 5): [ 1 2 3 4 5 ]
I_add (5 : 20): [ 1 2 3 4 5 ]
2858: elimina_doppi_i
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
*****************************************



ris (5 : 10): [ 1 2 3 4 5 ]
*****************************************

182: which_m_rowindxne_i
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
riga = 3, val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
*****************************************

184: unione1_i
ris (5 : 10): [ 1 2 3 4 5 ]
I_add (5 : 20): [ 1 2 3 4 5 ]
2858: elimina_doppi_i
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
*****************************************



ris (5 : 10): [ 1 2 3 4 5 ]
*****************************************

182: which_m_rowindxne_i
checkIN (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
riga = 4, val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
*****************************************

184: unione1_i
ris (5 : 10): [ 1 2 3 4 5 ]
I_add (5 : 20): [ 1 2 3 4 5 ]
2858: elimina_doppi_i
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
*****************************************



ris (5 : 10): [ 1 2 3 4 5 ]
*****************************************

197: assegna1_mindxlt_i
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 0


checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
*****************************************

199: assegna1_m_indxgt_i
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 1


checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
*****************************************

201: somma_colonne_i
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]


aus (5 : 5): [ 4 4 4 4 4 ]
*****************************************

203: which_v_indxne_i
aus (5 : 5): [ 4 4 4 4 4 ]
val = 0


tmp_i1 (5 : 12): [ 1 2 3 4 5 ]
*****************************************

213: somma_righe_i
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]


rs (4 : 4): [ 5 5 5 5 ]
*****************************************

215: ordine_i
rs (4 : 4): [ 5 5 5 5 ]
decr = 0


ord_ind (4 : 4): [ 1 2 3 4 ]
*****************************************

227: which_m_rowindxne_i
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
riga = 1, val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
*****************************************

229: unione1_i
ris (0 : 0): [ ]
I_add (5 : 20): [ 1 2 3 4 5 ]
2858: elimina_doppi_i
I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
*****************************************



ris (5 : 5): [ 1 2 3 4 5 ]
*****************************************

227: which_m_rowindxne_i
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
riga = 2, val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
*****************************************

229: unione1_i
ris (5 : 5): [ 1 2 3 4 5 ]
I_add (5 : 20): [ 1 2 3 4 5 ]
2858: elimina_doppi_i
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
*****************************************



ris (5 : 10): [ 1 2 3 4 5 ]
*****************************************

227: which_m_rowindxne_i
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
riga = 3, val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
*****************************************

229: unione1_i
ris (5 : 10): [ 1 2 3 4 5 ]
I_add (5 : 20): [ 1 2 3 4 5 ]
2858: elimina_doppi_i
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
*****************************************



ris (5 : 10): [ 1 2 3 4 5 ]
*****************************************

227: which_m_rowindxne_i
checkOUT (4 x 5 : 4 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
	 1 1 1 1 1
 ]
riga = 4, val = 0


I_add (5 : 20): [ 1 2 3 4 5 ]
*****************************************

229: unione1_i
ris (5 : 10): [ 1 2 3 4 5 ]
I_add (5 : 20): [ 1 2 3 4 5 ]
2858: elimina_doppi_i
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
*****************************************



ris (5 : 10): [ 1 2 3 4 5 ]
*****************************************


Stringhe allocate: 5 (1080 interne); stringhe deallocate: 0 (885 interne)


Stringhe allocate: 5 (1080 interne); stringhe deallocate: 0 (900 interne)


*** module22 ***
18: seq_i
da = 2, a = 5, incremento = 1


tmp1_i (4 : 4): [ 2 3 4 5 ]
*****************************************


*** sampleB ***

*** sample ***
tmp1_i (4 : 4): [ 2 3 4 5 ]
k = 1, replace = 0


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 5 (1090 interne); stringhe deallocate: 0 (900 interne)


Stringhe allocate: 5 (1090 interne); stringhe deallocate: 0 (900 interne)


*** mod2 ***

Stringhe allocate: 5 (1095 interne); stringhe deallocate: 0 (900 interne)


*** probmod2 ***
33: somma_righe_i
m (2 x 2 : 2 x 2): [
	 0 0
	 1 0
 ]


M_in (2 : 2): [ 0 1 ]
*****************************************

35: somma_colonne_i
m (2 x 2 : 2 x 2): [
	 0 0
	 1 0
 ]


M_out (2 : 2): [ 1 0 ]
*****************************************

54: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


tmp_i1 (0 : 6): [ ]
*****************************************

55: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 6): [ ]
*****************************************

56: interseca_i
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
*****************************************

73: assegna_v_indxNA_i
Sout (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1.000


S_new (5 : 5): [ 1 1 1 1 1 ]
*****************************************

21: somma_vs_i
tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

23: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

25: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

26: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
*****************************************

28: somma_vs_i
tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

29: assegna_v_indxNA_d
Freq_out (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
*****************************************

31: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

32: assegna_v_indxNA_d
Freq_out (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

34: somma_vs_d
old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
s = -1.000


new1 (5 : 5): [ 4.000 4.000 4.000 4.000 4.000 ]
*****************************************

36: somma_vs_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
s = 1.000


new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

42: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

47: abs1_v_d
a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

49: diff_vv_d
new1 (5 : 5): [ 4.000 4.000 4.000 4.000 4.000 ]
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

50: abs1_v_d
b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

52: which_v_indxna_d
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
*****************************************

87: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


S1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

90: diff_vv_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]


a (5 : 5): [ -0.333 -0.333 -0.333 -0.333 -0.333 ]
*****************************************

91: abs1_v_d
a (5 : 5): [ -0.333 -0.333 -0.333 -0.333 -0.333 ]


a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
*****************************************

93: diff_vv_d
new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]


b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

94: abs1_v_d
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]


b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

96: cbind2v_d
a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]


tmpm_d (5 x 2 : 5 x 2): [
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
 ]
*****************************************

97: max_righe_d
tmpm_d (5 x 2 : 5 x 2): [
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
 ]


m (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

99: which_v_indxna_d
T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
complemento = 0


ind (0 : 5): [ ]
*****************************************

103: assegna1_vs_indx_d
a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
ind (0 : 5): [ ]
val = 0.000


a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
*****************************************

105: assegna1_vs_indx_d
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
ind (0 : 5): [ ]
val = 0.000


b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

107: cbind2v_d
a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]


tmpm_d (5 x 2 : 5 x 2): [
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
 ]
*****************************************

108: max_righe_d
tmpm_d (5 x 2 : 5 x 2): [
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
 ]


m (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

110: f_aux_d
a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
m (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]


S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
*****************************************

112: diff_vv_d
a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]


tmp_d1 (5 : 5): [ -0.667 -0.667 -0.667 -0.667 -0.667 ]
*****************************************

113: which_v_indxlt_d
tmp_d1 (5 : 5): [ -0.667 -0.667 -0.667 -0.667 -0.667 ]
val = 0.000

ind1 (5 : 5): [ 1 2 3 4 5 ]
*****************************************

115: diff_vv_d
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]


tmp_d1 (5 : 5): [ -0.333 -0.333 -0.333 -0.333 -0.333 ]
*****************************************

116: which_v_indxgt_d
tmp_d1 (5 : 5): [ -0.333 -0.333 -0.333 -0.333 -0.333 ]
val = 0.000


ind2 (0 : 5): [ ]
*****************************************

118: interseca_i
ind1 (5 : 5): [ 1 2 3 4 5 ]
ind2 (0 : 5): [ ]
2306: esiste_v_i
el = 1
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 1
indinf (0 : 0): [ ]


indx = 0
*****************************************

2306: esiste_v_i
el = 2
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 2
indinf (0 : 0): [ ]


indx = 0
*****************************************

2306: esiste_v_i
el = 3
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 3
indinf (0 : 0): [ ]


indx = 0
*****************************************

2306: esiste_v_i
el = 4
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 4
indinf (0 : 0): [ ]


indx = 0
*****************************************

2306: esiste_v_i
el = 5
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 5
indinf (0 : 0): [ ]


indx = 0
*****************************************



indinf (0 : 0): [ ]
*****************************************

120: assegna1_vs_indx_d
S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
indinf (0 : 0): [ ]
val = -1.#IO


S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
*****************************************

122: assegna1_vs_indx_d
S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
ind (0 : 5): [ ]
val = 0.000


S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
*****************************************

131: which_v_indxeq_d
T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
val = 0.000


ind (0 : 5): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
ind (0 : 5): [ ]
val = -1.#IO


S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
*****************************************

135: somma_vv_d
S1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]


Sc (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
*****************************************

136: dividi1_vs_d
Sc (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
div = 2.000


Sc (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
*****************************************


Stringhe allocate: 5 (1265 interne); stringhe deallocate: 0 (1010 interne)

76: which_v_indxne_d
Sc (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
val = -1.#IO


indok (5 : 5): [ 1 2 3 4 5 ]
*****************************************

78: aggiungi_ms_rigaindx_i
checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
*****************************************

85: seq_i
da = 1, a = 5, incremento = 1


tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
*****************************************

86: setdiff_i
tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
2944: copia_v_i
tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
start = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
*****************************************

2946: esiste_v_i
el = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
*****************************************

2946: esiste_v_i
el = 5
indInf (1 : 5): [ 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
*****************************************



indInf (0 : 5): [ ]
*****************************************

88: copia_v_indx_d
Sc (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
*****************************************

92: min_v_d
tmp_d1 (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]


min = -1.000
*****************************************

93: assegna1_vs_indx_d
Sc (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
indInf (0 : 5): [ ]
val = -2.000


Sc (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
*****************************************

136: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


S_in (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

137: aggiungi_ms_riga_i
checkIN (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1, val = 1


checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
*****************************************

140: somma_vv_d
Sc (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
S_in (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


tmp_d1 (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
*****************************************

141: aggiungi_mv_riga_d
Sc (2 x 5 : 2 x 5): [
	 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000
 ]
riga = 1
tmp_d1 (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]


Sc (2 x 5 : 2 x 5): [
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************

54: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 6): [ ]
*****************************************

55: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 6): [ ]
*****************************************

56: interseca_i
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
*****************************************

100: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

103: rep_i
scalare_i (1 : 1): [ 1 ]
ripetizioni = 5


tmp_i1 (5 : 6): [ 1 1 1 1 1 ]
*****************************************

104: aggiungi_mv_riga_i
checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2
tmp_i1 (5 : 6): [ 1 1 1 1 1 ]


checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
*****************************************

109: assegna_v_indxNA_i
Sin (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1.000


S_new (5 : 5): [ 1 1 1 1 1 ]
*****************************************

21: somma_vs_i
tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

23: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

25: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

26: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

28: somma_vs_i
tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

29: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
*****************************************

31: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

32: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

34: somma_vs_d
old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
s = -1.000


new1 (5 : 5): [ 4.000 4.000 4.000 4.000 4.000 ]
*****************************************

36: somma_vs_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
s = 1.000


new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

42: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

47: abs1_v_d
a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

49: diff_vv_d
new1 (5 : 5): [ 4.000 4.000 4.000 4.000 4.000 ]
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

50: abs1_v_d
b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

52: which_v_indxna_d
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
*****************************************

87: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


S1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

90: diff_vv_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

91: abs1_v_d
a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

93: diff_vv_d
new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

94: abs1_v_d
b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

96: cbind2v_d
a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


tmpm_d (5 x 2 : 5 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]
*****************************************

97: max_righe_d
tmpm_d (5 x 2 : 5 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]


m (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

99: which_v_indxna_d
T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
*****************************************

128: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


S2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

131: which_v_indxeq_d
T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
val = 0.000


ind (0 : 5): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
ind (0 : 5): [ ]
val = -1.#IO


S2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

135: somma_vv_d
S1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
S2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


S_in (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

136: dividi1_vs_d
S_in (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
div = 2.000


S_in (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************


Stringhe allocate: 5 (1375 interne); stringhe deallocate: 0 (1100 interne)

112: which_v_indxne_d
S_in (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
val = -1.#IO


indok (5 : 5): [ 1 2 3 4 5 ]
*****************************************

114: aggiungi_ms_rigaindx_i
checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
*****************************************

122: seq_i
da = 1, a = 5, incremento = 1


tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
*****************************************

123: setdiff_i
tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
2944: copia_v_i
tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
start = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
*****************************************

2946: esiste_v_i
el = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
*****************************************

2946: esiste_v_i
el = 5
indInf (1 : 5): [ 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
*****************************************



indInf (0 : 5): [ ]
*****************************************

125: copia_v_indx_d
S_in (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

129: min_v_d
tmp_d1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


min = 0.000
*****************************************

130: assegna1_vs_indx_d
S_in (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
indInf (0 : 5): [ ]
val = -1.000


S_in (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

140: somma_vv_d
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
S_in (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


tmp_d1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

141: aggiungi_mv_riga_d
Sc (2 x 5 : 2 x 5): [
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 0.000 0.000 0.000 0.000 0.000
 ]
riga = 2
tmp_d1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


Sc (2 x 5 : 2 x 5): [
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************

149: somma_m_d
Sc (2 x 5 : 2 x 5): [
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 0.000 0.000 0.000 0.000 0.000
 ]


ris: -5.000
*****************************************

154: somma_colonne_i
checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


aus (5 : 5): [ 2 2 2 2 2 ]
*****************************************

156: which_v_indxne_i
aus (5 : 5): [ 2 2 2 2 2 ]
val = 0


tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
*****************************************

167: somma_righe_i
checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


rs (2 : 2): [ 5 5 ]
*****************************************

169: ordine_i
rs (2 : 2): [ 5 5 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
*****************************************

182: which_m_rowindxne_i
checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
riga = 1, val = 0


I_add (5 : 10): [ 1 2 3 4 5 ]
*****************************************

184: unione1_i
I (0 : 0): [ ]
I_add (5 : 10): [ 1 2 3 4 5 ]
2858: elimina_doppi_i
I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
*****************************************



ris (5 : 5): [ 1 2 3 4 5 ]
*****************************************

182: which_m_rowindxne_i
checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
riga = 2, val = 0


I_add (5 : 10): [ 1 2 3 4 5 ]
*****************************************

184: unione1_i
ris (5 : 5): [ 1 2 3 4 5 ]
I_add (5 : 10): [ 1 2 3 4 5 ]
2858: elimina_doppi_i
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
*****************************************



ris (5 : 10): [ 1 2 3 4 5 ]
*****************************************

197: assegna1_mindxlt_i
checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 0


checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
*****************************************

199: assegna1_m_indxgt_i
checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 1


checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
*****************************************

201: somma_colonne_i
checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


aus (5 : 5): [ 2 2 2 2 2 ]
*****************************************

203: which_v_indxne_i
aus (5 : 5): [ 2 2 2 2 2 ]
val = 0


tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
*****************************************

213: somma_righe_i
checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


rs (2 : 2): [ 5 5 ]
*****************************************

215: ordine_i
rs (2 : 2): [ 5 5 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
*****************************************

227: which_m_rowindxne_i
checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
riga = 1, val = 0


I_add (5 : 10): [ 1 2 3 4 5 ]
*****************************************

229: unione1_i
ris (0 : 0): [ ]
I_add (5 : 10): [ 1 2 3 4 5 ]
2858: elimina_doppi_i
I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
*****************************************



ris (5 : 5): [ 1 2 3 4 5 ]
*****************************************

227: which_m_rowindxne_i
checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
riga = 2, val = 0


I_add (5 : 10): [ 1 2 3 4 5 ]
*****************************************

229: unione1_i
ris (5 : 5): [ 1 2 3 4 5 ]
I_add (5 : 10): [ 1 2 3 4 5 ]
2858: elimina_doppi_i
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
*****************************************



ris (5 : 10): [ 1 2 3 4 5 ]
*****************************************


Stringhe allocate: 5 (1450 interne); stringhe deallocate: 0 (1250 interne)


Stringhe allocate: 5 (1450 interne); stringhe deallocate: 0 (1260 interne)


*** module32 ***
25: seq_i
da = 2, a = 5, incremento = 1


tmp1_i (4 : 4): [ 2 3 4 5 ]
*****************************************


*** sampleB ***

*** sample ***
tmp1_i (4 : 4): [ 2 3 4 5 ]
k = 1, replace = 0


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 5 (1460 interne); stringhe deallocate: 0 (1260 interne)


Stringhe allocate: 5 (1460 interne); stringhe deallocate: 0 (1260 interne)

28: seq_i
da = 1, a = 1, incremento = 1


tmp1_i (1 : 4): [ 1 ]
*****************************************


*** sampleB ***
27: rep_i
tmp1_i (1 : 4): [ 1 ]
ripetizioni = 1


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (1465 interne); stringhe deallocate: 0 (1260 interne)


*** mod3 ***
34: segmento_v_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
start = 2
end = 2


tmp1_d (1 : 1): [ 0.333 ]
*****************************************

35: somma_v_d
tmp1_d (1 : 1): [ 0.333 ]
canc_NA = 1



ris: 0.333
*****************************************

38: segmento_v_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
start = 2
end = 2


p (1 : 1): [ 0.333 ]
*****************************************

39: dividi1_vs_d
p (1 : 1): [ 0.333 ]
div = 0.333


p (1 : 1): [ 1.000 ]
*****************************************

56: seq_i
da = 1, a = 1, incremento = 1


tmp1_i (1 : 1): [ 1 ]
*****************************************


*** sampleB_p ***
12: rep_i
tmp1_i (1 : 1): [ 1 ]
ripetizioni = 1


ris (1 : 1): [ 1 ]
*****************************************

59: somma_v_i
ris (1 : 1): [ 1 ]
canc_NA = 0



ris: 1
*****************************************

126: seq_i
da = 1, a = 1, incremento = 1


tmp1_i (1 : 1): [ 1 ]
*****************************************

128: assegna1_m_vv_i
m (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
tmp1_i (1 : 1): [ 1 ]
scalare_i (1 : 1): [ 2 ]
val = 1


m (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
*****************************************

130: seq_i
da = 1, a = 1, incremento = 1


indS (1 : 1): [ 1 ]
*****************************************

132: seq_i
da = 1, a = 1, incremento = 1


tmp2_i (1 : 1): [ 1 ]
*****************************************

133: setdiff_i
tmp2_i (1 : 1): [ 1 ]
indS (1 : 1): [ 1 ]
2944: copia_v_i
tmp2_i (1 : 1): [ 1 ]
start = 1
end = 1


indBS (1 : 1): [ 1 ]
*****************************************

2946: esiste_v_i
el = 1
indBS (1 : 1): [ 1 ]


indx = 1
*****************************************

2948: elimina_indx_i
indBS (1 : 1): [ 1 ]
indx = 1


indBS (0 : 1): [ ]
*****************************************



indBS (0 : 1): [ ]
*****************************************



*****************************************
*****************************************


Stringhe allocate: 5 (1515 interne); stringhe deallocate: 0 (1305 interne)


*** probmod2 ***
33: somma_righe_i
m (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


M_in (2 : 2): [ 1 0 ]
*****************************************

35: somma_colonne_i
m (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


M_out (2 : 2): [ 0 1 ]
*****************************************

54: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 6): [ ]
*****************************************

55: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 6): [ ]
*****************************************

56: interseca_i
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
*****************************************

100: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


S_out (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

103: rep_i
scalare_i (1 : 1): [ 1 ]
ripetizioni = 5


tmp_i1 (5 : 6): [ 1 1 1 1 1 ]
*****************************************

104: aggiungi_mv_riga_i
checkOUT (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
tmp_i1 (5 : 6): [ 1 1 1 1 1 ]


checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
*****************************************

109: assegna_v_indxNA_i
Sin (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1.000


S_new (5 : 5): [ 1 1 1 1 1 ]
*****************************************

21: somma_vs_i
tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

23: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

25: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

26: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

28: somma_vs_i
tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

29: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
*****************************************

31: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

32: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

34: somma_vs_d
old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
s = -1.000


new1 (5 : 5): [ 4.000 4.000 4.000 4.000 4.000 ]
*****************************************

36: somma_vs_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
s = 1.000


new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

42: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

47: abs1_v_d
a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

49: diff_vv_d
new1 (5 : 5): [ 4.000 4.000 4.000 4.000 4.000 ]
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

50: abs1_v_d
b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

52: which_v_indxna_d
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
*****************************************

87: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


S1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

90: diff_vv_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

91: abs1_v_d
a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

93: diff_vv_d
new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

94: abs1_v_d
b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

96: cbind2v_d
a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


tmpm_d (5 x 2 : 5 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]
*****************************************

97: max_righe_d
tmpm_d (5 x 2 : 5 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]


m (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

99: which_v_indxna_d
T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
*****************************************

128: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


S2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

131: which_v_indxeq_d
T2 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
val = 0.000


ind (0 : 5): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
ind (0 : 5): [ ]
val = -1.#IO


S2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

135: somma_vv_d
S1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
S2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

136: dividi1_vs_d
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
div = 2.000


Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************


Stringhe allocate: 5 (1670 interne); stringhe deallocate: 0 (1395 interne)

112: which_v_indxne_d
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
val = -1.#IO


indok (5 : 5): [ 1 2 3 4 5 ]
*****************************************

114: aggiungi_ms_rigaindx_i
checkIN (2 x 5 : 2 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
 ]
riga = 1
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
*****************************************

122: seq_i
da = 1, a = 5, incremento = 1


tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
*****************************************

123: setdiff_i
tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
2944: copia_v_i
tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
start = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
*****************************************

2946: esiste_v_i
el = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
*****************************************

2946: esiste_v_i
el = 5
indInf (1 : 5): [ 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
*****************************************



indInf (0 : 5): [ ]
*****************************************

125: copia_v_indx_d
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

129: min_v_d
tmp_d1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


min = 0.000
*****************************************

130: assegna1_vs_indx_d
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
indInf (0 : 5): [ ]
val = -1.000


Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

140: somma_vv_d
S_out (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


tmp_d1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

141: aggiungi_mv_riga_d
Sc (2 x 5 : 2 x 5): [
	 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000
 ]
riga = 1
tmp_d1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


Sc (2 x 5 : 2 x 5): [
	 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************

54: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


tmp_i1 (0 : 6): [ ]
*****************************************

55: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 6): [ ]
*****************************************

56: interseca_i
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
*****************************************

73: assegna_v_indxNA_i
Sout (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1.000


S_new (5 : 5): [ 1 1 1 1 1 ]
*****************************************

21: somma_vs_i
tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

23: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

25: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

26: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
*****************************************

28: somma_vs_i
tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

29: assegna_v_indxNA_d
Freq_out (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
*****************************************

31: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

32: assegna_v_indxNA_d
Freq_out (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

34: somma_vs_d
old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
s = -1.000


new1 (5 : 5): [ 4.000 4.000 4.000 4.000 4.000 ]
*****************************************

36: somma_vs_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
s = 1.000


new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (5 : 6): [ 0 0 0 0 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 1 1 1 1 1 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 1 1 1 1 1 ]


toll1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

42: somma_vs_i
S_new (5 : 5): [ 1 1 1 1 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 2 2 2 2 2 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 2 2 2 2 2 ]


toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (5 : 5): [ 5.000 5.000 5.000 5.000 5.000 ]
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

47: abs1_v_d
a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


a (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

49: diff_vv_d
new1 (5 : 5): [ 4.000 4.000 4.000 4.000 4.000 ]
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

50: abs1_v_d
b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]


b (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
*****************************************

52: which_v_indxna_d
T1 (5 : 5): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO ]
complemento = 0


ind (5 : 5): [ 1 2 3 4 5 ]
*****************************************

87: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


S1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

90: diff_vv_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]


a (5 : 5): [ -0.333 -0.333 -0.333 -0.333 -0.333 ]
*****************************************

91: abs1_v_d
a (5 : 5): [ -0.333 -0.333 -0.333 -0.333 -0.333 ]


a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
*****************************************

93: diff_vv_d
new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]


b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

94: abs1_v_d
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]


b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

96: cbind2v_d
a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]


tmpm_d (5 x 2 : 5 x 2): [
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
 ]
*****************************************

97: max_righe_d
tmpm_d (5 x 2 : 5 x 2): [
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
 ]


m (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

99: which_v_indxna_d
T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
complemento = 0


ind (0 : 5): [ ]
*****************************************

103: assegna1_vs_indx_d
a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
ind (0 : 5): [ ]
val = 0.000


a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
*****************************************

105: assegna1_vs_indx_d
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
ind (0 : 5): [ ]
val = 0.000


b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

107: cbind2v_d
a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]


tmpm_d (5 x 2 : 5 x 2): [
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
 ]
*****************************************

108: max_righe_d
tmpm_d (5 x 2 : 5 x 2): [
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
	 0.333 0.667
 ]


m (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
*****************************************

110: f_aux_d
a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
m (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]


S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
*****************************************

112: diff_vv_d
a (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]


tmp_d1 (5 : 5): [ -0.667 -0.667 -0.667 -0.667 -0.667 ]
*****************************************

113: which_v_indxlt_d
tmp_d1 (5 : 5): [ -0.667 -0.667 -0.667 -0.667 -0.667 ]
val = 0.000

ind1 (5 : 5): [ 1 2 3 4 5 ]
*****************************************

115: diff_vv_d
b (5 : 5): [ 0.667 0.667 0.667 0.667 0.667 ]
toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]


tmp_d1 (5 : 5): [ -0.333 -0.333 -0.333 -0.333 -0.333 ]
*****************************************

116: which_v_indxgt_d
tmp_d1 (5 : 5): [ -0.333 -0.333 -0.333 -0.333 -0.333 ]
val = 0.000


ind2 (0 : 5): [ ]
*****************************************

118: interseca_i
ind1 (5 : 5): [ 1 2 3 4 5 ]
ind2 (0 : 5): [ ]
2306: esiste_v_i
el = 1
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 1
indinf (0 : 0): [ ]


indx = 0
*****************************************

2306: esiste_v_i
el = 2
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 2
indinf (0 : 0): [ ]


indx = 0
*****************************************

2306: esiste_v_i
el = 3
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 3
indinf (0 : 0): [ ]


indx = 0
*****************************************

2306: esiste_v_i
el = 4
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 4
indinf (0 : 0): [ ]


indx = 0
*****************************************

2306: esiste_v_i
el = 5
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 5
indinf (0 : 0): [ ]


indx = 0
*****************************************



indinf (0 : 0): [ ]
*****************************************

120: assegna1_vs_indx_d
S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
indinf (0 : 0): [ ]
val = -1.#IO


S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
*****************************************

122: assegna1_vs_indx_d
S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
ind (0 : 5): [ ]
val = 0.000


S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
*****************************************

131: which_v_indxeq_d
T2 (5 : 5): [ 0.333 0.333 0.333 0.333 0.333 ]
val = 0.000


ind (0 : 5): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
ind (0 : 5): [ ]
val = -1.#IO


S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
*****************************************

135: somma_vv_d
S1 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
S2 (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]


S_out (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
*****************************************

136: dividi1_vs_d
S_out (5 : 5): [ -2.000 -2.000 -2.000 -2.000 -2.000 ]
div = 2.000


S_out (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
*****************************************


Stringhe allocate: 5 (1795 interne); stringhe deallocate: 0 (1505 interne)

76: which_v_indxne_d
S_out (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
val = -1.#IO


indok (5 : 5): [ 1 2 3 4 5 ]
*****************************************

78: aggiungi_ms_rigaindx_i
checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2
indok (5 : 5): [ 1 2 3 4 5 ]
val = 1


checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
*****************************************

85: seq_i
da = 1, a = 5, incremento = 1


tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
*****************************************

86: setdiff_i
tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
indok (5 : 5): [ 1 2 3 4 5 ]
2944: copia_v_i
tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
start = 1
end = 5


indInf (5 : 5): [ 1 2 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 1
indInf (5 : 5): [ 1 2 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (5 : 5): [ 1 2 3 4 5 ]
indx = 1


indInf (4 : 5): [ 2 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 2
indInf (4 : 5): [ 2 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (4 : 5): [ 2 3 4 5 ]
indx = 1


indInf (3 : 5): [ 3 4 5 ]
*****************************************

2946: esiste_v_i
el = 3
indInf (3 : 5): [ 3 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (3 : 5): [ 3 4 5 ]
indx = 1


indInf (2 : 5): [ 4 5 ]
*****************************************

2946: esiste_v_i
el = 4
indInf (2 : 5): [ 4 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (2 : 5): [ 4 5 ]
indx = 1


indInf (1 : 5): [ 5 ]
*****************************************

2946: esiste_v_i
el = 5
indInf (1 : 5): [ 5 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (1 : 5): [ 5 ]
indx = 1


indInf (0 : 5): [ ]
*****************************************



indInf (0 : 5): [ ]
*****************************************

88: copia_v_indx_d
S_out (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
indok (5 : 5): [ 1 2 3 4 5 ]


tmp_d1 (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
*****************************************

92: min_v_d
tmp_d1 (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]


min = -1.000
*****************************************

93: assegna1_vs_indx_d
S_out (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
indInf (0 : 5): [ ]
val = -2.000


S_out (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
*****************************************

136: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

137: aggiungi_ms_riga_i
checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 0 0 0 0 0
 ]
riga = 2, val = 1


checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
*****************************************

140: somma_vv_d
S_out (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
Sc (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


tmp_d1 (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
*****************************************

141: aggiungi_mv_riga_d
Sc (2 x 5 : 2 x 5): [
	 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000
 ]
riga = 2
tmp_d1 (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]


Sc (2 x 5 : 2 x 5): [
	 0.000 0.000 0.000 0.000 0.000
	 -1.000 -1.000 -1.000 -1.000 -1.000
 ]
*****************************************

149: somma_m_d
Sc (2 x 5 : 2 x 5): [
	 0.000 0.000 0.000 0.000 0.000
	 -1.000 -1.000 -1.000 -1.000 -1.000
 ]


ris: -5.000
*****************************************

154: somma_colonne_i
checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


aus (5 : 5): [ 2 2 2 2 2 ]
*****************************************

156: which_v_indxne_i
aus (5 : 5): [ 2 2 2 2 2 ]
val = 0


tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
*****************************************

167: somma_righe_i
checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


rs (2 : 2): [ 5 5 ]
*****************************************

169: ordine_i
rs (2 : 2): [ 5 5 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
*****************************************

182: which_m_rowindxne_i
checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
riga = 1, val = 0


I_add (5 : 10): [ 1 2 3 4 5 ]
*****************************************

184: unione1_i
I (0 : 0): [ ]
I_add (5 : 10): [ 1 2 3 4 5 ]
2858: elimina_doppi_i
I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
*****************************************



ris (5 : 5): [ 1 2 3 4 5 ]
*****************************************

182: which_m_rowindxne_i
checkIN (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
riga = 2, val = 0


I_add (5 : 10): [ 1 2 3 4 5 ]
*****************************************

184: unione1_i
ris (5 : 5): [ 1 2 3 4 5 ]
I_add (5 : 10): [ 1 2 3 4 5 ]
2858: elimina_doppi_i
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
*****************************************



ris (5 : 10): [ 1 2 3 4 5 ]
*****************************************

197: assegna1_mindxlt_i
checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 0


checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
*****************************************

199: assegna1_m_indxgt_i
checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
val1 = 0
val2 = 1


checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
*****************************************

201: somma_colonne_i
checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


aus (5 : 5): [ 2 2 2 2 2 ]
*****************************************

203: which_v_indxne_i
aus (5 : 5): [ 2 2 2 2 2 ]
val = 0


tmp_i1 (5 : 6): [ 1 2 3 4 5 ]
*****************************************

213: somma_righe_i
checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]


rs (2 : 2): [ 5 5 ]
*****************************************

215: ordine_i
rs (2 : 2): [ 5 5 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
*****************************************

227: which_m_rowindxne_i
checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
riga = 1, val = 0


I_add (5 : 10): [ 1 2 3 4 5 ]
*****************************************

229: unione1_i
ris (0 : 0): [ ]
I_add (5 : 10): [ 1 2 3 4 5 ]
2858: elimina_doppi_i
I (5 : 5): [ 1 2 3 4 5 ]


ris (5 : 5): [ 1 2 3 4 5 ]
*****************************************



ris (5 : 5): [ 1 2 3 4 5 ]
*****************************************

227: which_m_rowindxne_i
checkOUT (2 x 5 : 2 x 5): [
	 1 1 1 1 1
	 1 1 1 1 1
 ]
riga = 2, val = 0


I_add (5 : 10): [ 1 2 3 4 5 ]
*****************************************

229: unione1_i
ris (5 : 5): [ 1 2 3 4 5 ]
I_add (5 : 10): [ 1 2 3 4 5 ]
2858: elimina_doppi_i
I (10 : 10): [ 1 2 3 4 5 1 2 3 4 5 ]


ris (5 : 10): [ 1 2 3 4 5 ]
*****************************************



ris (5 : 10): [ 1 2 3 4 5 ]
*****************************************


Stringhe allocate: 5 (1870 interne); stringhe deallocate: 0 (1655 interne)

64: seq_i
da = 2, a = 2, incremento = 1


ris3.indices (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 5 (1870 interne); stringhe deallocate: 0 (1670 interne)

130: vettore3s_d
el1 = -1.875, el2 = -2.500, el3 = -2.500


prob_mod (3 : 3): [ -1.875 -2.500 -2.500 ]
*****************************************

132: assegna1_v_indxeq_d
prob_mod (3 : 3): [ -1.875 -2.500 -2.500 ]
val1 = 0.000
val2 = 1.#QO


prob_mod (3 : 3): [ -1.875 -2.500 -2.500 ]
*****************************************

134: which_v_indxna_d
prob_mod (3 : 3): [ -1.875 -2.500 -2.500 ]
complemento = 1


ind (3 : 3): [ 1 2 3 ]
*****************************************

140: copia_v_indx_d
prob_mod (3 : 3): [ -1.875 -2.500 -2.500 ]
ind (3 : 3): [ 1 2 3 ]


tmp1_d (3 : 16): [ -1.875 -2.500 -2.500 ]
*****************************************

141: min_v_d
tmp1_d (3 : 16): [ -1.875 -2.500 -2.500 ]


min = -2.500
*****************************************

144: somma1_vs_d
prob_mod (3 : 3): [ -1.875 -2.500 -2.500 ]
s = 2.611


prob_mod (3 : 3): [ 0.736 0.111 0.111 ]
*****************************************

147: assegna1_v_indxNA_d
prob_mod (3 : 3): [ 0.736 0.111 0.111 ]
val = 0.000
complemento = 0


prob_mod (3 : 3): [ 0.736 0.111 0.111 ]
*****************************************

149: somma_v_d
prob_mod (3 : 3): [ 0.736 0.111 0.111 ]
canc_NA = 0



ris: 0.958
*****************************************

149: dividi1_vs_d
prob_mod (3 : 3): [ 0.736 0.111 0.111 ]
div = 0.958


prob_mod (3 : 3): [ 0.768 0.116 0.116 ]
*****************************************

151: vettore3s_i
el1 = 1, el2 = 2, el3 = 3


tmp1_i (3 : 3): [ 1 2 3 ]
*****************************************


*** sampleB_p ***

*** sample_p ***
tmp1_i (3 : 3): [ 1 2 3 ]
k = 1, replace = 0
prob_mod (3 : 3): [ 0.768 0.116 0.116 ]


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (1890 interne); stringhe deallocate: 0 (1670 interne)


*** assign_nodes2 ***
18: copia_v_i
h (5 : 5): [ 1 2 3 4 5 ]
start = 1
end = 5


or_h (5 : 5): [ 1 2 3 4 5 ]
*****************************************

20: seq_i
da = 1, a = 5, incremento = 1


aus_h (5 : 5): [ 1 2 3 4 5 ]
*****************************************

26: rep_i
scalare_i (1 : 1): [ 0 ]
ripetizioni = 4


index (4 : 4): [ 0 0 0 0 ]
*****************************************

28: somma_righe_i
m (4 x 4 : 4 x 4): [
	 0 1 0 1
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]


M_in (4 : 4): [ 2 1 1 0 ]
*****************************************

30: ordine_i
M_in (4 : 4): [ 2 1 1 0 ]
decr = 1
3454: rev_i
Ord (4 : 4): [ 4 2 3 1 ]


Ord (4 : 4): [ 1 3 2 4 ]
*****************************************



Ord (4 : 4): [ 1 3 2 4 ]
*****************************************

35: riga_d
Sc (4 x 5 : 4 x 5): [
	 0.000 0.000 0.000 0.000 0.000
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 0.500 0.500 0.500 0.500 0.500
 ]
r = 1

p (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

37: which_v_indxle_d
p (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
val = 0.000


tmp_i (5 : 5): [ 1 2 3 4 5 ]
*****************************************

40: min_v_d
p (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


min = 0.000
*****************************************

41: somma1_vs_d
p (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
s = 25.000


p (5 : 5): [ 25.000 25.000 25.000 25.000 25.000 ]
*****************************************

44: assegna_v_indxNA_i
Sin (5 : 5): [ 0 0 0 0 0 ]
h (5 : 5): [ 1 2 3 4 5 ]


Sin_h (5 : 5): [ 0 0 0 0 0 ]
*****************************************

49: which_v_indxgt_i
Sin_h (5 : 5): [ 0 0 0 0 0 ]
val = 3


ind (0 : 5): [ ]
*****************************************

55: assegna_v_indxNA_d
p (5 : 5): [ 25.000 25.000 25.000 25.000 25.000 ]
aus_h (5 : 5): [ 1 2 3 4 5 ]


tmp_d (5 : 5): [ 25.000 25.000 25.000 25.000 25.000 ]
*****************************************

56: somma_v_d
tmp_d (5 : 5): [ 25.000 25.000 25.000 25.000 25.000 ]
canc_NA = 0



ris: 125.000
*****************************************

57: dividi_vs_d
tmp_d (5 : 5): [ 25.000 25.000 25.000 25.000 25.000 ]
div = 125.000


p (5 : 5): [ 0.200 0.200 0.200 0.200 0.200 ]
*****************************************


*** sampleB_p ***

*** sample_p ***
h (5 : 5): [ 1 2 3 4 5 ]
k = 1, replace = 0
p (5 : 5): [ 0.200 0.200 0.200 0.200 0.200 ]


ris (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 5 (1960 interne); stringhe deallocate: 0 (1675 interne)

64: setdiff1_i
h (5 : 5): [ 1 2 3 4 5 ]
ris (1 : 1): [ 3 ]
1885: esiste_v_i
el = 3
h (5 : 5): [ 1 2 3 4 5 ]


indx = 3
*****************************************

1887: elimina_indx_i
h (5 : 5): [ 1 2 3 4 5 ]
indx = 3


h (4 : 5): [ 1 2 4 5 ]
*****************************************



h (4 : 5): [ 1 2 4 5 ]
*****************************************

66: which_vv_indxeq_i
or_h (5 : 5): [ 1 2 3 4 5 ]
ris (1 : 1): [ 3 ]


tmp_i (0 : 5): [ ]
*****************************************

67: setdiff1_i
aus_h (5 : 5): [ 1 2 3 4 5 ]
tmp_i (0 : 5): [ ]


aus_h (5 : 5): [ 1 2 3 4 5 ]
*****************************************

35: riga_d
Sc (4 x 5 : 4 x 5): [
	 0.000 0.000 0.000 0.000 0.000
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 0.500 0.500 0.500 0.500 0.500
 ]
r = 3

p (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
*****************************************

37: which_v_indxle_d
p (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
val = 0.000


tmp_i (5 : 5): [ 1 2 3 4 5 ]
*****************************************

40: min_v_d
p (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]


min = -1.000
*****************************************

41: somma1_vs_d
p (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
s = 26.000


p (5 : 5): [ 25.000 25.000 25.000 25.000 25.000 ]
*****************************************

44: assegna_v_indxNA_i
Sin (5 : 5): [ 0 0 0 0 0 ]
h (4 : 5): [ 1 2 4 5 ]


Sin_h (4 : 5): [ 0 0 0 0 ]
*****************************************

49: which_v_indxgt_i
Sin_h (4 : 5): [ 0 0 0 0 ]
val = 4


ind (0 : 5): [ ]
*****************************************

55: assegna_v_indxNA_d
p (5 : 5): [ 25.000 25.000 25.000 25.000 25.000 ]
aus_h (5 : 5): [ 1 2 3 4 5 ]


tmp_d (5 : 5): [ 25.000 25.000 25.000 25.000 25.000 ]
*****************************************

56: somma_v_d
tmp_d (5 : 5): [ 25.000 25.000 25.000 25.000 25.000 ]
canc_NA = 0



ris: 125.000
*****************************************

57: dividi_vs_d
tmp_d (5 : 5): [ 25.000 25.000 25.000 25.000 25.000 ]
div = 125.000


p (5 : 5): [ 0.200 0.200 0.200 0.200 0.200 ]
*****************************************


*** sampleB_p ***

*** sample_p ***
h (4 : 5): [ 1 2 4 5 ]
k = 1, replace = 0
p (5 : 5): [ 0.200 0.200 0.200 0.200 0.200 ]


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (1960 interne); stringhe deallocate: 0 (1675 interne)

64: setdiff1_i
h (4 : 5): [ 1 2 4 5 ]
ris (1 : 1): [ 1 ]
1885: esiste_v_i
el = 1
h (4 : 5): [ 1 2 4 5 ]


indx = 1
*****************************************

1887: elimina_indx_i
h (4 : 5): [ 1 2 4 5 ]
indx = 1


h (3 : 5): [ 2 4 5 ]
*****************************************



h (3 : 5): [ 2 4 5 ]
*****************************************

66: which_vv_indxeq_i
or_h (5 : 5): [ 1 2 3 4 5 ]
ris (1 : 1): [ 1 ]


tmp_i (1 : 5): [ 1 ]
*****************************************

67: setdiff1_i
aus_h (5 : 5): [ 1 2 3 4 5 ]
tmp_i (1 : 5): [ 1 ]
1885: esiste_v_i
el = 1
aus_h (5 : 5): [ 1 2 3 4 5 ]


indx = 1
*****************************************

1887: elimina_indx_i
aus_h (5 : 5): [ 1 2 3 4 5 ]
indx = 1


aus_h (4 : 5): [ 2 3 4 5 ]
*****************************************



aus_h (4 : 5): [ 2 3 4 5 ]
*****************************************

35: riga_d
Sc (4 x 5 : 4 x 5): [
	 0.000 0.000 0.000 0.000 0.000
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 0.500 0.500 0.500 0.500 0.500
 ]
r = 2

p (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
*****************************************

37: which_v_indxle_d
p (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
val = 0.000


tmp_i (5 : 5): [ 1 2 3 4 5 ]
*****************************************

40: min_v_d
p (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]


min = -1.000
*****************************************

41: somma1_vs_d
p (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -1.000 ]
s = 26.000


p (5 : 5): [ 25.000 25.000 25.000 25.000 25.000 ]
*****************************************

44: assegna_v_indxNA_i
Sin (5 : 5): [ 0 0 0 0 0 ]
h (3 : 5): [ 2 4 5 ]


Sin_h (3 : 5): [ 0 0 0 ]
*****************************************

49: which_v_indxgt_i
Sin_h (3 : 5): [ 0 0 0 ]
val = 4


ind (0 : 5): [ ]
*****************************************

55: assegna_v_indxNA_d
p (5 : 5): [ 25.000 25.000 25.000 25.000 25.000 ]
aus_h (4 : 5): [ 2 3 4 5 ]


tmp_d (4 : 5): [ 25.000 25.000 25.000 25.000 ]
*****************************************

56: somma_v_d
tmp_d (4 : 5): [ 25.000 25.000 25.000 25.000 ]
canc_NA = 0



ris: 100.000
*****************************************

57: dividi_vs_d
tmp_d (4 : 5): [ 25.000 25.000 25.000 25.000 ]
div = 100.000


p (4 : 5): [ 0.250 0.250 0.250 0.250 ]
*****************************************


*** sampleB_p ***

*** sample_p ***
h (3 : 5): [ 2 4 5 ]
k = 1, replace = 0
p (4 : 5): [ 0.250 0.250 0.250 0.250 ]


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 5 (1960 interne); stringhe deallocate: 0 (1675 interne)

64: setdiff1_i
h (3 : 5): [ 2 4 5 ]
ris (1 : 1): [ 2 ]
1885: esiste_v_i
el = 2
h (3 : 5): [ 2 4 5 ]


indx = 1
*****************************************

1887: elimina_indx_i
h (3 : 5): [ 2 4 5 ]
indx = 1


h (2 : 5): [ 4 5 ]
*****************************************



h (2 : 5): [ 4 5 ]
*****************************************

66: which_vv_indxeq_i
or_h (5 : 5): [ 1 2 3 4 5 ]
ris (1 : 1): [ 2 ]


tmp_i (0 : 5): [ ]
*****************************************

67: setdiff1_i
aus_h (4 : 5): [ 2 3 4 5 ]
tmp_i (0 : 5): [ ]


aus_h (4 : 5): [ 2 3 4 5 ]
*****************************************

35: riga_d
Sc (4 x 5 : 4 x 5): [
	 0.000 0.000 0.000 0.000 0.000
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 -1.000 -1.000 -1.000 -1.000 -1.000
	 0.500 0.500 0.500 0.500 0.500
 ]
r = 4

p (5 : 5): [ 0.500 0.500 0.500 0.500 0.500 ]
*****************************************

37: which_v_indxle_d
p (5 : 5): [ 0.500 0.500 0.500 0.500 0.500 ]
val = 0.000


tmp_i (0 : 5): [ ]
*****************************************

44: assegna_v_indxNA_i
Sin (5 : 5): [ 0 0 0 0 0 ]
h (2 : 5): [ 4 5 ]


Sin_h (2 : 5): [ 0 0 ]
*****************************************

49: which_v_indxgt_i
Sin_h (2 : 5): [ 0 0 ]
val = 5


ind (0 : 5): [ ]
*****************************************

55: assegna_v_indxNA_d
p (5 : 5): [ 0.500 0.500 0.500 0.500 0.500 ]
aus_h (4 : 5): [ 2 3 4 5 ]


tmp_d (4 : 5): [ 0.500 0.500 0.500 0.500 ]
*****************************************

56: somma_v_d
tmp_d (4 : 5): [ 0.500 0.500 0.500 0.500 ]
canc_NA = 0



ris: 2.000
*****************************************

57: dividi_vs_d
tmp_d (4 : 5): [ 0.500 0.500 0.500 0.500 ]
div = 2.000


p (4 : 5): [ 0.250 0.250 0.250 0.250 ]
*****************************************


*** sampleB_p ***

*** sample_p ***
h (2 : 5): [ 4 5 ]
k = 1, replace = 0
p (4 : 5): [ 0.250 0.250 0.250 0.250 ]


ris (1 : 1): [ 4 ]
*****************************************


Stringhe allocate: 5 (1960 interne); stringhe deallocate: 0 (1675 interne)

64: setdiff1_i
h (2 : 5): [ 4 5 ]
ris (1 : 1): [ 4 ]
1885: esiste_v_i
el = 4
h (2 : 5): [ 4 5 ]


indx = 1
*****************************************

1887: elimina_indx_i
h (2 : 5): [ 4 5 ]
indx = 1


h (1 : 5): [ 5 ]
*****************************************



h (1 : 5): [ 5 ]
*****************************************

66: which_vv_indxeq_i
or_h (5 : 5): [ 1 2 3 4 5 ]
ris (1 : 1): [ 4 ]


tmp_i (0 : 5): [ ]
*****************************************

67: setdiff1_i
aus_h (4 : 5): [ 2 3 4 5 ]
tmp_i (0 : 5): [ ]


aus_h (4 : 5): [ 2 3 4 5 ]
*****************************************

87: which_m_rowindxeq_i
m (4 x 4 : 4 x 4): [
	 0 1 0 1
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]
riga = 1, val = 1


ind (2 : 26): [ 2 4 ]
*****************************************

89: copia_v_indx_i
index (4 : 4): [ 3 2 1 4 ]
ind (2 : 26): [ 2 4 ]


co (2 : 2): [ 2 4 ]
*****************************************

91: assegna1_m_vv_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
ri (1 : 1): [ 3 ]
co (2 : 2): [ 2 4 ]
val = 1


Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 1 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
*****************************************

93: esiste_v_i
el = 1
ris1.indices (1 : 1): [ 1 ]


indx = 1
*****************************************

95: accoda1_vv_i
new_hubs (0 : 1): [ ]
ri (1 : 1): [ 3 ]


new_hubs (1 : 1): [ 3 ]
*****************************************

87: which_m_rowindxeq_i
m (4 x 4 : 4 x 4): [
	 0 1 0 1
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]
riga = 2, val = 1


ind (1 : 26): [ 3 ]
*****************************************

89: copia_v_indx_i
index (4 : 4): [ 3 2 1 4 ]
ind (1 : 26): [ 3 ]


co (1 : 2): [ 1 ]
*****************************************

91: assegna1_m_vv_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 1 0 1 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
ri (1 : 1): [ 2 ]
co (1 : 2): [ 1 ]
val = 1


Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 1 0 0 0 0
	 0 1 0 1 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
*****************************************

93: esiste_v_i
el = 2
ris1.indices (1 : 1): [ 1 ]


indx = 0
*****************************************

87: which_m_rowindxeq_i
m (4 x 4 : 4 x 4): [
	 0 1 0 1
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]
riga = 3, val = 1


ind (1 : 26): [ 4 ]
*****************************************

89: copia_v_indx_i
index (4 : 4): [ 3 2 1 4 ]
ind (1 : 26): [ 4 ]


co (1 : 2): [ 4 ]
*****************************************

91: assegna1_m_vv_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 1 0 0 0 0
	 0 1 0 1 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
ri (1 : 1): [ 1 ]
co (1 : 2): [ 4 ]
val = 1


Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 1 0
	 1 0 0 0 0
	 0 1 0 1 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
*****************************************

93: esiste_v_i
el = 3
ris1.indices (1 : 1): [ 1 ]


indx = 0
*****************************************

87: which_m_rowindxeq_i
m (4 x 4 : 4 x 4): [
	 0 1 0 1
	 0 0 1 0
	 0 0 0 1
	 0 0 0 0
 ]
riga = 4, val = 1


ind (0 : 26): [ ]
*****************************************

89: copia_v_indx_i
index (4 : 4): [ 3 2 1 4 ]
ind (0 : 26): [ ]


co (0 : 0): [ ]
*****************************************

91: assegna1_m_vv_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 1 0
	 1 0 0 0 0
	 0 1 0 1 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
ri (1 : 1): [ 4 ]
co (0 : 0): [ ]
val = 1


Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 1 0
	 1 0 0 0 0
	 0 1 0 1 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
*****************************************

93: esiste_v_i
el = 4
ris1.indices (1 : 1): [ 1 ]


indx = 0
*****************************************


Stringhe allocate: 5 (1970 interne); stringhe deallocate: 0 (1745 interne)

319: accoda1_vv_i
h_new (0 : 0): [ ]
new_hubs (1 : 1): [ 3 ]
ATTENZIONE (accoda_vv_i, linea connectivity_modular.c # 319): ingrandito il vettore da 0 a 1!


h_new (1 : 2): [ 3 ]
*****************************************

321: somma_colonne_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 1 0
	 1 0 0 0 0
	 0 1 0 1 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


Sout (5 : 5): [ 1 1 0 2 0 ]
*****************************************

323: max_v_i
Sout (5 : 5): [ 1 1 0 2 0 ]


max = 2
*****************************************

325: seq_i
da = 0, a = 3, incremento = 1


tmp2_i (4 : 4): [ 0 1 2 3 ]
*****************************************


*** hist ***
Sout (5 : 5): [ 1 1 0 2 0 ]
tmp2_i (4 : 4): [ 0 1 2 3 ]
right = 0
include_border = 1
naok = 0


tmp1_i (3 : 3): [ 2 2 1 ]

Stringhe allocate: 5 (1981 interne); stringhe deallocate: 0 (1751 interne)

327: promuovi_i
tmp1_i (3 : 3): [ 2 2 1 ]
ATTENZIONE (promuovi_i, linea connectivity_modular.c # 327): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

tmp1_d (3 : 16): [ 2.000 2.000 1.000 ]
*****************************************

328: assegna_v_segmv_d
Freq_out (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
start = 1
end = 3
tmp1_d (3 : 16): [ 2.000 2.000 1.000 ]


Freq_out (7 : 7): [ 2.000 2.000 1.000 0.000 0.000 0.000 0.000 ]
*****************************************

330: somma_righe_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 1 0
	 1 0 0 0 0
	 0 1 0 1 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


Sin (5 : 5): [ 1 1 2 0 0 ]
*****************************************

332: max_v_i
Sin (5 : 5): [ 1 1 2 0 0 ]


max = 2
*****************************************

334: seq_i
da = 0, a = 3, incremento = 1


tmp2_i (4 : 4): [ 0 1 2 3 ]
*****************************************


*** hist ***
Sin (5 : 5): [ 1 1 2 0 0 ]
tmp2_i (4 : 4): [ 0 1 2 3 ]
right = 0
include_border = 1
naok = 0


tmp1_i (3 : 3): [ 2 2 1 ]

Stringhe allocate: 5 (1982 interne); stringhe deallocate: 0 (1752 interne)

336: promuovi_i
tmp1_i (3 : 3): [ 2 2 1 ]
ATTENZIONE (promuovi_i, linea connectivity_modular.c # 336): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

tmp1_d (3 : 16): [ 2.000 2.000 1.000 ]
*****************************************

337: assegna_v_segmv_d
Freq_out (7 : 7): [ 2.000 2.000 1.000 0.000 0.000 0.000 0.000 ]
start = 1
end = 3
tmp1_d (3 : 16): [ 2.000 2.000 1.000 ]


Freq_out (7 : 7): [ 2.000 2.000 1.000 0.000 0.000 0.000 0.000 ]
*****************************************

346: accoda1_vv_i
h (1 : 5): [ 5 ]
h_new (1 : 2): [ 3 ]


h (2 : 5): [ 5 3 ]
*****************************************

355: copia_v_indx_i
Sin (5 : 5): [ 1 1 2 0 0 ]
h (2 : 5): [ 5 3 ]


tmp1_i (2 : 3): [ 0 2 ]
*****************************************

356: which_v_indxne_i
tmp1_i (2 : 3): [ 0 2 ]
val = 5


tmp2_i (2 : 4): [ 1 2 ]
*****************************************

357: copia_v_i
tmp2_i (2 : 4): [ 1 2 ]
start = 1
end = 2


h (2 : 5): [ 1 2 ]
*****************************************

97: somma_righe_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 1 0
	 1 0 0 0 0
	 0 1 0 1 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


Sin (5 : 5): [ 1 1 2 0 0 ]
*****************************************

99: somma_colonne_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 1 0
	 1 0 0 0 0
	 0 1 0 1 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


Sout (5 : 5): [ 1 1 0 2 0 ]
*****************************************

*** cluster_coeff2 ***
21: trasponi_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 1 0
	 1 0 0 0 0
	 0 1 0 1 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]


tmpm_i (5 x 5 : 5 x 5): [
	 0 1 0 0 0
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
*****************************************

22: somma1_m_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 0 0 1 0
	 1 0 0 0 0
	 0 1 0 1 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
tmpm_i (5 x 5 : 5 x 5): [
	 0 1 0 0 0
	 0 0 1 0 0
	 0 0 0 0 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]


Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
*****************************************

24: which_m_indxne_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
val = 0


ind (8 : 25): [ 2 4 6 8 12 14 16 18 ]
*****************************************

26: assegna1_ms_indxv_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
ind (8 : 25): [ 2 4 6 8 12 14 16 18 ]
val = 1


Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
*****************************************

28: assegna1_s_diag_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
val = 0


Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
*****************************************

33: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 5


Cg (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

37: somma_riga_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
riga = 1


ris: 2
*****************************************

39: which_m_rowindxne_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
riga = 1, val = 0


neighbours (2 : 25): [ 2 4 ]
*****************************************

37: somma_riga_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
riga = 2


ris: 2
*****************************************

39: which_m_rowindxne_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
riga = 2, val = 0


neighbours (2 : 25): [ 1 3 ]
*****************************************

37: somma_riga_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
riga = 3


ris: 2
*****************************************

39: which_m_rowindxne_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
riga = 3, val = 0


neighbours (2 : 25): [ 2 4 ]
*****************************************

37: somma_riga_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
riga = 4


ris: 2
*****************************************

39: which_m_rowindxne_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
riga = 4, val = 0


neighbours (2 : 25): [ 1 3 ]
*****************************************

37: somma_riga_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
riga = 5


ris: 0
*****************************************

39: which_m_rowindxne_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
riga = 5, val = 0


neighbours (0 : 25): [ ]
*****************************************

72: media_v_d
Cg (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]


media = 0.000
*****************************************


Stringhe allocate: 5 (2003 interne); stringhe deallocate: 0 (1773 interne)


*** module12 ***
18: seq_i
da = 1, a = 2, incremento = 1


tmp1_i (2 : 2): [ 1 2 ]
*****************************************


*** sampleB ***

*** sample ***
tmp1_i (2 : 2): [ 1 2 ]
k = 1, replace = 0


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 5 (2018 interne); stringhe deallocate: 0 (1773 interne)


Stringhe allocate: 5 (2018 interne); stringhe deallocate: 0 (1773 interne)


*** mod1 ***
14: seq_i
da = 1, a = 1, incremento = 1


x (1 : 1): [ 1 ]
*****************************************

16: somma_vs_i
x (1 : 1): [ 1 ]
s = 1.000


tmp1_i (1 : 1): [ 2 ]
*****************************************

17: cbind2v_i
x (1 : 1): [ 1 ]
tmp1_i (1 : 1): [ 2 ]


ind (1 x 2 : 1 x 2): [
	 1 2
 ]
*****************************************

19: assegna1_ms_indx2_i
m (2 x 2 : 4 x 4): [
	 0 0
	 0 0
 ]
ind (1 x 2 : 1 x 2): [
	 1 2
 ]
val = 1


m (2 x 2 : 4 x 4): [
	 0 1
	 0 0
 ]
*****************************************

22: vettore2s_i
el1 = 1, el2 = -1


tmp1_i (2 : 4): [ 1 -1 ]
*****************************************


*** sampleB ***

*** sample ***
tmp1_i (2 : 4): [ 1 -1 ]
k = 1, replace = 0


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (2038 interne); stringhe deallocate: 0 (1773 interne)


Stringhe allocate: 5 (2038 interne); stringhe deallocate: 0 (1773 interne)


Stringhe allocate: 5 (2038 interne); stringhe deallocate: 0 (1793 interne)


*** probmod2 ***
33: somma_righe_i
m (2 x 2 : 4 x 4): [
	 0 1
	 0 0
 ]


M_in (2 : 2): [ 1 0 ]
*****************************************

35: somma_colonne_i
m (2 x 2 : 4 x 4): [
	 0 1
	 0 0
 ]


M_out (2 : 2): [ 0 1 ]
*****************************************

54: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 6): [ ]
*****************************************

55: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 6): [ ]
*****************************************

56: interseca_i
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
*****************************************

100: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


S_out (2 : 2): [ 0.000 0.000 ]
*****************************************

103: rep_i
scalare_i (1 : 1): [ 1 ]
ripetizioni = 2


tmp_i1 (2 : 6): [ 1 1 ]
*****************************************

104: aggiungi_mv_riga_i
checkOUT (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
tmp_i1 (2 : 6): [ 1 1 ]


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
*****************************************

109: assegna_v_indxNA_i
Sin (5 : 5): [ 1 1 2 0 0 ]
h (2 : 5): [ 1 2 ]


tmp_i1 (2 : 6): [ 1 1 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


S_new (2 : 2): [ 2 2 ]
*****************************************

21: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

23: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

25: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

26: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

28: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

29: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 0.000 0.000 ]
*****************************************

31: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

32: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 0.000 0.000 ]
*****************************************

34: somma_vs_d
old1 (2 : 2): [ 0.000 0.000 ]
s = -1.000


new1 (2 : 2): [ -1.000 -1.000 ]
*****************************************

36: somma_vs_d
old2 (2 : 2): [ 0.000 0.000 ]
s = 1.000


new2 (2 : 2): [ 1.000 1.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1.000 1.000 ]
*****************************************

42: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (2 : 2): [ 0.000 0.000 ]
T1 (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

47: abs1_v_d
a (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

49: diff_vv_d
new1 (2 : 2): [ -1.000 -1.000 ]
T1 (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

50: abs1_v_d
b (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

52: which_v_indxna_d
T1 (2 : 2): [ 1.#QO 1.#QO ]
complemento = 0


ind (2 : 2): [ 1 2 ]
*****************************************

87: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


S1 (2 : 2): [ 0.000 0.000 ]
*****************************************

90: diff_vv_d
old2 (2 : 2): [ 0.000 0.000 ]
T2 (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

91: abs1_v_d
a (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

93: diff_vv_d
new2 (2 : 2): [ 1.000 1.000 ]
T2 (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

94: abs1_v_d
b (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

96: cbind2v_d
a (2 : 2): [ 1.#QO 1.#QO ]
b (2 : 2): [ 1.#QO 1.#QO ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]
*****************************************

97: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]


m (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

99: which_v_indxna_d
T2 (2 : 2): [ 1.#QO 1.#QO ]
complemento = 0


ind (2 : 2): [ 1 2 ]
*****************************************

128: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


S2 (2 : 2): [ 0.000 0.000 ]
*****************************************

131: which_v_indxeq_d
T2 (2 : 2): [ 1.#QO 1.#QO ]
val = 0.000


ind (0 : 2): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (2 : 2): [ 0.000 0.000 ]
ind (0 : 2): [ ]
val = -1.#IO


S2 (2 : 2): [ 0.000 0.000 ]
*****************************************

135: somma_vv_d
S1 (2 : 2): [ 0.000 0.000 ]
S2 (2 : 2): [ 0.000 0.000 ]


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************

136: dividi1_vs_d
Sc (2 : 2): [ 0.000 0.000 ]
div = 2.000


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 5 (2188 interne); stringhe deallocate: 0 (1883 interne)

112: which_v_indxne_d
Sc (2 : 2): [ 0.000 0.000 ]
val = -1.#IO


indok (2 : 2): [ 1 2 ]
*****************************************

114: aggiungi_ms_rigaindx_i
checkIN (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
indok (2 : 2): [ 1 2 ]
val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
*****************************************

122: seq_i
da = 1, a = 2, incremento = 1


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

123: setdiff_i
tmp_i1 (2 : 6): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
2944: copia_v_i
tmp_i1 (2 : 6): [ 1 2 ]
start = 1
end = 2


indInf (2 : 2): [ 1 2 ]
*****************************************

2946: esiste_v_i
el = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
*****************************************

2946: esiste_v_i
el = 2
indInf (1 : 2): [ 2 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
*****************************************



indInf (0 : 2): [ ]
*****************************************

125: copia_v_indx_d
Sc (2 : 2): [ 0.000 0.000 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 2): [ 0.000 0.000 ]
*****************************************

129: min_v_d
tmp_d1 (2 : 2): [ 0.000 0.000 ]


min = 0.000
*****************************************

130: assegna1_vs_indx_d
Sc (2 : 2): [ 0.000 0.000 ]
indInf (0 : 2): [ ]
val = -1.000


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************

140: somma_vv_d
S_out (2 : 2): [ 0.000 0.000 ]
Sc (2 : 2): [ 0.000 0.000 ]


tmp_d1 (2 : 2): [ 0.000 0.000 ]
*****************************************

141: aggiungi_mv_riga_d
Sc (2 x 2 : 4 x 5): [
	 0.000 0.000
	 0.000 0.000
 ]
riga = 1
tmp_d1 (2 : 2): [ 0.000 0.000 ]


Sc (2 x 2 : 4 x 5): [
	 0.000 0.000
	 0.000 0.000
 ]
*****************************************

54: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


tmp_i1 (0 : 6): [ ]
*****************************************

55: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 6): [ ]
*****************************************

56: interseca_i
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
*****************************************

73: assegna_v_indxNA_i
Sout (5 : 5): [ 1 1 0 2 0 ]
h (2 : 5): [ 1 2 ]


tmp_i1 (2 : 6): [ 1 1 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


S_new (2 : 2): [ 2 2 ]
*****************************************

21: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

23: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 0.333 0.333 ]
*****************************************

25: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

26: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 0.667 0.667 ]
*****************************************

28: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

29: assegna_v_indxNA_d
Freq_out (7 : 7): [ 2.000 2.000 1.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 2.000 2.000 ]
*****************************************

31: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

32: assegna_v_indxNA_d
Freq_out (7 : 7): [ 2.000 2.000 1.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 1.000 1.000 ]
*****************************************

34: somma_vs_d
old1 (2 : 2): [ 2.000 2.000 ]
s = -1.000


new1 (2 : 2): [ 1.000 1.000 ]
*****************************************

36: somma_vs_d
old2 (2 : 2): [ 1.000 1.000 ]
s = 1.000


new2 (2 : 2): [ 2.000 2.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1.000 1.000 ]
*****************************************

42: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (2 : 2): [ 2.000 2.000 ]
T1 (2 : 2): [ 0.333 0.333 ]


a (2 : 2): [ 1.667 1.667 ]
*****************************************

47: abs1_v_d
a (2 : 2): [ 1.667 1.667 ]


a (2 : 2): [ 1.667 1.667 ]
*****************************************

49: diff_vv_d
new1 (2 : 2): [ 1.000 1.000 ]
T1 (2 : 2): [ 0.333 0.333 ]


b (2 : 2): [ 0.667 0.667 ]
*****************************************

50: abs1_v_d
b (2 : 2): [ 0.667 0.667 ]


b (2 : 2): [ 0.667 0.667 ]
*****************************************

52: which_v_indxna_d
T1 (2 : 2): [ 0.333 0.333 ]
complemento = 0


ind (0 : 2): [ ]
*****************************************

56: assegna1_vs_indx_d
a (2 : 2): [ 1.667 1.667 ]
ind (0 : 2): [ ]
val = 0.000


a (2 : 2): [ 1.667 1.667 ]
*****************************************

58: assegna1_vs_indx_d
b (2 : 2): [ 0.667 0.667 ]
ind (0 : 2): [ ]
val = 0.000


b (2 : 2): [ 0.667 0.667 ]
*****************************************

66: cbind2v_d
a (2 : 2): [ 1.667 1.667 ]
b (2 : 2): [ 0.667 0.667 ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.667 0.667
	 1.667 0.667
 ]
*****************************************

67: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 1.667 0.667
	 1.667 0.667
 ]


m (2 : 2): [ 1.667 1.667 ]
*****************************************

69: f_aux_d
a (2 : 2): [ 1.667 1.667 ]
b (2 : 2): [ 0.667 0.667 ]
m (2 : 2): [ 1.667 1.667 ]
T1 (2 : 2): [ 0.333 0.333 ]


S1 (2 : 2): [ 5.000 5.000 ]
*****************************************

71: diff_vv_d
a (2 : 2): [ 1.667 1.667 ]
toll1 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ 0.667 0.667 ]
*****************************************

72: which_v_indxlt_d
tmp_d1 (2 : 2): [ 0.667 0.667 ]
val = 0.000

ind1 (0 : 2): [ ]
*****************************************

74: diff_vv_d
b (2 : 2): [ 0.667 0.667 ]
toll1 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ -0.333 -0.333 ]
*****************************************

75: which_v_indxgt_d
tmp_d1 (2 : 2): [ -0.333 -0.333 ]
val = 0.000


ind2 (0 : 2): [ ]
*****************************************

77: interseca_i
ind1 (0 : 2): [ ]
ind2 (0 : 2): [ ]


indinf (0 : 0): [ ]
*****************************************

79: assegna1_vs_indx_d
S1 (2 : 2): [ 5.000 5.000 ]
indinf (0 : 0): [ ]
val = -1.#IO


S1 (2 : 2): [ 5.000 5.000 ]
*****************************************

81: assegna1_vs_indx_d
S1 (2 : 2): [ 5.000 5.000 ]
ind (0 : 2): [ ]
val = 0.000


S1 (2 : 2): [ 5.000 5.000 ]
*****************************************

90: diff_vv_d
old2 (2 : 2): [ 1.000 1.000 ]
T2 (2 : 2): [ 0.667 0.667 ]


a (2 : 2): [ 0.333 0.333 ]
*****************************************

91: abs1_v_d
a (2 : 2): [ 0.333 0.333 ]


a (2 : 2): [ 0.333 0.333 ]
*****************************************

93: diff_vv_d
new2 (2 : 2): [ 2.000 2.000 ]
T2 (2 : 2): [ 0.667 0.667 ]


b (2 : 2): [ 1.333 1.333 ]
*****************************************

94: abs1_v_d
b (2 : 2): [ 1.333 1.333 ]


b (2 : 2): [ 1.333 1.333 ]
*****************************************

96: cbind2v_d
a (2 : 2): [ 0.333 0.333 ]
b (2 : 2): [ 1.333 1.333 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]
*****************************************

97: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]


m (2 : 2): [ 1.333 1.333 ]
*****************************************

99: which_v_indxna_d
T2 (2 : 2): [ 0.667 0.667 ]
complemento = 0


ind (0 : 2): [ ]
*****************************************

103: assegna1_vs_indx_d
a (2 : 2): [ 0.333 0.333 ]
ind (0 : 2): [ ]
val = 0.000


a (2 : 2): [ 0.333 0.333 ]
*****************************************

105: assegna1_vs_indx_d
b (2 : 2): [ 1.333 1.333 ]
ind (0 : 2): [ ]
val = 0.000


b (2 : 2): [ 1.333 1.333 ]
*****************************************

107: cbind2v_d
a (2 : 2): [ 0.333 0.333 ]
b (2 : 2): [ 1.333 1.333 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]
*****************************************

108: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]


m (2 : 2): [ 1.333 1.333 ]
*****************************************

110: f_aux_d
a (2 : 2): [ 0.333 0.333 ]
b (2 : 2): [ 1.333 1.333 ]
m (2 : 2): [ 1.333 1.333 ]
T2 (2 : 2): [ 0.667 0.667 ]


S2 (2 : 2): [ -2.000 -2.000 ]
*****************************************

112: diff_vv_d
a (2 : 2): [ 0.333 0.333 ]
toll2 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ -0.667 -0.667 ]
*****************************************

113: which_v_indxlt_d
tmp_d1 (2 : 2): [ -0.667 -0.667 ]
val = 0.000

ind1 (2 : 2): [ 1 2 ]
*****************************************

115: diff_vv_d
b (2 : 2): [ 1.333 1.333 ]
toll2 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ 0.333 0.333 ]
*****************************************

116: which_v_indxgt_d
tmp_d1 (2 : 2): [ 0.333 0.333 ]
val = 0.000


ind2 (2 : 2): [ 1 2 ]
*****************************************

118: interseca_i
ind1 (2 : 2): [ 1 2 ]
ind2 (2 : 2): [ 1 2 ]
2306: esiste_v_i
el = 1
ind2 (2 : 2): [ 1 2 ]


indx = 1
*****************************************

2307: esiste_v_i
el = 1
indinf (2 : 2): [ 36507656 2425208 ]


indx = 0
*****************************************

2306: esiste_v_i
el = 2
ind2 (2 : 2): [ 1 2 ]


indx = 2
*****************************************

2307: esiste_v_i
el = 2
indinf (2 : 2): [ 1 2425208 ]


indx = 0
*****************************************



indinf (2 : 2): [ 1 2 ]
*****************************************

120: assegna1_vs_indx_d
S2 (2 : 2): [ -2.000 -2.000 ]
indinf (2 : 2): [ 1 2 ]
val = -1.#IO


S2 (2 : 2): [ -1.#IO -1.#IO ]
*****************************************

122: assegna1_vs_indx_d
S2 (2 : 2): [ -1.#IO -1.#IO ]
ind (0 : 2): [ ]
val = 0.000


S2 (2 : 2): [ -1.#IO -1.#IO ]
*****************************************

131: which_v_indxeq_d
T2 (2 : 2): [ 0.667 0.667 ]
val = 0.000


ind (0 : 2): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (2 : 2): [ -1.#IO -1.#IO ]
ind (0 : 2): [ ]
val = -1.#IO


S2 (2 : 2): [ -1.#IO -1.#IO ]
*****************************************

135: somma_vv_d
S1 (2 : 2): [ 5.000 5.000 ]
S2 (2 : 2): [ -1.#IO -1.#IO ]


S_out (2 : 2): [ -1.#IO -1.#IO ]
*****************************************

136: dividi1_vs_d
S_out (2 : 2): [ -1.#IO -1.#IO ]
div = 2.000


S_out (2 : 2): [ -1.#IO -1.#IO ]
*****************************************


Stringhe allocate: 5 (2313 interne); stringhe deallocate: 0 (1993 interne)

76: which_v_indxne_d
S_out (2 : 2): [ -1.#IO -1.#IO ]
val = -1.#IO


indok (0 : 2): [ ]
*****************************************

78: aggiungi_ms_rigaindx_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2
indok (0 : 2): [ ]
val = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
*****************************************

85: seq_i
da = 1, a = 2, incremento = 1


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

86: setdiff_i
tmp_i1 (2 : 6): [ 1 2 ]
indok (0 : 2): [ ]
2944: copia_v_i
tmp_i1 (2 : 6): [ 1 2 ]
start = 1
end = 2


indInf (2 : 2): [ 1 2 ]
*****************************************



indInf (2 : 2): [ 1 2 ]
*****************************************

88: copia_v_indx_d
S_out (2 : 2): [ -1.#IO -1.#IO ]
indok (0 : 2): [ ]


tmp_d1 (0 : 0): [ ]
*****************************************

93: assegna1_vs_indx_d
S_out (2 : 2): [ -1.#IO -1.#IO ]
indInf (2 : 2): [ 1 2 ]
val = -1.000


S_out (2 : 2): [ -1.000 -1.000 ]
*****************************************

136: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************

137: aggiungi_ms_riga_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2, val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
*****************************************

140: somma_vv_d
S_out (2 : 2): [ -1.000 -1.000 ]
Sc (2 : 2): [ 0.000 0.000 ]


tmp_d1 (2 : 2): [ -1.000 -1.000 ]
*****************************************

141: aggiungi_mv_riga_d
Sc (2 x 2 : 4 x 5): [
	 0.000 0.000
	 0.000 0.000
 ]
riga = 2
tmp_d1 (2 : 2): [ -1.000 -1.000 ]


Sc (2 x 2 : 4 x 5): [
	 0.000 0.000
	 -1.000 -1.000
 ]
*****************************************

149: somma_m_d
Sc (2 x 2 : 4 x 5): [
	 0.000 0.000
	 -1.000 -1.000
 ]


ris: -2.000
*****************************************

154: somma_colonne_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


aus (2 : 2): [ 2 2 ]
*****************************************

156: which_v_indxne_i
aus (2 : 2): [ 2 2 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

167: somma_righe_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


rs (2 : 2): [ 2 2 ]
*****************************************

169: ordine_i
rs (2 : 2): [ 2 2 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
*****************************************

182: which_m_rowindxne_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
riga = 1, val = 0


I_add (2 : 4): [ 1 2 ]
*****************************************

184: unione1_i
I (0 : 0): [ ]
I_add (2 : 4): [ 1 2 ]
2858: elimina_doppi_i
I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
*****************************************



ris (2 : 2): [ 1 2 ]
*****************************************

182: which_m_rowindxne_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
riga = 2, val = 0


I_add (2 : 4): [ 1 2 ]
*****************************************

184: unione1_i
ris (2 : 2): [ 1 2 ]
I_add (2 : 4): [ 1 2 ]
2858: elimina_doppi_i
I (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
*****************************************



ris (2 : 4): [ 1 2 ]
*****************************************

197: assegna1_mindxlt_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
val1 = 0
val2 = 0


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
*****************************************

199: assegna1_m_indxgt_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
val1 = 0
val2 = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
*****************************************

201: somma_colonne_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]


aus (2 : 2): [ 1 1 ]
*****************************************

203: which_v_indxne_i
aus (2 : 2): [ 1 1 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

213: somma_righe_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]


rs (2 : 2): [ 2 0 ]
*****************************************

215: ordine_i
rs (2 : 2): [ 2 0 ]
decr = 0


ord_ind (2 : 2): [ 2 1 ]
*****************************************

227: which_m_rowindxne_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2, val = 0


I_add (0 : 4): [ ]
*****************************************

229: unione1_i
ris (0 : 0): [ ]
I_add (0 : 4): [ ]
2858: elimina_doppi_i
I (0 : 0): [ ]


ris (0 : 0): [ ]
*****************************************



ris (0 : 0): [ ]
*****************************************


Stringhe allocate: 5 (2378 interne); stringhe deallocate: 0 (2133 interne)

18: seq_i
da = 1, a = 2, incremento = 1


tmp1_i (2 : 2): [ 1 2 ]
*****************************************


*** sampleB ***

*** sample ***
tmp1_i (2 : 2): [ 1 2 ]
k = 1, replace = 0


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 5 (2378 interne); stringhe deallocate: 0 (2133 interne)


Stringhe allocate: 5 (2378 interne); stringhe deallocate: 0 (2133 interne)


*** mod1 ***
14: seq_i
da = 1, a = 1, incremento = 1


x (1 : 1): [ 1 ]
*****************************************

16: somma_vs_i
x (1 : 1): [ 1 ]
s = 1.000


tmp1_i (1 : 1): [ 2 ]
*****************************************

17: cbind2v_i
x (1 : 1): [ 1 ]
tmp1_i (1 : 1): [ 2 ]


ind (1 x 2 : 1 x 2): [
	 1 2
 ]
*****************************************

19: assegna1_ms_indx2_i
m (2 x 2 : 4 x 4): [
	 0 0
	 0 0
 ]
ind (1 x 2 : 1 x 2): [
	 1 2
 ]
val = 1


m (2 x 2 : 4 x 4): [
	 0 1
	 0 0
 ]
*****************************************

22: vettore2s_i
el1 = 1, el2 = -1


tmp1_i (2 : 4): [ 1 -1 ]
*****************************************


*** sampleB ***

*** sample ***
tmp1_i (2 : 4): [ 1 -1 ]
k = 1, replace = 0


ris (1 : 1): [ -1 ]
*****************************************


Stringhe allocate: 5 (2398 interne); stringhe deallocate: 0 (2133 interne)


Stringhe allocate: 5 (2398 interne); stringhe deallocate: 0 (2133 interne)


Stringhe allocate: 5 (2398 interne); stringhe deallocate: 0 (2153 interne)


*** probmod2 ***
33: somma_righe_i
m (2 x 2 : 4 x 4): [
	 0 1
	 1 0
 ]


M_in (2 : 2): [ 1 1 ]
*****************************************

35: somma_colonne_i
m (2 x 2 : 4 x 4): [
	 0 1
	 1 0
 ]


M_out (2 : 2): [ 1 1 ]
*****************************************

54: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 6): [ ]
*****************************************

55: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 6): [ ]
*****************************************

56: interseca_i
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
*****************************************

73: assegna_v_indxNA_i
Sout (5 : 5): [ 1 1 0 2 0 ]
h (2 : 5): [ 1 2 ]


tmp_i1 (2 : 6): [ 1 1 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


S_new (2 : 2): [ 2 2 ]
*****************************************

21: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

23: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 0.333 0.333 ]
*****************************************

25: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

26: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 0.667 0.667 ]
*****************************************

28: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

29: assegna_v_indxNA_d
Freq_out (7 : 7): [ 2.000 2.000 1.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 2.000 2.000 ]
*****************************************

31: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

32: assegna_v_indxNA_d
Freq_out (7 : 7): [ 2.000 2.000 1.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 1.000 1.000 ]
*****************************************

34: somma_vs_d
old1 (2 : 2): [ 2.000 2.000 ]
s = -1.000


new1 (2 : 2): [ 1.000 1.000 ]
*****************************************

36: somma_vs_d
old2 (2 : 2): [ 1.000 1.000 ]
s = 1.000


new2 (2 : 2): [ 2.000 2.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1.000 1.000 ]
*****************************************

42: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (2 : 2): [ 2.000 2.000 ]
T1 (2 : 2): [ 0.333 0.333 ]


a (2 : 2): [ 1.667 1.667 ]
*****************************************

47: abs1_v_d
a (2 : 2): [ 1.667 1.667 ]


a (2 : 2): [ 1.667 1.667 ]
*****************************************

49: diff_vv_d
new1 (2 : 2): [ 1.000 1.000 ]
T1 (2 : 2): [ 0.333 0.333 ]


b (2 : 2): [ 0.667 0.667 ]
*****************************************

50: abs1_v_d
b (2 : 2): [ 0.667 0.667 ]


b (2 : 2): [ 0.667 0.667 ]
*****************************************

52: which_v_indxna_d
T1 (2 : 2): [ 0.333 0.333 ]
complemento = 0


ind (0 : 2): [ ]
*****************************************

56: assegna1_vs_indx_d
a (2 : 2): [ 1.667 1.667 ]
ind (0 : 2): [ ]
val = 0.000


a (2 : 2): [ 1.667 1.667 ]
*****************************************

58: assegna1_vs_indx_d
b (2 : 2): [ 0.667 0.667 ]
ind (0 : 2): [ ]
val = 0.000


b (2 : 2): [ 0.667 0.667 ]
*****************************************

66: cbind2v_d
a (2 : 2): [ 1.667 1.667 ]
b (2 : 2): [ 0.667 0.667 ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.667 0.667
	 1.667 0.667
 ]
*****************************************

67: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 1.667 0.667
	 1.667 0.667
 ]


m (2 : 2): [ 1.667 1.667 ]
*****************************************

69: f_aux_d
a (2 : 2): [ 1.667 1.667 ]
b (2 : 2): [ 0.667 0.667 ]
m (2 : 2): [ 1.667 1.667 ]
T1 (2 : 2): [ 0.333 0.333 ]


S1 (2 : 2): [ 5.000 5.000 ]
*****************************************

71: diff_vv_d
a (2 : 2): [ 1.667 1.667 ]
toll1 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ 0.667 0.667 ]
*****************************************

72: which_v_indxlt_d
tmp_d1 (2 : 2): [ 0.667 0.667 ]
val = 0.000

ind1 (0 : 2): [ ]
*****************************************

74: diff_vv_d
b (2 : 2): [ 0.667 0.667 ]
toll1 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ -0.333 -0.333 ]
*****************************************

75: which_v_indxgt_d
tmp_d1 (2 : 2): [ -0.333 -0.333 ]
val = 0.000


ind2 (0 : 2): [ ]
*****************************************

77: interseca_i
ind1 (0 : 2): [ ]
ind2 (0 : 2): [ ]


indinf (0 : 0): [ ]
*****************************************

79: assegna1_vs_indx_d
S1 (2 : 2): [ 5.000 5.000 ]
indinf (0 : 0): [ ]
val = -1.#IO


S1 (2 : 2): [ 5.000 5.000 ]
*****************************************

81: assegna1_vs_indx_d
S1 (2 : 2): [ 5.000 5.000 ]
ind (0 : 2): [ ]
val = 0.000


S1 (2 : 2): [ 5.000 5.000 ]
*****************************************

90: diff_vv_d
old2 (2 : 2): [ 1.000 1.000 ]
T2 (2 : 2): [ 0.667 0.667 ]


a (2 : 2): [ 0.333 0.333 ]
*****************************************

91: abs1_v_d
a (2 : 2): [ 0.333 0.333 ]


a (2 : 2): [ 0.333 0.333 ]
*****************************************

93: diff_vv_d
new2 (2 : 2): [ 2.000 2.000 ]
T2 (2 : 2): [ 0.667 0.667 ]


b (2 : 2): [ 1.333 1.333 ]
*****************************************

94: abs1_v_d
b (2 : 2): [ 1.333 1.333 ]


b (2 : 2): [ 1.333 1.333 ]
*****************************************

96: cbind2v_d
a (2 : 2): [ 0.333 0.333 ]
b (2 : 2): [ 1.333 1.333 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]
*****************************************

97: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]


m (2 : 2): [ 1.333 1.333 ]
*****************************************

99: which_v_indxna_d
T2 (2 : 2): [ 0.667 0.667 ]
complemento = 0


ind (0 : 2): [ ]
*****************************************

103: assegna1_vs_indx_d
a (2 : 2): [ 0.333 0.333 ]
ind (0 : 2): [ ]
val = 0.000


a (2 : 2): [ 0.333 0.333 ]
*****************************************

105: assegna1_vs_indx_d
b (2 : 2): [ 1.333 1.333 ]
ind (0 : 2): [ ]
val = 0.000


b (2 : 2): [ 1.333 1.333 ]
*****************************************

107: cbind2v_d
a (2 : 2): [ 0.333 0.333 ]
b (2 : 2): [ 1.333 1.333 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]
*****************************************

108: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]


m (2 : 2): [ 1.333 1.333 ]
*****************************************

110: f_aux_d
a (2 : 2): [ 0.333 0.333 ]
b (2 : 2): [ 1.333 1.333 ]
m (2 : 2): [ 1.333 1.333 ]
T2 (2 : 2): [ 0.667 0.667 ]


S2 (2 : 2): [ -2.000 -2.000 ]
*****************************************

112: diff_vv_d
a (2 : 2): [ 0.333 0.333 ]
toll2 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ -0.667 -0.667 ]
*****************************************

113: which_v_indxlt_d
tmp_d1 (2 : 2): [ -0.667 -0.667 ]
val = 0.000

ind1 (2 : 2): [ 1 2 ]
*****************************************

115: diff_vv_d
b (2 : 2): [ 1.333 1.333 ]
toll2 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ 0.333 0.333 ]
*****************************************

116: which_v_indxgt_d
tmp_d1 (2 : 2): [ 0.333 0.333 ]
val = 0.000


ind2 (2 : 2): [ 1 2 ]
*****************************************

118: interseca_i
ind1 (2 : 2): [ 1 2 ]
ind2 (2 : 2): [ 1 2 ]
2306: esiste_v_i
el = 1
ind2 (2 : 2): [ 1 2 ]


indx = 1
*****************************************

2307: esiste_v_i
el = 1
indinf (2 : 2): [ 37827032 2 ]


indx = 0
*****************************************

2306: esiste_v_i
el = 2
ind2 (2 : 2): [ 1 2 ]


indx = 2
*****************************************

2307: esiste_v_i
el = 2
indinf (2 : 2): [ 1 2 ]


indx = 2
*****************************************



indinf (1 : 2): [ 1 ]
*****************************************

120: assegna1_vs_indx_d
S2 (2 : 2): [ -2.000 -2.000 ]
indinf (1 : 2): [ 1 ]
val = -1.#IO


S2 (2 : 2): [ -1.#IO -2.000 ]
*****************************************

122: assegna1_vs_indx_d
S2 (2 : 2): [ -1.#IO -2.000 ]
ind (0 : 2): [ ]
val = 0.000


S2 (2 : 2): [ -1.#IO -2.000 ]
*****************************************

131: which_v_indxeq_d
T2 (2 : 2): [ 0.667 0.667 ]
val = 0.000


ind (0 : 2): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (2 : 2): [ -1.#IO -2.000 ]
ind (0 : 2): [ ]
val = -1.#IO


S2 (2 : 2): [ -1.#IO -2.000 ]
*****************************************

135: somma_vv_d
S1 (2 : 2): [ 5.000 5.000 ]
S2 (2 : 2): [ -1.#IO -2.000 ]


Sc (2 : 2): [ -1.#IO 3.000 ]
*****************************************

136: dividi1_vs_d
Sc (2 : 2): [ -1.#IO 3.000 ]
div = 2.000


Sc (2 : 2): [ -1.#IO 1.500 ]
*****************************************


Stringhe allocate: 5 (2563 interne); stringhe deallocate: 0 (2263 interne)

76: which_v_indxne_d
Sc (2 : 2): [ -1.#IO 1.500 ]
val = -1.#IO


indok (1 : 2): [ 2 ]
*****************************************

78: aggiungi_ms_rigaindx_i
checkOUT (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
indok (1 : 2): [ 2 ]
val = 1


checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
*****************************************

85: seq_i
da = 1, a = 2, incremento = 1


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

86: setdiff_i
tmp_i1 (2 : 6): [ 1 2 ]
indok (1 : 2): [ 2 ]
2944: copia_v_i
tmp_i1 (2 : 6): [ 1 2 ]
start = 1
end = 2


indInf (2 : 2): [ 1 2 ]
*****************************************

2946: esiste_v_i
el = 2
indInf (2 : 2): [ 1 2 ]


indx = 2
*****************************************

2948: elimina_indx_i
indInf (2 : 2): [ 1 2 ]
indx = 2


indInf (1 : 2): [ 1 ]
*****************************************



indInf (1 : 2): [ 1 ]
*****************************************

88: copia_v_indx_d
Sc (2 : 2): [ -1.#IO 1.500 ]
indok (1 : 2): [ 2 ]


tmp_d1 (1 : 1): [ 1.500 ]
*****************************************

92: min_v_d
tmp_d1 (1 : 1): [ 1.500 ]


min = 1.500
*****************************************

93: assegna1_vs_indx_d
Sc (2 : 2): [ -1.#IO 1.500 ]
indInf (1 : 2): [ 1 ]
val = -1.000


Sc (2 : 2): [ -1.000 1.500 ]
*****************************************

109: assegna_v_indxNA_i
Sin (5 : 5): [ 1 1 2 0 0 ]
h (2 : 5): [ 1 2 ]


tmp_i1 (2 : 6): [ 1 1 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


S_new (2 : 2): [ 2 2 ]
*****************************************

21: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

23: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

25: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

26: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

28: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

29: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 0.000 0.000 ]
*****************************************

31: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

32: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 0.000 0.000 ]
*****************************************

34: somma_vs_d
old1 (2 : 2): [ 0.000 0.000 ]
s = -1.000


new1 (2 : 2): [ -1.000 -1.000 ]
*****************************************

36: somma_vs_d
old2 (2 : 2): [ 0.000 0.000 ]
s = 1.000


new2 (2 : 2): [ 1.000 1.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1.000 1.000 ]
*****************************************

42: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (2 : 2): [ 0.000 0.000 ]
T1 (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

47: abs1_v_d
a (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

49: diff_vv_d
new1 (2 : 2): [ -1.000 -1.000 ]
T1 (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

50: abs1_v_d
b (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

52: which_v_indxna_d
T1 (2 : 2): [ 1.#QO 1.#QO ]
complemento = 0


ind (2 : 2): [ 1 2 ]
*****************************************

87: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


S1 (2 : 2): [ 0.000 0.000 ]
*****************************************

90: diff_vv_d
old2 (2 : 2): [ 0.000 0.000 ]
T2 (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

91: abs1_v_d
a (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

93: diff_vv_d
new2 (2 : 2): [ 1.000 1.000 ]
T2 (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

94: abs1_v_d
b (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

96: cbind2v_d
a (2 : 2): [ 1.#QO 1.#QO ]
b (2 : 2): [ 1.#QO 1.#QO ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]
*****************************************

97: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]


m (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

99: which_v_indxna_d
T2 (2 : 2): [ 1.#QO 1.#QO ]
complemento = 0


ind (2 : 2): [ 1 2 ]
*****************************************

128: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


S2 (2 : 2): [ 0.000 0.000 ]
*****************************************

131: which_v_indxeq_d
T2 (2 : 2): [ 1.#QO 1.#QO ]
val = 0.000


ind (0 : 2): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (2 : 2): [ 0.000 0.000 ]
ind (0 : 2): [ ]
val = -1.#IO


S2 (2 : 2): [ 0.000 0.000 ]
*****************************************

135: somma_vv_d
S1 (2 : 2): [ 0.000 0.000 ]
S2 (2 : 2): [ 0.000 0.000 ]


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************

136: dividi1_vs_d
Sc (2 : 2): [ 0.000 0.000 ]
div = 2.000


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 5 (2673 interne); stringhe deallocate: 0 (2353 interne)

112: which_v_indxne_d
Sc (2 : 2): [ 0.000 0.000 ]
val = -1.#IO


indok (2 : 2): [ 1 2 ]
*****************************************

114: aggiungi_ms_rigaindx_i
checkIN (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
indok (2 : 2): [ 1 2 ]
val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
*****************************************

122: seq_i
da = 1, a = 2, incremento = 1


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

123: setdiff_i
tmp_i1 (2 : 6): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
2944: copia_v_i
tmp_i1 (2 : 6): [ 1 2 ]
start = 1
end = 2


indInf (2 : 2): [ 1 2 ]
*****************************************

2946: esiste_v_i
el = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
*****************************************

2946: esiste_v_i
el = 2
indInf (1 : 2): [ 2 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
*****************************************



indInf (0 : 2): [ ]
*****************************************

125: copia_v_indx_d
Sc (2 : 2): [ 0.000 0.000 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 4): [ 0.000 0.000 ]
*****************************************

129: min_v_d
tmp_d1 (2 : 4): [ 0.000 0.000 ]


min = 0.000
*****************************************

130: assegna1_vs_indx_d
Sc (2 : 2): [ 0.000 0.000 ]
indInf (0 : 2): [ ]
val = -1.000


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************

140: somma_vv_d
Sc (2 : 2): [ -1.000 1.500 ]
Sc (2 : 2): [ 0.000 0.000 ]


tmp_d1 (2 : 4): [ -1.000 1.500 ]
*****************************************

141: aggiungi_mv_riga_d
Sc (2 x 2 : 4 x 5): [
	 0.000 0.000
	 0.000 0.000
 ]
riga = 1
tmp_d1 (2 : 4): [ -1.000 1.500 ]


Sc (2 x 2 : 4 x 5): [
	 -1.000 1.500
	 0.000 0.000
 ]
*****************************************

54: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 6): [ ]
*****************************************

55: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 6): [ ]
*****************************************

56: interseca_i
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
*****************************************

73: assegna_v_indxNA_i
Sout (5 : 5): [ 1 1 0 2 0 ]
h (2 : 5): [ 1 2 ]


tmp_i1 (2 : 6): [ 1 1 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


S_new (2 : 2): [ 2 2 ]
*****************************************

21: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

23: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 0.333 0.333 ]
*****************************************

25: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

26: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 0.667 0.667 ]
*****************************************

28: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

29: assegna_v_indxNA_d
Freq_out (7 : 7): [ 2.000 2.000 1.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 2.000 2.000 ]
*****************************************

31: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

32: assegna_v_indxNA_d
Freq_out (7 : 7): [ 2.000 2.000 1.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 1.000 1.000 ]
*****************************************

34: somma_vs_d
old1 (2 : 2): [ 2.000 2.000 ]
s = -1.000


new1 (2 : 2): [ 1.000 1.000 ]
*****************************************

36: somma_vs_d
old2 (2 : 2): [ 1.000 1.000 ]
s = 1.000


new2 (2 : 2): [ 2.000 2.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1.000 1.000 ]
*****************************************

42: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (2 : 2): [ 2.000 2.000 ]
T1 (2 : 2): [ 0.333 0.333 ]


a (2 : 2): [ 1.667 1.667 ]
*****************************************

47: abs1_v_d
a (2 : 2): [ 1.667 1.667 ]


a (2 : 2): [ 1.667 1.667 ]
*****************************************

49: diff_vv_d
new1 (2 : 2): [ 1.000 1.000 ]
T1 (2 : 2): [ 0.333 0.333 ]


b (2 : 2): [ 0.667 0.667 ]
*****************************************

50: abs1_v_d
b (2 : 2): [ 0.667 0.667 ]


b (2 : 2): [ 0.667 0.667 ]
*****************************************

52: which_v_indxna_d
T1 (2 : 2): [ 0.333 0.333 ]
complemento = 0


ind (0 : 2): [ ]
*****************************************

56: assegna1_vs_indx_d
a (2 : 2): [ 1.667 1.667 ]
ind (0 : 2): [ ]
val = 0.000


a (2 : 2): [ 1.667 1.667 ]
*****************************************

58: assegna1_vs_indx_d
b (2 : 2): [ 0.667 0.667 ]
ind (0 : 2): [ ]
val = 0.000


b (2 : 2): [ 0.667 0.667 ]
*****************************************

66: cbind2v_d
a (2 : 2): [ 1.667 1.667 ]
b (2 : 2): [ 0.667 0.667 ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.667 0.667
	 1.667 0.667
 ]
*****************************************

67: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 1.667 0.667
	 1.667 0.667
 ]


m (2 : 2): [ 1.667 1.667 ]
*****************************************

69: f_aux_d
a (2 : 2): [ 1.667 1.667 ]
b (2 : 2): [ 0.667 0.667 ]
m (2 : 2): [ 1.667 1.667 ]
T1 (2 : 2): [ 0.333 0.333 ]


S1 (2 : 2): [ 5.000 5.000 ]
*****************************************

71: diff_vv_d
a (2 : 2): [ 1.667 1.667 ]
toll1 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ 0.667 0.667 ]
*****************************************

72: which_v_indxlt_d
tmp_d1 (2 : 2): [ 0.667 0.667 ]
val = 0.000

ind1 (0 : 2): [ ]
*****************************************

74: diff_vv_d
b (2 : 2): [ 0.667 0.667 ]
toll1 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ -0.333 -0.333 ]
*****************************************

75: which_v_indxgt_d
tmp_d1 (2 : 2): [ -0.333 -0.333 ]
val = 0.000


ind2 (0 : 2): [ ]
*****************************************

77: interseca_i
ind1 (0 : 2): [ ]
ind2 (0 : 2): [ ]


indinf (0 : 0): [ ]
*****************************************

79: assegna1_vs_indx_d
S1 (2 : 2): [ 5.000 5.000 ]
indinf (0 : 0): [ ]
val = -1.#IO


S1 (2 : 2): [ 5.000 5.000 ]
*****************************************

81: assegna1_vs_indx_d
S1 (2 : 2): [ 5.000 5.000 ]
ind (0 : 2): [ ]
val = 0.000


S1 (2 : 2): [ 5.000 5.000 ]
*****************************************

90: diff_vv_d
old2 (2 : 2): [ 1.000 1.000 ]
T2 (2 : 2): [ 0.667 0.667 ]


a (2 : 2): [ 0.333 0.333 ]
*****************************************

91: abs1_v_d
a (2 : 2): [ 0.333 0.333 ]


a (2 : 2): [ 0.333 0.333 ]
*****************************************

93: diff_vv_d
new2 (2 : 2): [ 2.000 2.000 ]
T2 (2 : 2): [ 0.667 0.667 ]


b (2 : 2): [ 1.333 1.333 ]
*****************************************

94: abs1_v_d
b (2 : 2): [ 1.333 1.333 ]


b (2 : 2): [ 1.333 1.333 ]
*****************************************

96: cbind2v_d
a (2 : 2): [ 0.333 0.333 ]
b (2 : 2): [ 1.333 1.333 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]
*****************************************

97: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]


m (2 : 2): [ 1.333 1.333 ]
*****************************************

99: which_v_indxna_d
T2 (2 : 2): [ 0.667 0.667 ]
complemento = 0


ind (0 : 2): [ ]
*****************************************

103: assegna1_vs_indx_d
a (2 : 2): [ 0.333 0.333 ]
ind (0 : 2): [ ]
val = 0.000


a (2 : 2): [ 0.333 0.333 ]
*****************************************

105: assegna1_vs_indx_d
b (2 : 2): [ 1.333 1.333 ]
ind (0 : 2): [ ]
val = 0.000


b (2 : 2): [ 1.333 1.333 ]
*****************************************

107: cbind2v_d
a (2 : 2): [ 0.333 0.333 ]
b (2 : 2): [ 1.333 1.333 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]
*****************************************

108: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]


m (2 : 2): [ 1.333 1.333 ]
*****************************************

110: f_aux_d
a (2 : 2): [ 0.333 0.333 ]
b (2 : 2): [ 1.333 1.333 ]
m (2 : 2): [ 1.333 1.333 ]
T2 (2 : 2): [ 0.667 0.667 ]


S2 (2 : 2): [ -2.000 -2.000 ]
*****************************************

112: diff_vv_d
a (2 : 2): [ 0.333 0.333 ]
toll2 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ -0.667 -0.667 ]
*****************************************

113: which_v_indxlt_d
tmp_d1 (2 : 2): [ -0.667 -0.667 ]
val = 0.000

ind1 (2 : 2): [ 1 2 ]
*****************************************

115: diff_vv_d
b (2 : 2): [ 1.333 1.333 ]
toll2 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ 0.333 0.333 ]
*****************************************

116: which_v_indxgt_d
tmp_d1 (2 : 2): [ 0.333 0.333 ]
val = 0.000


ind2 (2 : 2): [ 1 2 ]
*****************************************

118: interseca_i
ind1 (2 : 2): [ 1 2 ]
ind2 (2 : 2): [ 1 2 ]
2306: esiste_v_i
el = 1
ind2 (2 : 2): [ 1 2 ]


indx = 1
*****************************************

2307: esiste_v_i
el = 1
indinf (2 : 2): [ 0 1 ]


indx = 2
*****************************************

2306: esiste_v_i
el = 2
ind2 (2 : 2): [ 1 2 ]


indx = 2
*****************************************

2307: esiste_v_i
el = 2
indinf (2 : 2): [ 0 1 ]


indx = 0
*****************************************



indinf (1 : 2): [ 2 ]
*****************************************

120: assegna1_vs_indx_d
S2 (2 : 2): [ -2.000 -2.000 ]
indinf (1 : 2): [ 2 ]
val = -1.#IO


S2 (2 : 2): [ -2.000 -1.#IO ]
*****************************************

122: assegna1_vs_indx_d
S2 (2 : 2): [ -2.000 -1.#IO ]
ind (0 : 2): [ ]
val = 0.000


S2 (2 : 2): [ -2.000 -1.#IO ]
*****************************************

131: which_v_indxeq_d
T2 (2 : 2): [ 0.667 0.667 ]
val = 0.000


ind (0 : 2): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (2 : 2): [ -2.000 -1.#IO ]
ind (0 : 2): [ ]
val = -1.#IO


S2 (2 : 2): [ -2.000 -1.#IO ]
*****************************************

135: somma_vv_d
S1 (2 : 2): [ 5.000 5.000 ]
S2 (2 : 2): [ -2.000 -1.#IO ]


Sc (2 : 2): [ 3.000 -1.#IO ]
*****************************************

136: dividi1_vs_d
Sc (2 : 2): [ 3.000 -1.#IO ]
div = 2.000


Sc (2 : 2): [ 1.500 -1.#IO ]
*****************************************


Stringhe allocate: 5 (2783 interne); stringhe deallocate: 0 (2463 interne)

76: which_v_indxne_d
Sc (2 : 2): [ 1.500 -1.#IO ]
val = -1.#IO


indok (1 : 2): [ 1 ]
*****************************************

78: aggiungi_ms_rigaindx_i
checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
riga = 2
indok (1 : 2): [ 1 ]
val = 1


checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
*****************************************

85: seq_i
da = 1, a = 2, incremento = 1


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

86: setdiff_i
tmp_i1 (2 : 6): [ 1 2 ]
indok (1 : 2): [ 1 ]
2944: copia_v_i
tmp_i1 (2 : 6): [ 1 2 ]
start = 1
end = 2


indInf (2 : 2): [ 1 2 ]
*****************************************

2946: esiste_v_i
el = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
*****************************************



indInf (1 : 2): [ 2 ]
*****************************************

88: copia_v_indx_d
Sc (2 : 2): [ 1.500 -1.#IO ]
indok (1 : 2): [ 1 ]


tmp_d1 (1 : 4): [ 1.500 ]
*****************************************

92: min_v_d
tmp_d1 (1 : 4): [ 1.500 ]


min = 1.500
*****************************************

93: assegna1_vs_indx_d
Sc (2 : 2): [ 1.500 -1.#IO ]
indInf (1 : 2): [ 2 ]
val = -1.000


Sc (2 : 2): [ 1.500 -1.000 ]
*****************************************

109: assegna_v_indxNA_i
Sin (5 : 5): [ 1 1 2 0 0 ]
h (2 : 5): [ 1 2 ]


tmp_i1 (2 : 6): [ 1 1 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


S_new (2 : 2): [ 2 2 ]
*****************************************

21: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

23: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

25: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

26: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

28: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

29: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 0.000 0.000 ]
*****************************************

31: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

32: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 0.000 0.000 ]
*****************************************

34: somma_vs_d
old1 (2 : 2): [ 0.000 0.000 ]
s = -1.000


new1 (2 : 2): [ -1.000 -1.000 ]
*****************************************

36: somma_vs_d
old2 (2 : 2): [ 0.000 0.000 ]
s = 1.000


new2 (2 : 2): [ 1.000 1.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1.000 1.000 ]
*****************************************

42: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (2 : 2): [ 0.000 0.000 ]
T1 (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

47: abs1_v_d
a (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

49: diff_vv_d
new1 (2 : 2): [ -1.000 -1.000 ]
T1 (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

50: abs1_v_d
b (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

52: which_v_indxna_d
T1 (2 : 2): [ 1.#QO 1.#QO ]
complemento = 0


ind (2 : 2): [ 1 2 ]
*****************************************

87: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


S1 (2 : 2): [ 0.000 0.000 ]
*****************************************

90: diff_vv_d
old2 (2 : 2): [ 0.000 0.000 ]
T2 (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

91: abs1_v_d
a (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

93: diff_vv_d
new2 (2 : 2): [ 1.000 1.000 ]
T2 (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

94: abs1_v_d
b (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

96: cbind2v_d
a (2 : 2): [ 1.#QO 1.#QO ]
b (2 : 2): [ 1.#QO 1.#QO ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]
*****************************************

97: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]


m (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

99: which_v_indxna_d
T2 (2 : 2): [ 1.#QO 1.#QO ]
complemento = 0


ind (2 : 2): [ 1 2 ]
*****************************************

128: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


S2 (2 : 2): [ 0.000 0.000 ]
*****************************************

131: which_v_indxeq_d
T2 (2 : 2): [ 1.#QO 1.#QO ]
val = 0.000


ind (0 : 2): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (2 : 2): [ 0.000 0.000 ]
ind (0 : 2): [ ]
val = -1.#IO


S2 (2 : 2): [ 0.000 0.000 ]
*****************************************

135: somma_vv_d
S1 (2 : 2): [ 0.000 0.000 ]
S2 (2 : 2): [ 0.000 0.000 ]


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************

136: dividi1_vs_d
Sc (2 : 2): [ 0.000 0.000 ]
div = 2.000


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 5 (2873 interne); stringhe deallocate: 0 (2553 interne)

112: which_v_indxne_d
Sc (2 : 2): [ 0.000 0.000 ]
val = -1.#IO


indok (2 : 2): [ 1 2 ]
*****************************************

114: aggiungi_ms_rigaindx_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2
indok (2 : 2): [ 1 2 ]
val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
*****************************************

122: seq_i
da = 1, a = 2, incremento = 1


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

123: setdiff_i
tmp_i1 (2 : 6): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
2944: copia_v_i
tmp_i1 (2 : 6): [ 1 2 ]
start = 1
end = 2


indInf (2 : 2): [ 1 2 ]
*****************************************

2946: esiste_v_i
el = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
*****************************************

2946: esiste_v_i
el = 2
indInf (1 : 2): [ 2 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
*****************************************



indInf (0 : 2): [ ]
*****************************************

125: copia_v_indx_d
Sc (2 : 2): [ 0.000 0.000 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 4): [ 0.000 0.000 ]
*****************************************

129: min_v_d
tmp_d1 (2 : 4): [ 0.000 0.000 ]


min = 0.000
*****************************************

130: assegna1_vs_indx_d
Sc (2 : 2): [ 0.000 0.000 ]
indInf (0 : 2): [ ]
val = -1.000


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************

140: somma_vv_d
Sc (2 : 2): [ 1.500 -1.000 ]
Sc (2 : 2): [ 0.000 0.000 ]


tmp_d1 (2 : 4): [ 1.500 -1.000 ]
*****************************************

141: aggiungi_mv_riga_d
Sc (2 x 2 : 4 x 5): [
	 -1.000 1.500
	 0.000 0.000
 ]
riga = 2
tmp_d1 (2 : 4): [ 1.500 -1.000 ]


Sc (2 x 2 : 4 x 5): [
	 -1.000 1.500
	 1.500 -1.000
 ]
*****************************************

149: somma_m_d
Sc (2 x 2 : 4 x 5): [
	 -1.000 1.500
	 1.500 -1.000
 ]


ris: 1.000
*****************************************

154: somma_colonne_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


aus (2 : 2): [ 2 2 ]
*****************************************

156: which_v_indxne_i
aus (2 : 2): [ 2 2 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

167: somma_righe_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


rs (2 : 2): [ 2 2 ]
*****************************************

169: ordine_i
rs (2 : 2): [ 2 2 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
*****************************************

182: which_m_rowindxne_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
riga = 1, val = 0


I_add (2 : 4): [ 1 2 ]
*****************************************

184: unione1_i
I (0 : 0): [ ]
I_add (2 : 4): [ 1 2 ]
2858: elimina_doppi_i
I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
*****************************************



ris (2 : 2): [ 1 2 ]
*****************************************

182: which_m_rowindxne_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
riga = 2, val = 0


I_add (2 : 4): [ 1 2 ]
*****************************************

184: unione1_i
ris (2 : 2): [ 1 2 ]
I_add (2 : 4): [ 1 2 ]
2858: elimina_doppi_i
I (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
*****************************************



ris (2 : 4): [ 1 2 ]
*****************************************

197: assegna1_mindxlt_i
checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
val1 = 0
val2 = 0


checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
*****************************************

199: assegna1_m_indxgt_i
checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
val1 = 0
val2 = 1


checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
*****************************************

201: somma_colonne_i
checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


aus (2 : 2): [ 1 1 ]
*****************************************

203: which_v_indxne_i
aus (2 : 2): [ 1 1 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

213: somma_righe_i
checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]


rs (2 : 2): [ 1 1 ]
*****************************************

215: ordine_i
rs (2 : 2): [ 1 1 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
*****************************************

227: which_m_rowindxne_i
checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 1, val = 0


I_add (1 : 4): [ 2 ]
*****************************************

229: unione1_i
ris (0 : 0): [ ]
I_add (1 : 4): [ 2 ]
2858: elimina_doppi_i
I (1 : 1): [ 2 ]


ris (1 : 1): [ 2 ]
*****************************************



ris (1 : 1): [ 2 ]
*****************************************

227: which_m_rowindxne_i
checkOUT (2 x 2 : 2 x 2): [
	 0 1
	 1 0
 ]
riga = 2, val = 0


I_add (1 : 4): [ 1 ]
*****************************************

229: unione1_i
ris (1 : 1): [ 2 ]
I_add (1 : 4): [ 1 ]
2858: elimina_doppi_i
I (2 : 2): [ 2 1 ]


ris (2 : 2): [ 2 1 ]
*****************************************



ris (2 : 2): [ 2 1 ]
*****************************************


Stringhe allocate: 5 (2948 interne); stringhe deallocate: 0 (2703 interne)


Stringhe allocate: 5 (2948 interne); stringhe deallocate: 0 (2718 interne)


*** module22 ***
18: seq_i
da = 2, a = 2, incremento = 1


tmp1_i (1 : 1): [ 2 ]
*****************************************


*** sampleB ***
27: rep_i
tmp1_i (1 : 1): [ 2 ]
ripetizioni = 1


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 5 (2958 interne); stringhe deallocate: 0 (2718 interne)


*** mod2 ***

Stringhe allocate: 5 (2958 interne); stringhe deallocate: 0 (2718 interne)


*** probmod2 ***
33: somma_righe_i
m (2 x 2 : 2 x 2): [
	 0 0
	 1 0
 ]


M_in (2 : 2): [ 0 1 ]
*****************************************

35: somma_colonne_i
m (2 x 2 : 2 x 2): [
	 0 0
	 1 0
 ]


M_out (2 : 2): [ 1 0 ]
*****************************************

54: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


tmp_i1 (0 : 6): [ ]
*****************************************

55: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 6): [ ]
*****************************************

56: interseca_i
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
*****************************************

73: assegna_v_indxNA_i
Sout (5 : 5): [ 1 1 0 2 0 ]
h (2 : 5): [ 1 2 ]


tmp_i1 (2 : 6): [ 1 1 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


S_new (2 : 2): [ 2 2 ]
*****************************************

21: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

23: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 0.333 0.333 ]
*****************************************

25: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

26: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 0.667 0.667 ]
*****************************************

28: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

29: assegna_v_indxNA_d
Freq_out (7 : 7): [ 2.000 2.000 1.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 2.000 2.000 ]
*****************************************

31: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

32: assegna_v_indxNA_d
Freq_out (7 : 7): [ 2.000 2.000 1.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 1.000 1.000 ]
*****************************************

34: somma_vs_d
old1 (2 : 2): [ 2.000 2.000 ]
s = -1.000


new1 (2 : 2): [ 1.000 1.000 ]
*****************************************

36: somma_vs_d
old2 (2 : 2): [ 1.000 1.000 ]
s = 1.000


new2 (2 : 2): [ 2.000 2.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1.000 1.000 ]
*****************************************

42: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (2 : 2): [ 2.000 2.000 ]
T1 (2 : 2): [ 0.333 0.333 ]


a (2 : 2): [ 1.667 1.667 ]
*****************************************

47: abs1_v_d
a (2 : 2): [ 1.667 1.667 ]


a (2 : 2): [ 1.667 1.667 ]
*****************************************

49: diff_vv_d
new1 (2 : 2): [ 1.000 1.000 ]
T1 (2 : 2): [ 0.333 0.333 ]


b (2 : 2): [ 0.667 0.667 ]
*****************************************

50: abs1_v_d
b (2 : 2): [ 0.667 0.667 ]


b (2 : 2): [ 0.667 0.667 ]
*****************************************

52: which_v_indxna_d
T1 (2 : 2): [ 0.333 0.333 ]
complemento = 0


ind (0 : 2): [ ]
*****************************************

56: assegna1_vs_indx_d
a (2 : 2): [ 1.667 1.667 ]
ind (0 : 2): [ ]
val = 0.000


a (2 : 2): [ 1.667 1.667 ]
*****************************************

58: assegna1_vs_indx_d
b (2 : 2): [ 0.667 0.667 ]
ind (0 : 2): [ ]
val = 0.000


b (2 : 2): [ 0.667 0.667 ]
*****************************************

66: cbind2v_d
a (2 : 2): [ 1.667 1.667 ]
b (2 : 2): [ 0.667 0.667 ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.667 0.667
	 1.667 0.667
 ]
*****************************************

67: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 1.667 0.667
	 1.667 0.667
 ]


m (2 : 2): [ 1.667 1.667 ]
*****************************************

69: f_aux_d
a (2 : 2): [ 1.667 1.667 ]
b (2 : 2): [ 0.667 0.667 ]
m (2 : 2): [ 1.667 1.667 ]
T1 (2 : 2): [ 0.333 0.333 ]


S1 (2 : 2): [ 5.000 5.000 ]
*****************************************

71: diff_vv_d
a (2 : 2): [ 1.667 1.667 ]
toll1 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ 0.667 0.667 ]
*****************************************

72: which_v_indxlt_d
tmp_d1 (2 : 2): [ 0.667 0.667 ]
val = 0.000

ind1 (0 : 2): [ ]
*****************************************

74: diff_vv_d
b (2 : 2): [ 0.667 0.667 ]
toll1 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ -0.333 -0.333 ]
*****************************************

75: which_v_indxgt_d
tmp_d1 (2 : 2): [ -0.333 -0.333 ]
val = 0.000


ind2 (0 : 2): [ ]
*****************************************

77: interseca_i
ind1 (0 : 2): [ ]
ind2 (0 : 2): [ ]


indinf (0 : 0): [ ]
*****************************************

79: assegna1_vs_indx_d
S1 (2 : 2): [ 5.000 5.000 ]
indinf (0 : 0): [ ]
val = -1.#IO


S1 (2 : 2): [ 5.000 5.000 ]
*****************************************

81: assegna1_vs_indx_d
S1 (2 : 2): [ 5.000 5.000 ]
ind (0 : 2): [ ]
val = 0.000


S1 (2 : 2): [ 5.000 5.000 ]
*****************************************

90: diff_vv_d
old2 (2 : 2): [ 1.000 1.000 ]
T2 (2 : 2): [ 0.667 0.667 ]


a (2 : 2): [ 0.333 0.333 ]
*****************************************

91: abs1_v_d
a (2 : 2): [ 0.333 0.333 ]


a (2 : 2): [ 0.333 0.333 ]
*****************************************

93: diff_vv_d
new2 (2 : 2): [ 2.000 2.000 ]
T2 (2 : 2): [ 0.667 0.667 ]


b (2 : 2): [ 1.333 1.333 ]
*****************************************

94: abs1_v_d
b (2 : 2): [ 1.333 1.333 ]


b (2 : 2): [ 1.333 1.333 ]
*****************************************

96: cbind2v_d
a (2 : 2): [ 0.333 0.333 ]
b (2 : 2): [ 1.333 1.333 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]
*****************************************

97: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]


m (2 : 2): [ 1.333 1.333 ]
*****************************************

99: which_v_indxna_d
T2 (2 : 2): [ 0.667 0.667 ]
complemento = 0


ind (0 : 2): [ ]
*****************************************

103: assegna1_vs_indx_d
a (2 : 2): [ 0.333 0.333 ]
ind (0 : 2): [ ]
val = 0.000


a (2 : 2): [ 0.333 0.333 ]
*****************************************

105: assegna1_vs_indx_d
b (2 : 2): [ 1.333 1.333 ]
ind (0 : 2): [ ]
val = 0.000


b (2 : 2): [ 1.333 1.333 ]
*****************************************

107: cbind2v_d
a (2 : 2): [ 0.333 0.333 ]
b (2 : 2): [ 1.333 1.333 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]
*****************************************

108: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]


m (2 : 2): [ 1.333 1.333 ]
*****************************************

110: f_aux_d
a (2 : 2): [ 0.333 0.333 ]
b (2 : 2): [ 1.333 1.333 ]
m (2 : 2): [ 1.333 1.333 ]
T2 (2 : 2): [ 0.667 0.667 ]


S2 (2 : 2): [ -2.000 -2.000 ]
*****************************************

112: diff_vv_d
a (2 : 2): [ 0.333 0.333 ]
toll2 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ -0.667 -0.667 ]
*****************************************

113: which_v_indxlt_d
tmp_d1 (2 : 2): [ -0.667 -0.667 ]
val = 0.000

ind1 (2 : 2): [ 1 2 ]
*****************************************

115: diff_vv_d
b (2 : 2): [ 1.333 1.333 ]
toll2 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ 0.333 0.333 ]
*****************************************

116: which_v_indxgt_d
tmp_d1 (2 : 2): [ 0.333 0.333 ]
val = 0.000


ind2 (2 : 2): [ 1 2 ]
*****************************************

118: interseca_i
ind1 (2 : 2): [ 1 2 ]
ind2 (2 : 2): [ 1 2 ]
2306: esiste_v_i
el = 1
ind2 (2 : 2): [ 1 2 ]


indx = 1
*****************************************

2307: esiste_v_i
el = 1
indinf (2 : 2): [ 37827184 1 ]


indx = 2
*****************************************

2306: esiste_v_i
el = 2
ind2 (2 : 2): [ 1 2 ]


indx = 2
*****************************************

2307: esiste_v_i
el = 2
indinf (2 : 2): [ 37827184 1 ]


indx = 0
*****************************************



indinf (1 : 2): [ 2 ]
*****************************************

120: assegna1_vs_indx_d
S2 (2 : 2): [ -2.000 -2.000 ]
indinf (1 : 2): [ 2 ]
val = -1.#IO


S2 (2 : 2): [ -2.000 -1.#IO ]
*****************************************

122: assegna1_vs_indx_d
S2 (2 : 2): [ -2.000 -1.#IO ]
ind (0 : 2): [ ]
val = 0.000


S2 (2 : 2): [ -2.000 -1.#IO ]
*****************************************

131: which_v_indxeq_d
T2 (2 : 2): [ 0.667 0.667 ]
val = 0.000


ind (0 : 2): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (2 : 2): [ -2.000 -1.#IO ]
ind (0 : 2): [ ]
val = -1.#IO


S2 (2 : 2): [ -2.000 -1.#IO ]
*****************************************

135: somma_vv_d
S1 (2 : 2): [ 5.000 5.000 ]
S2 (2 : 2): [ -2.000 -1.#IO ]


Sc (2 : 2): [ 3.000 -1.#IO ]
*****************************************

136: dividi1_vs_d
Sc (2 : 2): [ 3.000 -1.#IO ]
div = 2.000


Sc (2 : 2): [ 1.500 -1.#IO ]
*****************************************


Stringhe allocate: 5 (3123 interne); stringhe deallocate: 0 (2828 interne)

76: which_v_indxne_d
Sc (2 : 2): [ 1.500 -1.#IO ]
val = -1.#IO


indok (1 : 2): [ 1 ]
*****************************************

78: aggiungi_ms_rigaindx_i
checkOUT (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
indok (1 : 2): [ 1 ]
val = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 0
	 0 0
 ]
*****************************************

85: seq_i
da = 1, a = 2, incremento = 1


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

86: setdiff_i
tmp_i1 (2 : 6): [ 1 2 ]
indok (1 : 2): [ 1 ]
2944: copia_v_i
tmp_i1 (2 : 6): [ 1 2 ]
start = 1
end = 2


indInf (2 : 2): [ 1 2 ]
*****************************************

2946: esiste_v_i
el = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
*****************************************



indInf (1 : 2): [ 2 ]
*****************************************

88: copia_v_indx_d
Sc (2 : 2): [ 1.500 -1.#IO ]
indok (1 : 2): [ 1 ]


tmp_d1 (1 : 1): [ 1.500 ]
*****************************************

92: min_v_d
tmp_d1 (1 : 1): [ 1.500 ]


min = 1.500
*****************************************

93: assegna1_vs_indx_d
Sc (2 : 2): [ 1.500 -1.#IO ]
indInf (1 : 2): [ 2 ]
val = -1.000


Sc (2 : 2): [ 1.500 -1.000 ]
*****************************************

136: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


S_in (2 : 2): [ 0.000 0.000 ]
*****************************************

137: aggiungi_ms_riga_i
checkIN (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1, val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
*****************************************

140: somma_vv_d
Sc (2 : 2): [ 1.500 -1.000 ]
S_in (2 : 2): [ 0.000 0.000 ]


tmp_d1 (2 : 4): [ 1.500 -1.000 ]
*****************************************

141: aggiungi_mv_riga_d
Sc (2 x 2 : 2 x 5): [
	 0.000 0.000
	 0.000 0.000
 ]
riga = 1
tmp_d1 (2 : 4): [ 1.500 -1.000 ]


Sc (2 x 2 : 2 x 5): [
	 1.500 -1.000
	 0.000 0.000
 ]
*****************************************

54: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 6): [ ]
*****************************************

55: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 6): [ ]
*****************************************

56: interseca_i
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
*****************************************

100: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************

103: rep_i
scalare_i (1 : 1): [ 1 ]
ripetizioni = 2


tmp_i1 (2 : 6): [ 1 1 ]
*****************************************

104: aggiungi_mv_riga_i
checkOUT (2 x 2 : 2 x 2): [
	 1 0
	 0 0
 ]
riga = 2
tmp_i1 (2 : 6): [ 1 1 ]


checkOUT (2 x 2 : 2 x 2): [
	 1 0
	 1 1
 ]
*****************************************

109: assegna_v_indxNA_i
Sin (5 : 5): [ 1 1 2 0 0 ]
h (2 : 5): [ 1 2 ]


tmp_i1 (2 : 6): [ 1 1 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


S_new (2 : 2): [ 2 2 ]
*****************************************

21: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

23: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

25: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

26: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

28: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

29: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 0.000 0.000 ]
*****************************************

31: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

32: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 0.000 0.000 ]
*****************************************

34: somma_vs_d
old1 (2 : 2): [ 0.000 0.000 ]
s = -1.000


new1 (2 : 2): [ -1.000 -1.000 ]
*****************************************

36: somma_vs_d
old2 (2 : 2): [ 0.000 0.000 ]
s = 1.000


new2 (2 : 2): [ 1.000 1.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1.000 1.000 ]
*****************************************

42: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (2 : 2): [ 0.000 0.000 ]
T1 (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

47: abs1_v_d
a (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

49: diff_vv_d
new1 (2 : 2): [ -1.000 -1.000 ]
T1 (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

50: abs1_v_d
b (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

52: which_v_indxna_d
T1 (2 : 2): [ 1.#QO 1.#QO ]
complemento = 0


ind (2 : 2): [ 1 2 ]
*****************************************

87: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


S1 (2 : 2): [ 0.000 0.000 ]
*****************************************

90: diff_vv_d
old2 (2 : 2): [ 0.000 0.000 ]
T2 (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

91: abs1_v_d
a (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

93: diff_vv_d
new2 (2 : 2): [ 1.000 1.000 ]
T2 (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

94: abs1_v_d
b (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

96: cbind2v_d
a (2 : 2): [ 1.#QO 1.#QO ]
b (2 : 2): [ 1.#QO 1.#QO ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]
*****************************************

97: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]


m (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

99: which_v_indxna_d
T2 (2 : 2): [ 1.#QO 1.#QO ]
complemento = 0


ind (2 : 2): [ 1 2 ]
*****************************************

128: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


S2 (2 : 2): [ 0.000 0.000 ]
*****************************************

131: which_v_indxeq_d
T2 (2 : 2): [ 1.#QO 1.#QO ]
val = 0.000


ind (0 : 2): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (2 : 2): [ 0.000 0.000 ]
ind (0 : 2): [ ]
val = -1.#IO


S2 (2 : 2): [ 0.000 0.000 ]
*****************************************

135: somma_vv_d
S1 (2 : 2): [ 0.000 0.000 ]
S2 (2 : 2): [ 0.000 0.000 ]


S_in (2 : 2): [ 0.000 0.000 ]
*****************************************

136: dividi1_vs_d
S_in (2 : 2): [ 0.000 0.000 ]
div = 2.000


S_in (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 5 (3233 interne); stringhe deallocate: 0 (2918 interne)

112: which_v_indxne_d
S_in (2 : 2): [ 0.000 0.000 ]
val = -1.#IO


indok (2 : 2): [ 1 2 ]
*****************************************

114: aggiungi_ms_rigaindx_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2
indok (2 : 2): [ 1 2 ]
val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
*****************************************

122: seq_i
da = 1, a = 2, incremento = 1


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

123: setdiff_i
tmp_i1 (2 : 6): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
2944: copia_v_i
tmp_i1 (2 : 6): [ 1 2 ]
start = 1
end = 2


indInf (2 : 2): [ 1 2 ]
*****************************************

2946: esiste_v_i
el = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
*****************************************

2946: esiste_v_i
el = 2
indInf (1 : 2): [ 2 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
*****************************************



indInf (0 : 2): [ ]
*****************************************

125: copia_v_indx_d
S_in (2 : 2): [ 0.000 0.000 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 4): [ 0.000 0.000 ]
*****************************************

129: min_v_d
tmp_d1 (2 : 4): [ 0.000 0.000 ]


min = 0.000
*****************************************

130: assegna1_vs_indx_d
S_in (2 : 2): [ 0.000 0.000 ]
indInf (0 : 2): [ ]
val = -1.000


S_in (2 : 2): [ 0.000 0.000 ]
*****************************************

140: somma_vv_d
Sc (2 : 2): [ 0.000 0.000 ]
S_in (2 : 2): [ 0.000 0.000 ]


tmp_d1 (2 : 4): [ 0.000 0.000 ]
*****************************************

141: aggiungi_mv_riga_d
Sc (2 x 2 : 2 x 5): [
	 1.500 -1.000
	 0.000 0.000
 ]
riga = 2
tmp_d1 (2 : 4): [ 0.000 0.000 ]


Sc (2 x 2 : 2 x 5): [
	 1.500 -1.000
	 0.000 0.000
 ]
*****************************************

149: somma_m_d
Sc (2 x 2 : 2 x 5): [
	 1.500 -1.000
	 0.000 0.000
 ]


ris: 0.500
*****************************************

154: somma_colonne_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


aus (2 : 2): [ 2 2 ]
*****************************************

156: which_v_indxne_i
aus (2 : 2): [ 2 2 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

167: somma_righe_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


rs (2 : 2): [ 2 2 ]
*****************************************

169: ordine_i
rs (2 : 2): [ 2 2 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
*****************************************

182: which_m_rowindxne_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
riga = 1, val = 0


I_add (2 : 4): [ 1 2 ]
*****************************************

184: unione1_i
I (0 : 0): [ ]
I_add (2 : 4): [ 1 2 ]
2858: elimina_doppi_i
I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
*****************************************



ris (2 : 2): [ 1 2 ]
*****************************************

182: which_m_rowindxne_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
riga = 2, val = 0


I_add (2 : 4): [ 1 2 ]
*****************************************

184: unione1_i
ris (2 : 2): [ 1 2 ]
I_add (2 : 4): [ 1 2 ]
2858: elimina_doppi_i
I (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
*****************************************



ris (2 : 4): [ 1 2 ]
*****************************************

197: assegna1_mindxlt_i
checkOUT (2 x 2 : 2 x 2): [
	 1 0
	 1 1
 ]
val1 = 0
val2 = 0


checkOUT (2 x 2 : 2 x 2): [
	 1 0
	 1 1
 ]
*****************************************

199: assegna1_m_indxgt_i
checkOUT (2 x 2 : 2 x 2): [
	 1 0
	 1 1
 ]
val1 = 0
val2 = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 0
	 1 1
 ]
*****************************************

201: somma_colonne_i
checkOUT (2 x 2 : 2 x 2): [
	 1 0
	 1 1
 ]


aus (2 : 2): [ 2 1 ]
*****************************************

203: which_v_indxne_i
aus (2 : 2): [ 2 1 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

213: somma_righe_i
checkOUT (2 x 2 : 2 x 2): [
	 1 0
	 1 1
 ]


rs (2 : 2): [ 1 2 ]
*****************************************

215: ordine_i
rs (2 : 2): [ 1 2 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
*****************************************

227: which_m_rowindxne_i
checkOUT (2 x 2 : 2 x 2): [
	 1 0
	 1 1
 ]
riga = 1, val = 0


I_add (1 : 4): [ 1 ]
*****************************************

229: unione1_i
ris (0 : 0): [ ]
I_add (1 : 4): [ 1 ]
2858: elimina_doppi_i
I (1 : 1): [ 1 ]


ris (1 : 1): [ 1 ]
*****************************************



ris (1 : 1): [ 1 ]
*****************************************

227: which_m_rowindxne_i
checkOUT (2 x 2 : 2 x 2): [
	 1 0
	 1 1
 ]
riga = 2, val = 0


I_add (2 : 4): [ 1 2 ]
*****************************************

229: unione1_i
ris (1 : 1): [ 1 ]
I_add (2 : 4): [ 1 2 ]
2858: elimina_doppi_i
I (3 : 3): [ 1 1 2 ]


ris (2 : 3): [ 1 2 ]
*****************************************



ris (2 : 3): [ 1 2 ]
*****************************************


Stringhe allocate: 5 (3308 interne); stringhe deallocate: 0 (3068 interne)


Stringhe allocate: 5 (3308 interne); stringhe deallocate: 0 (3078 interne)


*** module32 ***
25: seq_i
da = 2, a = 2, incremento = 1


tmp1_i (1 : 1): [ 2 ]
*****************************************


*** sampleB ***
27: rep_i
tmp1_i (1 : 1): [ 2 ]
ripetizioni = 1


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 5 (3318 interne); stringhe deallocate: 0 (3078 interne)

28: seq_i
da = 1, a = 1, incremento = 1


tmp1_i (1 : 1): [ 1 ]
*****************************************


*** sampleB ***
27: rep_i
tmp1_i (1 : 1): [ 1 ]
ripetizioni = 1


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (3323 interne); stringhe deallocate: 0 (3078 interne)


*** mod3 ***
34: segmento_v_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
start = 2
end = 2


tmp1_d (1 : 1): [ 0.333 ]
*****************************************

35: somma_v_d
tmp1_d (1 : 1): [ 0.333 ]
canc_NA = 1



ris: 0.333
*****************************************

38: segmento_v_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
start = 2
end = 2


p (1 : 1): [ 0.333 ]
*****************************************

39: dividi1_vs_d
p (1 : 1): [ 0.333 ]
div = 0.333


p (1 : 1): [ 1.000 ]
*****************************************

56: seq_i
da = 1, a = 1, incremento = 1


tmp1_i (1 : 1): [ 1 ]
*****************************************


*** sampleB_p ***
12: rep_i
tmp1_i (1 : 1): [ 1 ]
ripetizioni = 1


ris (1 : 1): [ 1 ]
*****************************************

59: somma_v_i
ris (1 : 1): [ 1 ]
canc_NA = 0



ris: 1
*****************************************

126: seq_i
da = 1, a = 1, incremento = 1


tmp1_i (1 : 1): [ 1 ]
*****************************************

128: assegna1_m_vv_i
m (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
tmp1_i (1 : 1): [ 1 ]
scalare_i (1 : 1): [ 2 ]
val = 1


m (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
*****************************************

130: seq_i
da = 1, a = 1, incremento = 1


indS (1 : 1): [ 1 ]
*****************************************

132: seq_i
da = 1, a = 1, incremento = 1


tmp2_i (1 : 1): [ 1 ]
*****************************************

133: setdiff_i
tmp2_i (1 : 1): [ 1 ]
indS (1 : 1): [ 1 ]
2944: copia_v_i
tmp2_i (1 : 1): [ 1 ]
start = 1
end = 1


indBS (1 : 1): [ 1 ]
*****************************************

2946: esiste_v_i
el = 1
indBS (1 : 1): [ 1 ]


indx = 1
*****************************************

2948: elimina_indx_i
indBS (1 : 1): [ 1 ]
indx = 1


indBS (0 : 1): [ ]
*****************************************



indBS (0 : 1): [ ]
*****************************************



*****************************************
*****************************************


Stringhe allocate: 5 (3368 interne); stringhe deallocate: 0 (3123 interne)


*** probmod2 ***
33: somma_righe_i
m (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


M_in (2 : 2): [ 1 0 ]
*****************************************

35: somma_colonne_i
m (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


M_out (2 : 2): [ 0 1 ]
*****************************************

54: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 6): [ ]
*****************************************

55: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 6): [ ]
*****************************************

56: interseca_i
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
*****************************************

100: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


S_out (2 : 2): [ 0.000 0.000 ]
*****************************************

103: rep_i
scalare_i (1 : 1): [ 1 ]
ripetizioni = 2


tmp_i1 (2 : 6): [ 1 1 ]
*****************************************

104: aggiungi_mv_riga_i
checkOUT (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
tmp_i1 (2 : 6): [ 1 1 ]


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
*****************************************

109: assegna_v_indxNA_i
Sin (5 : 5): [ 1 1 2 0 0 ]
h (2 : 5): [ 1 2 ]


tmp_i1 (2 : 6): [ 1 1 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


S_new (2 : 2): [ 2 2 ]
*****************************************

21: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

23: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

25: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

26: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

28: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

29: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 0.000 0.000 ]
*****************************************

31: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

32: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 0.000 0.000 ]
*****************************************

34: somma_vs_d
old1 (2 : 2): [ 0.000 0.000 ]
s = -1.000


new1 (2 : 2): [ -1.000 -1.000 ]
*****************************************

36: somma_vs_d
old2 (2 : 2): [ 0.000 0.000 ]
s = 1.000


new2 (2 : 2): [ 1.000 1.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1.000 1.000 ]
*****************************************

42: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (2 : 2): [ 0.000 0.000 ]
T1 (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

47: abs1_v_d
a (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

49: diff_vv_d
new1 (2 : 2): [ -1.000 -1.000 ]
T1 (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

50: abs1_v_d
b (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

52: which_v_indxna_d
T1 (2 : 2): [ 1.#QO 1.#QO ]
complemento = 0


ind (2 : 2): [ 1 2 ]
*****************************************

87: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


S1 (2 : 2): [ 0.000 0.000 ]
*****************************************

90: diff_vv_d
old2 (2 : 2): [ 0.000 0.000 ]
T2 (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

91: abs1_v_d
a (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

93: diff_vv_d
new2 (2 : 2): [ 1.000 1.000 ]
T2 (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

94: abs1_v_d
b (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

96: cbind2v_d
a (2 : 2): [ 1.#QO 1.#QO ]
b (2 : 2): [ 1.#QO 1.#QO ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]
*****************************************

97: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]


m (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

99: which_v_indxna_d
T2 (2 : 2): [ 1.#QO 1.#QO ]
complemento = 0


ind (2 : 2): [ 1 2 ]
*****************************************

128: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


S2 (2 : 2): [ 0.000 0.000 ]
*****************************************

131: which_v_indxeq_d
T2 (2 : 2): [ 1.#QO 1.#QO ]
val = 0.000


ind (0 : 2): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (2 : 2): [ 0.000 0.000 ]
ind (0 : 2): [ ]
val = -1.#IO


S2 (2 : 2): [ 0.000 0.000 ]
*****************************************

135: somma_vv_d
S1 (2 : 2): [ 0.000 0.000 ]
S2 (2 : 2): [ 0.000 0.000 ]


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************

136: dividi1_vs_d
Sc (2 : 2): [ 0.000 0.000 ]
div = 2.000


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 5 (3518 interne); stringhe deallocate: 0 (3213 interne)

112: which_v_indxne_d
Sc (2 : 2): [ 0.000 0.000 ]
val = -1.#IO


indok (2 : 2): [ 1 2 ]
*****************************************

114: aggiungi_ms_rigaindx_i
checkIN (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
indok (2 : 2): [ 1 2 ]
val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
*****************************************

122: seq_i
da = 1, a = 2, incremento = 1


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

123: setdiff_i
tmp_i1 (2 : 6): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
2944: copia_v_i
tmp_i1 (2 : 6): [ 1 2 ]
start = 1
end = 2


indInf (2 : 2): [ 1 2 ]
*****************************************

2946: esiste_v_i
el = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
*****************************************

2946: esiste_v_i
el = 2
indInf (1 : 2): [ 2 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
*****************************************



indInf (0 : 2): [ ]
*****************************************

125: copia_v_indx_d
Sc (2 : 2): [ 0.000 0.000 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 2): [ 0.000 0.000 ]
*****************************************

129: min_v_d
tmp_d1 (2 : 2): [ 0.000 0.000 ]


min = 0.000
*****************************************

130: assegna1_vs_indx_d
Sc (2 : 2): [ 0.000 0.000 ]
indInf (0 : 2): [ ]
val = -1.000


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************

140: somma_vv_d
S_out (2 : 2): [ 0.000 0.000 ]
Sc (2 : 2): [ 0.000 0.000 ]


tmp_d1 (2 : 2): [ 0.000 0.000 ]
*****************************************

141: aggiungi_mv_riga_d
Sc (2 x 2 : 2 x 5): [
	 0.000 0.000
	 0.000 0.000
 ]
riga = 1
tmp_d1 (2 : 2): [ 0.000 0.000 ]


Sc (2 x 2 : 2 x 5): [
	 0.000 0.000
	 0.000 0.000
 ]
*****************************************

54: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


tmp_i1 (0 : 6): [ ]
*****************************************

55: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 6): [ ]
*****************************************

56: interseca_i
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
*****************************************

73: assegna_v_indxNA_i
Sout (5 : 5): [ 1 1 0 2 0 ]
h (2 : 5): [ 1 2 ]


tmp_i1 (2 : 6): [ 1 1 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


S_new (2 : 2): [ 2 2 ]
*****************************************

21: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

23: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 0.333 0.333 ]
*****************************************

25: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

26: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 0.667 0.667 ]
*****************************************

28: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

29: assegna_v_indxNA_d
Freq_out (7 : 7): [ 2.000 2.000 1.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 2.000 2.000 ]
*****************************************

31: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

32: assegna_v_indxNA_d
Freq_out (7 : 7): [ 2.000 2.000 1.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 1.000 1.000 ]
*****************************************

34: somma_vs_d
old1 (2 : 2): [ 2.000 2.000 ]
s = -1.000


new1 (2 : 2): [ 1.000 1.000 ]
*****************************************

36: somma_vs_d
old2 (2 : 2): [ 1.000 1.000 ]
s = 1.000


new2 (2 : 2): [ 2.000 2.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1.000 1.000 ]
*****************************************

42: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (2 : 2): [ 2.000 2.000 ]
T1 (2 : 2): [ 0.333 0.333 ]


a (2 : 2): [ 1.667 1.667 ]
*****************************************

47: abs1_v_d
a (2 : 2): [ 1.667 1.667 ]


a (2 : 2): [ 1.667 1.667 ]
*****************************************

49: diff_vv_d
new1 (2 : 2): [ 1.000 1.000 ]
T1 (2 : 2): [ 0.333 0.333 ]


b (2 : 2): [ 0.667 0.667 ]
*****************************************

50: abs1_v_d
b (2 : 2): [ 0.667 0.667 ]


b (2 : 2): [ 0.667 0.667 ]
*****************************************

52: which_v_indxna_d
T1 (2 : 2): [ 0.333 0.333 ]
complemento = 0


ind (0 : 2): [ ]
*****************************************

56: assegna1_vs_indx_d
a (2 : 2): [ 1.667 1.667 ]
ind (0 : 2): [ ]
val = 0.000


a (2 : 2): [ 1.667 1.667 ]
*****************************************

58: assegna1_vs_indx_d
b (2 : 2): [ 0.667 0.667 ]
ind (0 : 2): [ ]
val = 0.000


b (2 : 2): [ 0.667 0.667 ]
*****************************************

66: cbind2v_d
a (2 : 2): [ 1.667 1.667 ]
b (2 : 2): [ 0.667 0.667 ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.667 0.667
	 1.667 0.667
 ]
*****************************************

67: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 1.667 0.667
	 1.667 0.667
 ]


m (2 : 2): [ 1.667 1.667 ]
*****************************************

69: f_aux_d
a (2 : 2): [ 1.667 1.667 ]
b (2 : 2): [ 0.667 0.667 ]
m (2 : 2): [ 1.667 1.667 ]
T1 (2 : 2): [ 0.333 0.333 ]


S1 (2 : 2): [ 5.000 5.000 ]
*****************************************

71: diff_vv_d
a (2 : 2): [ 1.667 1.667 ]
toll1 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ 0.667 0.667 ]
*****************************************

72: which_v_indxlt_d
tmp_d1 (2 : 2): [ 0.667 0.667 ]
val = 0.000

ind1 (0 : 2): [ ]
*****************************************

74: diff_vv_d
b (2 : 2): [ 0.667 0.667 ]
toll1 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ -0.333 -0.333 ]
*****************************************

75: which_v_indxgt_d
tmp_d1 (2 : 2): [ -0.333 -0.333 ]
val = 0.000


ind2 (0 : 2): [ ]
*****************************************

77: interseca_i
ind1 (0 : 2): [ ]
ind2 (0 : 2): [ ]


indinf (0 : 0): [ ]
*****************************************

79: assegna1_vs_indx_d
S1 (2 : 2): [ 5.000 5.000 ]
indinf (0 : 0): [ ]
val = -1.#IO


S1 (2 : 2): [ 5.000 5.000 ]
*****************************************

81: assegna1_vs_indx_d
S1 (2 : 2): [ 5.000 5.000 ]
ind (0 : 2): [ ]
val = 0.000


S1 (2 : 2): [ 5.000 5.000 ]
*****************************************

90: diff_vv_d
old2 (2 : 2): [ 1.000 1.000 ]
T2 (2 : 2): [ 0.667 0.667 ]


a (2 : 2): [ 0.333 0.333 ]
*****************************************

91: abs1_v_d
a (2 : 2): [ 0.333 0.333 ]


a (2 : 2): [ 0.333 0.333 ]
*****************************************

93: diff_vv_d
new2 (2 : 2): [ 2.000 2.000 ]
T2 (2 : 2): [ 0.667 0.667 ]


b (2 : 2): [ 1.333 1.333 ]
*****************************************

94: abs1_v_d
b (2 : 2): [ 1.333 1.333 ]


b (2 : 2): [ 1.333 1.333 ]
*****************************************

96: cbind2v_d
a (2 : 2): [ 0.333 0.333 ]
b (2 : 2): [ 1.333 1.333 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]
*****************************************

97: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]


m (2 : 2): [ 1.333 1.333 ]
*****************************************

99: which_v_indxna_d
T2 (2 : 2): [ 0.667 0.667 ]
complemento = 0


ind (0 : 2): [ ]
*****************************************

103: assegna1_vs_indx_d
a (2 : 2): [ 0.333 0.333 ]
ind (0 : 2): [ ]
val = 0.000


a (2 : 2): [ 0.333 0.333 ]
*****************************************

105: assegna1_vs_indx_d
b (2 : 2): [ 1.333 1.333 ]
ind (0 : 2): [ ]
val = 0.000


b (2 : 2): [ 1.333 1.333 ]
*****************************************

107: cbind2v_d
a (2 : 2): [ 0.333 0.333 ]
b (2 : 2): [ 1.333 1.333 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]
*****************************************

108: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]


m (2 : 2): [ 1.333 1.333 ]
*****************************************

110: f_aux_d
a (2 : 2): [ 0.333 0.333 ]
b (2 : 2): [ 1.333 1.333 ]
m (2 : 2): [ 1.333 1.333 ]
T2 (2 : 2): [ 0.667 0.667 ]


S2 (2 : 2): [ -2.000 -2.000 ]
*****************************************

112: diff_vv_d
a (2 : 2): [ 0.333 0.333 ]
toll2 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ -0.667 -0.667 ]
*****************************************

113: which_v_indxlt_d
tmp_d1 (2 : 2): [ -0.667 -0.667 ]
val = 0.000

ind1 (2 : 2): [ 1 2 ]
*****************************************

115: diff_vv_d
b (2 : 2): [ 1.333 1.333 ]
toll2 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ 0.333 0.333 ]
*****************************************

116: which_v_indxgt_d
tmp_d1 (2 : 2): [ 0.333 0.333 ]
val = 0.000


ind2 (2 : 2): [ 1 2 ]
*****************************************

118: interseca_i
ind1 (2 : 2): [ 1 2 ]
ind2 (2 : 2): [ 1 2 ]
2306: esiste_v_i
el = 1
ind2 (2 : 2): [ 1 2 ]


indx = 1
*****************************************

2307: esiste_v_i
el = 1
indinf (2 : 2): [ 36507656 2425208 ]


indx = 0
*****************************************

2306: esiste_v_i
el = 2
ind2 (2 : 2): [ 1 2 ]


indx = 2
*****************************************

2307: esiste_v_i
el = 2
indinf (2 : 2): [ 1 2425208 ]


indx = 0
*****************************************



indinf (2 : 2): [ 1 2 ]
*****************************************

120: assegna1_vs_indx_d
S2 (2 : 2): [ -2.000 -2.000 ]
indinf (2 : 2): [ 1 2 ]
val = -1.#IO


S2 (2 : 2): [ -1.#IO -1.#IO ]
*****************************************

122: assegna1_vs_indx_d
S2 (2 : 2): [ -1.#IO -1.#IO ]
ind (0 : 2): [ ]
val = 0.000


S2 (2 : 2): [ -1.#IO -1.#IO ]
*****************************************

131: which_v_indxeq_d
T2 (2 : 2): [ 0.667 0.667 ]
val = 0.000


ind (0 : 2): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (2 : 2): [ -1.#IO -1.#IO ]
ind (0 : 2): [ ]
val = -1.#IO


S2 (2 : 2): [ -1.#IO -1.#IO ]
*****************************************

135: somma_vv_d
S1 (2 : 2): [ 5.000 5.000 ]
S2 (2 : 2): [ -1.#IO -1.#IO ]


S_out (2 : 2): [ -1.#IO -1.#IO ]
*****************************************

136: dividi1_vs_d
S_out (2 : 2): [ -1.#IO -1.#IO ]
div = 2.000


S_out (2 : 2): [ -1.#IO -1.#IO ]
*****************************************


Stringhe allocate: 5 (3643 interne); stringhe deallocate: 0 (3323 interne)

76: which_v_indxne_d
S_out (2 : 2): [ -1.#IO -1.#IO ]
val = -1.#IO


indok (0 : 2): [ ]
*****************************************

78: aggiungi_ms_rigaindx_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2
indok (0 : 2): [ ]
val = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
*****************************************

85: seq_i
da = 1, a = 2, incremento = 1


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

86: setdiff_i
tmp_i1 (2 : 6): [ 1 2 ]
indok (0 : 2): [ ]
2944: copia_v_i
tmp_i1 (2 : 6): [ 1 2 ]
start = 1
end = 2


indInf (2 : 2): [ 1 2 ]
*****************************************



indInf (2 : 2): [ 1 2 ]
*****************************************

88: copia_v_indx_d
S_out (2 : 2): [ -1.#IO -1.#IO ]
indok (0 : 2): [ ]


tmp_d1 (0 : 0): [ ]
*****************************************

93: assegna1_vs_indx_d
S_out (2 : 2): [ -1.#IO -1.#IO ]
indInf (2 : 2): [ 1 2 ]
val = -1.000


S_out (2 : 2): [ -1.000 -1.000 ]
*****************************************

136: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************

137: aggiungi_ms_riga_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2, val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
*****************************************

140: somma_vv_d
S_out (2 : 2): [ -1.000 -1.000 ]
Sc (2 : 2): [ 0.000 0.000 ]


tmp_d1 (2 : 2): [ -1.000 -1.000 ]
*****************************************

141: aggiungi_mv_riga_d
Sc (2 x 2 : 2 x 5): [
	 0.000 0.000
	 0.000 0.000
 ]
riga = 2
tmp_d1 (2 : 2): [ -1.000 -1.000 ]


Sc (2 x 2 : 2 x 5): [
	 0.000 0.000
	 -1.000 -1.000
 ]
*****************************************

149: somma_m_d
Sc (2 x 2 : 2 x 5): [
	 0.000 0.000
	 -1.000 -1.000
 ]


ris: -2.000
*****************************************

154: somma_colonne_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


aus (2 : 2): [ 2 2 ]
*****************************************

156: which_v_indxne_i
aus (2 : 2): [ 2 2 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

167: somma_righe_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


rs (2 : 2): [ 2 2 ]
*****************************************

169: ordine_i
rs (2 : 2): [ 2 2 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
*****************************************

182: which_m_rowindxne_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
riga = 1, val = 0


I_add (2 : 4): [ 1 2 ]
*****************************************

184: unione1_i
I (0 : 0): [ ]
I_add (2 : 4): [ 1 2 ]
2858: elimina_doppi_i
I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
*****************************************



ris (2 : 2): [ 1 2 ]
*****************************************

182: which_m_rowindxne_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
riga = 2, val = 0


I_add (2 : 4): [ 1 2 ]
*****************************************

184: unione1_i
ris (2 : 2): [ 1 2 ]
I_add (2 : 4): [ 1 2 ]
2858: elimina_doppi_i
I (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
*****************************************



ris (2 : 4): [ 1 2 ]
*****************************************

197: assegna1_mindxlt_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
val1 = 0
val2 = 0


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
*****************************************

199: assegna1_m_indxgt_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
val1 = 0
val2 = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
*****************************************

201: somma_colonne_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]


aus (2 : 2): [ 1 1 ]
*****************************************

203: which_v_indxne_i
aus (2 : 2): [ 1 1 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

213: somma_righe_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]


rs (2 : 2): [ 2 0 ]
*****************************************

215: ordine_i
rs (2 : 2): [ 2 0 ]
decr = 0


ord_ind (2 : 2): [ 2 1 ]
*****************************************

227: which_m_rowindxne_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2, val = 0


I_add (0 : 4): [ ]
*****************************************

229: unione1_i
ris (0 : 0): [ ]
I_add (0 : 4): [ ]
2858: elimina_doppi_i
I (0 : 0): [ ]


ris (0 : 0): [ ]
*****************************************



ris (0 : 0): [ ]
*****************************************


Stringhe allocate: 5 (3708 interne); stringhe deallocate: 0 (3463 interne)

25: seq_i
da = 2, a = 2, incremento = 1


tmp1_i (1 : 1): [ 2 ]
*****************************************


*** sampleB ***
27: rep_i
tmp1_i (1 : 1): [ 2 ]
ripetizioni = 1


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 5 (3708 interne); stringhe deallocate: 0 (3463 interne)

28: seq_i
da = 1, a = 1, incremento = 1


tmp1_i (1 : 1): [ 1 ]
*****************************************


*** sampleB ***
27: rep_i
tmp1_i (1 : 1): [ 1 ]
ripetizioni = 1


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (3708 interne); stringhe deallocate: 0 (3463 interne)


*** mod3 ***
34: segmento_v_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
start = 2
end = 2


tmp1_d (1 : 1): [ 0.333 ]
*****************************************

35: somma_v_d
tmp1_d (1 : 1): [ 0.333 ]
canc_NA = 1



ris: 0.333
*****************************************

38: segmento_v_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
start = 2
end = 2


p (1 : 1): [ 0.333 ]
*****************************************

39: dividi1_vs_d
p (1 : 1): [ 0.333 ]
div = 0.333


p (1 : 1): [ 1.000 ]
*****************************************

56: seq_i
da = 1, a = 1, incremento = 1


tmp1_i (1 : 1): [ 1 ]
*****************************************


*** sampleB_p ***
12: rep_i
tmp1_i (1 : 1): [ 1 ]
ripetizioni = 1


ris (1 : 1): [ 1 ]
*****************************************

59: somma_v_i
ris (1 : 1): [ 1 ]
canc_NA = 0



ris: 1
*****************************************

126: seq_i
da = 1, a = 1, incremento = 1


tmp1_i (1 : 1): [ 1 ]
*****************************************

128: assegna1_m_vv_i
m (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
tmp1_i (1 : 1): [ 1 ]
scalare_i (1 : 1): [ 2 ]
val = 1


m (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
*****************************************

130: seq_i
da = 1, a = 1, incremento = 1


indS (1 : 1): [ 1 ]
*****************************************

132: seq_i
da = 1, a = 1, incremento = 1


tmp2_i (1 : 1): [ 1 ]
*****************************************

133: setdiff_i
tmp2_i (1 : 1): [ 1 ]
indS (1 : 1): [ 1 ]
2944: copia_v_i
tmp2_i (1 : 1): [ 1 ]
start = 1
end = 1


indBS (1 : 1): [ 1 ]
*****************************************

2946: esiste_v_i
el = 1
indBS (1 : 1): [ 1 ]


indx = 1
*****************************************

2948: elimina_indx_i
indBS (1 : 1): [ 1 ]
indx = 1


indBS (0 : 1): [ ]
*****************************************



indBS (0 : 1): [ ]
*****************************************



*****************************************
*****************************************


Stringhe allocate: 5 (3753 interne); stringhe deallocate: 0 (3508 interne)


*** probmod2 ***
33: somma_righe_i
m (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


M_in (2 : 2): [ 1 0 ]
*****************************************

35: somma_colonne_i
m (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


M_out (2 : 2): [ 0 1 ]
*****************************************

54: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 6): [ ]
*****************************************

55: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 6): [ ]
*****************************************

56: interseca_i
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
*****************************************

100: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


S_out (2 : 2): [ 0.000 0.000 ]
*****************************************

103: rep_i
scalare_i (1 : 1): [ 1 ]
ripetizioni = 2


tmp_i1 (2 : 6): [ 1 1 ]
*****************************************

104: aggiungi_mv_riga_i
checkOUT (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
tmp_i1 (2 : 6): [ 1 1 ]


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
*****************************************

109: assegna_v_indxNA_i
Sin (5 : 5): [ 1 1 2 0 0 ]
h (2 : 5): [ 1 2 ]


tmp_i1 (2 : 6): [ 1 1 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


S_new (2 : 2): [ 2 2 ]
*****************************************

21: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

23: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

25: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

26: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

28: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

29: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 0.000 0.000 ]
*****************************************

31: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

32: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 0.000 0.000 ]
*****************************************

34: somma_vs_d
old1 (2 : 2): [ 0.000 0.000 ]
s = -1.000


new1 (2 : 2): [ -1.000 -1.000 ]
*****************************************

36: somma_vs_d
old2 (2 : 2): [ 0.000 0.000 ]
s = 1.000


new2 (2 : 2): [ 1.000 1.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1.000 1.000 ]
*****************************************

42: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (2 : 2): [ 0.000 0.000 ]
T1 (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

47: abs1_v_d
a (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

49: diff_vv_d
new1 (2 : 2): [ -1.000 -1.000 ]
T1 (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

50: abs1_v_d
b (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

52: which_v_indxna_d
T1 (2 : 2): [ 1.#QO 1.#QO ]
complemento = 0


ind (2 : 2): [ 1 2 ]
*****************************************

87: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


S1 (2 : 2): [ 0.000 0.000 ]
*****************************************

90: diff_vv_d
old2 (2 : 2): [ 0.000 0.000 ]
T2 (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

91: abs1_v_d
a (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

93: diff_vv_d
new2 (2 : 2): [ 1.000 1.000 ]
T2 (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

94: abs1_v_d
b (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

96: cbind2v_d
a (2 : 2): [ 1.#QO 1.#QO ]
b (2 : 2): [ 1.#QO 1.#QO ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]
*****************************************

97: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]


m (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

99: which_v_indxna_d
T2 (2 : 2): [ 1.#QO 1.#QO ]
complemento = 0


ind (2 : 2): [ 1 2 ]
*****************************************

128: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


S2 (2 : 2): [ 0.000 0.000 ]
*****************************************

131: which_v_indxeq_d
T2 (2 : 2): [ 1.#QO 1.#QO ]
val = 0.000


ind (0 : 2): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (2 : 2): [ 0.000 0.000 ]
ind (0 : 2): [ ]
val = -1.#IO


S2 (2 : 2): [ 0.000 0.000 ]
*****************************************

135: somma_vv_d
S1 (2 : 2): [ 0.000 0.000 ]
S2 (2 : 2): [ 0.000 0.000 ]


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************

136: dividi1_vs_d
Sc (2 : 2): [ 0.000 0.000 ]
div = 2.000


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 5 (3903 interne); stringhe deallocate: 0 (3598 interne)

112: which_v_indxne_d
Sc (2 : 2): [ 0.000 0.000 ]
val = -1.#IO


indok (2 : 2): [ 1 2 ]
*****************************************

114: aggiungi_ms_rigaindx_i
checkIN (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
indok (2 : 2): [ 1 2 ]
val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
*****************************************

122: seq_i
da = 1, a = 2, incremento = 1


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

123: setdiff_i
tmp_i1 (2 : 6): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
2944: copia_v_i
tmp_i1 (2 : 6): [ 1 2 ]
start = 1
end = 2


indInf (2 : 2): [ 1 2 ]
*****************************************

2946: esiste_v_i
el = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
*****************************************

2946: esiste_v_i
el = 2
indInf (1 : 2): [ 2 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
*****************************************



indInf (0 : 2): [ ]
*****************************************

125: copia_v_indx_d
Sc (2 : 2): [ 0.000 0.000 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 2): [ 0.000 0.000 ]
*****************************************

129: min_v_d
tmp_d1 (2 : 2): [ 0.000 0.000 ]


min = 0.000
*****************************************

130: assegna1_vs_indx_d
Sc (2 : 2): [ 0.000 0.000 ]
indInf (0 : 2): [ ]
val = -1.000


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************

140: somma_vv_d
S_out (2 : 2): [ 0.000 0.000 ]
Sc (2 : 2): [ 0.000 0.000 ]


tmp_d1 (2 : 2): [ 0.000 0.000 ]
*****************************************

141: aggiungi_mv_riga_d
Sc (2 x 2 : 2 x 5): [
	 0.000 0.000
	 0.000 0.000
 ]
riga = 1
tmp_d1 (2 : 2): [ 0.000 0.000 ]


Sc (2 x 2 : 2 x 5): [
	 0.000 0.000
	 0.000 0.000
 ]
*****************************************

54: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


tmp_i1 (0 : 6): [ ]
*****************************************

55: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 6): [ ]
*****************************************

56: interseca_i
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
*****************************************

73: assegna_v_indxNA_i
Sout (5 : 5): [ 1 1 0 2 0 ]
h (2 : 5): [ 1 2 ]


tmp_i1 (2 : 6): [ 1 1 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


S_new (2 : 2): [ 2 2 ]
*****************************************

21: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

23: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 0.333 0.333 ]
*****************************************

25: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

26: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 0.667 0.667 ]
*****************************************

28: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

29: assegna_v_indxNA_d
Freq_out (7 : 7): [ 2.000 2.000 1.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 2.000 2.000 ]
*****************************************

31: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

32: assegna_v_indxNA_d
Freq_out (7 : 7): [ 2.000 2.000 1.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 1.000 1.000 ]
*****************************************

34: somma_vs_d
old1 (2 : 2): [ 2.000 2.000 ]
s = -1.000


new1 (2 : 2): [ 1.000 1.000 ]
*****************************************

36: somma_vs_d
old2 (2 : 2): [ 1.000 1.000 ]
s = 1.000


new2 (2 : 2): [ 2.000 2.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1.000 1.000 ]
*****************************************

42: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (2 : 2): [ 2.000 2.000 ]
T1 (2 : 2): [ 0.333 0.333 ]


a (2 : 2): [ 1.667 1.667 ]
*****************************************

47: abs1_v_d
a (2 : 2): [ 1.667 1.667 ]


a (2 : 2): [ 1.667 1.667 ]
*****************************************

49: diff_vv_d
new1 (2 : 2): [ 1.000 1.000 ]
T1 (2 : 2): [ 0.333 0.333 ]


b (2 : 2): [ 0.667 0.667 ]
*****************************************

50: abs1_v_d
b (2 : 2): [ 0.667 0.667 ]


b (2 : 2): [ 0.667 0.667 ]
*****************************************

52: which_v_indxna_d
T1 (2 : 2): [ 0.333 0.333 ]
complemento = 0


ind (0 : 2): [ ]
*****************************************

56: assegna1_vs_indx_d
a (2 : 2): [ 1.667 1.667 ]
ind (0 : 2): [ ]
val = 0.000


a (2 : 2): [ 1.667 1.667 ]
*****************************************

58: assegna1_vs_indx_d
b (2 : 2): [ 0.667 0.667 ]
ind (0 : 2): [ ]
val = 0.000


b (2 : 2): [ 0.667 0.667 ]
*****************************************

66: cbind2v_d
a (2 : 2): [ 1.667 1.667 ]
b (2 : 2): [ 0.667 0.667 ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.667 0.667
	 1.667 0.667
 ]
*****************************************

67: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 1.667 0.667
	 1.667 0.667
 ]


m (2 : 2): [ 1.667 1.667 ]
*****************************************

69: f_aux_d
a (2 : 2): [ 1.667 1.667 ]
b (2 : 2): [ 0.667 0.667 ]
m (2 : 2): [ 1.667 1.667 ]
T1 (2 : 2): [ 0.333 0.333 ]


S1 (2 : 2): [ 5.000 5.000 ]
*****************************************

71: diff_vv_d
a (2 : 2): [ 1.667 1.667 ]
toll1 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ 0.667 0.667 ]
*****************************************

72: which_v_indxlt_d
tmp_d1 (2 : 2): [ 0.667 0.667 ]
val = 0.000

ind1 (0 : 2): [ ]
*****************************************

74: diff_vv_d
b (2 : 2): [ 0.667 0.667 ]
toll1 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ -0.333 -0.333 ]
*****************************************

75: which_v_indxgt_d
tmp_d1 (2 : 2): [ -0.333 -0.333 ]
val = 0.000


ind2 (0 : 2): [ ]
*****************************************

77: interseca_i
ind1 (0 : 2): [ ]
ind2 (0 : 2): [ ]


indinf (0 : 0): [ ]
*****************************************

79: assegna1_vs_indx_d
S1 (2 : 2): [ 5.000 5.000 ]
indinf (0 : 0): [ ]
val = -1.#IO


S1 (2 : 2): [ 5.000 5.000 ]
*****************************************

81: assegna1_vs_indx_d
S1 (2 : 2): [ 5.000 5.000 ]
ind (0 : 2): [ ]
val = 0.000


S1 (2 : 2): [ 5.000 5.000 ]
*****************************************

90: diff_vv_d
old2 (2 : 2): [ 1.000 1.000 ]
T2 (2 : 2): [ 0.667 0.667 ]


a (2 : 2): [ 0.333 0.333 ]
*****************************************

91: abs1_v_d
a (2 : 2): [ 0.333 0.333 ]


a (2 : 2): [ 0.333 0.333 ]
*****************************************

93: diff_vv_d
new2 (2 : 2): [ 2.000 2.000 ]
T2 (2 : 2): [ 0.667 0.667 ]


b (2 : 2): [ 1.333 1.333 ]
*****************************************

94: abs1_v_d
b (2 : 2): [ 1.333 1.333 ]


b (2 : 2): [ 1.333 1.333 ]
*****************************************

96: cbind2v_d
a (2 : 2): [ 0.333 0.333 ]
b (2 : 2): [ 1.333 1.333 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]
*****************************************

97: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]


m (2 : 2): [ 1.333 1.333 ]
*****************************************

99: which_v_indxna_d
T2 (2 : 2): [ 0.667 0.667 ]
complemento = 0


ind (0 : 2): [ ]
*****************************************

103: assegna1_vs_indx_d
a (2 : 2): [ 0.333 0.333 ]
ind (0 : 2): [ ]
val = 0.000


a (2 : 2): [ 0.333 0.333 ]
*****************************************

105: assegna1_vs_indx_d
b (2 : 2): [ 1.333 1.333 ]
ind (0 : 2): [ ]
val = 0.000


b (2 : 2): [ 1.333 1.333 ]
*****************************************

107: cbind2v_d
a (2 : 2): [ 0.333 0.333 ]
b (2 : 2): [ 1.333 1.333 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]
*****************************************

108: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]


m (2 : 2): [ 1.333 1.333 ]
*****************************************

110: f_aux_d
a (2 : 2): [ 0.333 0.333 ]
b (2 : 2): [ 1.333 1.333 ]
m (2 : 2): [ 1.333 1.333 ]
T2 (2 : 2): [ 0.667 0.667 ]


S2 (2 : 2): [ -2.000 -2.000 ]
*****************************************

112: diff_vv_d
a (2 : 2): [ 0.333 0.333 ]
toll2 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ -0.667 -0.667 ]
*****************************************

113: which_v_indxlt_d
tmp_d1 (2 : 2): [ -0.667 -0.667 ]
val = 0.000

ind1 (2 : 2): [ 1 2 ]
*****************************************

115: diff_vv_d
b (2 : 2): [ 1.333 1.333 ]
toll2 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ 0.333 0.333 ]
*****************************************

116: which_v_indxgt_d
tmp_d1 (2 : 2): [ 0.333 0.333 ]
val = 0.000


ind2 (2 : 2): [ 1 2 ]
*****************************************

118: interseca_i
ind1 (2 : 2): [ 1 2 ]
ind2 (2 : 2): [ 1 2 ]
2306: esiste_v_i
el = 1
ind2 (2 : 2): [ 1 2 ]


indx = 1
*****************************************

2307: esiste_v_i
el = 1
indinf (2 : 2): [ 36507656 2425208 ]


indx = 0
*****************************************

2306: esiste_v_i
el = 2
ind2 (2 : 2): [ 1 2 ]


indx = 2
*****************************************

2307: esiste_v_i
el = 2
indinf (2 : 2): [ 1 2425208 ]


indx = 0
*****************************************



indinf (2 : 2): [ 1 2 ]
*****************************************

120: assegna1_vs_indx_d
S2 (2 : 2): [ -2.000 -2.000 ]
indinf (2 : 2): [ 1 2 ]
val = -1.#IO


S2 (2 : 2): [ -1.#IO -1.#IO ]
*****************************************

122: assegna1_vs_indx_d
S2 (2 : 2): [ -1.#IO -1.#IO ]
ind (0 : 2): [ ]
val = 0.000


S2 (2 : 2): [ -1.#IO -1.#IO ]
*****************************************

131: which_v_indxeq_d
T2 (2 : 2): [ 0.667 0.667 ]
val = 0.000


ind (0 : 2): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (2 : 2): [ -1.#IO -1.#IO ]
ind (0 : 2): [ ]
val = -1.#IO


S2 (2 : 2): [ -1.#IO -1.#IO ]
*****************************************

135: somma_vv_d
S1 (2 : 2): [ 5.000 5.000 ]
S2 (2 : 2): [ -1.#IO -1.#IO ]


S_out (2 : 2): [ -1.#IO -1.#IO ]
*****************************************

136: dividi1_vs_d
S_out (2 : 2): [ -1.#IO -1.#IO ]
div = 2.000


S_out (2 : 2): [ -1.#IO -1.#IO ]
*****************************************


Stringhe allocate: 5 (4028 interne); stringhe deallocate: 0 (3708 interne)

76: which_v_indxne_d
S_out (2 : 2): [ -1.#IO -1.#IO ]
val = -1.#IO


indok (0 : 2): [ ]
*****************************************

78: aggiungi_ms_rigaindx_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2
indok (0 : 2): [ ]
val = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
*****************************************

85: seq_i
da = 1, a = 2, incremento = 1


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

86: setdiff_i
tmp_i1 (2 : 6): [ 1 2 ]
indok (0 : 2): [ ]
2944: copia_v_i
tmp_i1 (2 : 6): [ 1 2 ]
start = 1
end = 2


indInf (2 : 2): [ 1 2 ]
*****************************************



indInf (2 : 2): [ 1 2 ]
*****************************************

88: copia_v_indx_d
S_out (2 : 2): [ -1.#IO -1.#IO ]
indok (0 : 2): [ ]


tmp_d1 (0 : 0): [ ]
*****************************************

93: assegna1_vs_indx_d
S_out (2 : 2): [ -1.#IO -1.#IO ]
indInf (2 : 2): [ 1 2 ]
val = -1.000


S_out (2 : 2): [ -1.000 -1.000 ]
*****************************************

136: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************

137: aggiungi_ms_riga_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2, val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
*****************************************

140: somma_vv_d
S_out (2 : 2): [ -1.000 -1.000 ]
Sc (2 : 2): [ 0.000 0.000 ]


tmp_d1 (2 : 2): [ -1.000 -1.000 ]
*****************************************

141: aggiungi_mv_riga_d
Sc (2 x 2 : 2 x 5): [
	 0.000 0.000
	 0.000 0.000
 ]
riga = 2
tmp_d1 (2 : 2): [ -1.000 -1.000 ]


Sc (2 x 2 : 2 x 5): [
	 0.000 0.000
	 -1.000 -1.000
 ]
*****************************************

149: somma_m_d
Sc (2 x 2 : 2 x 5): [
	 0.000 0.000
	 -1.000 -1.000
 ]


ris: -2.000
*****************************************

154: somma_colonne_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


aus (2 : 2): [ 2 2 ]
*****************************************

156: which_v_indxne_i
aus (2 : 2): [ 2 2 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

167: somma_righe_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


rs (2 : 2): [ 2 2 ]
*****************************************

169: ordine_i
rs (2 : 2): [ 2 2 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
*****************************************

182: which_m_rowindxne_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
riga = 1, val = 0


I_add (2 : 4): [ 1 2 ]
*****************************************

184: unione1_i
I (0 : 0): [ ]
I_add (2 : 4): [ 1 2 ]
2858: elimina_doppi_i
I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
*****************************************



ris (2 : 2): [ 1 2 ]
*****************************************

182: which_m_rowindxne_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
riga = 2, val = 0


I_add (2 : 4): [ 1 2 ]
*****************************************

184: unione1_i
ris (2 : 2): [ 1 2 ]
I_add (2 : 4): [ 1 2 ]
2858: elimina_doppi_i
I (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
*****************************************



ris (2 : 4): [ 1 2 ]
*****************************************

197: assegna1_mindxlt_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
val1 = 0
val2 = 0


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
*****************************************

199: assegna1_m_indxgt_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
val1 = 0
val2 = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
*****************************************

201: somma_colonne_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]


aus (2 : 2): [ 1 1 ]
*****************************************

203: which_v_indxne_i
aus (2 : 2): [ 1 1 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

213: somma_righe_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]


rs (2 : 2): [ 2 0 ]
*****************************************

215: ordine_i
rs (2 : 2): [ 2 0 ]
decr = 0


ord_ind (2 : 2): [ 2 1 ]
*****************************************

227: which_m_rowindxne_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2, val = 0


I_add (0 : 4): [ ]
*****************************************

229: unione1_i
ris (0 : 0): [ ]
I_add (0 : 4): [ ]
2858: elimina_doppi_i
I (0 : 0): [ ]


ris (0 : 0): [ ]
*****************************************



ris (0 : 0): [ ]
*****************************************


Stringhe allocate: 5 (4093 interne); stringhe deallocate: 0 (3848 interne)

25: seq_i
da = 2, a = 2, incremento = 1


tmp1_i (1 : 1): [ 2 ]
*****************************************


*** sampleB ***
27: rep_i
tmp1_i (1 : 1): [ 2 ]
ripetizioni = 1


ris (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 5 (4093 interne); stringhe deallocate: 0 (3848 interne)

28: seq_i
da = 1, a = 1, incremento = 1


tmp1_i (1 : 1): [ 1 ]
*****************************************


*** sampleB ***
27: rep_i
tmp1_i (1 : 1): [ 1 ]
ripetizioni = 1


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (4093 interne); stringhe deallocate: 0 (3848 interne)


*** mod3 ***
34: segmento_v_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
start = 2
end = 2


tmp1_d (1 : 1): [ 0.333 ]
*****************************************

35: somma_v_d
tmp1_d (1 : 1): [ 0.333 ]
canc_NA = 1



ris: 0.333
*****************************************

38: segmento_v_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
start = 2
end = 2


p (1 : 1): [ 0.333 ]
*****************************************

39: dividi1_vs_d
p (1 : 1): [ 0.333 ]
div = 0.333


p (1 : 1): [ 1.000 ]
*****************************************

56: seq_i
da = 1, a = 1, incremento = 1


tmp1_i (1 : 1): [ 1 ]
*****************************************


*** sampleB_p ***
12: rep_i
tmp1_i (1 : 1): [ 1 ]
ripetizioni = 1


ris (1 : 1): [ 1 ]
*****************************************

59: somma_v_i
ris (1 : 1): [ 1 ]
canc_NA = 0



ris: 1
*****************************************

126: seq_i
da = 1, a = 1, incremento = 1


tmp1_i (1 : 1): [ 1 ]
*****************************************

128: assegna1_m_vv_i
m (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
tmp1_i (1 : 1): [ 1 ]
scalare_i (1 : 1): [ 2 ]
val = 1


m (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
*****************************************

130: seq_i
da = 1, a = 1, incremento = 1


indS (1 : 1): [ 1 ]
*****************************************

132: seq_i
da = 1, a = 1, incremento = 1


tmp2_i (1 : 1): [ 1 ]
*****************************************

133: setdiff_i
tmp2_i (1 : 1): [ 1 ]
indS (1 : 1): [ 1 ]
2944: copia_v_i
tmp2_i (1 : 1): [ 1 ]
start = 1
end = 1


indBS (1 : 1): [ 1 ]
*****************************************

2946: esiste_v_i
el = 1
indBS (1 : 1): [ 1 ]


indx = 1
*****************************************

2948: elimina_indx_i
indBS (1 : 1): [ 1 ]
indx = 1


indBS (0 : 1): [ ]
*****************************************



indBS (0 : 1): [ ]
*****************************************



*****************************************
*****************************************


Stringhe allocate: 5 (4138 interne); stringhe deallocate: 0 (3893 interne)


*** probmod2 ***
33: somma_righe_i
m (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


M_in (2 : 2): [ 1 0 ]
*****************************************

35: somma_colonne_i
m (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


M_out (2 : 2): [ 0 1 ]
*****************************************

54: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 1


tmp_i1 (0 : 6): [ ]
*****************************************

55: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 0


tmp_i2 (0 : 6): [ ]
*****************************************

56: interseca_i
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
*****************************************

100: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


S_out (2 : 2): [ 0.000 0.000 ]
*****************************************

103: rep_i
scalare_i (1 : 1): [ 1 ]
ripetizioni = 2


tmp_i1 (2 : 6): [ 1 1 ]
*****************************************

104: aggiungi_mv_riga_i
checkOUT (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
tmp_i1 (2 : 6): [ 1 1 ]


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
*****************************************

109: assegna_v_indxNA_i
Sin (5 : 5): [ 1 1 2 0 0 ]
h (2 : 5): [ 1 2 ]


tmp_i1 (2 : 6): [ 1 1 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


S_new (2 : 2): [ 2 2 ]
*****************************************

21: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

23: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

25: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

26: assegna_v_indxNA_d
STin (7 : 7): [ 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 1.#QO 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

28: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

29: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 0.000 0.000 ]
*****************************************

31: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

32: assegna_v_indxNA_d
Freq_in (7 : 7): [ 5.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 0.000 0.000 ]
*****************************************

34: somma_vs_d
old1 (2 : 2): [ 0.000 0.000 ]
s = -1.000


new1 (2 : 2): [ -1.000 -1.000 ]
*****************************************

36: somma_vs_d
old2 (2 : 2): [ 0.000 0.000 ]
s = 1.000


new2 (2 : 2): [ 1.000 1.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1.000 1.000 ]
*****************************************

42: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (2 : 2): [ 0.000 0.000 ]
T1 (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

47: abs1_v_d
a (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

49: diff_vv_d
new1 (2 : 2): [ -1.000 -1.000 ]
T1 (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

50: abs1_v_d
b (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

52: which_v_indxna_d
T1 (2 : 2): [ 1.#QO 1.#QO ]
complemento = 0


ind (2 : 2): [ 1 2 ]
*****************************************

87: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


S1 (2 : 2): [ 0.000 0.000 ]
*****************************************

90: diff_vv_d
old2 (2 : 2): [ 0.000 0.000 ]
T2 (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

91: abs1_v_d
a (2 : 2): [ 1.#QO 1.#QO ]


a (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

93: diff_vv_d
new2 (2 : 2): [ 1.000 1.000 ]
T2 (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

94: abs1_v_d
b (2 : 2): [ 1.#QO 1.#QO ]


b (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

96: cbind2v_d
a (2 : 2): [ 1.#QO 1.#QO ]
b (2 : 2): [ 1.#QO 1.#QO ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]
*****************************************

97: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 1.#QO 1.#QO
	 1.#QO 1.#QO
 ]


m (2 : 2): [ 1.#QO 1.#QO ]
*****************************************

99: which_v_indxna_d
T2 (2 : 2): [ 1.#QO 1.#QO ]
complemento = 0


ind (2 : 2): [ 1 2 ]
*****************************************

128: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


S2 (2 : 2): [ 0.000 0.000 ]
*****************************************

131: which_v_indxeq_d
T2 (2 : 2): [ 1.#QO 1.#QO ]
val = 0.000


ind (0 : 2): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (2 : 2): [ 0.000 0.000 ]
ind (0 : 2): [ ]
val = -1.#IO


S2 (2 : 2): [ 0.000 0.000 ]
*****************************************

135: somma_vv_d
S1 (2 : 2): [ 0.000 0.000 ]
S2 (2 : 2): [ 0.000 0.000 ]


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************

136: dividi1_vs_d
Sc (2 : 2): [ 0.000 0.000 ]
div = 2.000


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 5 (4288 interne); stringhe deallocate: 0 (3983 interne)

112: which_v_indxne_d
Sc (2 : 2): [ 0.000 0.000 ]
val = -1.#IO


indok (2 : 2): [ 1 2 ]
*****************************************

114: aggiungi_ms_rigaindx_i
checkIN (2 x 2 : 2 x 2): [
	 0 0
	 0 0
 ]
riga = 1
indok (2 : 2): [ 1 2 ]
val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
*****************************************

122: seq_i
da = 1, a = 2, incremento = 1


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

123: setdiff_i
tmp_i1 (2 : 6): [ 1 2 ]
indok (2 : 2): [ 1 2 ]
2944: copia_v_i
tmp_i1 (2 : 6): [ 1 2 ]
start = 1
end = 2


indInf (2 : 2): [ 1 2 ]
*****************************************

2946: esiste_v_i
el = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
*****************************************

2946: esiste_v_i
el = 2
indInf (1 : 2): [ 2 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (1 : 2): [ 2 ]
indx = 1


indInf (0 : 2): [ ]
*****************************************



indInf (0 : 2): [ ]
*****************************************

125: copia_v_indx_d
Sc (2 : 2): [ 0.000 0.000 ]
indok (2 : 2): [ 1 2 ]


tmp_d1 (2 : 2): [ 0.000 0.000 ]
*****************************************

129: min_v_d
tmp_d1 (2 : 2): [ 0.000 0.000 ]


min = 0.000
*****************************************

130: assegna1_vs_indx_d
Sc (2 : 2): [ 0.000 0.000 ]
indInf (0 : 2): [ ]
val = -1.000


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************

140: somma_vv_d
S_out (2 : 2): [ 0.000 0.000 ]
Sc (2 : 2): [ 0.000 0.000 ]


tmp_d1 (2 : 2): [ 0.000 0.000 ]
*****************************************

141: aggiungi_mv_riga_d
Sc (2 x 2 : 2 x 5): [
	 0.000 0.000
	 0.000 0.000
 ]
riga = 1
tmp_d1 (2 : 2): [ 0.000 0.000 ]


Sc (2 x 2 : 2 x 5): [
	 0.000 0.000
	 0.000 0.000
 ]
*****************************************

54: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 1, val = 0


tmp_i1 (0 : 6): [ ]
*****************************************

55: which_m_colindxeq_i
memory (2 x 3 : 2 x 3): [
	 -2147483648 -2147483648 -2147483648
	 -2147483648 -2147483648 -2147483648
 ]
colonna = 2, val = 1


tmp_i2 (0 : 6): [ ]
*****************************************

56: interseca_i
tmp_i1 (0 : 6): [ ]
tmp_i2 (0 : 6): [ ]


ind1 (0 : 0): [ ]
*****************************************

73: assegna_v_indxNA_i
Sout (5 : 5): [ 1 1 0 2 0 ]
h (2 : 5): [ 1 2 ]


tmp_i1 (2 : 6): [ 1 1 ]
*****************************************


*** score1 ***
19: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


S_new (2 : 2): [ 2 2 ]
*****************************************

21: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

23: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


T1 (2 : 2): [ 0.333 0.333 ]
*****************************************

25: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

26: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


T2 (2 : 2): [ 0.667 0.667 ]
*****************************************

28: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

29: assegna_v_indxNA_d
Freq_out (7 : 7): [ 2.000 2.000 1.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


old1 (2 : 2): [ 2.000 2.000 ]
*****************************************

31: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

32: assegna_v_indxNA_d
Freq_out (7 : 7): [ 2.000 2.000 1.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


old2 (2 : 2): [ 1.000 1.000 ]
*****************************************

34: somma_vs_d
old1 (2 : 2): [ 2.000 2.000 ]
s = -1.000


new1 (2 : 2): [ 1.000 1.000 ]
*****************************************

36: somma_vs_d
old2 (2 : 2): [ 1.000 1.000 ]
s = 1.000


new2 (2 : 2): [ 2.000 2.000 ]
*****************************************

38: somma_vs_i
tmp_i1 (2 : 6): [ 1 1 ]
s = 1.000


tmp_i1 (2 : 2): [ 2 2 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 2 2 ]


toll1 (2 : 2): [ 1.000 1.000 ]
*****************************************

42: somma_vs_i
S_new (2 : 2): [ 2 2 ]
s = 1.000


tmp_i1 (2 : 2): [ 3 3 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (2 : 2): [ 3 3 ]


toll2 (2 : 2): [ 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (2 : 2): [ 2.000 2.000 ]
T1 (2 : 2): [ 0.333 0.333 ]


a (2 : 2): [ 1.667 1.667 ]
*****************************************

47: abs1_v_d
a (2 : 2): [ 1.667 1.667 ]


a (2 : 2): [ 1.667 1.667 ]
*****************************************

49: diff_vv_d
new1 (2 : 2): [ 1.000 1.000 ]
T1 (2 : 2): [ 0.333 0.333 ]


b (2 : 2): [ 0.667 0.667 ]
*****************************************

50: abs1_v_d
b (2 : 2): [ 0.667 0.667 ]


b (2 : 2): [ 0.667 0.667 ]
*****************************************

52: which_v_indxna_d
T1 (2 : 2): [ 0.333 0.333 ]
complemento = 0


ind (0 : 2): [ ]
*****************************************

56: assegna1_vs_indx_d
a (2 : 2): [ 1.667 1.667 ]
ind (0 : 2): [ ]
val = 0.000


a (2 : 2): [ 1.667 1.667 ]
*****************************************

58: assegna1_vs_indx_d
b (2 : 2): [ 0.667 0.667 ]
ind (0 : 2): [ ]
val = 0.000


b (2 : 2): [ 0.667 0.667 ]
*****************************************

66: cbind2v_d
a (2 : 2): [ 1.667 1.667 ]
b (2 : 2): [ 0.667 0.667 ]


tmpm_d (2 x 2 : 2 x 2): [
	 1.667 0.667
	 1.667 0.667
 ]
*****************************************

67: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 1.667 0.667
	 1.667 0.667
 ]


m (2 : 2): [ 1.667 1.667 ]
*****************************************

69: f_aux_d
a (2 : 2): [ 1.667 1.667 ]
b (2 : 2): [ 0.667 0.667 ]
m (2 : 2): [ 1.667 1.667 ]
T1 (2 : 2): [ 0.333 0.333 ]


S1 (2 : 2): [ 5.000 5.000 ]
*****************************************

71: diff_vv_d
a (2 : 2): [ 1.667 1.667 ]
toll1 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ 0.667 0.667 ]
*****************************************

72: which_v_indxlt_d
tmp_d1 (2 : 2): [ 0.667 0.667 ]
val = 0.000

ind1 (0 : 2): [ ]
*****************************************

74: diff_vv_d
b (2 : 2): [ 0.667 0.667 ]
toll1 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ -0.333 -0.333 ]
*****************************************

75: which_v_indxgt_d
tmp_d1 (2 : 2): [ -0.333 -0.333 ]
val = 0.000


ind2 (0 : 2): [ ]
*****************************************

77: interseca_i
ind1 (0 : 2): [ ]
ind2 (0 : 2): [ ]


indinf (0 : 0): [ ]
*****************************************

79: assegna1_vs_indx_d
S1 (2 : 2): [ 5.000 5.000 ]
indinf (0 : 0): [ ]
val = -1.#IO


S1 (2 : 2): [ 5.000 5.000 ]
*****************************************

81: assegna1_vs_indx_d
S1 (2 : 2): [ 5.000 5.000 ]
ind (0 : 2): [ ]
val = 0.000


S1 (2 : 2): [ 5.000 5.000 ]
*****************************************

90: diff_vv_d
old2 (2 : 2): [ 1.000 1.000 ]
T2 (2 : 2): [ 0.667 0.667 ]


a (2 : 2): [ 0.333 0.333 ]
*****************************************

91: abs1_v_d
a (2 : 2): [ 0.333 0.333 ]


a (2 : 2): [ 0.333 0.333 ]
*****************************************

93: diff_vv_d
new2 (2 : 2): [ 2.000 2.000 ]
T2 (2 : 2): [ 0.667 0.667 ]


b (2 : 2): [ 1.333 1.333 ]
*****************************************

94: abs1_v_d
b (2 : 2): [ 1.333 1.333 ]


b (2 : 2): [ 1.333 1.333 ]
*****************************************

96: cbind2v_d
a (2 : 2): [ 0.333 0.333 ]
b (2 : 2): [ 1.333 1.333 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]
*****************************************

97: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]


m (2 : 2): [ 1.333 1.333 ]
*****************************************

99: which_v_indxna_d
T2 (2 : 2): [ 0.667 0.667 ]
complemento = 0


ind (0 : 2): [ ]
*****************************************

103: assegna1_vs_indx_d
a (2 : 2): [ 0.333 0.333 ]
ind (0 : 2): [ ]
val = 0.000


a (2 : 2): [ 0.333 0.333 ]
*****************************************

105: assegna1_vs_indx_d
b (2 : 2): [ 1.333 1.333 ]
ind (0 : 2): [ ]
val = 0.000


b (2 : 2): [ 1.333 1.333 ]
*****************************************

107: cbind2v_d
a (2 : 2): [ 0.333 0.333 ]
b (2 : 2): [ 1.333 1.333 ]


tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]
*****************************************

108: max_righe_d
tmpm_d (2 x 2 : 2 x 2): [
	 0.333 1.333
	 0.333 1.333
 ]


m (2 : 2): [ 1.333 1.333 ]
*****************************************

110: f_aux_d
a (2 : 2): [ 0.333 0.333 ]
b (2 : 2): [ 1.333 1.333 ]
m (2 : 2): [ 1.333 1.333 ]
T2 (2 : 2): [ 0.667 0.667 ]


S2 (2 : 2): [ -2.000 -2.000 ]
*****************************************

112: diff_vv_d
a (2 : 2): [ 0.333 0.333 ]
toll2 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ -0.667 -0.667 ]
*****************************************

113: which_v_indxlt_d
tmp_d1 (2 : 2): [ -0.667 -0.667 ]
val = 0.000

ind1 (2 : 2): [ 1 2 ]
*****************************************

115: diff_vv_d
b (2 : 2): [ 1.333 1.333 ]
toll2 (2 : 2): [ 1.000 1.000 ]


tmp_d1 (2 : 2): [ 0.333 0.333 ]
*****************************************

116: which_v_indxgt_d
tmp_d1 (2 : 2): [ 0.333 0.333 ]
val = 0.000


ind2 (2 : 2): [ 1 2 ]
*****************************************

118: interseca_i
ind1 (2 : 2): [ 1 2 ]
ind2 (2 : 2): [ 1 2 ]
2306: esiste_v_i
el = 1
ind2 (2 : 2): [ 1 2 ]


indx = 1
*****************************************

2307: esiste_v_i
el = 1
indinf (2 : 2): [ 0 1 ]


indx = 2
*****************************************

2306: esiste_v_i
el = 2
ind2 (2 : 2): [ 1 2 ]


indx = 2
*****************************************

2307: esiste_v_i
el = 2
indinf (2 : 2): [ 0 1 ]


indx = 0
*****************************************



indinf (1 : 2): [ 2 ]
*****************************************

120: assegna1_vs_indx_d
S2 (2 : 2): [ -2.000 -2.000 ]
indinf (1 : 2): [ 2 ]
val = -1.#IO


S2 (2 : 2): [ -2.000 -1.#IO ]
*****************************************

122: assegna1_vs_indx_d
S2 (2 : 2): [ -2.000 -1.#IO ]
ind (0 : 2): [ ]
val = 0.000


S2 (2 : 2): [ -2.000 -1.#IO ]
*****************************************

131: which_v_indxeq_d
T2 (2 : 2): [ 0.667 0.667 ]
val = 0.000


ind (0 : 2): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (2 : 2): [ -2.000 -1.#IO ]
ind (0 : 2): [ ]
val = -1.#IO


S2 (2 : 2): [ -2.000 -1.#IO ]
*****************************************

135: somma_vv_d
S1 (2 : 2): [ 5.000 5.000 ]
S2 (2 : 2): [ -2.000 -1.#IO ]


S_out (2 : 2): [ 3.000 -1.#IO ]
*****************************************

136: dividi1_vs_d
S_out (2 : 2): [ 3.000 -1.#IO ]
div = 2.000


S_out (2 : 2): [ 1.500 -1.#IO ]
*****************************************


Stringhe allocate: 5 (4413 interne); stringhe deallocate: 0 (4093 interne)

76: which_v_indxne_d
S_out (2 : 2): [ 1.500 -1.#IO ]
val = -1.#IO


indok (1 : 2): [ 1 ]
*****************************************

78: aggiungi_ms_rigaindx_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2
indok (1 : 2): [ 1 ]
val = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 0
 ]
*****************************************

85: seq_i
da = 1, a = 2, incremento = 1


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

86: setdiff_i
tmp_i1 (2 : 6): [ 1 2 ]
indok (1 : 2): [ 1 ]
2944: copia_v_i
tmp_i1 (2 : 6): [ 1 2 ]
start = 1
end = 2


indInf (2 : 2): [ 1 2 ]
*****************************************

2946: esiste_v_i
el = 1
indInf (2 : 2): [ 1 2 ]


indx = 1
*****************************************

2948: elimina_indx_i
indInf (2 : 2): [ 1 2 ]
indx = 1


indInf (1 : 2): [ 2 ]
*****************************************



indInf (1 : 2): [ 2 ]
*****************************************

88: copia_v_indx_d
S_out (2 : 2): [ 1.500 -1.#IO ]
indok (1 : 2): [ 1 ]


tmp_d1 (1 : 2): [ 1.500 ]
*****************************************

92: min_v_d
tmp_d1 (1 : 2): [ 1.500 ]


min = 1.500
*****************************************

93: assegna1_vs_indx_d
S_out (2 : 2): [ 1.500 -1.#IO ]
indInf (1 : 2): [ 2 ]
val = -1.000


S_out (2 : 2): [ 1.500 -1.000 ]
*****************************************

136: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


Sc (2 : 2): [ 0.000 0.000 ]
*****************************************

137: aggiungi_ms_riga_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 0 0
 ]
riga = 2, val = 1


checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
*****************************************

140: somma_vv_d
S_out (2 : 2): [ 1.500 -1.000 ]
Sc (2 : 2): [ 0.000 0.000 ]


tmp_d1 (2 : 2): [ 1.500 -1.000 ]
*****************************************

141: aggiungi_mv_riga_d
Sc (2 x 2 : 2 x 5): [
	 0.000 0.000
	 0.000 0.000
 ]
riga = 2
tmp_d1 (2 : 2): [ 1.500 -1.000 ]


Sc (2 x 2 : 2 x 5): [
	 0.000 0.000
	 1.500 -1.000
 ]
*****************************************

149: somma_m_d
Sc (2 x 2 : 2 x 5): [
	 0.000 0.000
	 1.500 -1.000
 ]


ris: 0.500
*****************************************

154: somma_colonne_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


aus (2 : 2): [ 2 2 ]
*****************************************

156: which_v_indxne_i
aus (2 : 2): [ 2 2 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

167: somma_righe_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]


rs (2 : 2): [ 2 2 ]
*****************************************

169: ordine_i
rs (2 : 2): [ 2 2 ]
decr = 0


ord_ind (2 : 2): [ 1 2 ]
*****************************************

182: which_m_rowindxne_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
riga = 1, val = 0


I_add (2 : 4): [ 1 2 ]
*****************************************

184: unione1_i
I (0 : 0): [ ]
I_add (2 : 4): [ 1 2 ]
2858: elimina_doppi_i
I (2 : 2): [ 1 2 ]


ris (2 : 2): [ 1 2 ]
*****************************************



ris (2 : 2): [ 1 2 ]
*****************************************

182: which_m_rowindxne_i
checkIN (2 x 2 : 2 x 2): [
	 1 1
	 1 1
 ]
riga = 2, val = 0


I_add (2 : 4): [ 1 2 ]
*****************************************

184: unione1_i
ris (2 : 2): [ 1 2 ]
I_add (2 : 4): [ 1 2 ]
2858: elimina_doppi_i
I (4 : 4): [ 1 2 1 2 ]


ris (2 : 4): [ 1 2 ]
*****************************************



ris (2 : 4): [ 1 2 ]
*****************************************

197: assegna1_mindxlt_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 0
 ]
val1 = 0
val2 = 0


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 0
 ]
*****************************************

199: assegna1_m_indxgt_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 0
 ]
val1 = 0
val2 = 1


checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 0
 ]
*****************************************

201: somma_colonne_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 0
 ]


aus (2 : 2): [ 2 1 ]
*****************************************

203: which_v_indxne_i
aus (2 : 2): [ 2 1 ]
val = 0


tmp_i1 (2 : 6): [ 1 2 ]
*****************************************

213: somma_righe_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 0
 ]


rs (2 : 2): [ 2 1 ]
*****************************************

215: ordine_i
rs (2 : 2): [ 2 1 ]
decr = 0


ord_ind (2 : 2): [ 2 1 ]
*****************************************

227: which_m_rowindxne_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 0
 ]
riga = 2, val = 0


I_add (1 : 4): [ 1 ]
*****************************************

229: unione1_i
ris (0 : 0): [ ]
I_add (1 : 4): [ 1 ]
2858: elimina_doppi_i
I (1 : 1): [ 1 ]


ris (1 : 1): [ 1 ]
*****************************************



ris (1 : 1): [ 1 ]
*****************************************

227: which_m_rowindxne_i
checkOUT (2 x 2 : 2 x 2): [
	 1 1
	 1 0
 ]
riga = 1, val = 0


I_add (2 : 4): [ 1 2 ]
*****************************************

229: unione1_i
ris (1 : 1): [ 1 ]
I_add (2 : 4): [ 1 2 ]
2858: elimina_doppi_i
I (3 : 3): [ 1 1 2 ]


ris (2 : 3): [ 1 2 ]
*****************************************



ris (2 : 3): [ 1 2 ]
*****************************************


Stringhe allocate: 5 (4488 interne); stringhe deallocate: 0 (4243 interne)

64: seq_i
da = 2, a = 2, incremento = 1


ris3.indices (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 5 (4488 interne); stringhe deallocate: 0 (4258 interne)

130: vettore3s_d
el1 = 0.500, el2 = 0.250, el3 = 0.250


prob_mod (3 : 3): [ 0.500 0.250 0.250 ]
*****************************************

132: assegna1_v_indxeq_d
prob_mod (3 : 3): [ 0.500 0.250 0.250 ]
val1 = 0.000
val2 = 1.#QO


prob_mod (3 : 3): [ 0.500 0.250 0.250 ]
*****************************************

134: which_v_indxna_d
prob_mod (3 : 3): [ 0.500 0.250 0.250 ]
complemento = 1


ind (3 : 3): [ 1 2 3 ]
*****************************************

140: copia_v_indx_d
prob_mod (3 : 3): [ 0.500 0.250 0.250 ]
ind (3 : 3): [ 1 2 3 ]


tmp1_d (3 : 16): [ 0.500 0.250 0.250 ]
*****************************************

141: min_v_d
tmp1_d (3 : 16): [ 0.500 0.250 0.250 ]


min = 0.250
*****************************************

147: assegna1_v_indxNA_d
prob_mod (3 : 3): [ 0.500 0.250 0.250 ]
val = 0.000
complemento = 0


prob_mod (3 : 3): [ 0.500 0.250 0.250 ]
*****************************************

149: somma_v_d
prob_mod (3 : 3): [ 0.500 0.250 0.250 ]
canc_NA = 0



ris: 1.000
*****************************************

149: dividi1_vs_d
prob_mod (3 : 3): [ 0.500 0.250 0.250 ]
div = 1.000


prob_mod (3 : 3): [ 0.500 0.250 0.250 ]
*****************************************

151: vettore3s_i
el1 = 1, el2 = 2, el3 = 3


tmp1_i (3 : 3): [ 1 2 3 ]
*****************************************


*** sampleB_p ***

*** sample_p ***
tmp1_i (3 : 3): [ 1 2 3 ]
k = 1, replace = 0
prob_mod (3 : 3): [ 0.500 0.250 0.250 ]


ris (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 5 (4488 interne); stringhe deallocate: 0 (4258 interne)


*** assign_nodes2 ***
18: copia_v_i
h (2 : 5): [ 1 2 ]
start = 1
end = 2


or_h (2 : 2): [ 1 2 ]
*****************************************

20: seq_i
da = 1, a = 2, incremento = 1


aus_h (2 : 2): [ 1 2 ]
*****************************************

26: rep_i
scalare_i (1 : 1): [ 0 ]
ripetizioni = 2


index (2 : 2): [ 0 0 ]
*****************************************

28: somma_righe_i
m (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]


M_in (2 : 2): [ 1 0 ]
*****************************************

30: ordine_i
M_in (2 : 2): [ 1 0 ]
decr = 1
3454: rev_i
Ord (2 : 2): [ 2 1 ]


Ord (2 : 2): [ 1 2 ]
*****************************************



Ord (2 : 2): [ 1 2 ]
*****************************************

35: riga_d
Sc (2 x 2 : 2 x 5): [
	 0.000 0.000
	 1.500 -1.000
 ]
r = 1

p (2 : 2): [ 0.000 0.000 ]
*****************************************

37: which_v_indxle_d
p (2 : 2): [ 0.000 0.000 ]
val = 0.000


tmp_i (2 : 2): [ 1 2 ]
*****************************************

40: min_v_d
p (2 : 2): [ 0.000 0.000 ]


min = 0.000
*****************************************

41: somma1_vs_d
p (2 : 2): [ 0.000 0.000 ]
s = 4.000


p (2 : 2): [ 4.000 4.000 ]
*****************************************

44: assegna_v_indxNA_i
Sin (5 : 5): [ 1 1 2 0 0 ]
h (2 : 5): [ 1 2 ]


Sin_h (2 : 2): [ 1 1 ]
*****************************************

49: which_v_indxgt_i
Sin_h (2 : 2): [ 1 1 ]
val = 4


ind (0 : 2): [ ]
*****************************************

55: assegna_v_indxNA_d
p (2 : 2): [ 4.000 4.000 ]
aus_h (2 : 2): [ 1 2 ]


tmp_d (2 : 2): [ 4.000 4.000 ]
*****************************************

56: somma_v_d
tmp_d (2 : 2): [ 4.000 4.000 ]
canc_NA = 0



ris: 8.000
*****************************************

57: dividi_vs_d
tmp_d (2 : 2): [ 4.000 4.000 ]
div = 8.000


p (2 : 2): [ 0.500 0.500 ]
*****************************************


*** sampleB_p ***

*** sample_p ***
h (2 : 5): [ 1 2 ]
k = 1, replace = 0
p (2 : 2): [ 0.500 0.500 ]


ris (1 : 1): [ 1 ]
*****************************************


Stringhe allocate: 5 (4553 interne); stringhe deallocate: 0 (4263 interne)

64: setdiff1_i
h (2 : 5): [ 1 2 ]
ris (1 : 1): [ 1 ]
1885: esiste_v_i
el = 1
h (2 : 5): [ 1 2 ]


indx = 1
*****************************************

1887: elimina_indx_i
h (2 : 5): [ 1 2 ]
indx = 1


h (1 : 5): [ 2 ]
*****************************************



h (1 : 5): [ 2 ]
*****************************************

66: which_vv_indxeq_i
or_h (2 : 2): [ 1 2 ]
ris (1 : 1): [ 1 ]


tmp_i (1 : 2): [ 1 ]
*****************************************

67: setdiff1_i
aus_h (2 : 2): [ 1 2 ]
tmp_i (1 : 2): [ 1 ]
1885: esiste_v_i
el = 1
aus_h (2 : 2): [ 1 2 ]


indx = 1
*****************************************

1887: elimina_indx_i
aus_h (2 : 2): [ 1 2 ]
indx = 1


aus_h (1 : 2): [ 2 ]
*****************************************



aus_h (1 : 2): [ 2 ]
*****************************************

35: riga_d
Sc (2 x 2 : 2 x 5): [
	 0.000 0.000
	 1.500 -1.000
 ]
r = 2

p (2 : 2): [ 1.500 -1.000 ]
*****************************************

37: which_v_indxle_d
p (2 : 2): [ 1.500 -1.000 ]
val = 0.000


tmp_i (1 : 2): [ 2 ]
*****************************************

40: min_v_d
p (2 : 2): [ 1.500 -1.000 ]


min = -1.000
*****************************************

41: somma1_vs_d
p (2 : 2): [ 1.500 -1.000 ]
s = 5.000


p (2 : 2): [ 6.500 4.000 ]
*****************************************

44: assegna_v_indxNA_i
Sin (5 : 5): [ 1 1 2 0 0 ]
h (1 : 5): [ 2 ]


Sin_h (1 : 2): [ 1 ]
*****************************************

49: which_v_indxgt_i
Sin_h (1 : 2): [ 1 ]
val = 5


ind (0 : 2): [ ]
*****************************************

55: assegna_v_indxNA_d
p (2 : 2): [ 6.500 4.000 ]
aus_h (1 : 2): [ 2 ]


tmp_d (1 : 2): [ 4.000 ]
*****************************************

56: somma_v_d
tmp_d (1 : 2): [ 4.000 ]
canc_NA = 0



ris: 4.000
*****************************************

57: dividi_vs_d
tmp_d (1 : 2): [ 4.000 ]
div = 4.000


p (1 : 2): [ 1.000 ]
*****************************************


*** sampleB_p ***
12: rep_i
h (1 : 5): [ 2 ]
ripetizioni = 1


ris (1 : 1): [ 2 ]
*****************************************

64: setdiff1_i
h (1 : 5): [ 2 ]
ris (1 : 1): [ 2 ]
1885: esiste_v_i
el = 2
h (1 : 5): [ 2 ]


indx = 1
*****************************************

1887: elimina_indx_i
h (1 : 5): [ 2 ]
indx = 1


h (0 : 5): [ ]
*****************************************



h (0 : 5): [ ]
*****************************************

66: which_vv_indxeq_i
or_h (2 : 2): [ 1 2 ]
ris (1 : 1): [ 2 ]


tmp_i (0 : 2): [ ]
*****************************************

67: setdiff1_i
aus_h (1 : 2): [ 2 ]
tmp_i (0 : 2): [ ]


aus_h (1 : 2): [ 2 ]
*****************************************

87: which_m_rowindxeq_i
m (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
riga = 1, val = 1


ind (1 : 8): [ 2 ]
*****************************************

89: copia_v_indx_i
index (2 : 2): [ 1 2 ]
ind (1 : 8): [ 2 ]


co (1 : 1): [ 2 ]
*****************************************

91: assegna1_m_vv_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
ri (1 : 1): [ 1 ]
co (1 : 1): [ 2 ]
val = 1


Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
*****************************************

93: esiste_v_i
el = 1
ris3.indices (1 : 1): [ 2 ]


indx = 0
*****************************************

87: which_m_rowindxeq_i
m (2 x 2 : 2 x 2): [
	 0 1
	 0 0
 ]
riga = 2, val = 1


ind (0 : 8): [ ]
*****************************************

89: copia_v_indx_i
index (2 : 2): [ 1 2 ]
ind (0 : 8): [ ]


co (0 : 0): [ ]
*****************************************

91: assegna1_m_vv_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
ri (1 : 1): [ 2 ]
co (0 : 0): [ ]
val = 1


Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
*****************************************

93: esiste_v_i
el = 2
ris3.indices (1 : 1): [ 2 ]


indx = 1
*****************************************

95: accoda1_vv_i
new_hubs (0 : 1): [ ]
ri (1 : 1): [ 2 ]


new_hubs (1 : 1): [ 2 ]
*****************************************


Stringhe allocate: 5 (4563 interne); stringhe deallocate: 0 (4333 interne)

319: accoda1_vv_i
h_new (0 : 0): [ ]
new_hubs (1 : 1): [ 2 ]
ATTENZIONE (accoda_vv_i, linea connectivity_modular.c # 319): ingrandito il vettore da 0 a 1!


h_new (1 : 2): [ 2 ]
*****************************************

321: somma_colonne_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]


Sout (5 : 5): [ 2 2 2 2 0 ]
*****************************************

323: max_v_i
Sout (5 : 5): [ 2 2 2 2 0 ]


max = 2
*****************************************

325: seq_i
da = 0, a = 3, incremento = 1


tmp2_i (4 : 4): [ 0 1 2 3 ]
*****************************************


*** hist ***
Sout (5 : 5): [ 2 2 2 2 0 ]
tmp2_i (4 : 4): [ 0 1 2 3 ]
right = 0
include_border = 1
naok = 0


tmp1_i (3 : 3): [ 1 0 4 ]

Stringhe allocate: 5 (4569 interne); stringhe deallocate: 0 (4339 interne)

327: promuovi_i
tmp1_i (3 : 3): [ 1 0 4 ]
ATTENZIONE (promuovi_i, linea connectivity_modular.c # 327): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

tmp1_d (3 : 16): [ 1.000 0.000 4.000 ]
*****************************************

328: assegna_v_segmv_d
Freq_out (7 : 7): [ 2.000 2.000 1.000 0.000 0.000 0.000 0.000 ]
start = 1
end = 3
tmp1_d (3 : 16): [ 1.000 0.000 4.000 ]


Freq_out (7 : 7): [ 1.000 0.000 4.000 0.000 0.000 0.000 0.000 ]
*****************************************

330: somma_righe_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]


Sin (5 : 5): [ 2 2 2 2 0 ]
*****************************************

332: max_v_i
Sin (5 : 5): [ 2 2 2 2 0 ]


max = 2
*****************************************

334: seq_i
da = 0, a = 3, incremento = 1


tmp2_i (4 : 4): [ 0 1 2 3 ]
*****************************************


*** hist ***
Sin (5 : 5): [ 2 2 2 2 0 ]
tmp2_i (4 : 4): [ 0 1 2 3 ]
right = 0
include_border = 1
naok = 0


tmp1_i (3 : 3): [ 1 0 4 ]

Stringhe allocate: 5 (4570 interne); stringhe deallocate: 0 (4340 interne)

336: promuovi_i
tmp1_i (3 : 3): [ 1 0 4 ]
ATTENZIONE (promuovi_i, linea connectivity_modular.c # 336): il vettore e` stato promosso da intero a double: i calcoli saranno rallentati!

tmp1_d (3 : 16): [ 1.000 0.000 4.000 ]
*****************************************

337: assegna_v_segmv_d
Freq_out (7 : 7): [ 1.000 0.000 4.000 0.000 0.000 0.000 0.000 ]
start = 1
end = 3
tmp1_d (3 : 16): [ 1.000 0.000 4.000 ]


Freq_out (7 : 7): [ 1.000 0.000 4.000 0.000 0.000 0.000 0.000 ]
*****************************************

349: copia_v_i
h_new (1 : 2): [ 2 ]
start = 1
end = 1


h (1 : 5): [ 2 ]
*****************************************

355: copia_v_indx_i
Sin (5 : 5): [ 2 2 2 2 0 ]
h (1 : 5): [ 2 ]


tmp1_i (1 : 3): [ 2 ]
*****************************************

356: which_v_indxne_i
tmp1_i (1 : 3): [ 2 ]
val = 5


tmp2_i (1 : 4): [ 1 ]
*****************************************

357: copia_v_i
tmp2_i (1 : 4): [ 1 ]
start = 1
end = 1


h (1 : 5): [ 1 ]
*****************************************

368: somma_righe_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]


Sr (5 : 5): [ 2 2 2 2 0 ]
*****************************************

370: which_v_indxeq_i
Sr (5 : 5): [ 2 2 2 2 0 ]
val = 0


ind (1 : 11): [ 5 ]
*****************************************

382: somma_colonne_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]


Sout (5 : 5): [ 2 2 2 2 0 ]
*****************************************


*** score1 ***
19: somma_vs_i
Sout (5 : 5): [ 2 2 2 2 0 ]
s = 1.000


S_new (5 : 5): [ 3 3 3 3 1 ]
*****************************************

21: somma_vs_i
Sout (5 : 5): [ 2 2 2 2 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 3 3 3 3 1 ]
*****************************************

23: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (5 : 5): [ 3 3 3 3 1 ]


T1 (5 : 5): [ 0.667 0.667 0.667 0.667 1.#QO ]
*****************************************

25: somma_vs_i
S_new (5 : 5): [ 3 3 3 3 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 4 4 4 4 2 ]
*****************************************

26: assegna_v_indxNA_d
STout (7 : 7): [ 1.#QO 0.333 0.667 1.000 1.333 1.667 0.000 ]
tmp_i1 (5 : 5): [ 4 4 4 4 2 ]


T2 (5 : 5): [ 1.000 1.000 1.000 1.000 0.333 ]
*****************************************

28: somma_vs_i
Sout (5 : 5): [ 2 2 2 2 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 3 3 3 3 1 ]
*****************************************

29: assegna_v_indxNA_d
Freq_out (7 : 7): [ 1.000 0.000 4.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 3 3 3 3 1 ]


old1 (5 : 5): [ 4.000 4.000 4.000 4.000 1.000 ]
*****************************************

31: somma_vs_i
S_new (5 : 5): [ 3 3 3 3 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 4 4 4 4 2 ]
*****************************************

32: assegna_v_indxNA_d
Freq_out (7 : 7): [ 1.000 0.000 4.000 0.000 0.000 0.000 0.000 ]
tmp_i1 (5 : 5): [ 4 4 4 4 2 ]


old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

34: somma_vs_d
old1 (5 : 5): [ 4.000 4.000 4.000 4.000 1.000 ]
s = -1.000


new1 (5 : 5): [ 3.000 3.000 3.000 3.000 0.000 ]
*****************************************

36: somma_vs_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
s = 1.000


new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

38: somma_vs_i
Sout (5 : 5): [ 2 2 2 2 0 ]
s = 1.000


tmp_i1 (5 : 5): [ 3 3 3 3 1 ]
*****************************************

40: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 3 3 3 3 1 ]


toll1 (5 : 5): [ 1.000 1.000 1.000 1.000 1.#QO ]
*****************************************

42: somma_vs_i
S_new (5 : 5): [ 3 3 3 3 1 ]
s = 1.000


tmp_i1 (5 : 5): [ 4 4 4 4 2 ]
*****************************************

44: assegna_v_indxNA_d
toll (7 : 7): [ 1.#QO 1.000 1.000 1.000 1.000 1.000 1.000 ]
tmp_i1 (5 : 5): [ 4 4 4 4 2 ]


toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

46: diff_vv_d
old1 (5 : 5): [ 4.000 4.000 4.000 4.000 1.000 ]
T1 (5 : 5): [ 0.667 0.667 0.667 0.667 1.#QO ]


a (5 : 5): [ 3.333 3.333 3.333 3.333 1.#QO ]
*****************************************

47: abs1_v_d
a (5 : 5): [ 3.333 3.333 3.333 3.333 1.#QO ]


a (5 : 5): [ 3.333 3.333 3.333 3.333 1.#QO ]
*****************************************

49: diff_vv_d
new1 (5 : 5): [ 3.000 3.000 3.000 3.000 0.000 ]
T1 (5 : 5): [ 0.667 0.667 0.667 0.667 1.#QO ]


b (5 : 5): [ 2.333 2.333 2.333 2.333 1.#QO ]
*****************************************

50: abs1_v_d
b (5 : 5): [ 2.333 2.333 2.333 2.333 1.#QO ]


b (5 : 5): [ 2.333 2.333 2.333 2.333 1.#QO ]
*****************************************

52: which_v_indxna_d
T1 (5 : 5): [ 0.667 0.667 0.667 0.667 1.#QO ]
complemento = 0


ind (1 : 5): [ 5 ]
*****************************************

56: assegna1_vs_indx_d
a (5 : 5): [ 3.333 3.333 3.333 3.333 1.#QO ]
ind (1 : 5): [ 5 ]
val = 0.000


a (5 : 5): [ 3.333 3.333 3.333 3.333 0.000 ]
*****************************************

58: assegna1_vs_indx_d
b (5 : 5): [ 2.333 2.333 2.333 2.333 1.#QO ]
ind (1 : 5): [ 5 ]
val = 0.000


b (5 : 5): [ 2.333 2.333 2.333 2.333 0.000 ]
*****************************************

66: cbind2v_d
a (5 : 5): [ 3.333 3.333 3.333 3.333 0.000 ]
b (5 : 5): [ 2.333 2.333 2.333 2.333 0.000 ]


tmpm_d (5 x 2 : 5 x 2): [
	 3.333 2.333
	 3.333 2.333
	 3.333 2.333
	 3.333 2.333
	 0.000 0.000
 ]
*****************************************

67: max_righe_d
tmpm_d (5 x 2 : 5 x 2): [
	 3.333 2.333
	 3.333 2.333
	 3.333 2.333
	 3.333 2.333
	 0.000 0.000
 ]


m (5 : 5): [ 3.333 3.333 3.333 3.333 0.000 ]
*****************************************

69: f_aux_d
a (5 : 5): [ 3.333 3.333 3.333 3.333 0.000 ]
b (5 : 5): [ 2.333 2.333 2.333 2.333 0.000 ]
m (5 : 5): [ 3.333 3.333 3.333 3.333 0.000 ]
T1 (5 : 5): [ 0.667 0.667 0.667 0.667 1.#QO ]


S1 (5 : 5): [ 5.000 5.000 5.000 5.000 1.#QO ]
*****************************************

71: diff_vv_d
a (5 : 5): [ 3.333 3.333 3.333 3.333 0.000 ]
toll1 (5 : 5): [ 1.000 1.000 1.000 1.000 1.#QO ]


tmp_d1 (5 : 5): [ 2.333 2.333 2.333 2.333 1.#QO ]
*****************************************

72: which_v_indxlt_d
tmp_d1 (5 : 5): [ 2.333 2.333 2.333 2.333 1.#QO ]
val = 0.000

ind1 (0 : 5): [ ]
*****************************************

74: diff_vv_d
b (5 : 5): [ 2.333 2.333 2.333 2.333 0.000 ]
toll1 (5 : 5): [ 1.000 1.000 1.000 1.000 1.#QO ]


tmp_d1 (5 : 5): [ 1.333 1.333 1.333 1.333 1.#QO ]
*****************************************

75: which_v_indxgt_d
tmp_d1 (5 : 5): [ 1.333 1.333 1.333 1.333 1.#QO ]
val = 0.000


ind2 (4 : 5): [ 1 2 3 4 ]
*****************************************

77: interseca_i
ind1 (0 : 5): [ ]
ind2 (4 : 5): [ 1 2 3 4 ]


indinf (0 : 0): [ ]
*****************************************

79: assegna1_vs_indx_d
S1 (5 : 5): [ 5.000 5.000 5.000 5.000 1.#QO ]
indinf (0 : 0): [ ]
val = -1.#IO


S1 (5 : 5): [ 5.000 5.000 5.000 5.000 1.#QO ]
*****************************************

81: assegna1_vs_indx_d
S1 (5 : 5): [ 5.000 5.000 5.000 5.000 1.#QO ]
ind (1 : 5): [ 5 ]
val = 0.000


S1 (5 : 5): [ 5.000 5.000 5.000 5.000 0.000 ]
*****************************************

90: diff_vv_d
old2 (5 : 5): [ 0.000 0.000 0.000 0.000 0.000 ]
T2 (5 : 5): [ 1.000 1.000 1.000 1.000 0.333 ]


a (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -0.333 ]
*****************************************

91: abs1_v_d
a (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -0.333 ]


a (5 : 5): [ 1.000 1.000 1.000 1.000 0.333 ]
*****************************************

93: diff_vv_d
new2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]
T2 (5 : 5): [ 1.000 1.000 1.000 1.000 0.333 ]


b (5 : 5): [ 0.000 0.000 0.000 0.000 0.667 ]
*****************************************

94: abs1_v_d
b (5 : 5): [ 0.000 0.000 0.000 0.000 0.667 ]


b (5 : 5): [ 0.000 0.000 0.000 0.000 0.667 ]
*****************************************

96: cbind2v_d
a (5 : 5): [ 1.000 1.000 1.000 1.000 0.333 ]
b (5 : 5): [ 0.000 0.000 0.000 0.000 0.667 ]


tmpm_d (5 x 2 : 5 x 2): [
	 1.000 0.000
	 1.000 0.000
	 1.000 0.000
	 1.000 0.000
	 0.333 0.667
 ]
*****************************************

97: max_righe_d
tmpm_d (5 x 2 : 5 x 2): [
	 1.000 0.000
	 1.000 0.000
	 1.000 0.000
	 1.000 0.000
	 0.333 0.667
 ]


m (5 : 5): [ 1.000 1.000 1.000 1.000 0.667 ]
*****************************************

99: which_v_indxna_d
T2 (5 : 5): [ 1.000 1.000 1.000 1.000 0.333 ]
complemento = 0


ind (0 : 5): [ ]
*****************************************

103: assegna1_vs_indx_d
a (5 : 5): [ 1.000 1.000 1.000 1.000 0.333 ]
ind (0 : 5): [ ]
val = 0.000


a (5 : 5): [ 1.000 1.000 1.000 1.000 0.333 ]
*****************************************

105: assegna1_vs_indx_d
b (5 : 5): [ 0.000 0.000 0.000 0.000 0.667 ]
ind (0 : 5): [ ]
val = 0.000


b (5 : 5): [ 0.000 0.000 0.000 0.000 0.667 ]
*****************************************

107: cbind2v_d
a (5 : 5): [ 1.000 1.000 1.000 1.000 0.333 ]
b (5 : 5): [ 0.000 0.000 0.000 0.000 0.667 ]


tmpm_d (5 x 2 : 5 x 2): [
	 1.000 0.000
	 1.000 0.000
	 1.000 0.000
	 1.000 0.000
	 0.333 0.667
 ]
*****************************************

108: max_righe_d
tmpm_d (5 x 2 : 5 x 2): [
	 1.000 0.000
	 1.000 0.000
	 1.000 0.000
	 1.000 0.000
	 0.333 0.667
 ]


m (5 : 5): [ 1.000 1.000 1.000 1.000 0.667 ]
*****************************************

110: f_aux_d
a (5 : 5): [ 1.000 1.000 1.000 1.000 0.333 ]
b (5 : 5): [ 0.000 0.000 0.000 0.000 0.667 ]
m (5 : 5): [ 1.000 1.000 1.000 1.000 0.667 ]
T2 (5 : 5): [ 1.000 1.000 1.000 1.000 0.333 ]


S2 (5 : 5): [ 1.000 1.000 1.000 1.000 -2.000 ]
*****************************************

112: diff_vv_d
a (5 : 5): [ 1.000 1.000 1.000 1.000 0.333 ]
toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]


tmp_d1 (5 : 5): [ 0.000 0.000 0.000 0.000 -0.667 ]
*****************************************

113: which_v_indxlt_d
tmp_d1 (5 : 5): [ 0.000 0.000 0.000 0.000 -0.667 ]
val = 0.000

ind1 (1 : 5): [ 5 ]
*****************************************

115: diff_vv_d
b (5 : 5): [ 0.000 0.000 0.000 0.000 0.667 ]
toll2 (5 : 5): [ 1.000 1.000 1.000 1.000 1.000 ]


tmp_d1 (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -0.333 ]
*****************************************

116: which_v_indxgt_d
tmp_d1 (5 : 5): [ -1.000 -1.000 -1.000 -1.000 -0.333 ]
val = 0.000


ind2 (0 : 5): [ ]
*****************************************

118: interseca_i
ind1 (1 : 5): [ 5 ]
ind2 (0 : 5): [ ]
2306: esiste_v_i
el = 5
ind2 (0 : 5): [ ]


indx = 0
*****************************************

2307: esiste_v_i
el = 5
indinf (0 : 0): [ ]


indx = 0
*****************************************



indinf (0 : 0): [ ]
*****************************************

120: assegna1_vs_indx_d
S2 (5 : 5): [ 1.000 1.000 1.000 1.000 -2.000 ]
indinf (0 : 0): [ ]
val = -1.#IO


S2 (5 : 5): [ 1.000 1.000 1.000 1.000 -2.000 ]
*****************************************

122: assegna1_vs_indx_d
S2 (5 : 5): [ 1.000 1.000 1.000 1.000 -2.000 ]
ind (0 : 5): [ ]
val = 0.000


S2 (5 : 5): [ 1.000 1.000 1.000 1.000 -2.000 ]
*****************************************

131: which_v_indxeq_d
T2 (5 : 5): [ 1.000 1.000 1.000 1.000 0.333 ]
val = 0.000


ind (0 : 5): [ ]
*****************************************

133: assegna1_vs_indx_d
S2 (5 : 5): [ 1.000 1.000 1.000 1.000 -2.000 ]
ind (0 : 5): [ ]
val = -1.#IO


S2 (5 : 5): [ 1.000 1.000 1.000 1.000 -2.000 ]
*****************************************

135: somma_vv_d
S1 (5 : 5): [ 5.000 5.000 5.000 5.000 0.000 ]
S2 (5 : 5): [ 1.000 1.000 1.000 1.000 -2.000 ]


Sc (5 : 5): [ 6.000 6.000 6.000 6.000 -2.000 ]
*****************************************

136: dividi1_vs_d
Sc (5 : 5): [ 6.000 6.000 6.000 6.000 -2.000 ]
div = 2.000


Sc (5 : 5): [ 3.000 3.000 3.000 3.000 -1.000 ]
*****************************************


Stringhe allocate: 5 (4691 interne); stringhe deallocate: 0 (4451 interne)

386: which_v_indxeq_d
Sc (5 : 5): [ 3.000 3.000 3.000 3.000 -1.000 ]
val = -1.#IO


ind_Sc (0 : 5): [ ]
*****************************************

388: assegna1_v_indxv_d
Sc (5 : 5): [ 3.000 3.000 3.000 3.000 -1.000 ]
ind_Sc (0 : 5): [ ]
val = 0.000


Sc (5 : 5): [ 3.000 3.000 3.000 3.000 -1.000 ]
*****************************************

390: which_v_indxle_d
Sc (5 : 5): [ 3.000 3.000 3.000 3.000 -1.000 ]
val = 0.000


tmp1_i (1 : 11): [ 5 ]
*****************************************

392: min_v_d
Sc (5 : 5): [ 3.000 3.000 3.000 3.000 -1.000 ]


min = -1.000
*****************************************

392: somma1_vs_d
Sc (5 : 5): [ 3.000 3.000 3.000 3.000 -1.000 ]
s = 1.040


Sc (5 : 5): [ 4.040 4.040 4.040 4.040 0.040 ]
*****************************************

394: assegna1_v_indxv_d
Sc (5 : 5): [ 4.040 4.040 4.040 4.040 0.040 ]
ind_Sc (0 : 5): [ ]
val = 0.000


Sc (5 : 5): [ 4.040 4.040 4.040 4.040 0.040 ]
*****************************************

396: somma_v_d
Sc (5 : 5): [ 4.040 4.040 4.040 4.040 0.040 ]
canc_NA = 0



ris: 16.200
*****************************************

416: somma_v_d
Sc (5 : 5): [ 4.040 4.040 4.040 4.040 0.040 ]
canc_NA = 0



ris: 16.200
*****************************************

416: dividi_vs_d
Sc (5 : 5): [ 4.040 4.040 4.040 4.040 0.040 ]
div = 16.200


p_out (5 : 5): [ 0.249 0.249 0.249 0.249 0.002 ]
*****************************************

418: seq_i
da = 1, a = 5, incremento = 1


tmp1_i (5 : 11): [ 1 2 3 4 5 ]
*****************************************


*** sampleB_p ***

*** sample_p ***
tmp1_i (5 : 11): [ 1 2 3 4 5 ]
k = 1, replace = 0
p_out (5 : 5): [ 0.249 0.249 0.249 0.249 0.002 ]


ris (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 5 (4706 interne); stringhe deallocate: 0 (4451 interne)

422: assegna1_ms_rigaindx_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 0 0 0
 ]
riga = 5
ris (1 : 1): [ 3 ]
val = 1


Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 1 0 0
 ]
*****************************************

424: copia_v_indx_i
Sout (5 : 5): [ 2 2 2 2 0 ]
ris (1 : 1): [ 3 ]


a1 (1 : 1): [ 2 ]
*****************************************

426: somma_vs_i
a1 (1 : 1): [ 2 ]
s = 1.000


a2 (1 : 1): [ 3 ]
*****************************************

428: incr1_v_i
a1 (1 : 1): [ 2 ]
s = 1


a1 (1 : 1): [ 3 ]
*****************************************

429: incr1_v_indx_d
Freq_out (7 : 7): [ 1.000 0.000 4.000 0.000 0.000 0.000 0.000 ]
a1 (1 : 1): [ 3 ]
val = -1.000


Freq_out (7 : 7): [ 1.000 0.000 3.000 0.000 0.000 0.000 0.000 ]
*****************************************

431: incr1_v_i
a2 (1 : 1): [ 3 ]
s = 1


a2 (1 : 1): [ 4 ]
*****************************************

432: incr1_v_indx_d
Freq_out (7 : 7): [ 1.000 0.000 3.000 0.000 0.000 0.000 0.000 ]
a2 (1 : 1): [ 4 ]
val = 1.000


Freq_out (7 : 7): [ 1.000 0.000 3.000 1.000 0.000 0.000 0.000 ]
*****************************************

440: which_m_indxeq_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 1 0 0
 ]
val = 1


ind (9 : 47): [ 2 4 6 8 12 14 15 16 18 ]
*****************************************

447: abs_v_d
tmp1_d (9 : 16): [ 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 ]


tmp2_d (9 : 16): [ 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 ]
*****************************************

453: assegna1_mv_indx_d
M (5 x 5 : 5 x 5): [
	 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000
 ]
ind (9 : 47): [ 2 4 6 8 12 14 15 16 18 ]
tmp2_d (9 : 16): [ 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 1.000 ]


M (5 x 5 : 5 x 5): [
	 0.000 1.000 0.000 1.000 0.000
	 1.000 0.000 1.000 0.000 0.000
	 0.000 1.000 0.000 1.000 0.000
	 1.000 0.000 1.000 0.000 0.000
	 0.000 0.000 1.000 0.000 0.000
 ]
*****************************************


Stringhe allocate: 5 (4726 interne); stringhe deallocate: 0 (4641 interne)


*** createRules1 ***
Controllo la funzione f_pr_and definita come '1 / (1 + e ^ (-10 * (x - 0.5)))' ... ok
42: which_m_rowindxne_d
M (5 x 5 : 5 x 5): [
	 0.000 1.000 0.000 1.000 0.000
	 1.000 0.000 1.000 0.000 0.000
	 0.000 1.000 0.000 1.000 0.000
	 1.000 0.000 1.000 0.000 0.000
	 0.000 0.000 1.000 0.000 0.000
 ]
riga = 1, val = 0.000


op (2 : 25): [ 2 4 ]
*****************************************


*** create_logicRule ***
43: op_ss_seqdiv_d
da = 1.000, a = 2.000, div = 2.000


x (2 : 2): [ 0.500 1.000 ]
*****************************************

Calcolo la funzione f_pr_and in 0.500: 0.500
Calcolo la funzione f_pr_and in 1.000: 0.993
70: complementa_d
pr_and (2 : 2): [ 0.500 0.993 ]


pr_or (2 : 2): [ 0.500 0.007 ]
*****************************************

73: vettore2s_d
el1 = 0.500, el2 = 0.500


prob (2 : 2): [ 0.500 0.500 ]
*****************************************

74: vettore2s_i
el1 = -2, el2 = -3


tmp_i (2 : 2): [ -2 -3 ]
*****************************************


*** sample_p ***
tmp_i (2 : 2): [ -2 -3 ]
k = 1, replace = 0
prob (2 : 2): [ 0.500 0.500 ]


ris (1 : 1): [ -2 ]
*****************************************


Stringhe allocate: 0 (50 interne); stringhe deallocate: 0 (5 interne)

77: vettore3v_i
ris (1 : 1): [ -2 ]
scalare_i (1 : 1): [ 0 ]
scalare_i (1 : 1): [ 0 ]


ris (3 : 3): [ -2 0 0 ]
*****************************************

80: vettore2s_i
el1 = 2, el2 = 3


o (2 : 2): [ 2 3 ]
*****************************************

85: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


pr_or (2 : 2): [ 0.000 0.000 ]
*****************************************

88: rep_d
scalare_d (1 : 1): [ 1.000 ]
ripetizioni = 2


pr_and (2 : 2): [ 1.000 1.000 ]
*****************************************


Stringhe allocate: 0 (70 interne); stringhe deallocate: 0 (55 interne)

48: copia_v_i
ris (3 : 3): [ -2 2 4 ]
start = 1
end = 3


ACCEDIlst(ris, i, vi) (3 : 3): [ -2 2 4 ]
*****************************************

42: which_m_rowindxne_d
M (5 x 5 : 5 x 5): [
	 0.000 1.000 0.000 1.000 0.000
	 1.000 0.000 1.000 0.000 0.000
	 0.000 1.000 0.000 1.000 0.000
	 1.000 0.000 1.000 0.000 0.000
	 0.000 0.000 1.000 0.000 0.000
 ]
riga = 2, val = 0.000


op (2 : 25): [ 1 3 ]
*****************************************


*** create_logicRule ***
43: op_ss_seqdiv_d
da = 1.000, a = 2.000, div = 2.000


x (2 : 2): [ 0.500 1.000 ]
*****************************************

Calcolo la funzione f_pr_and in 0.500: 0.500
Calcolo la funzione f_pr_and in 1.000: 0.993
70: complementa_d
pr_and (2 : 2): [ 0.500 0.993 ]


pr_or (2 : 2): [ 0.500 0.007 ]
*****************************************

73: vettore2s_d
el1 = 0.500, el2 = 0.500


prob (2 : 2): [ 0.500 0.500 ]
*****************************************

74: vettore2s_i
el1 = -2, el2 = -3


tmp_i (2 : 2): [ -2 -3 ]
*****************************************


*** sample_p ***
tmp_i (2 : 2): [ -2 -3 ]
k = 1, replace = 0
prob (2 : 2): [ 0.500 0.500 ]


ris (1 : 1): [ -2 ]
*****************************************


Stringhe allocate: 0 (115 interne); stringhe deallocate: 0 (60 interne)

77: vettore3v_i
ris (1 : 1): [ -2 ]
scalare_i (1 : 1): [ 0 ]
scalare_i (1 : 1): [ 0 ]


ris (3 : 3): [ -2 0 0 ]
*****************************************

80: vettore2s_i
el1 = 2, el2 = 3


o (2 : 2): [ 2 3 ]
*****************************************

85: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


pr_or (2 : 2): [ 0.000 0.000 ]
*****************************************

88: rep_d
scalare_d (1 : 1): [ 1.000 ]
ripetizioni = 2


pr_and (2 : 2): [ 1.000 1.000 ]
*****************************************


Stringhe allocate: 0 (130 interne); stringhe deallocate: 0 (110 interne)

48: copia_v_i
ris (3 : 3): [ -2 1 3 ]
start = 1
end = 3


ACCEDIlst(ris, i, vi) (3 : 3): [ -2 1 3 ]
*****************************************

42: which_m_rowindxne_d
M (5 x 5 : 5 x 5): [
	 0.000 1.000 0.000 1.000 0.000
	 1.000 0.000 1.000 0.000 0.000
	 0.000 1.000 0.000 1.000 0.000
	 1.000 0.000 1.000 0.000 0.000
	 0.000 0.000 1.000 0.000 0.000
 ]
riga = 3, val = 0.000


op (2 : 25): [ 2 4 ]
*****************************************


*** create_logicRule ***
43: op_ss_seqdiv_d
da = 1.000, a = 2.000, div = 2.000


x (2 : 2): [ 0.500 1.000 ]
*****************************************

Calcolo la funzione f_pr_and in 0.500: 0.500
Calcolo la funzione f_pr_and in 1.000: 0.993
70: complementa_d
pr_and (2 : 2): [ 0.500 0.993 ]


pr_or (2 : 2): [ 0.500 0.007 ]
*****************************************

73: vettore2s_d
el1 = 0.500, el2 = 0.500


prob (2 : 2): [ 0.500 0.500 ]
*****************************************

74: vettore2s_i
el1 = -2, el2 = -3


tmp_i (2 : 2): [ -2 -3 ]
*****************************************


*** sample_p ***
tmp_i (2 : 2): [ -2 -3 ]
k = 1, replace = 0
prob (2 : 2): [ 0.500 0.500 ]


ris (1 : 1): [ -2 ]
*****************************************


Stringhe allocate: 0 (175 interne); stringhe deallocate: 0 (115 interne)

77: vettore3v_i
ris (1 : 1): [ -2 ]
scalare_i (1 : 1): [ 0 ]
scalare_i (1 : 1): [ 0 ]


ris (3 : 3): [ -2 0 0 ]
*****************************************

80: vettore2s_i
el1 = 2, el2 = 3


o (2 : 2): [ 2 3 ]
*****************************************

85: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 2


pr_or (2 : 2): [ 0.000 0.000 ]
*****************************************

88: rep_d
scalare_d (1 : 1): [ 1.000 ]
ripetizioni = 2


pr_and (2 : 2): [ 1.000 1.000 ]
*****************************************


Stringhe allocate: 0 (190 interne); stringhe deallocate: 0 (165 interne)

48: copia_v_i
ris (3 : 3): [ -2 2 4 ]
start = 1
end = 3


ACCEDIlst(ris, i, vi) (3 : 3): [ -2 2 4 ]
*****************************************

42: which_m_rowindxne_d
M (5 x 5 : 5 x 5): [
	 0.000 1.000 0.000 1.000 0.000
	 1.000 0.000 1.000 0.000 0.000
	 0.000 1.000 0.000 1.000 0.000
	 1.000 0.000 1.000 0.000 0.000
	 0.000 0.000 1.000 0.000 0.000
 ]
riga = 4, val = 0.000


op (2 : 25): [ 1 3 ]
*****************************************


*** create_logicRule ***
43: op_ss_seqdiv_d
da = 1.000, a = 2.000, div = 2.000


x (2 : 2): [ 0.500 1.000 ]
*****************************************

Calcolo la funzione f_pr_and in 0.500: 0.500
Calcolo la funzione f_pr_and in 1.000: 0.993
70: complementa_d
pr_and (2 : 2): [ 0.500 0.993 ]


pr_or (2 : 2): [ 0.500 0.007 ]
*****************************************

73: vettore2s_d
el1 = 0.500, el2 = 0.500


prob (2 : 2): [ 0.500 0.500 ]
*****************************************

74: vettore2s_i
el1 = -2, el2 = -3


tmp_i (2 : 2): [ -2 -3 ]
*****************************************


*** sample_p ***
tmp_i (2 : 2): [ -2 -3 ]
k = 1, replace = 0
prob (2 : 2): [ 0.500 0.500 ]


ris (1 : 1): [ -3 ]
*****************************************


Stringhe allocate: 0 (235 interne); stringhe deallocate: 0 (170 interne)

77: vettore3v_i
ris (1 : 1): [ -3 ]
scalare_i (1 : 1): [ 0 ]
scalare_i (1 : 1): [ 0 ]


ris (3 : 3): [ -3 0 0 ]
*****************************************

80: vettore2s_i
el1 = 2, el2 = 3


o (2 : 2): [ 2 3 ]
*****************************************


Stringhe allocate: 0 (250 interne); stringhe deallocate: 0 (220 interne)

48: copia_v_i
ris (3 : 3): [ -3 1 3 ]
start = 1
end = 3


ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 3 ]
*****************************************

42: which_m_rowindxne_d
M (5 x 5 : 5 x 5): [
	 0.000 1.000 0.000 1.000 0.000
	 1.000 0.000 1.000 0.000 0.000
	 0.000 1.000 0.000 1.000 0.000
	 1.000 0.000 1.000 0.000 0.000
	 0.000 0.000 1.000 0.000 0.000
 ]
riga = 5, val = 0.000


op (1 : 25): [ 3 ]
*****************************************

54: copia_v_i
op (1 : 25): [ 3 ]
start = 1
end = 1


ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
*****************************************


Stringhe allocate: 0 (260 interne); stringhe deallocate: 0 (230 interne)

56: assegna1_mv_riga_i
reg (5 x 3 : 5 x 3): [
	 0 0 0
	 0 0 0
	 0 0 0
	 0 0 0
	 0 0 0
 ]
riga = 1
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 2 4 ]


reg (5 x 3 : 5 x 3): [
	 -2 2 4
	 0 0 0
	 0 0 0
	 0 0 0
	 0 0 0
 ]
*****************************************

56: assegna1_mv_riga_i
reg (5 x 3 : 5 x 3): [
	 -2 2 4
	 0 0 0
	 0 0 0
	 0 0 0
	 0 0 0
 ]
riga = 2
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 1 3 ]


reg (5 x 3 : 5 x 3): [
	 -2 2 4
	 -2 1 3
	 0 0 0
	 0 0 0
	 0 0 0
 ]
*****************************************

56: assegna1_mv_riga_i
reg (5 x 3 : 5 x 3): [
	 -2 2 4
	 -2 1 3
	 0 0 0
	 0 0 0
	 0 0 0
 ]
riga = 3
ACCEDIlst(ris, i, vi) (3 : 3): [ -2 2 4 ]


reg (5 x 3 : 5 x 3): [
	 -2 2 4
	 -2 1 3
	 -2 2 4
	 0 0 0
	 0 0 0
 ]
*****************************************

56: assegna1_mv_riga_i
reg (5 x 3 : 5 x 3): [
	 -2 2 4
	 -2 1 3
	 -2 2 4
	 0 0 0
	 0 0 0
 ]
riga = 4
ACCEDIlst(ris, i, vi) (3 : 3): [ -3 1 3 ]


reg (5 x 3 : 5 x 3): [
	 -2 2 4
	 -2 1 3
	 -2 2 4
	 -3 1 3
	 0 0 0
 ]
*****************************************

56: assegna1_mv_riga_i
reg (5 x 3 : 5 x 3): [
	 -2 2 4
	 -2 1 3
	 -2 2 4
	 -3 1 3
	 0 0 0
 ]
riga = 5
ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]


reg (5 x 3 : 5 x 3): [
	 -2 2 4
	 -2 1 3
	 -2 2 4
	 -3 1 3
	 3 0 0
 ]
*****************************************


*** createNEG1 ***
13: which_m_indxeq_i
Mdiscr (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 1 0 0
 ]
val = 1


ind (9 : 25): [ 2 4 6 8 12 14 15 16 18 ]
*****************************************

16: vettore2s_i
el1 = -1, el2 = 1


tmp_i (2 : 2): [ -1 1 ]
*****************************************


*** sample ***
tmp_i (2 : 2): [ -1 1 ]
k = 9, replace = 1


ris (9 : 9): [ 1 -1 1 -1 1 1 -1 1 1 ]
*****************************************


Stringhe allocate: 0 (285 interne); stringhe deallocate: 0 (230 interne)

19: assegna1_ms_indxv_i
ris (5 x 5 : 5 x 5): [
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
	 0 0 0 0 0
 ]
ind (9 : 25): [ 2 4 6 8 12 14 15 16 18 ]
val = 1


ris (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 1 0 0
 ]
*****************************************


Stringhe allocate: 0 (285 interne); stringhe deallocate: 0 (245 interne)

71: moltiplica_mm_di
M (5 x 5 : 5 x 5): [
	 0.000 1.000 0.000 1.000 0.000
	 1.000 0.000 1.000 0.000 0.000
	 0.000 1.000 0.000 1.000 0.000
	 1.000 0.000 1.000 0.000 0.000
	 0.000 0.000 1.000 0.000 0.000
 ]
ris (5 x 5 : 5 x 5): [
	 0 1 0 1 0
	 1 0 1 0 0
	 0 1 0 1 0
	 1 0 1 0 0
	 0 0 1 0 0
 ]


tmpm1_d (5 x 5 : 5 x 5): [
	 0.000 1.000 0.000 1.000 0.000
	 1.000 0.000 1.000 0.000 0.000
	 0.000 1.000 0.000 1.000 0.000
	 1.000 0.000 1.000 0.000 0.000
	 0.000 0.000 1.000 0.000 0.000
 ]
*****************************************


*** dinamica1 ***
62: media_v_d
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]


media = 1.016
*****************************************

74: f_aux4_d
times (5 : 5): [ 1.000 2.000 3.000 4.000 5.000 ]
res = 0.100

ris = 0.000

*****************************************

82: max_v_d
times (5 : 5): [ 1.000 2.000 3.000 4.000 5.000 ]


max = 5.000
*****************************************

85: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 1
parm1[j] (5 : 5): [ 0.013 0.000 0.104 0.009 0.076 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.104 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.076 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************

86: copia_v_d
parm1[j] (5 : 5): [ 0.013 0.000 0.104 0.009 0.076 ]
start = 1
end = 5


n (5 : 5): [ 0.013 0.000 0.104 0.009 0.076 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.009 ]
*** next_op ***
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.000


ris (2 : 2): [ 1.000 0.000 ]
*****************************************


Stringhe allocate: 2 (335 interne); stringhe deallocate: 0 (260 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.013 0.104 ]
*** next_op ***
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.013


ris (2 : 2): [ 1.000 0.013 ]
*****************************************


Stringhe allocate: 2 (350 interne); stringhe deallocate: 0 (275 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.009 ]
*** next_op ***
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.000


ris (2 : 2): [ 1.000 0.000 ]
*****************************************


Stringhe allocate: 2 (365 interne); stringhe deallocate: 0 (290 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.013 0.104 ]
*** next_op ***
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.118


ris (2 : 2): [ 1.000 0.118 ]
*****************************************


Stringhe allocate: 2 (380 interne); stringhe deallocate: 0 (305 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.104 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.104


ris (2 : 2): [ 1.000 0.104 ]
*****************************************


Stringhe allocate: 2 (395 interne); stringhe deallocate: 0 (320 interne)


Stringhe allocate: 2 (395 interne); stringhe deallocate: 0 (325 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.013 0.000 0.118 0.104 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.007 0.004 0.017 0.018 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.007 0.004 0.017 0.018 ]
n (5 : 5): [ 0.013 0.000 0.104 0.009 0.076 ]


incr (5 : 5): [ -0.001 0.001 -0.011 0.001 -0.006 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.013 0.000 0.104 0.009 0.076 ]
incr (5 : 5): [ -0.001 0.001 -0.011 0.001 -0.006 ]


n (5 : 5): [ 0.013 0.001 0.093 0.010 0.070 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.104 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.076 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 1
n (5 : 5): [ 0.013 0.001 0.093 0.010 0.070 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (425 interne); stringhe deallocate: 0 (340 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (440 interne); stringhe deallocate: 0 (355 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (455 interne); stringhe deallocate: 0 (370 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (470 interne); stringhe deallocate: 0 (385 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.093 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.093


ris (2 : 2): [ 1.000 0.093 ]
*****************************************


Stringhe allocate: 2 (485 interne); stringhe deallocate: 0 (400 interne)


Stringhe allocate: 2 (485 interne); stringhe deallocate: 0 (405 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.093 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.016 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.016 ]
n (5 : 5): [ 0.013 0.001 0.093 0.010 0.070 ]


incr (5 : 5): [ -0.001 0.000 -0.010 -0.000 -0.005 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.013 0.001 0.093 0.010 0.070 ]
incr (5 : 5): [ -0.001 0.000 -0.010 -0.000 -0.005 ]


n (5 : 5): [ 0.012 0.001 0.083 0.009 0.065 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 2
n (5 : 5): [ 0.012 0.001 0.083 0.009 0.065 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (505 interne); stringhe deallocate: 0 (420 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (520 interne); stringhe deallocate: 0 (435 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (535 interne); stringhe deallocate: 0 (450 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (550 interne); stringhe deallocate: 0 (465 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.083 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.083


ris (2 : 2): [ 1.000 0.083 ]
*****************************************


Stringhe allocate: 2 (565 interne); stringhe deallocate: 0 (480 interne)


Stringhe allocate: 2 (565 interne); stringhe deallocate: 0 (485 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.083 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.015 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.015 ]
n (5 : 5): [ 0.012 0.001 0.083 0.009 0.065 ]


incr (5 : 5): [ -0.000 0.000 -0.009 -0.000 -0.005 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.012 0.001 0.083 0.009 0.065 ]
incr (5 : 5): [ -0.000 0.000 -0.009 -0.000 -0.005 ]


n (5 : 5): [ 0.012 0.002 0.074 0.009 0.060 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 3
n (5 : 5): [ 0.012 0.002 0.074 0.009 0.060 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (585 interne); stringhe deallocate: 0 (500 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (600 interne); stringhe deallocate: 0 (515 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (615 interne); stringhe deallocate: 0 (530 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (630 interne); stringhe deallocate: 0 (545 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.074 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.074


ris (2 : 2): [ 1.000 0.074 ]
*****************************************


Stringhe allocate: 2 (645 interne); stringhe deallocate: 0 (560 interne)


Stringhe allocate: 2 (645 interne); stringhe deallocate: 0 (565 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.074 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.014 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.014 ]
n (5 : 5): [ 0.012 0.002 0.074 0.009 0.060 ]


incr (5 : 5): [ -0.000 0.000 -0.008 -0.000 -0.005 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.012 0.002 0.074 0.009 0.060 ]
incr (5 : 5): [ -0.000 0.000 -0.008 -0.000 -0.005 ]


n (5 : 5): [ 0.011 0.002 0.066 0.008 0.055 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 4
n (5 : 5): [ 0.011 0.002 0.066 0.008 0.055 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (665 interne); stringhe deallocate: 0 (580 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (680 interne); stringhe deallocate: 0 (595 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (695 interne); stringhe deallocate: 0 (610 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (710 interne); stringhe deallocate: 0 (625 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.066 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.066


ris (2 : 2): [ 1.000 0.066 ]
*****************************************


Stringhe allocate: 2 (725 interne); stringhe deallocate: 0 (640 interne)


Stringhe allocate: 2 (725 interne); stringhe deallocate: 0 (645 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.066 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.013 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.013 ]
n (5 : 5): [ 0.011 0.002 0.066 0.008 0.055 ]


incr (5 : 5): [ -0.000 0.000 -0.007 -0.000 -0.004 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.011 0.002 0.066 0.008 0.055 ]
incr (5 : 5): [ -0.000 0.000 -0.007 -0.000 -0.004 ]


n (5 : 5): [ 0.011 0.003 0.059 0.008 0.051 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 5
n (5 : 5): [ 0.011 0.003 0.059 0.008 0.051 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (745 interne); stringhe deallocate: 0 (660 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (760 interne); stringhe deallocate: 0 (675 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (775 interne); stringhe deallocate: 0 (690 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (790 interne); stringhe deallocate: 0 (705 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.059 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.059


ris (2 : 2): [ 1.000 0.059 ]
*****************************************


Stringhe allocate: 2 (805 interne); stringhe deallocate: 0 (720 interne)


Stringhe allocate: 2 (805 interne); stringhe deallocate: 0 (725 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.059 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.012 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.012 ]
n (5 : 5): [ 0.011 0.003 0.059 0.008 0.051 ]


incr (5 : 5): [ -0.000 0.000 -0.006 -0.000 -0.004 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.011 0.003 0.059 0.008 0.051 ]
incr (5 : 5): [ -0.000 0.000 -0.006 -0.000 -0.004 ]


n (5 : 5): [ 0.011 0.003 0.053 0.008 0.047 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 6
n (5 : 5): [ 0.011 0.003 0.053 0.008 0.047 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (825 interne); stringhe deallocate: 0 (740 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (840 interne); stringhe deallocate: 0 (755 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (855 interne); stringhe deallocate: 0 (770 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (870 interne); stringhe deallocate: 0 (785 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.053 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.053


ris (2 : 2): [ 1.000 0.053 ]
*****************************************


Stringhe allocate: 2 (885 interne); stringhe deallocate: 0 (800 interne)


Stringhe allocate: 2 (885 interne); stringhe deallocate: 0 (805 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.053 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.011 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.011 ]
n (5 : 5): [ 0.011 0.003 0.053 0.008 0.047 ]


incr (5 : 5): [ -0.000 0.000 -0.006 -0.000 -0.004 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.011 0.003 0.053 0.008 0.047 ]
incr (5 : 5): [ -0.000 0.000 -0.006 -0.000 -0.004 ]


n (5 : 5): [ 0.010 0.003 0.047 0.008 0.044 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 7
n (5 : 5): [ 0.010 0.003 0.047 0.008 0.044 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (905 interne); stringhe deallocate: 0 (820 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (920 interne); stringhe deallocate: 0 (835 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (935 interne); stringhe deallocate: 0 (850 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (950 interne); stringhe deallocate: 0 (865 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.047 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.047


ris (2 : 2): [ 1.000 0.047 ]
*****************************************


Stringhe allocate: 2 (965 interne); stringhe deallocate: 0 (880 interne)


Stringhe allocate: 2 (965 interne); stringhe deallocate: 0 (885 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.047 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.011 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.011 ]
n (5 : 5): [ 0.010 0.003 0.047 0.008 0.044 ]


incr (5 : 5): [ -0.000 0.000 -0.005 -0.000 -0.003 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.010 0.003 0.047 0.008 0.044 ]
incr (5 : 5): [ -0.000 0.000 -0.005 -0.000 -0.003 ]


n (5 : 5): [ 0.010 0.003 0.042 0.007 0.040 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 8
n (5 : 5): [ 0.010 0.003 0.042 0.007 0.040 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (985 interne); stringhe deallocate: 0 (900 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1000 interne); stringhe deallocate: 0 (915 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1015 interne); stringhe deallocate: 0 (930 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1030 interne); stringhe deallocate: 0 (945 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.042 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.042


ris (2 : 2): [ 1.000 0.042 ]
*****************************************


Stringhe allocate: 2 (1045 interne); stringhe deallocate: 0 (960 interne)


Stringhe allocate: 2 (1045 interne); stringhe deallocate: 0 (965 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.042 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.010 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.010 ]
n (5 : 5): [ 0.010 0.003 0.042 0.007 0.040 ]


incr (5 : 5): [ -0.000 0.000 -0.004 -0.000 -0.003 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.010 0.003 0.042 0.007 0.040 ]
incr (5 : 5): [ -0.000 0.000 -0.004 -0.000 -0.003 ]


n (5 : 5): [ 0.010 0.004 0.038 0.007 0.037 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 9
n (5 : 5): [ 0.010 0.004 0.038 0.007 0.037 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1065 interne); stringhe deallocate: 0 (980 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1080 interne); stringhe deallocate: 0 (995 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1095 interne); stringhe deallocate: 0 (1010 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1110 interne); stringhe deallocate: 0 (1025 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.038 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.038


ris (2 : 2): [ 1.000 0.038 ]
*****************************************


Stringhe allocate: 2 (1125 interne); stringhe deallocate: 0 (1040 interne)


Stringhe allocate: 2 (1125 interne); stringhe deallocate: 0 (1045 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.038 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.010 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.010 ]
n (5 : 5): [ 0.010 0.004 0.038 0.007 0.037 ]


incr (5 : 5): [ -0.000 0.000 -0.004 -0.000 -0.003 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.010 0.004 0.038 0.007 0.037 ]
incr (5 : 5): [ -0.000 0.000 -0.004 -0.000 -0.003 ]


n (5 : 5): [ 0.010 0.004 0.034 0.007 0.035 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 10
n (5 : 5): [ 0.010 0.004 0.034 0.007 0.035 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1145 interne); stringhe deallocate: 0 (1060 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1160 interne); stringhe deallocate: 0 (1075 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1175 interne); stringhe deallocate: 0 (1090 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1190 interne); stringhe deallocate: 0 (1105 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.034 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.034


ris (2 : 2): [ 1.000 0.034 ]
*****************************************


Stringhe allocate: 2 (1205 interne); stringhe deallocate: 0 (1120 interne)


Stringhe allocate: 2 (1205 interne); stringhe deallocate: 0 (1125 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.034 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.009 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.009 ]
n (5 : 5): [ 0.010 0.004 0.034 0.007 0.035 ]


incr (5 : 5): [ -0.000 0.000 -0.003 -0.000 -0.003 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.010 0.004 0.034 0.007 0.035 ]
incr (5 : 5): [ -0.000 0.000 -0.003 -0.000 -0.003 ]


n (5 : 5): [ 0.010 0.004 0.031 0.007 0.032 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 11
n (5 : 5): [ 0.010 0.004 0.031 0.007 0.032 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1225 interne); stringhe deallocate: 0 (1140 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1240 interne); stringhe deallocate: 0 (1155 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1255 interne); stringhe deallocate: 0 (1170 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1270 interne); stringhe deallocate: 0 (1185 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.031 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.031


ris (2 : 2): [ 1.000 0.031 ]
*****************************************


Stringhe allocate: 2 (1285 interne); stringhe deallocate: 0 (1200 interne)


Stringhe allocate: 2 (1285 interne); stringhe deallocate: 0 (1205 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.031 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.009 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.009 ]
n (5 : 5): [ 0.010 0.004 0.031 0.007 0.032 ]


incr (5 : 5): [ -0.000 0.000 -0.003 -0.000 -0.002 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.010 0.004 0.031 0.007 0.032 ]
incr (5 : 5): [ -0.000 0.000 -0.003 -0.000 -0.002 ]


n (5 : 5): [ 0.009 0.004 0.028 0.007 0.030 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 12
n (5 : 5): [ 0.009 0.004 0.028 0.007 0.030 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1305 interne); stringhe deallocate: 0 (1220 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1320 interne); stringhe deallocate: 0 (1235 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1335 interne); stringhe deallocate: 0 (1250 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1350 interne); stringhe deallocate: 0 (1265 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.028 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.028


ris (2 : 2): [ 1.000 0.028 ]
*****************************************


Stringhe allocate: 2 (1365 interne); stringhe deallocate: 0 (1280 interne)


Stringhe allocate: 2 (1365 interne); stringhe deallocate: 0 (1285 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.028 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.009 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.009 ]
n (5 : 5): [ 0.009 0.004 0.028 0.007 0.030 ]


incr (5 : 5): [ -0.000 0.000 -0.003 -0.000 -0.002 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.009 0.004 0.028 0.007 0.030 ]
incr (5 : 5): [ -0.000 0.000 -0.003 -0.000 -0.002 ]


n (5 : 5): [ 0.009 0.004 0.025 0.006 0.028 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 13
n (5 : 5): [ 0.009 0.004 0.025 0.006 0.028 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1385 interne); stringhe deallocate: 0 (1300 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1400 interne); stringhe deallocate: 0 (1315 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1415 interne); stringhe deallocate: 0 (1330 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1430 interne); stringhe deallocate: 0 (1345 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.025 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.025


ris (2 : 2): [ 1.000 0.025 ]
*****************************************


Stringhe allocate: 2 (1445 interne); stringhe deallocate: 0 (1360 interne)


Stringhe allocate: 2 (1445 interne); stringhe deallocate: 0 (1365 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.025 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.008 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.008 ]
n (5 : 5): [ 0.009 0.004 0.025 0.006 0.028 ]


incr (5 : 5): [ -0.000 0.000 -0.002 -0.000 -0.002 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.009 0.004 0.025 0.006 0.028 ]
incr (5 : 5): [ -0.000 0.000 -0.002 -0.000 -0.002 ]


n (5 : 5): [ 0.009 0.005 0.023 0.006 0.026 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 14
n (5 : 5): [ 0.009 0.005 0.023 0.006 0.026 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1465 interne); stringhe deallocate: 0 (1380 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1480 interne); stringhe deallocate: 0 (1395 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1495 interne); stringhe deallocate: 0 (1410 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1510 interne); stringhe deallocate: 0 (1425 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.023 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.023


ris (2 : 2): [ 1.000 0.023 ]
*****************************************


Stringhe allocate: 2 (1525 interne); stringhe deallocate: 0 (1440 interne)


Stringhe allocate: 2 (1525 interne); stringhe deallocate: 0 (1445 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.023 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.008 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.008 ]
n (5 : 5): [ 0.009 0.005 0.023 0.006 0.026 ]


incr (5 : 5): [ -0.000 0.000 -0.002 -0.000 -0.002 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.009 0.005 0.023 0.006 0.026 ]
incr (5 : 5): [ -0.000 0.000 -0.002 -0.000 -0.002 ]


n (5 : 5): [ 0.009 0.005 0.021 0.006 0.024 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 15
n (5 : 5): [ 0.009 0.005 0.021 0.006 0.024 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1545 interne); stringhe deallocate: 0 (1460 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1560 interne); stringhe deallocate: 0 (1475 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1575 interne); stringhe deallocate: 0 (1490 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1590 interne); stringhe deallocate: 0 (1505 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.021 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.021


ris (2 : 2): [ 1.000 0.021 ]
*****************************************


Stringhe allocate: 2 (1605 interne); stringhe deallocate: 0 (1520 interne)


Stringhe allocate: 2 (1605 interne); stringhe deallocate: 0 (1525 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.021 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.008 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.008 ]
n (5 : 5): [ 0.009 0.005 0.021 0.006 0.024 ]


incr (5 : 5): [ -0.000 0.000 -0.002 -0.000 -0.002 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.009 0.005 0.021 0.006 0.024 ]
incr (5 : 5): [ -0.000 0.000 -0.002 -0.000 -0.002 ]


n (5 : 5): [ 0.009 0.005 0.019 0.006 0.023 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 16
n (5 : 5): [ 0.009 0.005 0.019 0.006 0.023 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1625 interne); stringhe deallocate: 0 (1540 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1640 interne); stringhe deallocate: 0 (1555 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1655 interne); stringhe deallocate: 0 (1570 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1670 interne); stringhe deallocate: 0 (1585 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.019 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.019


ris (2 : 2): [ 1.000 0.019 ]
*****************************************


Stringhe allocate: 2 (1685 interne); stringhe deallocate: 0 (1600 interne)


Stringhe allocate: 2 (1685 interne); stringhe deallocate: 0 (1605 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.019 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.008 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.008 ]
n (5 : 5): [ 0.009 0.005 0.019 0.006 0.023 ]


incr (5 : 5): [ -0.000 0.000 -0.002 -0.000 -0.001 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.009 0.005 0.019 0.006 0.023 ]
incr (5 : 5): [ -0.000 0.000 -0.002 -0.000 -0.001 ]


n (5 : 5): [ 0.009 0.005 0.017 0.006 0.021 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 17
n (5 : 5): [ 0.009 0.005 0.017 0.006 0.021 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1705 interne); stringhe deallocate: 0 (1620 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1720 interne); stringhe deallocate: 0 (1635 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1735 interne); stringhe deallocate: 0 (1650 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1750 interne); stringhe deallocate: 0 (1665 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.017 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.017


ris (2 : 2): [ 1.000 0.017 ]
*****************************************


Stringhe allocate: 2 (1765 interne); stringhe deallocate: 0 (1680 interne)


Stringhe allocate: 2 (1765 interne); stringhe deallocate: 0 (1685 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.017 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.008 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.008 ]
n (5 : 5): [ 0.009 0.005 0.017 0.006 0.021 ]


incr (5 : 5): [ -0.000 0.000 -0.001 -0.000 -0.001 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.009 0.005 0.017 0.006 0.021 ]
incr (5 : 5): [ -0.000 0.000 -0.001 -0.000 -0.001 ]


n (5 : 5): [ 0.009 0.005 0.016 0.006 0.020 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 18
n (5 : 5): [ 0.009 0.005 0.016 0.006 0.020 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1785 interne); stringhe deallocate: 0 (1700 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1800 interne); stringhe deallocate: 0 (1715 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1815 interne); stringhe deallocate: 0 (1730 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1830 interne); stringhe deallocate: 0 (1745 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.016 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.016


ris (2 : 2): [ 1.000 0.016 ]
*****************************************


Stringhe allocate: 2 (1845 interne); stringhe deallocate: 0 (1760 interne)


Stringhe allocate: 2 (1845 interne); stringhe deallocate: 0 (1765 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.016 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.008 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.008 ]
n (5 : 5): [ 0.009 0.005 0.016 0.006 0.020 ]


incr (5 : 5): [ -0.000 0.000 -0.001 -0.000 -0.001 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.009 0.005 0.016 0.006 0.020 ]
incr (5 : 5): [ -0.000 0.000 -0.001 -0.000 -0.001 ]


n (5 : 5): [ 0.009 0.005 0.014 0.006 0.019 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 19
n (5 : 5): [ 0.009 0.005 0.014 0.006 0.019 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1865 interne); stringhe deallocate: 0 (1780 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1880 interne); stringhe deallocate: 0 (1795 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1895 interne); stringhe deallocate: 0 (1810 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1910 interne); stringhe deallocate: 0 (1825 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.014 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.014


ris (2 : 2): [ 1.000 0.014 ]
*****************************************


Stringhe allocate: 2 (1925 interne); stringhe deallocate: 0 (1840 interne)


Stringhe allocate: 2 (1925 interne); stringhe deallocate: 0 (1845 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.014 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.008 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.008 ]
n (5 : 5): [ 0.009 0.005 0.014 0.006 0.019 ]


incr (5 : 5): [ -0.000 0.000 -0.001 -0.000 -0.001 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.009 0.005 0.014 0.006 0.019 ]
incr (5 : 5): [ -0.000 0.000 -0.001 -0.000 -0.001 ]


n (5 : 5): [ 0.009 0.005 0.013 0.006 0.017 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 20
n (5 : 5): [ 0.009 0.005 0.013 0.006 0.017 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1945 interne); stringhe deallocate: 0 (1860 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1960 interne); stringhe deallocate: 0 (1875 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1975 interne); stringhe deallocate: 0 (1890 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (1990 interne); stringhe deallocate: 0 (1905 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.013 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.013


ris (2 : 2): [ 1.000 0.013 ]
*****************************************


Stringhe allocate: 2 (2005 interne); stringhe deallocate: 0 (1920 interne)


Stringhe allocate: 2 (2005 interne); stringhe deallocate: 0 (1925 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.013 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.008 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.008 ]
n (5 : 5): [ 0.009 0.005 0.013 0.006 0.017 ]


incr (5 : 5): [ -0.000 0.000 -0.001 -0.000 -0.001 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.009 0.005 0.013 0.006 0.017 ]
incr (5 : 5): [ -0.000 0.000 -0.001 -0.000 -0.001 ]


n (5 : 5): [ 0.008 0.005 0.012 0.006 0.017 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 21
n (5 : 5): [ 0.008 0.005 0.012 0.006 0.017 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2025 interne); stringhe deallocate: 0 (1940 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2040 interne); stringhe deallocate: 0 (1955 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2055 interne); stringhe deallocate: 0 (1970 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2070 interne); stringhe deallocate: 0 (1985 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.012 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.012


ris (2 : 2): [ 1.000 0.012 ]
*****************************************


Stringhe allocate: 2 (2085 interne); stringhe deallocate: 0 (2000 interne)


Stringhe allocate: 2 (2085 interne); stringhe deallocate: 0 (2005 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.012 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.005 0.012 0.006 0.017 ]


incr (5 : 5): [ -0.000 0.000 -0.001 -0.000 -0.001 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.005 0.012 0.006 0.017 ]
incr (5 : 5): [ -0.000 0.000 -0.001 -0.000 -0.001 ]


n (5 : 5): [ 0.008 0.005 0.011 0.006 0.016 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 22
n (5 : 5): [ 0.008 0.005 0.011 0.006 0.016 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2105 interne); stringhe deallocate: 0 (2020 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2120 interne); stringhe deallocate: 0 (2035 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2135 interne); stringhe deallocate: 0 (2050 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2150 interne); stringhe deallocate: 0 (2065 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.011 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.011


ris (2 : 2): [ 1.000 0.011 ]
*****************************************


Stringhe allocate: 2 (2165 interne); stringhe deallocate: 0 (2080 interne)


Stringhe allocate: 2 (2165 interne); stringhe deallocate: 0 (2085 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.011 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.005 0.011 0.006 0.016 ]


incr (5 : 5): [ -0.000 0.000 -0.001 -0.000 -0.001 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.005 0.011 0.006 0.016 ]
incr (5 : 5): [ -0.000 0.000 -0.001 -0.000 -0.001 ]


n (5 : 5): [ 0.008 0.005 0.011 0.006 0.015 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 23
n (5 : 5): [ 0.008 0.005 0.011 0.006 0.015 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2185 interne); stringhe deallocate: 0 (2100 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2200 interne); stringhe deallocate: 0 (2115 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2215 interne); stringhe deallocate: 0 (2130 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2230 interne); stringhe deallocate: 0 (2145 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.011 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.011


ris (2 : 2): [ 1.000 0.011 ]
*****************************************


Stringhe allocate: 2 (2245 interne); stringhe deallocate: 0 (2160 interne)


Stringhe allocate: 2 (2245 interne); stringhe deallocate: 0 (2165 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.011 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.005 0.011 0.006 0.015 ]


incr (5 : 5): [ -0.000 0.000 -0.001 -0.000 -0.001 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.005 0.011 0.006 0.015 ]
incr (5 : 5): [ -0.000 0.000 -0.001 -0.000 -0.001 ]


n (5 : 5): [ 0.008 0.005 0.010 0.006 0.014 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 24
n (5 : 5): [ 0.008 0.005 0.010 0.006 0.014 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2265 interne); stringhe deallocate: 0 (2180 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2280 interne); stringhe deallocate: 0 (2195 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2295 interne); stringhe deallocate: 0 (2210 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2310 interne); stringhe deallocate: 0 (2225 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.010 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.010


ris (2 : 2): [ 1.000 0.010 ]
*****************************************


Stringhe allocate: 2 (2325 interne); stringhe deallocate: 0 (2240 interne)


Stringhe allocate: 2 (2325 interne); stringhe deallocate: 0 (2245 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.010 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.005 0.010 0.006 0.014 ]


incr (5 : 5): [ -0.000 0.000 -0.001 -0.000 -0.001 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.005 0.010 0.006 0.014 ]
incr (5 : 5): [ -0.000 0.000 -0.001 -0.000 -0.001 ]


n (5 : 5): [ 0.008 0.005 0.009 0.006 0.013 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 25
n (5 : 5): [ 0.008 0.005 0.009 0.006 0.013 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2345 interne); stringhe deallocate: 0 (2260 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2360 interne); stringhe deallocate: 0 (2275 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2375 interne); stringhe deallocate: 0 (2290 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2390 interne); stringhe deallocate: 0 (2305 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.009 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.009


ris (2 : 2): [ 1.000 0.009 ]
*****************************************


Stringhe allocate: 2 (2405 interne); stringhe deallocate: 0 (2320 interne)


Stringhe allocate: 2 (2405 interne); stringhe deallocate: 0 (2325 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.009 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.005 0.009 0.006 0.013 ]


incr (5 : 5): [ -0.000 0.000 -0.001 -0.000 -0.001 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.005 0.009 0.006 0.013 ]
incr (5 : 5): [ -0.000 0.000 -0.001 -0.000 -0.001 ]


n (5 : 5): [ 0.008 0.006 0.009 0.005 0.013 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 26
n (5 : 5): [ 0.008 0.006 0.009 0.005 0.013 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2425 interne); stringhe deallocate: 0 (2340 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2440 interne); stringhe deallocate: 0 (2355 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2455 interne); stringhe deallocate: 0 (2370 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2470 interne); stringhe deallocate: 0 (2385 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.009 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.009


ris (2 : 2): [ 1.000 0.009 ]
*****************************************


Stringhe allocate: 2 (2485 interne); stringhe deallocate: 0 (2400 interne)


Stringhe allocate: 2 (2485 interne); stringhe deallocate: 0 (2405 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.009 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.009 0.005 0.013 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.001 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.009 0.005 0.013 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.001 ]


n (5 : 5): [ 0.008 0.006 0.008 0.005 0.012 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 27
n (5 : 5): [ 0.008 0.006 0.008 0.005 0.012 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2505 interne); stringhe deallocate: 0 (2420 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2520 interne); stringhe deallocate: 0 (2435 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2535 interne); stringhe deallocate: 0 (2450 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2550 interne); stringhe deallocate: 0 (2465 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.008 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.008


ris (2 : 2): [ 1.000 0.008 ]
*****************************************


Stringhe allocate: 2 (2565 interne); stringhe deallocate: 0 (2480 interne)


Stringhe allocate: 2 (2565 interne); stringhe deallocate: 0 (2485 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.008 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.008 0.005 0.012 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.008 0.005 0.012 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.008 0.005 0.012 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 28
n (5 : 5): [ 0.008 0.006 0.008 0.005 0.012 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2585 interne); stringhe deallocate: 0 (2500 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2600 interne); stringhe deallocate: 0 (2515 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2615 interne); stringhe deallocate: 0 (2530 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2630 interne); stringhe deallocate: 0 (2545 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.008 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.008


ris (2 : 2): [ 1.000 0.008 ]
*****************************************


Stringhe allocate: 2 (2645 interne); stringhe deallocate: 0 (2560 interne)


Stringhe allocate: 2 (2645 interne); stringhe deallocate: 0 (2565 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.008 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.008 0.005 0.012 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.008 0.005 0.012 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.007 0.005 0.011 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 29
n (5 : 5): [ 0.008 0.006 0.007 0.005 0.011 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2665 interne); stringhe deallocate: 0 (2580 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2680 interne); stringhe deallocate: 0 (2595 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2695 interne); stringhe deallocate: 0 (2610 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2710 interne); stringhe deallocate: 0 (2625 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.007 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.007


ris (2 : 2): [ 1.000 0.007 ]
*****************************************


Stringhe allocate: 2 (2725 interne); stringhe deallocate: 0 (2640 interne)


Stringhe allocate: 2 (2725 interne); stringhe deallocate: 0 (2645 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.007 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.007 0.005 0.011 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.007 0.005 0.011 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.007 0.005 0.011 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 30
n (5 : 5): [ 0.008 0.006 0.007 0.005 0.011 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2745 interne); stringhe deallocate: 0 (2660 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2760 interne); stringhe deallocate: 0 (2675 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2775 interne); stringhe deallocate: 0 (2690 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2790 interne); stringhe deallocate: 0 (2705 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.007 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.007


ris (2 : 2): [ 1.000 0.007 ]
*****************************************


Stringhe allocate: 2 (2805 interne); stringhe deallocate: 0 (2720 interne)


Stringhe allocate: 2 (2805 interne); stringhe deallocate: 0 (2725 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.007 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.007 0.005 0.011 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.007 0.005 0.011 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.007 0.005 0.011 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 31
n (5 : 5): [ 0.008 0.006 0.007 0.005 0.011 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2825 interne); stringhe deallocate: 0 (2740 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2840 interne); stringhe deallocate: 0 (2755 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2855 interne); stringhe deallocate: 0 (2770 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2870 interne); stringhe deallocate: 0 (2785 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.007 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.007


ris (2 : 2): [ 1.000 0.007 ]
*****************************************


Stringhe allocate: 2 (2885 interne); stringhe deallocate: 0 (2800 interne)


Stringhe allocate: 2 (2885 interne); stringhe deallocate: 0 (2805 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.007 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.007 0.005 0.011 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.007 0.005 0.011 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.007 0.005 0.010 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 32
n (5 : 5): [ 0.008 0.006 0.007 0.005 0.010 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2905 interne); stringhe deallocate: 0 (2820 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2920 interne); stringhe deallocate: 0 (2835 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2935 interne); stringhe deallocate: 0 (2850 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2950 interne); stringhe deallocate: 0 (2865 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.007 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.007


ris (2 : 2): [ 1.000 0.007 ]
*****************************************


Stringhe allocate: 2 (2965 interne); stringhe deallocate: 0 (2880 interne)


Stringhe allocate: 2 (2965 interne); stringhe deallocate: 0 (2885 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.007 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.007 0.005 0.010 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.007 0.005 0.010 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.006 0.005 0.010 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 33
n (5 : 5): [ 0.008 0.006 0.006 0.005 0.010 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (2985 interne); stringhe deallocate: 0 (2900 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3000 interne); stringhe deallocate: 0 (2915 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3015 interne); stringhe deallocate: 0 (2930 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3030 interne); stringhe deallocate: 0 (2945 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.006 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.006


ris (2 : 2): [ 1.000 0.006 ]
*****************************************


Stringhe allocate: 2 (3045 interne); stringhe deallocate: 0 (2960 interne)


Stringhe allocate: 2 (3045 interne); stringhe deallocate: 0 (2965 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.006 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.006 0.005 0.010 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.006 0.005 0.010 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.006 0.005 0.010 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 34
n (5 : 5): [ 0.008 0.006 0.006 0.005 0.010 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3065 interne); stringhe deallocate: 0 (2980 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3080 interne); stringhe deallocate: 0 (2995 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3095 interne); stringhe deallocate: 0 (3010 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3110 interne); stringhe deallocate: 0 (3025 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.006 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.006


ris (2 : 2): [ 1.000 0.006 ]
*****************************************


Stringhe allocate: 2 (3125 interne); stringhe deallocate: 0 (3040 interne)


Stringhe allocate: 2 (3125 interne); stringhe deallocate: 0 (3045 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.006 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.006 0.005 0.010 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.006 0.005 0.010 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.006 0.005 0.009 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 35
n (5 : 5): [ 0.008 0.006 0.006 0.005 0.009 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3145 interne); stringhe deallocate: 0 (3060 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3160 interne); stringhe deallocate: 0 (3075 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3175 interne); stringhe deallocate: 0 (3090 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3190 interne); stringhe deallocate: 0 (3105 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.006 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.006


ris (2 : 2): [ 1.000 0.006 ]
*****************************************


Stringhe allocate: 2 (3205 interne); stringhe deallocate: 0 (3120 interne)


Stringhe allocate: 2 (3205 interne); stringhe deallocate: 0 (3125 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.006 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.006 0.005 0.009 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.006 0.005 0.009 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.006 0.005 0.009 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 36
n (5 : 5): [ 0.008 0.006 0.006 0.005 0.009 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3225 interne); stringhe deallocate: 0 (3140 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3240 interne); stringhe deallocate: 0 (3155 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3255 interne); stringhe deallocate: 0 (3170 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3270 interne); stringhe deallocate: 0 (3185 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.006 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.006


ris (2 : 2): [ 1.000 0.006 ]
*****************************************


Stringhe allocate: 2 (3285 interne); stringhe deallocate: 0 (3200 interne)


Stringhe allocate: 2 (3285 interne); stringhe deallocate: 0 (3205 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.006 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.006 0.005 0.009 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.006 0.005 0.009 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.006 0.005 0.009 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 37
n (5 : 5): [ 0.008 0.006 0.006 0.005 0.009 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3305 interne); stringhe deallocate: 0 (3220 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3320 interne); stringhe deallocate: 0 (3235 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3335 interne); stringhe deallocate: 0 (3250 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3350 interne); stringhe deallocate: 0 (3265 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.006 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.006


ris (2 : 2): [ 1.000 0.006 ]
*****************************************


Stringhe allocate: 2 (3365 interne); stringhe deallocate: 0 (3280 interne)


Stringhe allocate: 2 (3365 interne); stringhe deallocate: 0 (3285 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.006 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.006 0.005 0.009 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.006 0.005 0.009 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.005 0.005 0.009 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 38
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.009 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3385 interne); stringhe deallocate: 0 (3300 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3400 interne); stringhe deallocate: 0 (3315 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3415 interne); stringhe deallocate: 0 (3330 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3430 interne); stringhe deallocate: 0 (3345 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.005 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.005


ris (2 : 2): [ 1.000 0.005 ]
*****************************************


Stringhe allocate: 2 (3445 interne); stringhe deallocate: 0 (3360 interne)


Stringhe allocate: 2 (3445 interne); stringhe deallocate: 0 (3365 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.005 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.009 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.009 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.005 0.005 0.009 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 39
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.009 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3465 interne); stringhe deallocate: 0 (3380 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3480 interne); stringhe deallocate: 0 (3395 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3495 interne); stringhe deallocate: 0 (3410 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3510 interne); stringhe deallocate: 0 (3425 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.005 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.005


ris (2 : 2): [ 1.000 0.005 ]
*****************************************


Stringhe allocate: 2 (3525 interne); stringhe deallocate: 0 (3440 interne)


Stringhe allocate: 2 (3525 interne); stringhe deallocate: 0 (3445 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.005 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.009 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.009 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 40
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3545 interne); stringhe deallocate: 0 (3460 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3560 interne); stringhe deallocate: 0 (3475 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3575 interne); stringhe deallocate: 0 (3490 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3590 interne); stringhe deallocate: 0 (3505 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.005 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.005


ris (2 : 2): [ 1.000 0.005 ]
*****************************************


Stringhe allocate: 2 (3605 interne); stringhe deallocate: 0 (3520 interne)


Stringhe allocate: 2 (3605 interne); stringhe deallocate: 0 (3525 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.005 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 41
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3625 interne); stringhe deallocate: 0 (3540 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3640 interne); stringhe deallocate: 0 (3555 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3655 interne); stringhe deallocate: 0 (3570 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3670 interne); stringhe deallocate: 0 (3585 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.005 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.005


ris (2 : 2): [ 1.000 0.005 ]
*****************************************


Stringhe allocate: 2 (3685 interne); stringhe deallocate: 0 (3600 interne)


Stringhe allocate: 2 (3685 interne); stringhe deallocate: 0 (3605 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.005 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 42
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3705 interne); stringhe deallocate: 0 (3620 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3720 interne); stringhe deallocate: 0 (3635 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3735 interne); stringhe deallocate: 0 (3650 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3750 interne); stringhe deallocate: 0 (3665 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.005 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.005


ris (2 : 2): [ 1.000 0.005 ]
*****************************************


Stringhe allocate: 2 (3765 interne); stringhe deallocate: 0 (3680 interne)


Stringhe allocate: 2 (3765 interne); stringhe deallocate: 0 (3685 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.005 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 43
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3785 interne); stringhe deallocate: 0 (3700 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3800 interne); stringhe deallocate: 0 (3715 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3815 interne); stringhe deallocate: 0 (3730 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3830 interne); stringhe deallocate: 0 (3745 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.005 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.005


ris (2 : 2): [ 1.000 0.005 ]
*****************************************


Stringhe allocate: 2 (3845 interne); stringhe deallocate: 0 (3760 interne)


Stringhe allocate: 2 (3845 interne); stringhe deallocate: 0 (3765 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.005 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 44
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3865 interne); stringhe deallocate: 0 (3780 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3880 interne); stringhe deallocate: 0 (3795 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3895 interne); stringhe deallocate: 0 (3810 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3910 interne); stringhe deallocate: 0 (3825 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.005 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.005


ris (2 : 2): [ 1.000 0.005 ]
*****************************************


Stringhe allocate: 2 (3925 interne); stringhe deallocate: 0 (3840 interne)


Stringhe allocate: 2 (3925 interne); stringhe deallocate: 0 (3845 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.005 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000 0.000
 ]
colonna = 45
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3945 interne); stringhe deallocate: 0 (3860 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3960 interne); stringhe deallocate: 0 (3875 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3975 interne); stringhe deallocate: 0 (3890 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (3990 interne); stringhe deallocate: 0 (3905 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.005 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.005


ris (2 : 2): [ 1.000 0.005 ]
*****************************************


Stringhe allocate: 2 (4005 interne); stringhe deallocate: 0 (3920 interne)


Stringhe allocate: 2 (4005 interne); stringhe deallocate: 0 (3925 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.005 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000 0.000
 ]
colonna = 46
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (4025 interne); stringhe deallocate: 0 (3940 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (4040 interne); stringhe deallocate: 0 (3955 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (4055 interne); stringhe deallocate: 0 (3970 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (4070 interne); stringhe deallocate: 0 (3985 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.005 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.005


ris (2 : 2): [ 1.000 0.005 ]
*****************************************


Stringhe allocate: 2 (4085 interne); stringhe deallocate: 0 (4000 interne)


Stringhe allocate: 2 (4085 interne); stringhe deallocate: 0 (4005 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.005 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000 0.000
 ]
colonna = 47
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (4105 interne); stringhe deallocate: 0 (4020 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (4120 interne); stringhe deallocate: 0 (4035 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (4135 interne); stringhe deallocate: 0 (4050 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (4150 interne); stringhe deallocate: 0 (4065 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.005 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.005


ris (2 : 2): [ 1.000 0.005 ]
*****************************************


Stringhe allocate: 2 (4165 interne); stringhe deallocate: 0 (4080 interne)


Stringhe allocate: 2 (4165 interne); stringhe deallocate: 0 (4085 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.005 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000 0.000
 ]
colonna = 48
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000
 ]
*****************************************


*** target1 ***

*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (4185 interne); stringhe deallocate: 0 (4100 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (4200 interne); stringhe deallocate: 0 (4115 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (4215 interne); stringhe deallocate: 0 (4130 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


valr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 3


signr (3 : 3): [ 0.000 0.000 0.000 ]
*****************************************

valr (3 : 3): [ 0.000 0.000 0.000 ]
*** next_op ***
96: vettore2s_d
el1 = 0.000, el2 = 0.000


ris (2 : 2): [ 0.000 0.000 ]
*****************************************


Stringhe allocate: 2 (4230 interne); stringhe deallocate: 0 (4145 interne)


*** boole_result ***
27: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


valr (1 : 1): [ 0.000 ]
*****************************************

28: rep_d
scalare_d (1 : 1): [ 0.000 ]
ripetizioni = 1


signr (1 : 1): [ 0.000 ]
*****************************************

valr (1 : 1): [ 0.005 ]
*** next_op ***
96: vettore2s_d
el1 = 1.000, el2 = 0.005


ris (2 : 2): [ 1.000 0.005 ]
*****************************************


Stringhe allocate: 2 (4245 interne); stringhe deallocate: 0 (4160 interne)


Stringhe allocate: 2 (4245 interne); stringhe deallocate: 0 (4165 interne)

105: f_aux5_d
parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
ris (5 : 5): [ 0.000 0.000 0.000 0.000 0.005 ]
parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]


targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
*****************************************

114: f_aux6_d
res = 0.100
parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
targetT (5 : 5): [ 0.008 0.006 0.004 0.005 0.007 ]
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]


incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]
*****************************************

116: somma1_vv_d
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]
incr (5 : 5): [ -0.000 0.000 -0.000 -0.000 -0.000 ]


n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]
*****************************************

118: assegna1_mv_colonna_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.000
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.000
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.000
 ]
colonna = 49
n (5 : 5): [ 0.008 0.006 0.005 0.005 0.008 ]


D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008
 ]
*****************************************

126: rep_i
scalare_i (1 : 1): [ 0 ]
ripetizioni = 5


ind (5 : 5): [ 0 0 0 0 0 ]
*****************************************

129: max_v_d
times (5 : 5): [ 1.000 2.000 3.000 4.000 5.000 ]


max = 5.000
*****************************************

129: seq_d
da = 0.000, a = 5.000, incremento = 0.100


aus (60 : 60): [ 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
*****************************************

133: f_aux7_d
aus (60 : 60): [ 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
scalare = 1.000

ris = 1

*****************************************

133: f_aux7_d
aus (60 : 60): [ 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
scalare = 2.000

ris = 1

*****************************************

133: f_aux7_d
aus (60 : 60): [ 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
scalare = 3.000

ris = 1

*****************************************

133: f_aux7_d
aus (60 : 60): [ 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
scalare = 4.000

ris = 1

*****************************************

133: f_aux7_d
aus (60 : 60): [ 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 ]
scalare = 5.000

ris = 1

*****************************************

141: seleziona_colonne_d
D (5 x 49 : 5 x 49): [
	 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008
	 0.001 0.001 0.002 0.002 0.003 0.003 0.003 0.003 0.004 0.004 0.004 0.004 0.004 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006
	 0.093 0.083 0.074 0.066 0.059 0.053 0.047 0.042 0.038 0.034 0.031 0.028 0.025 0.023 0.021 0.019 0.017 0.016 0.014 0.013 0.012 0.011 0.011 0.010 0.009 0.009 0.008 0.008 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005
	 0.010 0.009 0.009 0.008 0.008 0.008 0.008 0.007 0.007 0.007 0.007 0.007 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.006 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005
	 0.070 0.065 0.060 0.055 0.051 0.047 0.044 0.040 0.037 0.035 0.032 0.030 0.028 0.026 0.024 0.023 0.021 0.020 0.019 0.017 0.017 0.016 0.015 0.014 0.013 0.013 0.012 0.012 0.011 0.011 0.011 0.010 0.010 0.010 0.009 0.009 0.009 0.009 0.009 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008 0.008
 ]
ind (5 : 5): [ 1 1 1 1 1 ]


ris (5 x 5 : 5 x 5): [
	 0.013 0.013 0.013 0.013 0.013
	 0.001 0.001 0.001 0.001 0.001
	 0.093 0.093 0.093 0.093 0.093
	 0.010 0.010 0.010 0.010 0.010
	 0.070 0.070 0.070 0.070 0.070
 ]
*****************************************


Stringhe allocate: 2 (4265 interne); stringhe deallocate: 0 (4205 interne)

119: moltiplica_mv_d
ris (5 x 5 : 5 x 5): [
	 0.013 0.013 0.013 0.013 0.013
	 0.001 0.001 0.001 0.001 0.001
	 0.093 0.093 0.093 0.093 0.093
	 0.010 0.010 0.010 0.010 0.010
	 0.070 0.070 0.070 0.070 0.070
 ]
parm1[j] (5 : 5): [ 10.335 13.886 9.603 23.519 4.934 ]


ris (5 x 5 : 5 x 5): [
	 0.133 0.179 0.124 0.303 0.064
	 0.010 0.013 0.009 0.022 0.005
	 0.960 1.289 0.892 2.184 0.458
	 0.100 0.134 0.093 0.227 0.048
	 0.726 0.976 0.675 1.653 0.347
 ]
*****************************************


Stringhe allocate: 2 (4270 interne); stringhe deallocate: 0 (4240 interne)

Trasformo la lista
ris (5 : 5): {
	ACCEDIlst(ris, i, vi) (3 : 3): [ 0 -1 -1 ]
	ACCEDIlst(ris, i, vi) (3 : 3): [ 0 -1 -1 ]
	ACCEDIlst(ris, i, vi) (3 : 3): [ 0 -1 -1 ]
	ACCEDIlst(ris, i, vi) (3 : 3): [ 0 -1 -1 ]
	ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
}

Trasformo il vettore ACCEDIlst(ris, i, vi) (3 : 3): [ 0 -1 -1 ]
Trasformo il vettore ACCEDIlst(ris, i, vi) (3 : 3): [ 0 -1 -1 ]
Trasformo il vettore ACCEDIlst(ris, i, vi) (3 : 3): [ 0 -1 -1 ]
Trasformo il vettore ACCEDIlst(ris, i, vi) (3 : 3): [ 0 -1 -1 ]
Trasformo il vettore ACCEDIlst(ris, i, vi) (1 : 1): [ 3 ]
Trasformo la lista
ris (5 : 5): {
	ris (5 x 5 : 5 x 5): [
	 0.133 0.179 0.124 0.303 0.064
	 0.010 0.013 0.009 0.022 0.005
	 0.960 1.289 0.892 2.184 0.458
	 0.100 0.134 0.093 0.227 0.048
	 0.726 0.976 0.675 1.653 0.347
 ]
	tmpm1_d (5 x 5 : 5 x 5): [
	 0.000 1.000 0.000 1.000 0.000
	 1.000 0.000 1.000 0.000 0.000
	 0.000 1.000 0.000 1.000 0.000
	 1.000 0.000 1.000 0.000 0.000
	 0.000 0.000 1.000 0.000 0.000
 ]
	parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
	parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
	parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]
}

Trasformo la matrice
ris (5 x 5 : 5 x 5): [
	 0.133 0.179 0.124 0.303 0.064
	 0.010 0.013 0.009 0.022 0.005
	 0.960 1.289 0.892 2.184 0.458
	 0.100 0.134 0.093 0.227 0.048
	 0.726 0.976 0.675 1.653 0.347
 ]
Trasformo la matrice
tmpm1_d (5 x 5 : 5 x 5): [
	 0.000 1.000 0.000 1.000 0.000
	 1.000 0.000 1.000 0.000 0.000
	 0.000 1.000 0.000 1.000 0.000
	 1.000 0.000 1.000 0.000 0.000
	 0.000 0.000 1.000 0.000 0.000
 ]
Trasformo il vettore parm1[j] (5 : 5): [ 1.068 0.890 1.141 0.988 0.991 ]
Trasformo il vettore parm1[j] (5 : 5): [ 9.562 10.006 10.440 10.347 9.819 ]
Trasformo il vettore parm1[j] (5 : 5): [ 0.505 0.510 0.518 0.509 0.510 ]

Stringhe allocate: 2 (4270 interne); stringhe deallocate: 4 (4355 interne)

